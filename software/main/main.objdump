
main.elf:     file format elf32-littlenios2
main.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00031748 memsz 0x00031748 flags r-x
    LOAD off    0x00032768 vaddr 0x08031768 paddr 0x08033478 align 2**12
         filesz 0x00001d10 memsz 0x00001d10 flags rw-
    LOAD off    0x00035188 vaddr 0x08035188 paddr 0x08035188 align 2**12
         filesz 0x00000000 memsz 0x000002e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012dd0  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0001e768  08013000  08013000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d10  08031768  08033478  00032768  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e8  08035188  08035188  00035188  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00034478  2**0
                  CONTENTS
  7 .sdram        00000000  08035470  08035470  00034478  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00034478  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f78  00000000  00000000  000344a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002568a  00000000  00000000  00035418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000097e4  00000000  00000000  0005aaa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000be7b  00000000  00000000  00064286  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002858  00000000  00000000  00070104  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000042ca  00000000  00000000  0007295c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  00076c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0008e494  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018e8  00000000  00000000  0008e4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00093742  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00093745  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00093751  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00093752  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00093753  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00093757  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0009375b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0009375f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0009376a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00093775  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000003  00000000  00000000  00093780  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002c  00000000  00000000  00093783  2**0
                  CONTENTS, READONLY
 30 .jdi          00004a38  00000000  00000000  000937af  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000af7b4  00000000  00000000  000981e7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
08013000 l    d  .rodata	00000000 .rodata
08031768 l    d  .rwdata	00000000 .rwdata
08035188 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08035470 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../main_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
08033424 l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
08035198 l     O .bss	00000004 usb_delay.2608
0803519c l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
080314ae l     O .rodata	00000010 zeroes.4404
08005c44 l     F .text	000000bc __sbprintf
080314be l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08005e54 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080079ac l     F .text	00000008 __fp_unlock
080079c0 l     F .text	0000019c __sinit.part.1
08007b5c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08031978 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08031dbc l     O .rwdata	00000020 lc_ctype_charset
08031d9c l     O .rwdata	00000020 lc_message_charset
08031ddc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
080314f0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800b030 l     F .text	000000fc __sprint_r.part.0
08031614 l     O .rodata	00000010 zeroes.4349
0800c66c l     F .text	000000bc __sbprintf
08031624 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
080104d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
080105ec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08010618 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0801070c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
080107f4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
080108e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08010abc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08033468 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08010f04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08011040 l     F .text	00000034 alt_dev_reg
080323c4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08011334 l     F .text	0000020c altera_avalon_jtag_uart_irq
08011540 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08011d74 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0801210c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0801256c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
080126cc l     F .text	0000003c alt_get_errno
08012708 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
080351d4 g     O .bss	00000004 alt_instruction_exception_handler
0800a674 g     F .text	00000074 _mprec_log10
0800a760 g     F .text	0000008c __any_on
0800cc20 g     F .text	00000054 _isatty_r
080314fc g     O .rodata	00000028 __mprec_tinytens
080109f8 g     F .text	0000007c alt_main
0803342c g     O .rwdata	00000008 ctrl_xfers
080037e0 g     F .text	000000c0 _puts_r
08035370 g     O .bss	00000100 alt_irq
0800cc74 g     F .text	00000060 _lseek_r
08002d4c g     F .text	00000644 USB_Task
08033478 g       *ABS*	00000000 __flash_rwdata_start
0800eeb0 g     F .text	00000088 .hidden __eqdf2
08035470 g       *ABS*	00000000 __alt_heap_start
08001168 g     F .text	0000009c main3
080037a4 g     F .text	0000003c printf
0800ce8c g     F .text	0000009c _wcrtomb_r
08001e64 g     F .text	00000088 kbdPoll
0800aef0 g     F .text	0000005c __sseek
08007d0c g     F .text	00000010 __sinit
0800cd34 g     F .text	00000140 __swbuf_r
080087e0 g     F .text	0000007c _setlocale_r
08007b64 g     F .text	00000078 __sfmoreglue
08010a98 g     F .text	00000024 __malloc_unlock
0800026c g     F .text	000001f0 GetDriverandReport
080094b0 g     F .text	0000015c memmove
08007cf4 g     F .text	00000018 _cleanup
08009734 g     F .text	000000a8 _Balloc
08001fb8 g     F .text	000000c8 MAXreg_wr
08031948 g     O .rwdata	00000030 ClientDriverTable
0800ef38 g     F .text	000000dc .hidden __gtdf2
08012950 g     F .text	00000024 altera_nios2_gen2_irq_init
08025168 g     O .rodata	00006078 chan3
08003390 g     F .text	0000002c MSDProbe
08000000 g     F .entry	0000000c __reset
08002868 g     F .text	000000e8 XferCtrlData
08000020 g       *ABS*	00000000 __flash_exceptions_start
080351d8 g     O .bss	00000010 hid_ep
0800cbc4 g     F .text	0000005c _fstat_r
080351b8 g     O .bss	00000004 errno
0800ae6c g     F .text	00000008 __seofread
080351c0 g     O .bss	00000004 alt_argv
0803b424 g       *ABS*	00000000 _gp
08010ed4 g     F .text	00000030 usleep
08001558 g     F .text	00000034 main6
08002154 g     F .text	000000bc MAXreg_rd
08032244 g     O .rwdata	00000180 alt_fd_list
08001d9c g     F .text	00000040 HID_init
080007a4 g     F .text	00000248 keyNote
08012974 g     F .text	00000090 alt_find_dev
08031768 g     O .rwdata	000001e0 freq_lut
08009368 g     F .text	00000148 memcpy
080079b4 g     F .text	0000000c _cleanup_r
080102f0 g     F .text	000000dc .hidden __floatsidf
08012650 g     F .text	0000007c alt_io_redirect
0800f014 g     F .text	000000f4 .hidden __ltdf2
08013000 g       *ABS*	00000000 __DTOR_END__
080038a0 g     F .text	00000014 puts
08012bd0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0800ad50 g     F .text	00000074 __fpclassifyd
0800a5d0 g     F .text	000000a4 __ratio
0800c650 g     F .text	0000001c __vfiprintf_internal
08013000 g     O .rodata	00006078 chan0
08011738 g     F .text	0000021c altera_avalon_jtag_uart_read
08003774 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08003690 g     F .text	00000064 .hidden __udivsi3
08010748 g     F .text	000000ac isatty
0803154c g     O .rodata	000000c8 __mprec_tens
0800885c g     F .text	0000000c __locale_charset
080351b4 g     O .bss	00000004 __malloc_top_pad
08033434 g     O .rwdata	00000001 usb_task_state
08033440 g     O .rwdata	00000004 __mb_cur_max
0800888c g     F .text	0000000c _localeconv_r
08009b68 g     F .text	0000003c __i2b
08008190 g     F .text	000004c8 __sfvwrite_r
0800adc4 g     F .text	00000054 _sbrk_r
0800ccd4 g     F .text	00000060 _read_r
08002524 g     F .text	00000094 MAX3421E_init
08000770 g     F .text	00000034 setKeycode
08033460 g     O .rwdata	00000004 alt_max_fd
0800c8b8 g     F .text	000000f0 _fclose_r
0800797c g     F .text	00000030 fflush
080351b0 g     O .bss	00000004 __malloc_max_sbrked_mem
0800dc34 g     F .text	000008ac .hidden __adddf3
0800a378 g     F .text	0000010c __b2d
0800d670 g     F .text	000005c4 .hidden __umoddi3
0801091c g     F .text	000000dc lseek
08033438 g     O .rwdata	00000004 _global_impure_ptr
0800a7ec g     F .text	00000564 _realloc_r
08035470 g       *ABS*	00000000 __bss_end
0801247c g     F .text	000000f0 alt_iic_isr_register
08010dcc g     F .text	00000108 alt_tick
0800d074 g     F .text	000005fc .hidden __udivdi3
0800cb20 g     F .text	00000024 _fputwc_r
08031524 g     O .rodata	00000028 __mprec_bigtens
0800994c g     F .text	00000104 __s2b
080103cc g     F .text	000000a8 .hidden __floatunsidf
0800a0b8 g     F .text	00000060 __mcmp
08007d2c g     F .text	00000018 __fp_lock_all
08012430 g     F .text	0000004c alt_ic_irq_enabled
08010d30 g     F .text	0000009c alt_alarm_stop
080351d0 g     O .bss	00000004 alt_irq_active
08003458 g     F .text	0000002c DummyProbe
080000fc g     F .exceptions	000000d4 alt_irq_handler
0803221c g     O .rwdata	00000028 alt_dev_null
08001ddc g     F .text	00000088 mousePoll
0800125c g     F .text	000002fc main4
08002378 g     F .text	00000024 Vbus_power
080120ec g     F .text	00000020 alt_dcache_flush_all
08009a50 g     F .text	00000068 __hi0bits
08010270 g     F .text	00000080 .hidden __fixdfsi
08033478 g       *ABS*	00000000 __ram_rwdata_end
08033458 g     O .rwdata	00000008 alt_dev_list
08010f40 g     F .text	00000100 write
08031768 g       *ABS*	00000000 __ram_rodata_end
0803519d g     O .bss	00000001 usb_error
08010654 g     F .text	000000b8 fstat
0800f014 g     F .text	000000f4 .hidden __ledf2
08009e30 g     F .text	00000140 __pow5mult
0800b144 g     F .text	0000150c ___vfiprintf_internal_r
080351a8 g     O .bss	00000004 __nlocale_changed
080036f4 g     F .text	00000058 .hidden __umodsi3
08035470 g       *ABS*	00000000 end
08011274 g     F .text	000000c0 altera_avalon_jtag_uart_init
08019078 g     O .rodata	00006078 chan1
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
080029c4 g     F .text	00000160 XferDispatchPkt
08013000 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08011dec g     F .text	0000007c alt_avalon_timer_sc_init
08010474 g     F .text	00000064 .hidden __clzsi2
08011954 g     F .text	00000224 altera_avalon_jtag_uart_write
08007d1c g     F .text	00000004 __sfp_lock_acquire
08009284 g     F .text	000000e4 memchr
0800394c g     F .text	000022dc ___vfprintf_internal_r
080026e8 g     F .text	00000034 MaxGpxHandler
08007e80 g     F .text	00000310 _free_r
08008868 g     F .text	00000010 __locale_mb_cur_max
08012e4c g     F .text	00000180 __call_exitprocs
080351a4 g     O .bss	00000004 __mlocale_changed
08033444 g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
080351c8 g     O .bss	00000004 _alt_tick_rate
08002210 g     F .text	000000c8 MAXbytes_rd
08009f70 g     F .text	00000148 __lshift
08011b78 g     F .text	000001fc alt_avalon_spi_command
080351cc g     O .bss	00000004 _alt_nticks
08010af8 g     F .text	00000104 read
080110ac g     F .text	00000064 alt_sys_init
08035328 g     O .bss	00000048 devtable
08012d34 g     F .text	00000118 __register_exitproc
08001994 g     F .text	00000408 HIDKProbe
080351e8 g     O .bss	00000018 msd_ep
08009ba4 g     F .text	0000028c __multiply
080115e0 g     F .text	00000068 altera_avalon_jtag_uart_close
08002cb4 g     F .text	00000098 USB_init
08035228 g     O .bss	00000100 bigbuf
0800374c g     F .text	00000028 .hidden __mulsi3
08031768 g       *ABS*	00000000 __ram_rwdata_start
08013000 g       *ABS*	00000000 __ram_rodata_start
08035200 g     O .bss	00000028 __malloc_current_mallinfo
08035194 g     O .bss	00000001 last_usb_task_state
0800a484 g     F .text	0000014c __d2b
0803518c g     O .bss	00000008 dev0ep
080004bc g     F .text	00000064 clearLED
08011110 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08012b0c g     F .text	000000c4 alt_get_fd
0802b1e0 g     O .rodata	00006078 chan4
08011f94 g     F .text	00000158 alt_busy_sleep
080033bc g     F .text	00000038 MSDEventHandler
0800c788 g     F .text	00000054 _close_r
08012cb8 g     F .text	0000007c memcmp
080111d0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08035470 g       *ABS*	00000000 __alt_stack_base
08011220 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08033425 g     O .rwdata	00000001 LEDS_PIO_BASE
08005d00 g     F .text	00000154 __swsetup_r
0800e4e0 g     F .text	000009d0 .hidden __divdf3
08007bdc g     F .text	00000118 __sfp
0800a6e8 g     F .text	00000078 __copybits
08031e14 g     O .rwdata	00000408 __malloc_av_
08007d28 g     F .text	00000004 __sinit_lock_release
08003420 g     F .text	00000038 CDCEventHandler
0800f108 g     F .text	0000086c .hidden __muldf3
08003484 g     F .text	00000038 DummyEventHandler
0800ae18 g     F .text	00000054 __sread
08012a04 g     F .text	00000108 alt_find_file
08012148 g     F .text	000000a4 alt_dev_llist_insert
08010a74 g     F .text	00000024 __malloc_lock
08010c80 g     F .text	000000b0 sbrk
08007920 g     F .text	0000005c _fflush_r
0800c7dc g     F .text	000000dc _calloc_r
08035188 g       *ABS*	00000000 __bss_start
0800239c g     F .text	00000188 MAX_busprobe
08035188 g     O .bss	00000002 hid_device
0800960c g     F .text	00000128 memset
080009ec g     F .text	0000077c main
080025b8 g     F .text	00000064 MAX3421E_Task
080351c4 g     O .bss	00000004 alt_envp
080351ac g     O .bss	00000004 __malloc_max_total_mem
08011170 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800ce74 g     F .text	00000018 __swbuf
08003514 g     F .text	00000084 ConvUTF8ToStr
0800af4c g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800c9a8 g     F .text	00000014 fclose
0800607c g     F .text	00001688 _dtoa_r
08008a78 g     F .text	0000080c _malloc_r
0800cfe8 g     F .text	00000030 __ascii_wctomb
08033464 g     O .rwdata	00000004 alt_errno
08008658 g     F .text	000000c4 _fwalk
08003598 g     F .text	00000084 .hidden __divsi3
08002b24 g     F .text	00000190 XferInTransfer
08000638 g     F .text	00000138 printSignedHex1
08007d5c g     F .text	00000124 _malloc_trim_r
08013000 g       *ABS*	00000000 __CTOR_END__
080034dc g     F .text	00000038 GetDevtable
0800af54 g     F .text	000000dc strcmp
08013000 g       *ABS*	00000000 __flash_rodata_start
08013000 g       *ABS*	00000000 __DTOR_LIST__
08002950 g     F .text	00000074 XferCtrlND
08001204 g     F .text	00000058 delay
0800eeb0 g     F .text	00000088 .hidden __nedf2
080022d8 g     F .text	000000a0 MAX3421E_reset
08011074 g     F .text	00000038 alt_irq_init
08010bfc g     F .text	00000084 alt_release_fd
08031634 g     O .rodata	00000100 .hidden __clz_tab
080351a0 g     O .bss	00000004 _PathLocale
08012c6c g     F .text	00000014 atexit
0800c728 g     F .text	00000060 _write_r
08008898 g     F .text	00000018 setlocale
0803343c g     O .rwdata	00000004 _impure_ptr
080351bc g     O .bss	00000004 alt_argc
08007704 g     F .text	0000021c __sflush_r
0801224c g     F .text	00000060 _do_dtors
08008884 g     F .text	00000008 __locale_cjk_lang
08002080 g     F .text	000000d4 MAXbytes_wr
08000020 g       .exceptions	00000000 alt_irq_entry
0800a314 g     F .text	00000064 __ulp
08007d44 g     F .text	00000018 __fp_unlock_all
08033450 g     O .rwdata	00000008 alt_fs_list
080033f4 g     F .text	0000002c CDCProbe
08000020 g       *ABS*	00000000 __ram_exceptions_start
080088b0 g     F .text	0000000c localeconv
0800045c g     F .text	00000060 setLED
080034bc g     F .text	00000020 GetUsbTaskState
080122cc g     F .text	00000050 alt_ic_isr_register
08031294 g     O .rodata	00000010 devclasses
08033478 g       *ABS*	00000000 _edata
08001f24 g     F .text	00000038 HIDKEventHandler
08035470 g       *ABS*	00000000 _end
0800261c g     F .text	000000cc MaxIntHandler
0800c9bc g     F .text	00000164 __fputwc
08000230 g       *ABS*	00000000 __ram_exceptions_end
08011648 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08001f5c g     F .text	00000034 SPI_init
080123a4 g     F .text	0000008c alt_ic_irq_disable
0800ae74 g     F .text	0000007c __swrite
08033448 g     O .rwdata	00000004 __malloc_trim_threshold
08008878 g     F .text	0000000c __locale_msgcharset
08012c80 g     F .text	00000038 exit
0800871c g     F .text	000000c4 _fwalk_reent
0800a118 g     F .text	000001fc __mdiff
08033428 g     O .rwdata	00000004 SPI_BASE
0800361c g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08007d20 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08001eec g     F .text	00000038 HIDMEventHandler
08012fcc g     F .text	00000034 _exit
08011e68 g     F .text	0000012c alt_alarm_start
0801f0f0 g     O .rodata	00006078 chan2
08000520 g     F .text	00000118 printSignedHex0
080088bc g     F .text	000001bc __smakebuf_r
080038b4 g     F .text	00000098 strlen
080127f4 g     F .text	0000015c open
0800ef38 g     F .text	000000dc .hidden __gedf2
0803344c g     O .rwdata	00000004 __wctomb
0800b12c g     F .text	00000018 __sprint_r
080122ac g     F .text	00000020 alt_icache_flush_all
08033474 g     O .rwdata	00000004 alt_priority_mask
0801231c g     F .text	00000088 alt_ic_irq_enable
08005c28 g     F .text	0000001c __vfprintf_internal
0800158c g     F .text	00000408 HIDMProbe
0800d018 g     F .text	0000005c _wctomb_r
08001f90 g     F .text	00000028 SPI_wr
0800f974 g     F .text	000008fc .hidden __subdf3
08009ab8 g     F .text	000000b0 __lo0bits
0803346c g     O .rwdata	00000008 alt_alarm_list
080121ec g     F .text	00000060 _do_ctors
0800cf28 g     F .text	000000c0 wcrtomb
08010514 g     F .text	000000d8 close
0801085c g     F .text	00000084 alt_load
0800cb44 g     F .text	00000080 fputwc
08007d24 g     F .text	00000004 __sinit_lock_acquire
0800271c g     F .text	0000014c XferCtrlReq
08009804 g     F .text	00000148 __multadd
080097dc g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	008200f4 	movhi	r2,2051
 8000140:	1094dc04 	addi	r2,r2,21360
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	008200f4 	movhi	r2,2051
 8000158:	1094dc04 	addi	r2,r2,21360
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a76c17 	ldw	r2,-25168(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a76c17 	ldw	r2,-25168(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	068200f4 	movhi	gp,2051
    ori gp, gp, %lo(_gp)
 800023c:	d6ad0914 	ori	gp,gp,46116
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	008200f4 	movhi	r2,2051
    ori r2, r2, %lo(__bss_start)
 8000244:	10946214 	ori	r2,r2,20872

    movhi r3, %hi(__bss_end)
 8000248:	00c200f4 	movhi	r3,2051
    ori r3, r3, %lo(__bss_end)
 800024c:	18d51c14 	ori	r3,r3,21616

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	801085c0 	call	801085c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	80109f80 	call	80109f8 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <GetDriverandReport>:

static BYTE addr = 1; 				//hard-wired USB address
const char LEDS_PIO_BASE = 0x60;
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

BYTE GetDriverandReport() {
 800026c:	defff604 	addi	sp,sp,-40
 8000270:	dfc00915 	stw	ra,36(sp)
 8000274:	df000815 	stw	fp,32(sp)
 8000278:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 800027c:	00bfffc4 	movi	r2,-1
 8000280:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 8000284:	010200f4 	movhi	r4,2051
 8000288:	2104a904 	addi	r4,r4,4772
 800028c:	80038a00 	call	80038a0 <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 8000290:	00800044 	movi	r2,1
 8000294:	e0bffd05 	stb	r2,-12(fp)
 8000298:	00001f06 	br	8000318 <GetDriverandReport+0xac>
		tpl_ptr = GetDevtable(i);
 800029c:	e0bffd03 	ldbu	r2,-12(fp)
 80002a0:	1009883a 	mov	r4,r2
 80002a4:	80034dc0 	call	80034dc <GetDevtable>
 80002a8:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 80002ac:	e0bffe17 	ldw	r2,-8(fp)
 80002b0:	10800017 	ldw	r2,0(r2)
 80002b4:	10001526 	beq	r2,zero,800030c <GetDriverandReport+0xa0>
			printf("Device: %d", i);
 80002b8:	e0bffd03 	ldbu	r2,-12(fp)
 80002bc:	100b883a 	mov	r5,r2
 80002c0:	010200f4 	movhi	r4,2051
 80002c4:	2104b204 	addi	r4,r4,4808
 80002c8:	80037a40 	call	80037a4 <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
 80002cc:	e0bffe17 	ldw	r2,-8(fp)
 80002d0:	10800103 	ldbu	r2,4(r2)
 80002d4:	10c03fcc 	andi	r3,r2,255
 80002d8:	008200f4 	movhi	r2,2051
 80002dc:	1084a504 	addi	r2,r2,4756
 80002e0:	18c7883a 	add	r3,r3,r3
 80002e4:	18c7883a 	add	r3,r3,r3
 80002e8:	10c5883a 	add	r2,r2,r3
 80002ec:	10800017 	ldw	r2,0(r2)
 80002f0:	100b883a 	mov	r5,r2
 80002f4:	010200f4 	movhi	r4,2051
 80002f8:	2104b504 	addi	r4,r4,4820
 80002fc:	80037a40 	call	80037a4 <printf>
			device = tpl_ptr->devclass;
 8000300:	e0bffe17 	ldw	r2,-8(fp)
 8000304:	10800103 	ldbu	r2,4(r2)
 8000308:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
 800030c:	e0bffd03 	ldbu	r2,-12(fp)
 8000310:	10800044 	addi	r2,r2,1
 8000314:	e0bffd05 	stb	r2,-12(fp)
 8000318:	e0bffd03 	ldbu	r2,-12(fp)
 800031c:	10800230 	cmpltui	r2,r2,8
 8000320:	103fde1e 	bne	r2,zero,800029c <__alt_data_end+0xfc00029c>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 8000324:	d0a00003 	ldbu	r2,-32768(gp)
 8000328:	11003fcc 	andi	r4,r2,255
 800032c:	d0a75943 	ldbu	r2,-25243(gp)
 8000330:	10803fcc 	andi	r2,r2,255
 8000334:	e0ffff44 	addi	r3,fp,-3
 8000338:	d8c00415 	stw	r3,16(sp)
 800033c:	00c00044 	movi	r3,1
 8000340:	d8c00315 	stw	r3,12(sp)
 8000344:	d8800215 	stw	r2,8(sp)
 8000348:	d8000115 	stw	zero,4(sp)
 800034c:	d8000015 	stw	zero,0(sp)
 8000350:	01c00084 	movi	r7,2
 8000354:	01802844 	movi	r6,161
 8000358:	000b883a 	mov	r5,zero
 800035c:	800271c0 	call	800271c <XferCtrlReq>
 8000360:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 8000364:	e0bfff03 	ldbu	r2,-4(fp)
 8000368:	10000926 	beq	r2,zero,8000390 <GetDriverandReport+0x124>
		printf("GetIdle Error. Error code: ");
 800036c:	010200f4 	movhi	r4,2051
 8000370:	2104b704 	addi	r4,r4,4828
 8000374:	80037a40 	call	80037a4 <printf>
		printf("%x \n", rcode);
 8000378:	e0bfff03 	ldbu	r2,-4(fp)
 800037c:	100b883a 	mov	r5,r2
 8000380:	010200f4 	movhi	r4,2051
 8000384:	2104be04 	addi	r4,r4,4856
 8000388:	80037a40 	call	80037a4 <printf>
 800038c:	00000906 	br	80003b4 <GetDriverandReport+0x148>
	} else {
		printf("Update rate: ");
 8000390:	010200f4 	movhi	r4,2051
 8000394:	2104c004 	addi	r4,r4,4864
 8000398:	80037a40 	call	80037a4 <printf>
		printf("%x \n", tmpbyte);
 800039c:	e0bfff43 	ldbu	r2,-3(fp)
 80003a0:	10803fcc 	andi	r2,r2,255
 80003a4:	100b883a 	mov	r5,r2
 80003a8:	010200f4 	movhi	r4,2051
 80003ac:	2104be04 	addi	r4,r4,4856
 80003b0:	80037a40 	call	80037a4 <printf>
	}
	printf("Protocol: ");
 80003b4:	010200f4 	movhi	r4,2051
 80003b8:	2104c404 	addi	r4,r4,4880
 80003bc:	80037a40 	call	80037a4 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 80003c0:	d0a00003 	ldbu	r2,-32768(gp)
 80003c4:	11003fcc 	andi	r4,r2,255
 80003c8:	d0a75943 	ldbu	r2,-25243(gp)
 80003cc:	10803fcc 	andi	r2,r2,255
 80003d0:	e0ffff44 	addi	r3,fp,-3
 80003d4:	d8c00415 	stw	r3,16(sp)
 80003d8:	00c00044 	movi	r3,1
 80003dc:	d8c00315 	stw	r3,12(sp)
 80003e0:	d8800215 	stw	r2,8(sp)
 80003e4:	d8000115 	stw	zero,4(sp)
 80003e8:	d8000015 	stw	zero,0(sp)
 80003ec:	01c000c4 	movi	r7,3
 80003f0:	01802844 	movi	r6,161
 80003f4:	000b883a 	mov	r5,zero
 80003f8:	800271c0 	call	800271c <XferCtrlReq>
 80003fc:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 8000400:	e0bfff03 	ldbu	r2,-4(fp)
 8000404:	10000926 	beq	r2,zero,800042c <GetDriverandReport+0x1c0>
		printf("GetProto Error. Error code ");
 8000408:	010200f4 	movhi	r4,2051
 800040c:	2104c704 	addi	r4,r4,4892
 8000410:	80037a40 	call	80037a4 <printf>
		printf("%x \n", rcode);
 8000414:	e0bfff03 	ldbu	r2,-4(fp)
 8000418:	100b883a 	mov	r5,r2
 800041c:	010200f4 	movhi	r4,2051
 8000420:	2104be04 	addi	r4,r4,4856
 8000424:	80037a40 	call	80037a4 <printf>
 8000428:	00000606 	br	8000444 <GetDriverandReport+0x1d8>
	} else {
		printf("%d \n", tmpbyte);
 800042c:	e0bfff43 	ldbu	r2,-3(fp)
 8000430:	10803fcc 	andi	r2,r2,255
 8000434:	100b883a 	mov	r5,r2
 8000438:	010200f4 	movhi	r4,2051
 800043c:	2104ce04 	addi	r4,r4,4920
 8000440:	80037a40 	call	80037a4 <printf>
	}
	return device;
 8000444:	e0bffd43 	ldbu	r2,-11(fp)
}
 8000448:	e037883a 	mov	sp,fp
 800044c:	dfc00117 	ldw	ra,4(sp)
 8000450:	df000017 	ldw	fp,0(sp)
 8000454:	dec00204 	addi	sp,sp,8
 8000458:	f800283a 	ret

0800045c <setLED>:

void setLED(int LED) {
 800045c:	defffe04 	addi	sp,sp,-8
 8000460:	df000115 	stw	fp,4(sp)
 8000464:	df000104 	addi	fp,sp,4
 8000468:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 800046c:	00801804 	movi	r2,96
 8000470:	10803fcc 	andi	r2,r2,255
 8000474:	1080201c 	xori	r2,r2,128
 8000478:	10bfe004 	addi	r2,r2,-128
 800047c:	100b883a 	mov	r5,r2
 8000480:	00801804 	movi	r2,96
 8000484:	10803fcc 	andi	r2,r2,255
 8000488:	1080201c 	xori	r2,r2,128
 800048c:	10bfe004 	addi	r2,r2,-128
 8000490:	10c00037 	ldwio	r3,0(r2)
 8000494:	01000044 	movi	r4,1
 8000498:	e0bfff17 	ldw	r2,-4(fp)
 800049c:	2084983a 	sll	r2,r4,r2
 80004a0:	1884b03a 	or	r2,r3,r2
 80004a4:	28800035 	stwio	r2,0(r5)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 80004a8:	0001883a 	nop
 80004ac:	e037883a 	mov	sp,fp
 80004b0:	df000017 	ldw	fp,0(sp)
 80004b4:	dec00104 	addi	sp,sp,4
 80004b8:	f800283a 	ret

080004bc <clearLED>:

void clearLED(int LED) {
 80004bc:	defffe04 	addi	sp,sp,-8
 80004c0:	df000115 	stw	fp,4(sp)
 80004c4:	df000104 	addi	fp,sp,4
 80004c8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 80004cc:	00801804 	movi	r2,96
 80004d0:	10803fcc 	andi	r2,r2,255
 80004d4:	1080201c 	xori	r2,r2,128
 80004d8:	10bfe004 	addi	r2,r2,-128
 80004dc:	100b883a 	mov	r5,r2
 80004e0:	00801804 	movi	r2,96
 80004e4:	10803fcc 	andi	r2,r2,255
 80004e8:	1080201c 	xori	r2,r2,128
 80004ec:	10bfe004 	addi	r2,r2,-128
 80004f0:	10c00037 	ldwio	r3,0(r2)
 80004f4:	01000044 	movi	r4,1
 80004f8:	e0bfff17 	ldw	r2,-4(fp)
 80004fc:	2084983a 	sll	r2,r4,r2
 8000500:	0084303a 	nor	r2,zero,r2
 8000504:	1884703a 	and	r2,r3,r2
 8000508:	28800035 	stwio	r2,0(r5)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
 800050c:	0001883a 	nop
 8000510:	e037883a 	mov	sp,fp
 8000514:	df000017 	ldw	fp,0(sp)
 8000518:	dec00104 	addi	sp,sp,4
 800051c:	f800283a 	ret

08000520 <printSignedHex0>:

void printSignedHex0(signed char value) {
 8000520:	defffc04 	addi	sp,sp,-16
 8000524:	dfc00315 	stw	ra,12(sp)
 8000528:	df000215 	stw	fp,8(sp)
 800052c:	df000204 	addi	fp,sp,8
 8000530:	2005883a 	mov	r2,r4
 8000534:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 8000538:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 800053c:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 8000540:	00802004 	movi	r2,128
 8000544:	10800037 	ldwio	r2,0(r2)
 8000548:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0) {
 800054c:	e0bfff07 	ldb	r2,-4(fp)
 8000550:	1000060e 	bge	r2,zero,800056c <printSignedHex0+0x4c>
		setLED(11);
 8000554:	010002c4 	movi	r4,11
 8000558:	800045c0 	call	800045c <setLED>
		value = -value;
 800055c:	e0bfff03 	ldbu	r2,-4(fp)
 8000560:	0085c83a 	sub	r2,zero,r2
 8000564:	e0bfff05 	stb	r2,-4(fp)
 8000568:	00000206 	br	8000574 <printSignedHex0+0x54>
	} else {
		clearLED(11);
 800056c:	010002c4 	movi	r4,11
 8000570:	80004bc0 	call	80004bc <clearLED>
	}
	//handled hundreds
	if (value / 100)
 8000574:	e0bfff03 	ldbu	r2,-4(fp)
 8000578:	108018c4 	addi	r2,r2,99
 800057c:	10803fcc 	andi	r2,r2,255
 8000580:	108031f0 	cmpltui	r2,r2,199
 8000584:	1000031e 	bne	r2,zero,8000594 <printSignedHex0+0x74>
		setLED(13);
 8000588:	01000344 	movi	r4,13
 800058c:	800045c0 	call	800045c <setLED>
 8000590:	00000206 	br	800059c <printSignedHex0+0x7c>
	else
		clearLED(13);
 8000594:	01000344 	movi	r4,13
 8000598:	80004bc0 	call	80004bc <clearLED>

	value = value % 100;
 800059c:	e0bfff07 	ldb	r2,-4(fp)
 80005a0:	01401904 	movi	r5,100
 80005a4:	1009883a 	mov	r4,r2
 80005a8:	800361c0 	call	800361c <__modsi3>
 80005ac:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 80005b0:	e0bfff07 	ldb	r2,-4(fp)
 80005b4:	01400284 	movi	r5,10
 80005b8:	1009883a 	mov	r4,r2
 80005bc:	80035980 	call	8003598 <__divsi3>
 80005c0:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 80005c4:	e0bfff07 	ldb	r2,-4(fp)
 80005c8:	01400284 	movi	r5,10
 80005cc:	1009883a 	mov	r4,r2
 80005d0:	800361c0 	call	800361c <__modsi3>
 80005d4:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 80005d8:	e0bffe8b 	ldhu	r2,-6(fp)
 80005dc:	10803fcc 	andi	r2,r2,255
 80005e0:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 80005e4:	e0bffe03 	ldbu	r2,-8(fp)
 80005e8:	1004933a 	slli	r2,r2,12
 80005ec:	1007883a 	mov	r3,r2
 80005f0:	e0bffe8b 	ldhu	r2,-6(fp)
 80005f4:	1884b03a 	or	r2,r3,r2
 80005f8:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 80005fc:	e0bffe43 	ldbu	r2,-7(fp)
 8000600:	1004923a 	slli	r2,r2,8
 8000604:	1007883a 	mov	r3,r2
 8000608:	e0bffe8b 	ldhu	r2,-6(fp)
 800060c:	1884b03a 	or	r2,r3,r2
 8000610:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 8000614:	e0fffe8b 	ldhu	r3,-6(fp)
 8000618:	00802004 	movi	r2,128
 800061c:	10c00035 	stwio	r3,0(r2)
}
 8000620:	0001883a 	nop
 8000624:	e037883a 	mov	sp,fp
 8000628:	dfc00117 	ldw	ra,4(sp)
 800062c:	df000017 	ldw	fp,0(sp)
 8000630:	dec00204 	addi	sp,sp,8
 8000634:	f800283a 	ret

08000638 <printSignedHex1>:

void printSignedHex1(signed char value) {
 8000638:	defffb04 	addi	sp,sp,-20
 800063c:	dfc00415 	stw	ra,16(sp)
 8000640:	df000315 	stw	fp,12(sp)
 8000644:	df000304 	addi	fp,sp,12
 8000648:	2005883a 	mov	r2,r4
 800064c:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 8000650:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 8000654:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 8000658:	00802004 	movi	r2,128
 800065c:	10800037 	ldwio	r2,0(r2)
 8000660:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
 8000664:	e0bfff07 	ldb	r2,-4(fp)
 8000668:	1000060e 	bge	r2,zero,8000684 <printSignedHex1+0x4c>
		setLED(10);
 800066c:	01000284 	movi	r4,10
 8000670:	800045c0 	call	800045c <setLED>
		value = -value;
 8000674:	e0bfff03 	ldbu	r2,-4(fp)
 8000678:	0085c83a 	sub	r2,zero,r2
 800067c:	e0bfff05 	stb	r2,-4(fp)
 8000680:	00000206 	br	800068c <printSignedHex1+0x54>
	} else {
		clearLED(10);
 8000684:	01000284 	movi	r4,10
 8000688:	80004bc0 	call	80004bc <clearLED>
	}
	//handled hundreds
	if (value / 100)
 800068c:	e0bfff03 	ldbu	r2,-4(fp)
 8000690:	108018c4 	addi	r2,r2,99
 8000694:	10803fcc 	andi	r2,r2,255
 8000698:	108031f0 	cmpltui	r2,r2,199
 800069c:	1000031e 	bne	r2,zero,80006ac <printSignedHex1+0x74>
		setLED(12);
 80006a0:	01000304 	movi	r4,12
 80006a4:	800045c0 	call	800045c <setLED>
 80006a8:	00000206 	br	80006b4 <printSignedHex1+0x7c>
	else
		clearLED(12);
 80006ac:	01000304 	movi	r4,12
 80006b0:	80004bc0 	call	80004bc <clearLED>

	value = value % 100;
 80006b4:	e0bfff07 	ldb	r2,-4(fp)
 80006b8:	01401904 	movi	r5,100
 80006bc:	1009883a 	mov	r4,r2
 80006c0:	800361c0 	call	800361c <__modsi3>
 80006c4:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 80006c8:	e0bfff07 	ldb	r2,-4(fp)
 80006cc:	01400284 	movi	r5,10
 80006d0:	1009883a 	mov	r4,r2
 80006d4:	80035980 	call	8003598 <__divsi3>
 80006d8:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 80006dc:	e0bfff07 	ldb	r2,-4(fp)
 80006e0:	01400284 	movi	r5,10
 80006e4:	1009883a 	mov	r4,r2
 80006e8:	800361c0 	call	800361c <__modsi3>
 80006ec:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 80006f0:	e0bfff07 	ldb	r2,-4(fp)
 80006f4:	01400284 	movi	r5,10
 80006f8:	1009883a 	mov	r4,r2
 80006fc:	80035980 	call	8003598 <__divsi3>
 8000700:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 8000704:	e0bfff07 	ldb	r2,-4(fp)
 8000708:	01400284 	movi	r5,10
 800070c:	1009883a 	mov	r4,r2
 8000710:	800361c0 	call	800361c <__modsi3>
 8000714:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
 8000718:	e0bffe17 	ldw	r2,-8(fp)
 800071c:	10bfc00c 	andi	r2,r2,65280
 8000720:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 8000724:	e0bffd03 	ldbu	r2,-12(fp)
 8000728:	1004913a 	slli	r2,r2,4
 800072c:	1007883a 	mov	r3,r2
 8000730:	e0bffe17 	ldw	r2,-8(fp)
 8000734:	10c4b03a 	or	r2,r2,r3
 8000738:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 800073c:	e0bffd43 	ldbu	r2,-11(fp)
 8000740:	e0fffe17 	ldw	r3,-8(fp)
 8000744:	1884b03a 	or	r2,r3,r2
 8000748:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 800074c:	e0fffe17 	ldw	r3,-8(fp)
 8000750:	00802004 	movi	r2,128
 8000754:	10c00035 	stwio	r3,0(r2)
}
 8000758:	0001883a 	nop
 800075c:	e037883a 	mov	sp,fp
 8000760:	dfc00117 	ldw	ra,4(sp)
 8000764:	df000017 	ldw	fp,0(sp)
 8000768:	dec00204 	addi	sp,sp,8
 800076c:	f800283a 	ret

08000770 <setKeycode>:

void setKeycode(WORD keycode)
{
 8000770:	defffe04 	addi	sp,sp,-8
 8000774:	df000115 	stw	fp,4(sp)
 8000778:	df000104 	addi	fp,sp,4
 800077c:	2005883a 	mov	r2,r4
 8000780:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, keycode);
 8000784:	e0ffff0b 	ldhu	r3,-4(fp)
 8000788:	00806804 	movi	r2,416
 800078c:	10c00035 	stwio	r3,0(r2)
}
 8000790:	0001883a 	nop
 8000794:	e037883a 	mov	sp,fp
 8000798:	df000017 	ldw	fp,0(sp)
 800079c:	dec00104 	addi	sp,sp,4
 80007a0:	f800283a 	ret

080007a4 <keyNote>:

int keyNote(int key, int* octave, int* musicKey){
 80007a4:	defffb04 	addi	sp,sp,-20
 80007a8:	df000415 	stw	fp,16(sp)
 80007ac:	df000404 	addi	fp,sp,16
 80007b0:	e13ffd15 	stw	r4,-12(fp)
 80007b4:	e17ffe15 	stw	r5,-8(fp)
 80007b8:	e1bfff15 	stw	r6,-4(fp)
    //return key's frequency

    int ret = 0;
 80007bc:	e03ffc15 	stw	zero,-16(fp)
    switch(key){
 80007c0:	e0bffd17 	ldw	r2,-12(fp)
 80007c4:	10bfff04 	addi	r2,r2,-4
 80007c8:	10c00c28 	cmpgeui	r3,r2,48
 80007cc:	1800811e 	bne	r3,zero,80009d4 <keyNote+0x230>
 80007d0:	100690ba 	slli	r3,r2,2
 80007d4:	00820034 	movhi	r2,2048
 80007d8:	1081fa04 	addi	r2,r2,2024
 80007dc:	1885883a 	add	r2,r3,r2
 80007e0:	10800017 	ldw	r2,0(r2)
 80007e4:	1000683a 	jmp	r2
 80007e8:	080008a8 	cmpgeui	zero,at,34
 80007ec:	080009d4 	ori	zero,at,39
 80007f0:	080009a4 	muli	zero,at,38
 80007f4:	080008c0 	call	80008c <__alt_mem_onchip_memory2_0+0x80008c>
 80007f8:	0800092c 	andhi	zero,at,36
 80007fc:	080008cc 	andi	zero,at,35
 8000800:	080008d8 	cmpnei	zero,at,35
 8000804:	080008e4 	muli	zero,at,35
 8000808:	080009d4 	ori	zero,at,39
 800080c:	080008f0 	cmpltui	zero,at,35
 8000810:	080008fc 	xorhi	zero,at,35
 8000814:	08000908 	cmpgei	zero,at,36
 8000818:	080009d4 	ori	zero,at,39
 800081c:	080009d4 	ori	zero,at,39
 8000820:	0800095c 	xori	zero,at,37
 8000824:	08000968 	cmpgeui	zero,at,37
 8000828:	080009d4 	ori	zero,at,39
 800082c:	080009d4 	ori	zero,at,39
 8000830:	080008b4 	orhi	zero,at,34
 8000834:	08000938 	rdprs	zero,at,36
 8000838:	08000950 	cmplti	zero,at,37
 800083c:	080009bc 	xorhi	zero,at,38
 8000840:	08000920 	cmpeqi	zero,at,36
 8000844:	0800098c 	andi	zero,at,38
 8000848:	08000944 	addi	zero,at,37
 800084c:	08000974 	orhi	zero,at,37
 8000850:	080009d4 	ori	zero,at,39
 8000854:	080009d4 	ori	zero,at,39
 8000858:	080009d4 	ori	zero,at,39
 800085c:	080009d4 	ori	zero,at,39
 8000860:	080009d4 	ori	zero,at,39
 8000864:	080009d4 	ori	zero,at,39
 8000868:	080009d4 	ori	zero,at,39
 800086c:	080009d4 	ori	zero,at,39
 8000870:	080009d4 	ori	zero,at,39
 8000874:	080009d4 	ori	zero,at,39
 8000878:	080009d4 	ori	zero,at,39
 800087c:	080009d4 	ori	zero,at,39
 8000880:	080009d4 	ori	zero,at,39
 8000884:	080009d4 	ori	zero,at,39
 8000888:	080009d4 	ori	zero,at,39
 800088c:	080009d4 	ori	zero,at,39
 8000890:	080009d4 	ori	zero,at,39
 8000894:	080009d4 	ori	zero,at,39
 8000898:	080009d4 	ori	zero,at,39
 800089c:	080009d4 	ori	zero,at,39
 80008a0:	080009d4 	ori	zero,at,39
 80008a4:	08000914 	ori	zero,at,36

        //part 1: white keys
        case 4: //A
            ret = 36;
 80008a8:	00800904 	movi	r2,36
 80008ac:	e0bffc15 	stw	r2,-16(fp)
            break;
 80008b0:	00004906 	br	80009d8 <keyNote+0x234>
        case 22: //S
            ret = 38;
 80008b4:	00800984 	movi	r2,38
 80008b8:	e0bffc15 	stw	r2,-16(fp)
            break;
 80008bc:	00004606 	br	80009d8 <keyNote+0x234>
        case 7: //D
            ret = 40;
 80008c0:	00800a04 	movi	r2,40
 80008c4:	e0bffc15 	stw	r2,-16(fp)
            break;
 80008c8:	00004306 	br	80009d8 <keyNote+0x234>
        case 9: //F
            ret = 41;
 80008cc:	00800a44 	movi	r2,41
 80008d0:	e0bffc15 	stw	r2,-16(fp)
            break;
 80008d4:	00004006 	br	80009d8 <keyNote+0x234>
        case 10: //G
            ret = 43;
 80008d8:	00800ac4 	movi	r2,43
 80008dc:	e0bffc15 	stw	r2,-16(fp)
            break; 
 80008e0:	00003d06 	br	80009d8 <keyNote+0x234>
        case 11: //H
            ret = 45;
 80008e4:	00800b44 	movi	r2,45
 80008e8:	e0bffc15 	stw	r2,-16(fp)
            break;
 80008ec:	00003a06 	br	80009d8 <keyNote+0x234>
        case 13: //J
            ret = 47;
 80008f0:	00800bc4 	movi	r2,47
 80008f4:	e0bffc15 	stw	r2,-16(fp)
            break;
 80008f8:	00003706 	br	80009d8 <keyNote+0x234>
        case 14: //K
            ret = 48;
 80008fc:	00800c04 	movi	r2,48
 8000900:	e0bffc15 	stw	r2,-16(fp)
            break;
 8000904:	00003406 	br	80009d8 <keyNote+0x234>
        case 15: //L
            ret = 50;
 8000908:	00800c84 	movi	r2,50
 800090c:	e0bffc15 	stw	r2,-16(fp)
            break;
 8000910:	00003106 	br	80009d8 <keyNote+0x234>
        case 51: //;
            ret = 52;
 8000914:	00800d04 	movi	r2,52
 8000918:	e0bffc15 	stw	r2,-16(fp)
            break;
 800091c:	00002e06 	br	80009d8 <keyNote+0x234>

        //part 2: black keys
        case 26: //W
            ret = 37;
 8000920:	00800944 	movi	r2,37
 8000924:	e0bffc15 	stw	r2,-16(fp)
            break;
 8000928:	00002b06 	br	80009d8 <keyNote+0x234>
        case 8: //E
            ret = 39;
 800092c:	008009c4 	movi	r2,39
 8000930:	e0bffc15 	stw	r2,-16(fp)
            break;
 8000934:	00002806 	br	80009d8 <keyNote+0x234>
        case 23: //T
            ret = 42;
 8000938:	00800a84 	movi	r2,42
 800093c:	e0bffc15 	stw	r2,-16(fp)
            break;
 8000940:	00002506 	br	80009d8 <keyNote+0x234>
        case 28: //Y
            ret = 44;
 8000944:	00800b04 	movi	r2,44
 8000948:	e0bffc15 	stw	r2,-16(fp)
            break;
 800094c:	00002206 	br	80009d8 <keyNote+0x234>
        case 24: //U
            ret = 46;
 8000950:	00800b84 	movi	r2,46
 8000954:	e0bffc15 	stw	r2,-16(fp)
            break;
 8000958:	00001f06 	br	80009d8 <keyNote+0x234>
        case 18: //O
            ret = 49;
 800095c:	00800c44 	movi	r2,49
 8000960:	e0bffc15 	stw	r2,-16(fp)
            break;
 8000964:	00001c06 	br	80009d8 <keyNote+0x234>
        case 19: //P
            ret = 51;
 8000968:	00800cc4 	movi	r2,51
 800096c:	e0bffc15 	stw	r2,-16(fp)
            break;
 8000970:	00001906 	br	80009d8 <keyNote+0x234>

        //part 3: shift keys
        case 29: //Z
            *octave -= 1;
 8000974:	e0bffe17 	ldw	r2,-8(fp)
 8000978:	10800017 	ldw	r2,0(r2)
 800097c:	10ffffc4 	addi	r3,r2,-1
 8000980:	e0bffe17 	ldw	r2,-8(fp)
 8000984:	10c00015 	stw	r3,0(r2)
            break;
 8000988:	00001306 	br	80009d8 <keyNote+0x234>
        case 27: //X
            *octave += 1;
 800098c:	e0bffe17 	ldw	r2,-8(fp)
 8000990:	10800017 	ldw	r2,0(r2)
 8000994:	10c00044 	addi	r3,r2,1
 8000998:	e0bffe17 	ldw	r2,-8(fp)
 800099c:	10c00015 	stw	r3,0(r2)
            break;
 80009a0:	00000d06 	br	80009d8 <keyNote+0x234>
        case 6: //C
            *musicKey -= 1;
 80009a4:	e0bfff17 	ldw	r2,-4(fp)
 80009a8:	10800017 	ldw	r2,0(r2)
 80009ac:	10ffffc4 	addi	r3,r2,-1
 80009b0:	e0bfff17 	ldw	r2,-4(fp)
 80009b4:	10c00015 	stw	r3,0(r2)
            break;
 80009b8:	00000706 	br	80009d8 <keyNote+0x234>
        case 25: //V
            *musicKey += 1;
 80009bc:	e0bfff17 	ldw	r2,-4(fp)
 80009c0:	10800017 	ldw	r2,0(r2)
 80009c4:	10c00044 	addi	r3,r2,1
 80009c8:	e0bfff17 	ldw	r2,-4(fp)
 80009cc:	10c00015 	stw	r3,0(r2)
            break;
 80009d0:	00000106 	br	80009d8 <keyNote+0x234>
        default:
            ret = 0;
 80009d4:	e03ffc15 	stw	zero,-16(fp)
    }
    return ret;
 80009d8:	e0bffc17 	ldw	r2,-16(fp)
}
 80009dc:	e037883a 	mov	sp,fp
 80009e0:	df000017 	ldw	fp,0(sp)
 80009e4:	dec00104 	addi	sp,sp,4
 80009e8:	f800283a 	ret

080009ec <main>:

int main() {
 80009ec:	deffe204 	addi	sp,sp,-120
 80009f0:	dfc01d15 	stw	ra,116(sp)
 80009f4:	df001c15 	stw	fp,112(sp)
 80009f8:	df001c04 	addi	fp,sp,112

	int freq = 0;
 80009fc:	e03fe415 	stw	zero,-112(fp)

	const int offset = 2;
 8000a00:	00800084 	movi	r2,2
 8000a04:	e0bff015 	stw	r2,-64(fp)

	int ph0 = 0;
 8000a08:	e03fe515 	stw	zero,-108(fp)
	int ph1 = 0;
 8000a0c:	e03fe615 	stw	zero,-104(fp)
	int ph2 = 0;
 8000a10:	e03fe715 	stw	zero,-100(fp)

	unsigned* si0 = 0x4000;
 8000a14:	00900004 	movi	r2,16384
 8000a18:	e0bff115 	stw	r2,-60(fp)
	unsigned* si1 = 0x0120;
 8000a1c:	00804804 	movi	r2,288
 8000a20:	e0bff215 	stw	r2,-56(fp)
	unsigned* si2 = 0x00b0;
 8000a24:	00802c04 	movi	r2,176
 8000a28:	e0bff315 	stw	r2,-52(fp)
	unsigned* sikb = 0x0090;
 8000a2c:	00802404 	movi	r2,144
 8000a30:	e0bff415 	stw	r2,-48(fp)

	unsigned* lights = 0x000c0000;
 8000a34:	00800334 	movhi	r2,12
 8000a38:	e0bff515 	stw	r2,-44(fp)
	unsigned* instant_drum = 0x30;
 8000a3c:	00800c04 	movi	r2,48
 8000a40:	e0bff615 	stw	r2,-40(fp)

	int freq2, freq3;
	char counter0 = 0;
 8000a44:	e03fea05 	stb	zero,-88(fp)
	char counter1 = 0;
 8000a48:	e03fea45 	stb	zero,-87(fp)
	char counter2 = 0;
 8000a4c:	e03fea85 	stb	zero,-86(fp)

	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
 8000a50:	e03feac5 	stb	zero,-85(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
 8000a54:	e03feb05 	stb	zero,-84(fp)
	BYTE device;
	WORD keycode;
	int * mainOctave;
	int * mainKey;
	*mainOctave = 0;
 8000a58:	e0bff717 	ldw	r2,-36(fp)
 8000a5c:	10000015 	stw	zero,0(r2)
	*mainKey = 0;
 8000a60:	e0bff817 	ldw	r2,-32(fp)
 8000a64:	10000015 	stw	zero,0(r2)

	printf("initializing MAX3421E...\n");
 8000a68:	010200f4 	movhi	r4,2051
 8000a6c:	2104d004 	addi	r4,r4,4928
 8000a70:	80038a00 	call	80038a0 <puts>
	MAX3421E_init();
 8000a74:	80025240 	call	8002524 <MAX3421E_init>
	printf("initializing USB...\n");
 8000a78:	010200f4 	movhi	r4,2051
 8000a7c:	2104d704 	addi	r4,r4,4956
 8000a80:	80038a00 	call	80038a0 <puts>
	USB_init();
 8000a84:	8002cb40 	call	8002cb4 <USB_init>


	// Turn off all the lights
	*lights = 0x00;
 8000a88:	e0bff517 	ldw	r2,-44(fp)
 8000a8c:	10000015 	stw	zero,0(r2)

	// Wait for start key
	while(kbdbuf.keycode[0] != 0x2B) {
 8000a90:	00006506 	br	8000c28 <main+0x23c>
		MAX3421E_Task();
 8000a94:	80025b80 	call	80025b8 <MAX3421E_Task>
		USB_Task();
 8000a98:	8002d4c0 	call	8002d4c <USB_Task>

		if (GetUsbTaskState() == USB_STATE_RUNNING) {
 8000a9c:	80034bc0 	call	80034bc <GetUsbTaskState>
 8000aa0:	10803fcc 	andi	r2,r2,255
 8000aa4:	10801018 	cmpnei	r2,r2,64
 8000aa8:	10004c1e 	bne	r2,zero,8000bdc <main+0x1f0>
			if (!runningdebugflag) {
 8000aac:	e0bfeac3 	ldbu	r2,-85(fp)
 8000ab0:	1000051e 	bne	r2,zero,8000ac8 <main+0xdc>
				runningdebugflag = 1;
 8000ab4:	00800044 	movi	r2,1
 8000ab8:	e0bfeac5 	stb	r2,-85(fp)
				device = GetDriverandReport();
 8000abc:	800026c0 	call	800026c <GetDriverandReport>
 8000ac0:	e0bfeb45 	stb	r2,-83(fp)
 8000ac4:	00005806 	br	8000c28 <main+0x23c>
			} else if (device == 1) {
 8000ac8:	e0bfeb43 	ldbu	r2,-83(fp)
 8000acc:	10800058 	cmpnei	r2,r2,1
 8000ad0:	1000551e 	bne	r2,zero,8000c28 <main+0x23c>
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
 8000ad4:	e0bffe04 	addi	r2,fp,-8
 8000ad8:	1009883a 	mov	r4,r2
 8000adc:	8001e640 	call	8001e64 <kbdPoll>
 8000ae0:	e0bff905 	stb	r2,-28(fp)
				if (rcode == hrNAK) {
 8000ae4:	e0bff903 	ldbu	r2,-28(fp)
 8000ae8:	10800118 	cmpnei	r2,r2,4
 8000aec:	1000011e 	bne	r2,zero,8000af4 <main+0x108>
					continue; //NAK means no new data
 8000af0:	00004d06 	br	8000c28 <main+0x23c>
				} else if (rcode) {
 8000af4:	e0bff903 	ldbu	r2,-28(fp)
 8000af8:	10000126 	beq	r2,zero,8000b00 <main+0x114>

					continue;
 8000afc:	00004a06 	br	8000c28 <main+0x23c>
				}

                int myNote;
				int myFreq;
                if (kbdbuf.keycode[0] != 0) {
 8000b00:	e0bffe83 	ldbu	r2,-6(fp)
 8000b04:	10803fcc 	andi	r2,r2,255
 8000b08:	10001a26 	beq	r2,zero,8000b74 <main+0x188>
                    myNote = keyNote(kbdbuf.keycode[0], mainOctave, mainKey);
 8000b0c:	e0bffe83 	ldbu	r2,-6(fp)
 8000b10:	10803fcc 	andi	r2,r2,255
 8000b14:	e1bff817 	ldw	r6,-32(fp)
 8000b18:	e17ff717 	ldw	r5,-36(fp)
 8000b1c:	1009883a 	mov	r4,r2
 8000b20:	80007a40 	call	80007a4 <keyNote>
 8000b24:	e0bffa15 	stw	r2,-24(fp)
					myFreq = freq_lut[myNote+(12*(*mainOctave))+(*mainKey)];
 8000b28:	e0bff717 	ldw	r2,-36(fp)
 8000b2c:	10800017 	ldw	r2,0(r2)
 8000b30:	01400304 	movi	r5,12
 8000b34:	1009883a 	mov	r4,r2
 8000b38:	800374c0 	call	800374c <__mulsi3>
 8000b3c:	1007883a 	mov	r3,r2
 8000b40:	e0bffa17 	ldw	r2,-24(fp)
 8000b44:	1887883a 	add	r3,r3,r2
 8000b48:	e0bff817 	ldw	r2,-32(fp)
 8000b4c:	10800017 	ldw	r2,0(r2)
 8000b50:	1887883a 	add	r3,r3,r2
 8000b54:	008200f4 	movhi	r2,2051
 8000b58:	1085da04 	addi	r2,r2,5992
 8000b5c:	18c7883a 	add	r3,r3,r3
 8000b60:	18c7883a 	add	r3,r3,r3
 8000b64:	10c5883a 	add	r2,r2,r3
 8000b68:	10800017 	ldw	r2,0(r2)
 8000b6c:	e0bfec15 	stw	r2,-80(fp)
 8000b70:	00000106 	br	8000b78 <main+0x18c>
                }
                else {
                    myFreq = 0;
 8000b74:	e03fec15 	stw	zero,-80(fp)
                }
                // write that frequency
                *sikb = myFreq;
 8000b78:	e0ffec17 	ldw	r3,-80(fp)
 8000b7c:	e0bff417 	ldw	r2,-48(fp)
 8000b80:	10c00015 	stw	r3,0(r2)


                // Do instant drum
				char do_drum = 0;
 8000b84:	e03fed05 	stb	zero,-76(fp)

				for (char i = 0; i < 6; i ++) {
 8000b88:	e03fed45 	stb	zero,-75(fp)
 8000b8c:	00000c06 	br	8000bc0 <main+0x1d4>
					if (kbdbuf.keycode[i] == 0x2c) {
 8000b90:	e0bfed47 	ldb	r2,-75(fp)
 8000b94:	e0fffe84 	addi	r3,fp,-6
 8000b98:	1885883a 	add	r2,r3,r2
 8000b9c:	10800003 	ldbu	r2,0(r2)
 8000ba0:	10803fcc 	andi	r2,r2,255
 8000ba4:	10800b18 	cmpnei	r2,r2,44
 8000ba8:	1000021e 	bne	r2,zero,8000bb4 <main+0x1c8>
						do_drum = 1;
 8000bac:	00800044 	movi	r2,1
 8000bb0:	e0bfed05 	stb	r2,-76(fp)


                // Do instant drum
				char do_drum = 0;

				for (char i = 0; i < 6; i ++) {
 8000bb4:	e0bfed43 	ldbu	r2,-75(fp)
 8000bb8:	10800044 	addi	r2,r2,1
 8000bbc:	e0bfed45 	stb	r2,-75(fp)
 8000bc0:	e0bfed47 	ldb	r2,-75(fp)
 8000bc4:	10800190 	cmplti	r2,r2,6
 8000bc8:	103ff11e 	bne	r2,zero,8000b90 <__alt_data_end+0xfc000b90>
					if (kbdbuf.keycode[i] == 0x2c) {
						do_drum = 1;
					}
				}

				*instant_drum = do_drum;
 8000bcc:	e0ffed07 	ldb	r3,-76(fp)
 8000bd0:	e0bff617 	ldw	r2,-40(fp)
 8000bd4:	10c00015 	stw	r3,0(r2)
 8000bd8:	00001306 	br	8000c28 <main+0x23c>

				}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
 8000bdc:	80034bc0 	call	80034bc <GetUsbTaskState>
 8000be0:	10803fcc 	andi	r2,r2,255
 8000be4:	10803fd8 	cmpnei	r2,r2,255
 8000be8:	1000071e 	bne	r2,zero,8000c08 <main+0x21c>
			if (!errorflag) {
 8000bec:	e0bfeb03 	ldbu	r2,-84(fp)
 8000bf0:	10000d1e 	bne	r2,zero,8000c28 <main+0x23c>
				errorflag = 1;
 8000bf4:	00800044 	movi	r2,1
 8000bf8:	e0bfeb05 	stb	r2,-84(fp)
				clearLED(9);
 8000bfc:	01000244 	movi	r4,9
 8000c00:	80004bc0 	call	80004bc <clearLED>
 8000c04:	00000806 	br	8000c28 <main+0x23c>
			}
		} else //not in USB running state
		{
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
 8000c08:	e0bfeac3 	ldbu	r2,-85(fp)
 8000c0c:	10000326 	beq	r2,zero,8000c1c <main+0x230>
				runningdebugflag = 0;
 8000c10:	e03feac5 	stb	zero,-85(fp)
				MAX3421E_init();
 8000c14:	80025240 	call	8002524 <MAX3421E_init>
				USB_init();
 8000c18:	8002cb40 	call	8002cb4 <USB_init>
			}
			errorflag = 0;
 8000c1c:	e03feb05 	stb	zero,-84(fp)
			clearLED(9);
 8000c20:	01000244 	movi	r4,9
 8000c24:	80004bc0 	call	80004bc <clearLED>

	// Turn off all the lights
	*lights = 0x00;

	// Wait for start key
	while(kbdbuf.keycode[0] != 0x2B) {
 8000c28:	e0bffe83 	ldbu	r2,-6(fp)
 8000c2c:	10803fcc 	andi	r2,r2,255
 8000c30:	10800ad8 	cmpnei	r2,r2,43
 8000c34:	103f971e 	bne	r2,zero,8000a94 <__alt_data_end+0xfc000a94>
			errorflag = 0;
			clearLED(9);
		}

	}
	printf("Start to play music!\n");
 8000c38:	010200f4 	movhi	r4,2051
 8000c3c:	2104dc04 	addi	r4,r4,4976
 8000c40:	80038a00 	call	80038a0 <puts>

	while (1) {
		if (*(si0)) {
 8000c44:	e0bff117 	ldw	r2,-60(fp)
 8000c48:	10800017 	ldw	r2,0(r2)
 8000c4c:	10004826 	beq	r2,zero,8000d70 <main+0x384>
			counter0 ++;
 8000c50:	e0bfea03 	ldbu	r2,-88(fp)
 8000c54:	10800044 	addi	r2,r2,1
 8000c58:	e0bfea05 	stb	r2,-88(fp)
			if(chan0[ph0*3+1]!=0){
 8000c5c:	e0ffe517 	ldw	r3,-108(fp)
 8000c60:	1805883a 	mov	r2,r3
 8000c64:	1085883a 	add	r2,r2,r2
 8000c68:	10c5883a 	add	r2,r2,r3
 8000c6c:	10c00044 	addi	r3,r2,1
 8000c70:	00820074 	movhi	r2,2049
 8000c74:	108c0004 	addi	r2,r2,12288
 8000c78:	18c7883a 	add	r3,r3,r3
 8000c7c:	18c7883a 	add	r3,r3,r3
 8000c80:	10c5883a 	add	r2,r2,r3
 8000c84:	10800017 	ldw	r2,0(r2)
 8000c88:	10001226 	beq	r2,zero,8000cd4 <main+0x2e8>
				freq = freq_lut[chan0[ph0*3]];
 8000c8c:	e0ffe517 	ldw	r3,-108(fp)
 8000c90:	1805883a 	mov	r2,r3
 8000c94:	1085883a 	add	r2,r2,r2
 8000c98:	10c7883a 	add	r3,r2,r3
 8000c9c:	00820074 	movhi	r2,2049
 8000ca0:	108c0004 	addi	r2,r2,12288
 8000ca4:	18c7883a 	add	r3,r3,r3
 8000ca8:	18c7883a 	add	r3,r3,r3
 8000cac:	10c5883a 	add	r2,r2,r3
 8000cb0:	10c00017 	ldw	r3,0(r2)
 8000cb4:	008200f4 	movhi	r2,2051
 8000cb8:	1085da04 	addi	r2,r2,5992
 8000cbc:	18c7883a 	add	r3,r3,r3
 8000cc0:	18c7883a 	add	r3,r3,r3
 8000cc4:	10c5883a 	add	r2,r2,r3
 8000cc8:	10800017 	ldw	r2,0(r2)
 8000ccc:	e0bfe415 	stw	r2,-112(fp)
 8000cd0:	00000106 	br	8000cd8 <main+0x2ec>
			}
			else{
				freq = 0;
 8000cd4:	e03fe415 	stw	zero,-112(fp)
			}
			*(si0) = (chan0[(ph0+1)*3+2]*offset << 16) | freq;
 8000cd8:	e0bfe517 	ldw	r2,-108(fp)
 8000cdc:	10c00044 	addi	r3,r2,1
 8000ce0:	1805883a 	mov	r2,r3
 8000ce4:	1085883a 	add	r2,r2,r2
 8000ce8:	10c5883a 	add	r2,r2,r3
 8000cec:	10c00084 	addi	r3,r2,2
 8000cf0:	00820074 	movhi	r2,2049
 8000cf4:	108c0004 	addi	r2,r2,12288
 8000cf8:	18c7883a 	add	r3,r3,r3
 8000cfc:	18c7883a 	add	r3,r3,r3
 8000d00:	10c5883a 	add	r2,r2,r3
 8000d04:	10800017 	ldw	r2,0(r2)
 8000d08:	e17ff017 	ldw	r5,-64(fp)
 8000d0c:	1009883a 	mov	r4,r2
 8000d10:	800374c0 	call	800374c <__mulsi3>
 8000d14:	1006943a 	slli	r3,r2,16
 8000d18:	e0bfe417 	ldw	r2,-112(fp)
 8000d1c:	1884b03a 	or	r2,r3,r2
 8000d20:	1007883a 	mov	r3,r2
 8000d24:	e0bff117 	ldw	r2,-60(fp)
 8000d28:	10c00015 	stw	r3,0(r2)
			if (counter0 % 4 == 0) {
 8000d2c:	e0bfea03 	ldbu	r2,-88(fp)
 8000d30:	108000cc 	andi	r2,r2,3
 8000d34:	10803fcc 	andi	r2,r2,255
 8000d38:	10000a1e 	bne	r2,zero,8000d64 <main+0x378>
				*lights = (*lights & 0xFE) | ~(*lights & 0x01);
 8000d3c:	e0bff517 	ldw	r2,-44(fp)
 8000d40:	10800017 	ldw	r2,0(r2)
 8000d44:	10c03f8c 	andi	r3,r2,254
 8000d48:	e0bff517 	ldw	r2,-44(fp)
 8000d4c:	10800017 	ldw	r2,0(r2)
 8000d50:	1080004c 	andi	r2,r2,1
 8000d54:	0084303a 	nor	r2,zero,r2
 8000d58:	1886b03a 	or	r3,r3,r2
 8000d5c:	e0bff517 	ldw	r2,-44(fp)
 8000d60:	10c00015 	stw	r3,0(r2)
			}
			ph0 ++;
 8000d64:	e0bfe517 	ldw	r2,-108(fp)
 8000d68:	10800044 	addi	r2,r2,1
 8000d6c:	e0bfe515 	stw	r2,-108(fp)
		}
		if (*(si1)) {
 8000d70:	e0bff217 	ldw	r2,-56(fp)
 8000d74:	10800017 	ldw	r2,0(r2)
 8000d78:	10004826 	beq	r2,zero,8000e9c <main+0x4b0>
			counter1 ++;
 8000d7c:	e0bfea43 	ldbu	r2,-87(fp)
 8000d80:	10800044 	addi	r2,r2,1
 8000d84:	e0bfea45 	stb	r2,-87(fp)
			if(chan1[ph1*3+1]!=0){
 8000d88:	e0ffe617 	ldw	r3,-104(fp)
 8000d8c:	1805883a 	mov	r2,r3
 8000d90:	1085883a 	add	r2,r2,r2
 8000d94:	10c5883a 	add	r2,r2,r3
 8000d98:	10c00044 	addi	r3,r2,1
 8000d9c:	008200b4 	movhi	r2,2050
 8000da0:	10a41e04 	addi	r2,r2,-28552
 8000da4:	18c7883a 	add	r3,r3,r3
 8000da8:	18c7883a 	add	r3,r3,r3
 8000dac:	10c5883a 	add	r2,r2,r3
 8000db0:	10800017 	ldw	r2,0(r2)
 8000db4:	10001226 	beq	r2,zero,8000e00 <main+0x414>
				freq2 = freq_lut[chan1[ph1*3]];
 8000db8:	e0ffe617 	ldw	r3,-104(fp)
 8000dbc:	1805883a 	mov	r2,r3
 8000dc0:	1085883a 	add	r2,r2,r2
 8000dc4:	10c7883a 	add	r3,r2,r3
 8000dc8:	008200b4 	movhi	r2,2050
 8000dcc:	10a41e04 	addi	r2,r2,-28552
 8000dd0:	18c7883a 	add	r3,r3,r3
 8000dd4:	18c7883a 	add	r3,r3,r3
 8000dd8:	10c5883a 	add	r2,r2,r3
 8000ddc:	10c00017 	ldw	r3,0(r2)
 8000de0:	008200f4 	movhi	r2,2051
 8000de4:	1085da04 	addi	r2,r2,5992
 8000de8:	18c7883a 	add	r3,r3,r3
 8000dec:	18c7883a 	add	r3,r3,r3
 8000df0:	10c5883a 	add	r2,r2,r3
 8000df4:	10800017 	ldw	r2,0(r2)
 8000df8:	e0bfe815 	stw	r2,-96(fp)
 8000dfc:	00000106 	br	8000e04 <main+0x418>
			}
			else{
				freq2 = 0;
 8000e00:	e03fe815 	stw	zero,-96(fp)
			}
			*(si1) = (chan1[(ph1+1)*3+2]*offset << 16) | freq2;
 8000e04:	e0bfe617 	ldw	r2,-104(fp)
 8000e08:	10c00044 	addi	r3,r2,1
 8000e0c:	1805883a 	mov	r2,r3
 8000e10:	1085883a 	add	r2,r2,r2
 8000e14:	10c5883a 	add	r2,r2,r3
 8000e18:	10c00084 	addi	r3,r2,2
 8000e1c:	008200b4 	movhi	r2,2050
 8000e20:	10a41e04 	addi	r2,r2,-28552
 8000e24:	18c7883a 	add	r3,r3,r3
 8000e28:	18c7883a 	add	r3,r3,r3
 8000e2c:	10c5883a 	add	r2,r2,r3
 8000e30:	10800017 	ldw	r2,0(r2)
 8000e34:	e17ff017 	ldw	r5,-64(fp)
 8000e38:	1009883a 	mov	r4,r2
 8000e3c:	800374c0 	call	800374c <__mulsi3>
 8000e40:	1006943a 	slli	r3,r2,16
 8000e44:	e0bfe817 	ldw	r2,-96(fp)
 8000e48:	1884b03a 	or	r2,r3,r2
 8000e4c:	1007883a 	mov	r3,r2
 8000e50:	e0bff217 	ldw	r2,-56(fp)
 8000e54:	10c00015 	stw	r3,0(r2)
			if (counter1 % 8 == 0) {
 8000e58:	e0bfea43 	ldbu	r2,-87(fp)
 8000e5c:	108001cc 	andi	r2,r2,7
 8000e60:	10803fcc 	andi	r2,r2,255
 8000e64:	10000a1e 	bne	r2,zero,8000e90 <main+0x4a4>
				*lights = (*lights & 0xFD) | ~(*lights & 0x02);
 8000e68:	e0bff517 	ldw	r2,-44(fp)
 8000e6c:	10800017 	ldw	r2,0(r2)
 8000e70:	10c03f4c 	andi	r3,r2,253
 8000e74:	e0bff517 	ldw	r2,-44(fp)
 8000e78:	10800017 	ldw	r2,0(r2)
 8000e7c:	1080008c 	andi	r2,r2,2
 8000e80:	0084303a 	nor	r2,zero,r2
 8000e84:	1886b03a 	or	r3,r3,r2
 8000e88:	e0bff517 	ldw	r2,-44(fp)
 8000e8c:	10c00015 	stw	r3,0(r2)
			}
			ph1 ++;
 8000e90:	e0bfe617 	ldw	r2,-104(fp)
 8000e94:	10800044 	addi	r2,r2,1
 8000e98:	e0bfe615 	stw	r2,-104(fp)
		}
		if (*(si2)) {
 8000e9c:	e0bff317 	ldw	r2,-52(fp)
 8000ea0:	10800017 	ldw	r2,0(r2)
 8000ea4:	10004826 	beq	r2,zero,8000fc8 <main+0x5dc>
			counter2 ++;
 8000ea8:	e0bfea83 	ldbu	r2,-86(fp)
 8000eac:	10800044 	addi	r2,r2,1
 8000eb0:	e0bfea85 	stb	r2,-86(fp)
			if(chan2[ph2*3+1]!=0){
 8000eb4:	e0ffe717 	ldw	r3,-100(fp)
 8000eb8:	1805883a 	mov	r2,r3
 8000ebc:	1085883a 	add	r2,r2,r2
 8000ec0:	10c5883a 	add	r2,r2,r3
 8000ec4:	10c00044 	addi	r3,r2,1
 8000ec8:	008200b4 	movhi	r2,2050
 8000ecc:	10bc3c04 	addi	r2,r2,-3856
 8000ed0:	18c7883a 	add	r3,r3,r3
 8000ed4:	18c7883a 	add	r3,r3,r3
 8000ed8:	10c5883a 	add	r2,r2,r3
 8000edc:	10800017 	ldw	r2,0(r2)
 8000ee0:	10001226 	beq	r2,zero,8000f2c <main+0x540>
				freq3 = freq_lut[chan2[ph2*3]];
 8000ee4:	e0ffe717 	ldw	r3,-100(fp)
 8000ee8:	1805883a 	mov	r2,r3
 8000eec:	1085883a 	add	r2,r2,r2
 8000ef0:	10c7883a 	add	r3,r2,r3
 8000ef4:	008200b4 	movhi	r2,2050
 8000ef8:	10bc3c04 	addi	r2,r2,-3856
 8000efc:	18c7883a 	add	r3,r3,r3
 8000f00:	18c7883a 	add	r3,r3,r3
 8000f04:	10c5883a 	add	r2,r2,r3
 8000f08:	10c00017 	ldw	r3,0(r2)
 8000f0c:	008200f4 	movhi	r2,2051
 8000f10:	1085da04 	addi	r2,r2,5992
 8000f14:	18c7883a 	add	r3,r3,r3
 8000f18:	18c7883a 	add	r3,r3,r3
 8000f1c:	10c5883a 	add	r2,r2,r3
 8000f20:	10800017 	ldw	r2,0(r2)
 8000f24:	e0bfe915 	stw	r2,-92(fp)
 8000f28:	00000106 	br	8000f30 <main+0x544>
			}
			else{
				freq3 = 0;
 8000f2c:	e03fe915 	stw	zero,-92(fp)
			}
			*(si2) = (chan2[(ph2+1)*3+2]*offset << 16) | freq3;
 8000f30:	e0bfe717 	ldw	r2,-100(fp)
 8000f34:	10c00044 	addi	r3,r2,1
 8000f38:	1805883a 	mov	r2,r3
 8000f3c:	1085883a 	add	r2,r2,r2
 8000f40:	10c5883a 	add	r2,r2,r3
 8000f44:	10c00084 	addi	r3,r2,2
 8000f48:	008200b4 	movhi	r2,2050
 8000f4c:	10bc3c04 	addi	r2,r2,-3856
 8000f50:	18c7883a 	add	r3,r3,r3
 8000f54:	18c7883a 	add	r3,r3,r3
 8000f58:	10c5883a 	add	r2,r2,r3
 8000f5c:	10800017 	ldw	r2,0(r2)
 8000f60:	e17ff017 	ldw	r5,-64(fp)
 8000f64:	1009883a 	mov	r4,r2
 8000f68:	800374c0 	call	800374c <__mulsi3>
 8000f6c:	1006943a 	slli	r3,r2,16
 8000f70:	e0bfe917 	ldw	r2,-92(fp)
 8000f74:	1884b03a 	or	r2,r3,r2
 8000f78:	1007883a 	mov	r3,r2
 8000f7c:	e0bff317 	ldw	r2,-52(fp)
 8000f80:	10c00015 	stw	r3,0(r2)
			if (counter2 % 16 == 0) {
 8000f84:	e0bfea83 	ldbu	r2,-86(fp)
 8000f88:	108003cc 	andi	r2,r2,15
 8000f8c:	10803fcc 	andi	r2,r2,255
 8000f90:	10000a1e 	bne	r2,zero,8000fbc <main+0x5d0>
				*lights = (*lights & 0xFB) | ~(*lights & 0x04);
 8000f94:	e0bff517 	ldw	r2,-44(fp)
 8000f98:	10800017 	ldw	r2,0(r2)
 8000f9c:	10c03ecc 	andi	r3,r2,251
 8000fa0:	e0bff517 	ldw	r2,-44(fp)
 8000fa4:	10800017 	ldw	r2,0(r2)
 8000fa8:	1080010c 	andi	r2,r2,4
 8000fac:	0084303a 	nor	r2,zero,r2
 8000fb0:	1886b03a 	or	r3,r3,r2
 8000fb4:	e0bff517 	ldw	r2,-44(fp)
 8000fb8:	10c00015 	stw	r3,0(r2)
			}
			ph2 ++;
 8000fbc:	e0bfe717 	ldw	r2,-100(fp)
 8000fc0:	10800044 	addi	r2,r2,1
 8000fc4:	e0bfe715 	stw	r2,-100(fp)
		}

		MAX3421E_Task();
 8000fc8:	80025b80 	call	80025b8 <MAX3421E_Task>
		USB_Task();
 8000fcc:	8002d4c0 	call	8002d4c <USB_Task>

		if (GetUsbTaskState() == USB_STATE_RUNNING) {
 8000fd0:	80034bc0 	call	80034bc <GetUsbTaskState>
 8000fd4:	10803fcc 	andi	r2,r2,255
 8000fd8:	10801018 	cmpnei	r2,r2,64
 8000fdc:	10004a1e 	bne	r2,zero,8001108 <main+0x71c>
			if (!runningdebugflag) {
 8000fe0:	e0bfeac3 	ldbu	r2,-85(fp)
 8000fe4:	1000051e 	bne	r2,zero,8000ffc <main+0x610>
				runningdebugflag = 1;
 8000fe8:	00800044 	movi	r2,1
 8000fec:	e0bfeac5 	stb	r2,-85(fp)
				device = GetDriverandReport();
 8000ff0:	800026c0 	call	800026c <GetDriverandReport>
 8000ff4:	e0bfeb45 	stb	r2,-83(fp)
 8000ff8:	003f1206 	br	8000c44 <__alt_data_end+0xfc000c44>
			} else if (device == 1) {
 8000ffc:	e0bfeb43 	ldbu	r2,-83(fp)
 8001000:	10800058 	cmpnei	r2,r2,1
 8001004:	103f0f1e 	bne	r2,zero,8000c44 <__alt_data_end+0xfc000c44>
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
 8001008:	e0bffe04 	addi	r2,fp,-8
 800100c:	1009883a 	mov	r4,r2
 8001010:	8001e640 	call	8001e64 <kbdPoll>
 8001014:	e0bff905 	stb	r2,-28(fp)
				if (rcode == hrNAK) { continue; //NAK means no new data
 8001018:	e0bff903 	ldbu	r2,-28(fp)
 800101c:	10800118 	cmpnei	r2,r2,4
 8001020:	10004d26 	beq	r2,zero,8001158 <main+0x76c>
				} else if (rcode) {
 8001024:	e0bff903 	ldbu	r2,-28(fp)
 8001028:	10004d1e 	bne	r2,zero,8001160 <main+0x774>
					continue;
				}

                int myNote;
				int myFreq;
                if (kbdbuf.keycode[0] != 0) {
 800102c:	e0bffe83 	ldbu	r2,-6(fp)
 8001030:	10803fcc 	andi	r2,r2,255
 8001034:	10001a26 	beq	r2,zero,80010a0 <main+0x6b4>
                    myNote = keyNote(kbdbuf.keycode[0], mainOctave, mainKey);
 8001038:	e0bffe83 	ldbu	r2,-6(fp)
 800103c:	10803fcc 	andi	r2,r2,255
 8001040:	e1bff817 	ldw	r6,-32(fp)
 8001044:	e17ff717 	ldw	r5,-36(fp)
 8001048:	1009883a 	mov	r4,r2
 800104c:	80007a40 	call	80007a4 <keyNote>
 8001050:	e0bffb15 	stw	r2,-20(fp)
					myFreq = freq_lut[myNote+(12*(*mainOctave))+(*mainKey)];
 8001054:	e0bff717 	ldw	r2,-36(fp)
 8001058:	10800017 	ldw	r2,0(r2)
 800105c:	01400304 	movi	r5,12
 8001060:	1009883a 	mov	r4,r2
 8001064:	800374c0 	call	800374c <__mulsi3>
 8001068:	1007883a 	mov	r3,r2
 800106c:	e0bffb17 	ldw	r2,-20(fp)
 8001070:	1887883a 	add	r3,r3,r2
 8001074:	e0bff817 	ldw	r2,-32(fp)
 8001078:	10800017 	ldw	r2,0(r2)
 800107c:	1887883a 	add	r3,r3,r2
 8001080:	008200f4 	movhi	r2,2051
 8001084:	1085da04 	addi	r2,r2,5992
 8001088:	18c7883a 	add	r3,r3,r3
 800108c:	18c7883a 	add	r3,r3,r3
 8001090:	10c5883a 	add	r2,r2,r3
 8001094:	10800017 	ldw	r2,0(r2)
 8001098:	e0bfee15 	stw	r2,-72(fp)
 800109c:	00000106 	br	80010a4 <main+0x6b8>
                }
                else {
                    myFreq = 0;
 80010a0:	e03fee15 	stw	zero,-72(fp)
                }
                // write that frequency
                *sikb = myFreq;
 80010a4:	e0ffee17 	ldw	r3,-72(fp)
 80010a8:	e0bff417 	ldw	r2,-48(fp)
 80010ac:	10c00015 	stw	r3,0(r2)

                // Do instant drum
                char do_drum = 0;
 80010b0:	e03fef05 	stb	zero,-68(fp)

                for (char i = 0; i < 6; i ++) {
 80010b4:	e03fef45 	stb	zero,-67(fp)
 80010b8:	00000c06 	br	80010ec <main+0x700>
                	if (kbdbuf.keycode[i] == 0x2c) {
 80010bc:	e0bfef47 	ldb	r2,-67(fp)
 80010c0:	e0fffe84 	addi	r3,fp,-6
 80010c4:	1885883a 	add	r2,r3,r2
 80010c8:	10800003 	ldbu	r2,0(r2)
 80010cc:	10803fcc 	andi	r2,r2,255
 80010d0:	10800b18 	cmpnei	r2,r2,44
 80010d4:	1000021e 	bne	r2,zero,80010e0 <main+0x6f4>
                		do_drum = 1;
 80010d8:	00800044 	movi	r2,1
 80010dc:	e0bfef05 	stb	r2,-68(fp)
                *sikb = myFreq;

                // Do instant drum
                char do_drum = 0;

                for (char i = 0; i < 6; i ++) {
 80010e0:	e0bfef43 	ldbu	r2,-67(fp)
 80010e4:	10800044 	addi	r2,r2,1
 80010e8:	e0bfef45 	stb	r2,-67(fp)
 80010ec:	e0bfef47 	ldb	r2,-67(fp)
 80010f0:	10800190 	cmplti	r2,r2,6
 80010f4:	103ff11e 	bne	r2,zero,80010bc <__alt_data_end+0xfc0010bc>
                	if (kbdbuf.keycode[i] == 0x2c) {
                		do_drum = 1;
                	}
                }

                *instant_drum = do_drum;
 80010f8:	e0ffef07 	ldb	r3,-68(fp)
 80010fc:	e0bff617 	ldw	r2,-40(fp)
 8001100:	10c00015 	stw	r3,0(r2)
 8001104:	003ecf06 	br	8000c44 <__alt_data_end+0xfc000c44>

				}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
 8001108:	80034bc0 	call	80034bc <GetUsbTaskState>
 800110c:	10803fcc 	andi	r2,r2,255
 8001110:	10803fd8 	cmpnei	r2,r2,255
 8001114:	1000071e 	bne	r2,zero,8001134 <main+0x748>
			if (!errorflag) {
 8001118:	e0bfeb03 	ldbu	r2,-84(fp)
 800111c:	103ec91e 	bne	r2,zero,8000c44 <__alt_data_end+0xfc000c44>
				errorflag = 1;
 8001120:	00800044 	movi	r2,1
 8001124:	e0bfeb05 	stb	r2,-84(fp)
				clearLED(9);
 8001128:	01000244 	movi	r4,9
 800112c:	80004bc0 	call	80004bc <clearLED>
 8001130:	003ec406 	br	8000c44 <__alt_data_end+0xfc000c44>
		} else //not in USB running state
		{

//			printf("USB task state: ");
//			printf("%x\n", GetUsbTaskState());
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
 8001134:	e0bfeac3 	ldbu	r2,-85(fp)
 8001138:	10000326 	beq	r2,zero,8001148 <main+0x75c>
				runningdebugflag = 0;
 800113c:	e03feac5 	stb	zero,-85(fp)
				MAX3421E_init();
 8001140:	80025240 	call	8002524 <MAX3421E_init>
				USB_init();
 8001144:	8002cb40 	call	8002cb4 <USB_init>
			}
			errorflag = 0;
 8001148:	e03feb05 	stb	zero,-84(fp)
			clearLED(9);
 800114c:	01000244 	movi	r4,9
 8001150:	80004bc0 	call	80004bc <clearLED>
 8001154:	003ebb06 	br	8000c44 <__alt_data_end+0xfc000c44>
				runningdebugflag = 1;
				device = GetDriverandReport();
			} else if (device == 1) {
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
				if (rcode == hrNAK) { continue; //NAK means no new data
 8001158:	0001883a 	nop
 800115c:	003eb906 	br	8000c44 <__alt_data_end+0xfc000c44>
				} else if (rcode) {

					continue;
 8001160:	0001883a 	nop
			}
			errorflag = 0;
			clearLED(9);
		}

	}
 8001164:	003eb706 	br	8000c44 <__alt_data_end+0xfc000c44>

08001168 <main3>:
	return 0;
}

int main3(){
 8001168:	defffa04 	addi	sp,sp,-24
 800116c:	dfc00515 	stw	ra,20(sp)
 8001170:	df000415 	stw	fp,16(sp)
 8001174:	df000404 	addi	fp,sp,16
	while(1){

		unsigned * si = 0x4000;
 8001178:	00900004 	movi	r2,16384
 800117c:	e0bfff15 	stw	r2,-4(fp)
		int freq = 0;
 8001180:	e03ffc15 	stw	zero,-16(fp)
		int j=0;
 8001184:	e03ffd15 	stw	zero,-12(fp)
		while(1){
			for(int i=0; i<100000; i++){
 8001188:	e03ffe15 	stw	zero,-8(fp)
 800118c:	00000306 	br	800119c <main3+0x34>
 8001190:	e0bffe17 	ldw	r2,-8(fp)
 8001194:	10800044 	addi	r2,r2,1
 8001198:	e0bffe15 	stw	r2,-8(fp)
 800119c:	e0fffe17 	ldw	r3,-8(fp)
 80011a0:	008000b4 	movhi	r2,2
 80011a4:	10a1a7c4 	addi	r2,r2,-31073
 80011a8:	10fff90e 	bge	r2,r3,8001190 <__alt_data_end+0xfc001190>

			}
			printf("f = %d", freq);
 80011ac:	e17ffc17 	ldw	r5,-16(fp)
 80011b0:	010200f4 	movhi	r4,2051
 80011b4:	2104e204 	addi	r4,r4,5000
 80011b8:	80037a40 	call	80037a4 <printf>
			freq = freq_lut[(j++)%sizeof(freq_lut)];
 80011bc:	e0bffd17 	ldw	r2,-12(fp)
 80011c0:	10c00044 	addi	r3,r2,1
 80011c4:	e0fffd15 	stw	r3,-12(fp)
 80011c8:	01407804 	movi	r5,480
 80011cc:	1009883a 	mov	r4,r2
 80011d0:	80036f40 	call	80036f4 <__umodsi3>
 80011d4:	1007883a 	mov	r3,r2
 80011d8:	008200f4 	movhi	r2,2051
 80011dc:	1085da04 	addi	r2,r2,5992
 80011e0:	18c7883a 	add	r3,r3,r3
 80011e4:	18c7883a 	add	r3,r3,r3
 80011e8:	10c5883a 	add	r2,r2,r3
 80011ec:	10800017 	ldw	r2,0(r2)
 80011f0:	e0bffc15 	stw	r2,-16(fp)
			*si = freq;
 80011f4:	e0fffc17 	ldw	r3,-16(fp)
 80011f8:	e0bfff17 	ldw	r2,-4(fp)
 80011fc:	10c00015 	stw	r3,0(r2)
		}
 8001200:	003fe106 	br	8001188 <__alt_data_end+0xfc001188>

08001204 <delay>:
	}
}

void delay(int ms){
 8001204:	defffc04 	addi	sp,sp,-16
 8001208:	dfc00315 	stw	ra,12(sp)
 800120c:	df000215 	stw	fp,8(sp)
 8001210:	df000204 	addi	fp,sp,8
 8001214:	e13fff15 	stw	r4,-4(fp)
	for(int i=0; i<ms*40; i++){
 8001218:	e03ffe15 	stw	zero,-8(fp)
 800121c:	00000306 	br	800122c <delay+0x28>
 8001220:	e0bffe17 	ldw	r2,-8(fp)
 8001224:	10800044 	addi	r2,r2,1
 8001228:	e0bffe15 	stw	r2,-8(fp)
 800122c:	01400a04 	movi	r5,40
 8001230:	e13fff17 	ldw	r4,-4(fp)
 8001234:	800374c0 	call	800374c <__mulsi3>
 8001238:	1007883a 	mov	r3,r2
 800123c:	e0bffe17 	ldw	r2,-8(fp)
 8001240:	10fff716 	blt	r2,r3,8001220 <__alt_data_end+0xfc001220>

	}
}
 8001244:	0001883a 	nop
 8001248:	e037883a 	mov	sp,fp
 800124c:	dfc00117 	ldw	ra,4(sp)
 8001250:	df000017 	ldw	fp,0(sp)
 8001254:	dec00204 	addi	sp,sp,8
 8001258:	f800283a 	ret

0800125c <main4>:
int main4(){
 800125c:	defff404 	addi	sp,sp,-48
 8001260:	dfc00b15 	stw	ra,44(sp)
 8001264:	df000a15 	stw	fp,40(sp)
 8001268:	df000a04 	addi	fp,sp,40

	int freq = 0;
 800126c:	e03ff615 	stw	zero,-40(fp)

	const int offset = 2;
 8001270:	00800084 	movi	r2,2
 8001274:	e0bffc15 	stw	r2,-16(fp)

	int ph0 = 0;
 8001278:	e03ff715 	stw	zero,-36(fp)
	int ph1 = 0;
 800127c:	e03ff815 	stw	zero,-32(fp)
	int ph2 = 0;
 8001280:	e03ff915 	stw	zero,-28(fp)

	unsigned* si0 = 0x4000;
 8001284:	00900004 	movi	r2,16384
 8001288:	e0bffd15 	stw	r2,-12(fp)
	unsigned* si1 = 0x0120;
 800128c:	00804804 	movi	r2,288
 8001290:	e0bffe15 	stw	r2,-8(fp)
	unsigned* si2 = 0x00b0;
 8001294:	00802c04 	movi	r2,176
 8001298:	e0bfff15 	stw	r2,-4(fp)

//	unsigned* drum = 0x80000;
//	*drum = 436;

	while(1) {
		if (*(si0)) {
 800129c:	e0bffd17 	ldw	r2,-12(fp)
 80012a0:	10800017 	ldw	r2,0(r2)
 80012a4:	10003726 	beq	r2,zero,8001384 <main4+0x128>
			if(chan0[ph0*3+1]!=0){
 80012a8:	e0fff717 	ldw	r3,-36(fp)
 80012ac:	1805883a 	mov	r2,r3
 80012b0:	1085883a 	add	r2,r2,r2
 80012b4:	10c5883a 	add	r2,r2,r3
 80012b8:	10c00044 	addi	r3,r2,1
 80012bc:	00820074 	movhi	r2,2049
 80012c0:	108c0004 	addi	r2,r2,12288
 80012c4:	18c7883a 	add	r3,r3,r3
 80012c8:	18c7883a 	add	r3,r3,r3
 80012cc:	10c5883a 	add	r2,r2,r3
 80012d0:	10800017 	ldw	r2,0(r2)
 80012d4:	10001226 	beq	r2,zero,8001320 <main4+0xc4>
				freq = freq_lut[chan0[ph0*3]];
 80012d8:	e0fff717 	ldw	r3,-36(fp)
 80012dc:	1805883a 	mov	r2,r3
 80012e0:	1085883a 	add	r2,r2,r2
 80012e4:	10c7883a 	add	r3,r2,r3
 80012e8:	00820074 	movhi	r2,2049
 80012ec:	108c0004 	addi	r2,r2,12288
 80012f0:	18c7883a 	add	r3,r3,r3
 80012f4:	18c7883a 	add	r3,r3,r3
 80012f8:	10c5883a 	add	r2,r2,r3
 80012fc:	10c00017 	ldw	r3,0(r2)
 8001300:	008200f4 	movhi	r2,2051
 8001304:	1085da04 	addi	r2,r2,5992
 8001308:	18c7883a 	add	r3,r3,r3
 800130c:	18c7883a 	add	r3,r3,r3
 8001310:	10c5883a 	add	r2,r2,r3
 8001314:	10800017 	ldw	r2,0(r2)
 8001318:	e0bff615 	stw	r2,-40(fp)
 800131c:	00000106 	br	8001324 <main4+0xc8>
			}
			else{
				freq = 0;
 8001320:	e03ff615 	stw	zero,-40(fp)
			}
			*(si0) = (chan0[(ph0+1)*3+2]*offset << 16) | freq;
 8001324:	e0bff717 	ldw	r2,-36(fp)
 8001328:	10c00044 	addi	r3,r2,1
 800132c:	1805883a 	mov	r2,r3
 8001330:	1085883a 	add	r2,r2,r2
 8001334:	10c5883a 	add	r2,r2,r3
 8001338:	10c00084 	addi	r3,r2,2
 800133c:	00820074 	movhi	r2,2049
 8001340:	108c0004 	addi	r2,r2,12288
 8001344:	18c7883a 	add	r3,r3,r3
 8001348:	18c7883a 	add	r3,r3,r3
 800134c:	10c5883a 	add	r2,r2,r3
 8001350:	10800017 	ldw	r2,0(r2)
 8001354:	e17ffc17 	ldw	r5,-16(fp)
 8001358:	1009883a 	mov	r4,r2
 800135c:	800374c0 	call	800374c <__mulsi3>
 8001360:	1006943a 	slli	r3,r2,16
 8001364:	e0bff617 	ldw	r2,-40(fp)
 8001368:	1884b03a 	or	r2,r3,r2
 800136c:	1007883a 	mov	r3,r2
 8001370:	e0bffd17 	ldw	r2,-12(fp)
 8001374:	10c00015 	stw	r3,0(r2)
			ph0 ++;
 8001378:	e0bff717 	ldw	r2,-36(fp)
 800137c:	10800044 	addi	r2,r2,1
 8001380:	e0bff715 	stw	r2,-36(fp)
		}
		if (*(si1)) {
 8001384:	e0bffe17 	ldw	r2,-8(fp)
 8001388:	10800017 	ldw	r2,0(r2)
 800138c:	10003726 	beq	r2,zero,800146c <main4+0x210>
			if(chan1[ph1*3+1]!=0){
 8001390:	e0fff817 	ldw	r3,-32(fp)
 8001394:	1805883a 	mov	r2,r3
 8001398:	1085883a 	add	r2,r2,r2
 800139c:	10c5883a 	add	r2,r2,r3
 80013a0:	10c00044 	addi	r3,r2,1
 80013a4:	008200b4 	movhi	r2,2050
 80013a8:	10a41e04 	addi	r2,r2,-28552
 80013ac:	18c7883a 	add	r3,r3,r3
 80013b0:	18c7883a 	add	r3,r3,r3
 80013b4:	10c5883a 	add	r2,r2,r3
 80013b8:	10800017 	ldw	r2,0(r2)
 80013bc:	10001226 	beq	r2,zero,8001408 <main4+0x1ac>
				freq2 = freq_lut[chan1[ph1*3]];
 80013c0:	e0fff817 	ldw	r3,-32(fp)
 80013c4:	1805883a 	mov	r2,r3
 80013c8:	1085883a 	add	r2,r2,r2
 80013cc:	10c7883a 	add	r3,r2,r3
 80013d0:	008200b4 	movhi	r2,2050
 80013d4:	10a41e04 	addi	r2,r2,-28552
 80013d8:	18c7883a 	add	r3,r3,r3
 80013dc:	18c7883a 	add	r3,r3,r3
 80013e0:	10c5883a 	add	r2,r2,r3
 80013e4:	10c00017 	ldw	r3,0(r2)
 80013e8:	008200f4 	movhi	r2,2051
 80013ec:	1085da04 	addi	r2,r2,5992
 80013f0:	18c7883a 	add	r3,r3,r3
 80013f4:	18c7883a 	add	r3,r3,r3
 80013f8:	10c5883a 	add	r2,r2,r3
 80013fc:	10800017 	ldw	r2,0(r2)
 8001400:	e0bffa15 	stw	r2,-24(fp)
 8001404:	00000106 	br	800140c <main4+0x1b0>
			}
			else{
				freq2 = 0;
 8001408:	e03ffa15 	stw	zero,-24(fp)
			}
			*(si1) = (chan1[(ph1+1)*3+2]*offset << 16) | freq2;
 800140c:	e0bff817 	ldw	r2,-32(fp)
 8001410:	10c00044 	addi	r3,r2,1
 8001414:	1805883a 	mov	r2,r3
 8001418:	1085883a 	add	r2,r2,r2
 800141c:	10c5883a 	add	r2,r2,r3
 8001420:	10c00084 	addi	r3,r2,2
 8001424:	008200b4 	movhi	r2,2050
 8001428:	10a41e04 	addi	r2,r2,-28552
 800142c:	18c7883a 	add	r3,r3,r3
 8001430:	18c7883a 	add	r3,r3,r3
 8001434:	10c5883a 	add	r2,r2,r3
 8001438:	10800017 	ldw	r2,0(r2)
 800143c:	e17ffc17 	ldw	r5,-16(fp)
 8001440:	1009883a 	mov	r4,r2
 8001444:	800374c0 	call	800374c <__mulsi3>
 8001448:	1006943a 	slli	r3,r2,16
 800144c:	e0bffa17 	ldw	r2,-24(fp)
 8001450:	1884b03a 	or	r2,r3,r2
 8001454:	1007883a 	mov	r3,r2
 8001458:	e0bffe17 	ldw	r2,-8(fp)
 800145c:	10c00015 	stw	r3,0(r2)
			ph1 ++;
 8001460:	e0bff817 	ldw	r2,-32(fp)
 8001464:	10800044 	addi	r2,r2,1
 8001468:	e0bff815 	stw	r2,-32(fp)
		}
		if (*(si2)) {
 800146c:	e0bfff17 	ldw	r2,-4(fp)
 8001470:	10800017 	ldw	r2,0(r2)
 8001474:	103f8926 	beq	r2,zero,800129c <__alt_data_end+0xfc00129c>
			if(chan2[ph2*3+1]!=0){
 8001478:	e0fff917 	ldw	r3,-28(fp)
 800147c:	1805883a 	mov	r2,r3
 8001480:	1085883a 	add	r2,r2,r2
 8001484:	10c5883a 	add	r2,r2,r3
 8001488:	10c00044 	addi	r3,r2,1
 800148c:	008200b4 	movhi	r2,2050
 8001490:	10bc3c04 	addi	r2,r2,-3856
 8001494:	18c7883a 	add	r3,r3,r3
 8001498:	18c7883a 	add	r3,r3,r3
 800149c:	10c5883a 	add	r2,r2,r3
 80014a0:	10800017 	ldw	r2,0(r2)
 80014a4:	10001226 	beq	r2,zero,80014f0 <main4+0x294>
				freq3 = freq_lut[chan2[ph2*3]];
 80014a8:	e0fff917 	ldw	r3,-28(fp)
 80014ac:	1805883a 	mov	r2,r3
 80014b0:	1085883a 	add	r2,r2,r2
 80014b4:	10c7883a 	add	r3,r2,r3
 80014b8:	008200b4 	movhi	r2,2050
 80014bc:	10bc3c04 	addi	r2,r2,-3856
 80014c0:	18c7883a 	add	r3,r3,r3
 80014c4:	18c7883a 	add	r3,r3,r3
 80014c8:	10c5883a 	add	r2,r2,r3
 80014cc:	10c00017 	ldw	r3,0(r2)
 80014d0:	008200f4 	movhi	r2,2051
 80014d4:	1085da04 	addi	r2,r2,5992
 80014d8:	18c7883a 	add	r3,r3,r3
 80014dc:	18c7883a 	add	r3,r3,r3
 80014e0:	10c5883a 	add	r2,r2,r3
 80014e4:	10800017 	ldw	r2,0(r2)
 80014e8:	e0bffb15 	stw	r2,-20(fp)
 80014ec:	00000106 	br	80014f4 <main4+0x298>
			}
			else{
				freq3 = 0;
 80014f0:	e03ffb15 	stw	zero,-20(fp)
			}
			*(si2) = (chan2[(ph2+1)*3+2]*offset << 16) | freq3;
 80014f4:	e0bff917 	ldw	r2,-28(fp)
 80014f8:	10c00044 	addi	r3,r2,1
 80014fc:	1805883a 	mov	r2,r3
 8001500:	1085883a 	add	r2,r2,r2
 8001504:	10c5883a 	add	r2,r2,r3
 8001508:	10c00084 	addi	r3,r2,2
 800150c:	008200b4 	movhi	r2,2050
 8001510:	10bc3c04 	addi	r2,r2,-3856
 8001514:	18c7883a 	add	r3,r3,r3
 8001518:	18c7883a 	add	r3,r3,r3
 800151c:	10c5883a 	add	r2,r2,r3
 8001520:	10800017 	ldw	r2,0(r2)
 8001524:	e17ffc17 	ldw	r5,-16(fp)
 8001528:	1009883a 	mov	r4,r2
 800152c:	800374c0 	call	800374c <__mulsi3>
 8001530:	1006943a 	slli	r3,r2,16
 8001534:	e0bffb17 	ldw	r2,-20(fp)
 8001538:	1884b03a 	or	r2,r3,r2
 800153c:	1007883a 	mov	r3,r2
 8001540:	e0bfff17 	ldw	r2,-4(fp)
 8001544:	10c00015 	stw	r3,0(r2)
			ph2 ++;
 8001548:	e0bff917 	ldw	r2,-28(fp)
 800154c:	10800044 	addi	r2,r2,1
 8001550:	e0bff915 	stw	r2,-28(fp)
		}
	}
 8001554:	003f5106 	br	800129c <__alt_data_end+0xfc00129c>

08001558 <main6>:
//	while(1) {
////		printf("%d\n", *drum);
//	}
//}

int main6() {
 8001558:	defffe04 	addi	sp,sp,-8
 800155c:	df000115 	stw	fp,4(sp)
 8001560:	df000104 	addi	fp,sp,4
	unsigned* lights = 0x000c0000;
 8001564:	00800334 	movhi	r2,12
 8001568:	e0bfff15 	stw	r2,-4(fp)
	*lights = 0xff;
 800156c:	e0bfff17 	ldw	r2,-4(fp)
 8001570:	00c03fc4 	movi	r3,255
 8001574:	10c00015 	stw	r3,0(r2)
}
 8001578:	0001883a 	nop
 800157c:	e037883a 	mov	sp,fp
 8001580:	df000017 	ldw	fp,0(sp)
 8001584:	dec00104 	addi	sp,sp,4
 8001588:	f800283a 	ret

0800158c <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 800158c:	defff204 	addi	sp,sp,-56
 8001590:	dfc00d15 	stw	ra,52(sp)
 8001594:	df000c15 	stw	fp,48(sp)
 8001598:	df000c04 	addi	fp,sp,48
 800159c:	2005883a 	mov	r2,r4
 80015a0:	e17fff15 	stw	r5,-4(fp)
 80015a4:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 80015a8:	008200f4 	movhi	r2,2051
 80015ac:	10948a04 	addi	r2,r2,21032
 80015b0:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 80015b4:	008200f4 	movhi	r2,2051
 80015b8:	10948a04 	addi	r2,r2,21032
 80015bc:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 80015c0:	e0fffe03 	ldbu	r3,-8(fp)
 80015c4:	008200f4 	movhi	r2,2051
 80015c8:	10948a04 	addi	r2,r2,21032
 80015cc:	d8800415 	stw	r2,16(sp)
 80015d0:	00800244 	movi	r2,9
 80015d4:	d8800315 	stw	r2,12(sp)
 80015d8:	d8000215 	stw	zero,8(sp)
 80015dc:	00800084 	movi	r2,2
 80015e0:	d8800115 	stw	r2,4(sp)
 80015e4:	d8000015 	stw	zero,0(sp)
 80015e8:	01c00184 	movi	r7,6
 80015ec:	01802004 	movi	r6,128
 80015f0:	000b883a 	mov	r5,zero
 80015f4:	1809883a 	mov	r4,r3
 80015f8:	800271c0 	call	800271c <XferCtrlReq>
 80015fc:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 8001600:	e0bffc03 	ldbu	r2,-16(fp)
 8001604:	10000226 	beq	r2,zero,8001610 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 8001608:	0005883a 	mov	r2,zero
 800160c:	0000dc06 	br	8001980 <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 8001610:	e0bffa17 	ldw	r2,-24(fp)
 8001614:	1080008b 	ldhu	r2,2(r2)
 8001618:	10bfffcc 	andi	r2,r2,65535
 800161c:	10804070 	cmpltui	r2,r2,257
 8001620:	1000031e 	bne	r2,zero,8001630 <HIDMProbe+0xa4>
		total_length = 256;
 8001624:	00804004 	movi	r2,256
 8001628:	e0bff90d 	sth	r2,-28(fp)
 800162c:	00000306 	br	800163c <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8001630:	e0bffa17 	ldw	r2,-24(fp)
 8001634:	1080008b 	ldhu	r2,2(r2)
 8001638:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 800163c:	e13ffe03 	ldbu	r4,-8(fp)
 8001640:	e0fff90b 	ldhu	r3,-28(fp)
 8001644:	008200f4 	movhi	r2,2051
 8001648:	10948a04 	addi	r2,r2,21032
 800164c:	d8800415 	stw	r2,16(sp)
 8001650:	d8c00315 	stw	r3,12(sp)
 8001654:	d8000215 	stw	zero,8(sp)
 8001658:	00800084 	movi	r2,2
 800165c:	d8800115 	stw	r2,4(sp)
 8001660:	d8000015 	stw	zero,0(sp)
 8001664:	01c00184 	movi	r7,6
 8001668:	01802004 	movi	r6,128
 800166c:	000b883a 	mov	r5,zero
 8001670:	800271c0 	call	800271c <XferCtrlReq>
 8001674:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 8001678:	e0bffc03 	ldbu	r2,-16(fp)
 800167c:	10000226 	beq	r2,zero,8001688 <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 8001680:	0005883a 	mov	r2,zero
 8001684:	0000be06 	br	8001980 <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 8001688:	e0bffa17 	ldw	r2,-24(fp)
 800168c:	10800143 	ldbu	r2,5(r2)
 8001690:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 8001694:	0000b306 	br	8001964 <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 8001698:	e0bffa17 	ldw	r2,-24(fp)
 800169c:	10800043 	ldbu	r2,1(r2)
 80016a0:	10803fcc 	andi	r2,r2,255
 80016a4:	10800120 	cmpeqi	r2,r2,4
 80016a8:	1000091e 	bne	r2,zero,80016d0 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 80016ac:	e0bffa17 	ldw	r2,-24(fp)
 80016b0:	10800003 	ldbu	r2,0(r2)
 80016b4:	10803fcc 	andi	r2,r2,255
 80016b8:	e0fffb17 	ldw	r3,-20(fp)
 80016bc:	1885883a 	add	r2,r3,r2
 80016c0:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 80016c4:	e0bffb17 	ldw	r2,-20(fp)
 80016c8:	e0bffa15 	stw	r2,-24(fp)
 80016cc:	0000a506 	br	8001964 <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 80016d0:	e0bffa17 	ldw	r2,-24(fp)
 80016d4:	10800143 	ldbu	r2,5(r2)
 80016d8:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 80016dc:	e0bffa17 	ldw	r2,-24(fp)
 80016e0:	10800183 	ldbu	r2,6(r2)
 80016e4:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 80016e8:	e0bffa17 	ldw	r2,-24(fp)
 80016ec:	108001c3 	ldbu	r2,7(r2)
 80016f0:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 80016f4:	e0bffc83 	ldbu	r2,-14(fp)
 80016f8:	108000d8 	cmpnei	r2,r2,3
 80016fc:	1000971e 	bne	r2,zero,800195c <HIDMProbe+0x3d0>
 8001700:	e0bffcc3 	ldbu	r2,-13(fp)
 8001704:	10800058 	cmpnei	r2,r2,1
 8001708:	1000941e 	bne	r2,zero,800195c <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
 800170c:	e0bffd03 	ldbu	r2,-12(fp)
 8001710:	10800098 	cmpnei	r2,r2,2
 8001714:	1000911e 	bne	r2,zero,800195c <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 8001718:	e0fffe03 	ldbu	r3,-8(fp)
 800171c:	008200f4 	movhi	r2,2051
 8001720:	1094ca04 	addi	r2,r2,21288
 8001724:	180690fa 	slli	r3,r3,3
 8001728:	10c5883a 	add	r2,r2,r3
 800172c:	10800104 	addi	r2,r2,4
 8001730:	00c00084 	movi	r3,2
 8001734:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 8001738:	e0fffe03 	ldbu	r3,-8(fp)
 800173c:	008200f4 	movhi	r2,2051
 8001740:	1094ca04 	addi	r2,r2,21288
 8001744:	180690fa 	slli	r3,r3,3
 8001748:	10c5883a 	add	r2,r2,r3
 800174c:	10800017 	ldw	r2,0(r2)
 8001750:	1080008b 	ldhu	r2,2(r2)
 8001754:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 8001758:	8001d9c0 	call	8001d9c <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 800175c:	e0fffe03 	ldbu	r3,-8(fp)
 8001760:	008200f4 	movhi	r2,2051
 8001764:	1094ca04 	addi	r2,r2,21288
 8001768:	180690fa 	slli	r3,r3,3
 800176c:	10c7883a 	add	r3,r2,r3
 8001770:	008200f4 	movhi	r2,2051
 8001774:	10947604 	addi	r2,r2,20952
 8001778:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 800177c:	e0fffe03 	ldbu	r3,-8(fp)
 8001780:	008200f4 	movhi	r2,2051
 8001784:	1094ca04 	addi	r2,r2,21288
 8001788:	180690fa 	slli	r3,r3,3
 800178c:	10c5883a 	add	r2,r2,r3
 8001790:	10800017 	ldw	r2,0(r2)
 8001794:	e0fffd43 	ldbu	r3,-11(fp)
 8001798:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 800179c:	e0bffa17 	ldw	r2,-24(fp)
 80017a0:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
 80017a4:	d0a75945 	stb	r2,-25243(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
 80017a8:	e0bffe03 	ldbu	r2,-8(fp)
 80017ac:	d0a75905 	stb	r2,-25244(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 80017b0:	e0bffa17 	ldw	r2,-24(fp)
 80017b4:	10800003 	ldbu	r2,0(r2)
 80017b8:	10803fcc 	andi	r2,r2,255
 80017bc:	e0fffb17 	ldw	r3,-20(fp)
 80017c0:	1885883a 	add	r2,r3,r2
 80017c4:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 80017c8:	e0bffb17 	ldw	r2,-20(fp)
 80017cc:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 80017d0:	00005b06 	br	8001940 <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 80017d4:	e0bffa17 	ldw	r2,-24(fp)
 80017d8:	10800043 	ldbu	r2,1(r2)
 80017dc:	10803fcc 	andi	r2,r2,255
 80017e0:	10800160 	cmpeqi	r2,r2,5
 80017e4:	1000091e 	bne	r2,zero,800180c <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 80017e8:	e0bffa17 	ldw	r2,-24(fp)
 80017ec:	10800003 	ldbu	r2,0(r2)
 80017f0:	10803fcc 	andi	r2,r2,255
 80017f4:	e0fffb17 	ldw	r3,-20(fp)
 80017f8:	1885883a 	add	r2,r3,r2
 80017fc:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 8001800:	e0bffb17 	ldw	r2,-20(fp)
 8001804:	e0bffa15 	stw	r2,-24(fp)
 8001808:	00004d06 	br	8001940 <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 800180c:	e0fffe03 	ldbu	r3,-8(fp)
 8001810:	008200f4 	movhi	r2,2051
 8001814:	1094ca04 	addi	r2,r2,21288
 8001818:	180690fa 	slli	r3,r3,3
 800181c:	10c5883a 	add	r2,r2,r3
 8001820:	10800017 	ldw	r2,0(r2)
 8001824:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 8001828:	e0fffa17 	ldw	r3,-24(fp)
 800182c:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8001830:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8001834:	e0fffe03 	ldbu	r3,-8(fp)
 8001838:	008200f4 	movhi	r2,2051
 800183c:	1094ca04 	addi	r2,r2,21288
 8001840:	180690fa 	slli	r3,r3,3
 8001844:	10c5883a 	add	r2,r2,r3
 8001848:	10800017 	ldw	r2,0(r2)
 800184c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8001850:	e0fffa17 	ldw	r3,-24(fp)
 8001854:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8001858:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 800185c:	e0fffe03 	ldbu	r3,-8(fp)
 8001860:	008200f4 	movhi	r2,2051
 8001864:	1094ca04 	addi	r2,r2,21288
 8001868:	180690fa 	slli	r3,r3,3
 800186c:	10c5883a 	add	r2,r2,r3
 8001870:	10800017 	ldw	r2,0(r2)
 8001874:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 8001878:	e0fffa17 	ldw	r3,-24(fp)
 800187c:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8001880:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8001884:	e0fffe03 	ldbu	r3,-8(fp)
 8001888:	008200f4 	movhi	r2,2051
 800188c:	1094ca04 	addi	r2,r2,21288
 8001890:	180690fa 	slli	r3,r3,3
 8001894:	10c5883a 	add	r2,r2,r3
 8001898:	10800017 	ldw	r2,0(r2)
 800189c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 80018a0:	e0fffa17 	ldw	r3,-24(fp)
 80018a4:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 80018a8:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 80018ac:	e0fffe03 	ldbu	r3,-8(fp)
 80018b0:	e0bffc43 	ldbu	r2,-15(fp)
 80018b4:	d8000415 	stw	zero,16(sp)
 80018b8:	d8000315 	stw	zero,12(sp)
 80018bc:	d8000215 	stw	zero,8(sp)
 80018c0:	d8000115 	stw	zero,4(sp)
 80018c4:	d8800015 	stw	r2,0(sp)
 80018c8:	01c00244 	movi	r7,9
 80018cc:	000d883a 	mov	r6,zero
 80018d0:	000b883a 	mov	r5,zero
 80018d4:	1809883a 	mov	r4,r3
 80018d8:	800271c0 	call	800271c <XferCtrlReq>
 80018dc:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 80018e0:	e0bffc03 	ldbu	r2,-16(fp)
 80018e4:	10000226 	beq	r2,zero,80018f0 <HIDMProbe+0x364>
							return (FALSE);
 80018e8:	0005883a 	mov	r2,zero
 80018ec:	00002406 	br	8001980 <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 80018f0:	e0fffe03 	ldbu	r3,-8(fp)
 80018f4:	d0a75943 	ldbu	r2,-25243(gp)
 80018f8:	10803fcc 	andi	r2,r2,255
 80018fc:	d8000415 	stw	zero,16(sp)
 8001900:	d8000315 	stw	zero,12(sp)
 8001904:	d8800215 	stw	r2,8(sp)
 8001908:	d8000115 	stw	zero,4(sp)
 800190c:	d8000015 	stw	zero,0(sp)
 8001910:	01c002c4 	movi	r7,11
 8001914:	01800844 	movi	r6,33
 8001918:	000b883a 	mov	r5,zero
 800191c:	1809883a 	mov	r4,r3
 8001920:	800271c0 	call	800271c <XferCtrlReq>
 8001924:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 8001928:	e0bffc03 	ldbu	r2,-16(fp)
 800192c:	10000226 	beq	r2,zero,8001938 <HIDMProbe+0x3ac>
							return (FALSE);
 8001930:	0005883a 	mov	r2,zero
 8001934:	00001206 	br	8001980 <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
 8001938:	00800044 	movi	r2,1
 800193c:	00001006 	br	8001980 <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 8001940:	e0fff90b 	ldhu	r3,-28(fp)
 8001944:	008200f4 	movhi	r2,2051
 8001948:	10948a04 	addi	r2,r2,21032
 800194c:	1885883a 	add	r2,r3,r2
 8001950:	e0fffb17 	ldw	r3,-20(fp)
 8001954:	18bf9f36 	bltu	r3,r2,80017d4 <__alt_data_end+0xfc0017d4>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8001958:	00000206 	br	8001964 <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 800195c:	0005883a 	mov	r2,zero
 8001960:	00000706 	br	8001980 <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 8001964:	e0fff90b 	ldhu	r3,-28(fp)
 8001968:	008200f4 	movhi	r2,2051
 800196c:	10948a04 	addi	r2,r2,21032
 8001970:	1885883a 	add	r2,r3,r2
 8001974:	e0fffb17 	ldw	r3,-20(fp)
 8001978:	18bf4736 	bltu	r3,r2,8001698 <__alt_data_end+0xfc001698>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 800197c:	0005883a 	mov	r2,zero
}
 8001980:	e037883a 	mov	sp,fp
 8001984:	dfc00117 	ldw	ra,4(sp)
 8001988:	df000017 	ldw	fp,0(sp)
 800198c:	dec00204 	addi	sp,sp,8
 8001990:	f800283a 	ret

08001994 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 8001994:	defff204 	addi	sp,sp,-56
 8001998:	dfc00d15 	stw	ra,52(sp)
 800199c:	df000c15 	stw	fp,48(sp)
 80019a0:	df000c04 	addi	fp,sp,48
 80019a4:	2005883a 	mov	r2,r4
 80019a8:	e17fff15 	stw	r5,-4(fp)
 80019ac:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 80019b0:	008200f4 	movhi	r2,2051
 80019b4:	10948a04 	addi	r2,r2,21032
 80019b8:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 80019bc:	008200f4 	movhi	r2,2051
 80019c0:	10948a04 	addi	r2,r2,21032
 80019c4:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 80019c8:	e0fffe03 	ldbu	r3,-8(fp)
 80019cc:	008200f4 	movhi	r2,2051
 80019d0:	10948a04 	addi	r2,r2,21032
 80019d4:	d8800415 	stw	r2,16(sp)
 80019d8:	00800244 	movi	r2,9
 80019dc:	d8800315 	stw	r2,12(sp)
 80019e0:	d8000215 	stw	zero,8(sp)
 80019e4:	00800084 	movi	r2,2
 80019e8:	d8800115 	stw	r2,4(sp)
 80019ec:	d8000015 	stw	zero,0(sp)
 80019f0:	01c00184 	movi	r7,6
 80019f4:	01802004 	movi	r6,128
 80019f8:	000b883a 	mov	r5,zero
 80019fc:	1809883a 	mov	r4,r3
 8001a00:	800271c0 	call	800271c <XferCtrlReq>
 8001a04:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
 8001a08:	e0bffc03 	ldbu	r2,-16(fp)
 8001a0c:	10000226 	beq	r2,zero,8001a18 <HIDKProbe+0x84>
		return (FALSE);
 8001a10:	0005883a 	mov	r2,zero
 8001a14:	0000dc06 	br	8001d88 <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 8001a18:	e0bffa17 	ldw	r2,-24(fp)
 8001a1c:	1080008b 	ldhu	r2,2(r2)
 8001a20:	10bfffcc 	andi	r2,r2,65535
 8001a24:	10804070 	cmpltui	r2,r2,257
 8001a28:	1000031e 	bne	r2,zero,8001a38 <HIDKProbe+0xa4>
		total_length = 256;
 8001a2c:	00804004 	movi	r2,256
 8001a30:	e0bff90d 	sth	r2,-28(fp)
 8001a34:	00000306 	br	8001a44 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8001a38:	e0bffa17 	ldw	r2,-24(fp)
 8001a3c:	1080008b 	ldhu	r2,2(r2)
 8001a40:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8001a44:	e13ffe03 	ldbu	r4,-8(fp)
 8001a48:	e0fff90b 	ldhu	r3,-28(fp)
 8001a4c:	008200f4 	movhi	r2,2051
 8001a50:	10948a04 	addi	r2,r2,21032
 8001a54:	d8800415 	stw	r2,16(sp)
 8001a58:	d8c00315 	stw	r3,12(sp)
 8001a5c:	d8000215 	stw	zero,8(sp)
 8001a60:	00800084 	movi	r2,2
 8001a64:	d8800115 	stw	r2,4(sp)
 8001a68:	d8000015 	stw	zero,0(sp)
 8001a6c:	01c00184 	movi	r7,6
 8001a70:	01802004 	movi	r6,128
 8001a74:	000b883a 	mov	r5,zero
 8001a78:	800271c0 	call	800271c <XferCtrlReq>
 8001a7c:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 8001a80:	e0bffc03 	ldbu	r2,-16(fp)
 8001a84:	10000226 	beq	r2,zero,8001a90 <HIDKProbe+0xfc>
		return (FALSE);
 8001a88:	0005883a 	mov	r2,zero
 8001a8c:	0000be06 	br	8001d88 <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 8001a90:	e0bffa17 	ldw	r2,-24(fp)
 8001a94:	10800143 	ldbu	r2,5(r2)
 8001a98:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8001a9c:	0000b306 	br	8001d6c <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 8001aa0:	e0bffa17 	ldw	r2,-24(fp)
 8001aa4:	10800043 	ldbu	r2,1(r2)
 8001aa8:	10803fcc 	andi	r2,r2,255
 8001aac:	10800120 	cmpeqi	r2,r2,4
 8001ab0:	1000091e 	bne	r2,zero,8001ad8 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8001ab4:	e0bffa17 	ldw	r2,-24(fp)
 8001ab8:	10800003 	ldbu	r2,0(r2)
 8001abc:	10803fcc 	andi	r2,r2,255
 8001ac0:	e0fffb17 	ldw	r3,-20(fp)
 8001ac4:	1885883a 	add	r2,r3,r2
 8001ac8:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 8001acc:	e0bffb17 	ldw	r2,-20(fp)
 8001ad0:	e0bffa15 	stw	r2,-24(fp)
 8001ad4:	0000a506 	br	8001d6c <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 8001ad8:	e0bffa17 	ldw	r2,-24(fp)
 8001adc:	10800143 	ldbu	r2,5(r2)
 8001ae0:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 8001ae4:	e0bffa17 	ldw	r2,-24(fp)
 8001ae8:	10800183 	ldbu	r2,6(r2)
 8001aec:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 8001af0:	e0bffa17 	ldw	r2,-24(fp)
 8001af4:	108001c3 	ldbu	r2,7(r2)
 8001af8:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8001afc:	e0bffc83 	ldbu	r2,-14(fp)
 8001b00:	108000d8 	cmpnei	r2,r2,3
 8001b04:	1000971e 	bne	r2,zero,8001d64 <HIDKProbe+0x3d0>
 8001b08:	e0bffcc3 	ldbu	r2,-13(fp)
 8001b0c:	10800058 	cmpnei	r2,r2,1
 8001b10:	1000941e 	bne	r2,zero,8001d64 <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 8001b14:	e0bffd03 	ldbu	r2,-12(fp)
 8001b18:	10800058 	cmpnei	r2,r2,1
 8001b1c:	1000911e 	bne	r2,zero,8001d64 <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 8001b20:	e0fffe03 	ldbu	r3,-8(fp)
 8001b24:	008200f4 	movhi	r2,2051
 8001b28:	1094ca04 	addi	r2,r2,21288
 8001b2c:	180690fa 	slli	r3,r3,3
 8001b30:	10c5883a 	add	r2,r2,r3
 8001b34:	10800104 	addi	r2,r2,4
 8001b38:	00c00044 	movi	r3,1
 8001b3c:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 8001b40:	e0fffe03 	ldbu	r3,-8(fp)
 8001b44:	008200f4 	movhi	r2,2051
 8001b48:	1094ca04 	addi	r2,r2,21288
 8001b4c:	180690fa 	slli	r3,r3,3
 8001b50:	10c5883a 	add	r2,r2,r3
 8001b54:	10800017 	ldw	r2,0(r2)
 8001b58:	1080008b 	ldhu	r2,2(r2)
 8001b5c:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 8001b60:	8001d9c0 	call	8001d9c <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8001b64:	e0fffe03 	ldbu	r3,-8(fp)
 8001b68:	008200f4 	movhi	r2,2051
 8001b6c:	1094ca04 	addi	r2,r2,21288
 8001b70:	180690fa 	slli	r3,r3,3
 8001b74:	10c7883a 	add	r3,r2,r3
 8001b78:	008200f4 	movhi	r2,2051
 8001b7c:	10947604 	addi	r2,r2,20952
 8001b80:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 8001b84:	e0fffe03 	ldbu	r3,-8(fp)
 8001b88:	008200f4 	movhi	r2,2051
 8001b8c:	1094ca04 	addi	r2,r2,21288
 8001b90:	180690fa 	slli	r3,r3,3
 8001b94:	10c5883a 	add	r2,r2,r3
 8001b98:	10800017 	ldw	r2,0(r2)
 8001b9c:	e0fffd43 	ldbu	r3,-11(fp)
 8001ba0:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 8001ba4:	e0bffa17 	ldw	r2,-24(fp)
 8001ba8:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
 8001bac:	d0a75945 	stb	r2,-25243(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
 8001bb0:	e0bffe03 	ldbu	r2,-8(fp)
 8001bb4:	d0a75905 	stb	r2,-25244(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 8001bb8:	e0bffa17 	ldw	r2,-24(fp)
 8001bbc:	10800003 	ldbu	r2,0(r2)
 8001bc0:	10803fcc 	andi	r2,r2,255
 8001bc4:	e0fffb17 	ldw	r3,-20(fp)
 8001bc8:	1885883a 	add	r2,r3,r2
 8001bcc:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 8001bd0:	e0bffb17 	ldw	r2,-20(fp)
 8001bd4:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 8001bd8:	00005b06 	br	8001d48 <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 8001bdc:	e0bffa17 	ldw	r2,-24(fp)
 8001be0:	10800043 	ldbu	r2,1(r2)
 8001be4:	10803fcc 	andi	r2,r2,255
 8001be8:	10800160 	cmpeqi	r2,r2,5
 8001bec:	1000091e 	bne	r2,zero,8001c14 <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8001bf0:	e0bffa17 	ldw	r2,-24(fp)
 8001bf4:	10800003 	ldbu	r2,0(r2)
 8001bf8:	10803fcc 	andi	r2,r2,255
 8001bfc:	e0fffb17 	ldw	r3,-20(fp)
 8001c00:	1885883a 	add	r2,r3,r2
 8001c04:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 8001c08:	e0bffb17 	ldw	r2,-20(fp)
 8001c0c:	e0bffa15 	stw	r2,-24(fp)
 8001c10:	00004d06 	br	8001d48 <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8001c14:	e0fffe03 	ldbu	r3,-8(fp)
 8001c18:	008200f4 	movhi	r2,2051
 8001c1c:	1094ca04 	addi	r2,r2,21288
 8001c20:	180690fa 	slli	r3,r3,3
 8001c24:	10c5883a 	add	r2,r2,r3
 8001c28:	10800017 	ldw	r2,0(r2)
 8001c2c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 8001c30:	e0fffa17 	ldw	r3,-24(fp)
 8001c34:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8001c38:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8001c3c:	e0fffe03 	ldbu	r3,-8(fp)
 8001c40:	008200f4 	movhi	r2,2051
 8001c44:	1094ca04 	addi	r2,r2,21288
 8001c48:	180690fa 	slli	r3,r3,3
 8001c4c:	10c5883a 	add	r2,r2,r3
 8001c50:	10800017 	ldw	r2,0(r2)
 8001c54:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8001c58:	e0fffa17 	ldw	r3,-24(fp)
 8001c5c:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8001c60:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8001c64:	e0fffe03 	ldbu	r3,-8(fp)
 8001c68:	008200f4 	movhi	r2,2051
 8001c6c:	1094ca04 	addi	r2,r2,21288
 8001c70:	180690fa 	slli	r3,r3,3
 8001c74:	10c5883a 	add	r2,r2,r3
 8001c78:	10800017 	ldw	r2,0(r2)
 8001c7c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 8001c80:	e0fffa17 	ldw	r3,-24(fp)
 8001c84:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8001c88:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8001c8c:	e0fffe03 	ldbu	r3,-8(fp)
 8001c90:	008200f4 	movhi	r2,2051
 8001c94:	1094ca04 	addi	r2,r2,21288
 8001c98:	180690fa 	slli	r3,r3,3
 8001c9c:	10c5883a 	add	r2,r2,r3
 8001ca0:	10800017 	ldw	r2,0(r2)
 8001ca4:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 8001ca8:	e0fffa17 	ldw	r3,-24(fp)
 8001cac:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8001cb0:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 8001cb4:	e0fffe03 	ldbu	r3,-8(fp)
 8001cb8:	e0bffc43 	ldbu	r2,-15(fp)
 8001cbc:	d8000415 	stw	zero,16(sp)
 8001cc0:	d8000315 	stw	zero,12(sp)
 8001cc4:	d8000215 	stw	zero,8(sp)
 8001cc8:	d8000115 	stw	zero,4(sp)
 8001ccc:	d8800015 	stw	r2,0(sp)
 8001cd0:	01c00244 	movi	r7,9
 8001cd4:	000d883a 	mov	r6,zero
 8001cd8:	000b883a 	mov	r5,zero
 8001cdc:	1809883a 	mov	r4,r3
 8001ce0:	800271c0 	call	800271c <XferCtrlReq>
 8001ce4:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 8001ce8:	e0bffc03 	ldbu	r2,-16(fp)
 8001cec:	10000226 	beq	r2,zero,8001cf8 <HIDKProbe+0x364>
							return (FALSE);
 8001cf0:	0005883a 	mov	r2,zero
 8001cf4:	00002406 	br	8001d88 <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 8001cf8:	e0fffe03 	ldbu	r3,-8(fp)
 8001cfc:	d0a75943 	ldbu	r2,-25243(gp)
 8001d00:	10803fcc 	andi	r2,r2,255
 8001d04:	d8000415 	stw	zero,16(sp)
 8001d08:	d8000315 	stw	zero,12(sp)
 8001d0c:	d8800215 	stw	r2,8(sp)
 8001d10:	d8000115 	stw	zero,4(sp)
 8001d14:	d8000015 	stw	zero,0(sp)
 8001d18:	01c002c4 	movi	r7,11
 8001d1c:	01800844 	movi	r6,33
 8001d20:	000b883a 	mov	r5,zero
 8001d24:	1809883a 	mov	r4,r3
 8001d28:	800271c0 	call	800271c <XferCtrlReq>
 8001d2c:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 8001d30:	e0bffc03 	ldbu	r2,-16(fp)
 8001d34:	10000226 	beq	r2,zero,8001d40 <HIDKProbe+0x3ac>
							return (FALSE);
 8001d38:	0005883a 	mov	r2,zero
 8001d3c:	00001206 	br	8001d88 <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
 8001d40:	00800044 	movi	r2,1
 8001d44:	00001006 	br	8001d88 <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 8001d48:	e0fff90b 	ldhu	r3,-28(fp)
 8001d4c:	008200f4 	movhi	r2,2051
 8001d50:	10948a04 	addi	r2,r2,21032
 8001d54:	1885883a 	add	r2,r3,r2
 8001d58:	e0fffb17 	ldw	r3,-20(fp)
 8001d5c:	18bf9f36 	bltu	r3,r2,8001bdc <__alt_data_end+0xfc001bdc>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8001d60:	00000206 	br	8001d6c <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 8001d64:	0005883a 	mov	r2,zero
 8001d68:	00000706 	br	8001d88 <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8001d6c:	e0fff90b 	ldhu	r3,-28(fp)
 8001d70:	008200f4 	movhi	r2,2051
 8001d74:	10948a04 	addi	r2,r2,21032
 8001d78:	1885883a 	add	r2,r3,r2
 8001d7c:	e0fffb17 	ldw	r3,-20(fp)
 8001d80:	18bf4736 	bltu	r3,r2,8001aa0 <__alt_data_end+0xfc001aa0>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 8001d84:	0005883a 	mov	r2,zero
}
 8001d88:	e037883a 	mov	sp,fp
 8001d8c:	dfc00117 	ldw	ra,4(sp)
 8001d90:	df000017 	ldw	fp,0(sp)
 8001d94:	dec00204 	addi	sp,sp,8
 8001d98:	f800283a 	ret

08001d9c <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 8001d9c:	deffff04 	addi	sp,sp,-4
 8001da0:	df000015 	stw	fp,0(sp)
 8001da4:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 8001da8:	008200f4 	movhi	r2,2051
 8001dac:	10947604 	addi	r2,r2,20952
 8001db0:	00c01004 	movi	r3,64
 8001db4:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 8001db8:	008200f4 	movhi	r2,2051
 8001dbc:	10947604 	addi	r2,r2,20952
 8001dc0:	00c00404 	movi	r3,16
 8001dc4:	10c00385 	stb	r3,14(r2)
}
 8001dc8:	0001883a 	nop
 8001dcc:	e037883a 	mov	sp,fp
 8001dd0:	df000017 	ldw	fp,0(sp)
 8001dd4:	dec00104 	addi	sp,sp,4
 8001dd8:	f800283a 	ret

08001ddc <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 8001ddc:	defffb04 	addi	sp,sp,-20
 8001de0:	dfc00415 	stw	ra,16(sp)
 8001de4:	df000315 	stw	fp,12(sp)
 8001de8:	df000304 	addi	fp,sp,12
 8001dec:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8001df0:	d0a75903 	ldbu	r2,-25244(gp)
 8001df4:	10803fcc 	andi	r2,r2,255
 8001df8:	100b883a 	mov	r5,r2
 8001dfc:	01003804 	movi	r4,224
 8001e00:	8001fb80 	call	8001fb8 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8001e04:	d0a75903 	ldbu	r2,-25244(gp)
 8001e08:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8001e0c:	d0a75903 	ldbu	r2,-25244(gp)
 8001e10:	10c03fcc 	andi	r3,r2,255
 8001e14:	008200f4 	movhi	r2,2051
 8001e18:	1094ca04 	addi	r2,r2,21288
 8001e1c:	180690fa 	slli	r3,r3,3
 8001e20:	10c5883a 	add	r2,r2,r3
 8001e24:	10800017 	ldw	r2,0(r2)
 8001e28:	10800204 	addi	r2,r2,8
 8001e2c:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8001e30:	10803fcc 	andi	r2,r2,255
 8001e34:	d8800015 	stw	r2,0(sp)
 8001e38:	e1ffff17 	ldw	r7,-4(fp)
 8001e3c:	01800204 	movi	r6,8
 8001e40:	01400044 	movi	r5,1
 8001e44:	8002b240 	call	8002b24 <XferInTransfer>
 8001e48:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 8001e4c:	e0bffe03 	ldbu	r2,-8(fp)
}
 8001e50:	e037883a 	mov	sp,fp
 8001e54:	dfc00117 	ldw	ra,4(sp)
 8001e58:	df000017 	ldw	fp,0(sp)
 8001e5c:	dec00204 	addi	sp,sp,8
 8001e60:	f800283a 	ret

08001e64 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 8001e64:	defffb04 	addi	sp,sp,-20
 8001e68:	dfc00415 	stw	ra,16(sp)
 8001e6c:	df000315 	stw	fp,12(sp)
 8001e70:	df000304 	addi	fp,sp,12
 8001e74:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8001e78:	d0a75903 	ldbu	r2,-25244(gp)
 8001e7c:	10803fcc 	andi	r2,r2,255
 8001e80:	100b883a 	mov	r5,r2
 8001e84:	01003804 	movi	r4,224
 8001e88:	8001fb80 	call	8001fb8 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8001e8c:	d0a75903 	ldbu	r2,-25244(gp)
 8001e90:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8001e94:	d0a75903 	ldbu	r2,-25244(gp)
 8001e98:	10c03fcc 	andi	r3,r2,255
 8001e9c:	008200f4 	movhi	r2,2051
 8001ea0:	1094ca04 	addi	r2,r2,21288
 8001ea4:	180690fa 	slli	r3,r3,3
 8001ea8:	10c5883a 	add	r2,r2,r3
 8001eac:	10800017 	ldw	r2,0(r2)
 8001eb0:	10800204 	addi	r2,r2,8
 8001eb4:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8001eb8:	10803fcc 	andi	r2,r2,255
 8001ebc:	d8800015 	stw	r2,0(sp)
 8001ec0:	e1ffff17 	ldw	r7,-4(fp)
 8001ec4:	01800204 	movi	r6,8
 8001ec8:	01400044 	movi	r5,1
 8001ecc:	8002b240 	call	8002b24 <XferInTransfer>
 8001ed0:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 8001ed4:	e0bffe03 	ldbu	r2,-8(fp)
}
 8001ed8:	e037883a 	mov	sp,fp
 8001edc:	dfc00117 	ldw	ra,4(sp)
 8001ee0:	df000017 	ldw	fp,0(sp)
 8001ee4:	dec00204 	addi	sp,sp,8
 8001ee8:	f800283a 	ret

08001eec <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8001eec:	defffb04 	addi	sp,sp,-20
 8001ef0:	df000415 	stw	fp,16(sp)
 8001ef4:	df000404 	addi	fp,sp,16
 8001ef8:	2007883a 	mov	r3,r4
 8001efc:	2805883a 	mov	r2,r5
 8001f00:	e1bffe15 	stw	r6,-8(fp)
 8001f04:	e1ffff15 	stw	r7,-4(fp)
 8001f08:	e0fffc05 	stb	r3,-16(fp)
 8001f0c:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 8001f10:	0005883a 	mov	r2,zero
}
 8001f14:	e037883a 	mov	sp,fp
 8001f18:	df000017 	ldw	fp,0(sp)
 8001f1c:	dec00104 	addi	sp,sp,4
 8001f20:	f800283a 	ret

08001f24 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8001f24:	defffb04 	addi	sp,sp,-20
 8001f28:	df000415 	stw	fp,16(sp)
 8001f2c:	df000404 	addi	fp,sp,16
 8001f30:	2007883a 	mov	r3,r4
 8001f34:	2805883a 	mov	r2,r5
 8001f38:	e1bffe15 	stw	r6,-8(fp)
 8001f3c:	e1ffff15 	stw	r7,-4(fp)
 8001f40:	e0fffc05 	stb	r3,-16(fp)
 8001f44:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 8001f48:	0005883a 	mov	r2,zero
}
 8001f4c:	e037883a 	mov	sp,fp
 8001f50:	df000017 	ldw	fp,0(sp)
 8001f54:	dec00104 	addi	sp,sp,4
 8001f58:	f800283a 	ret

08001f5c <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;
const unsigned SPI_BASE = 0x0100;
/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 8001f5c:	defffc04 	addi	sp,sp,-16
 8001f60:	df000315 	stw	fp,12(sp)
 8001f64:	df000304 	addi	fp,sp,12
 8001f68:	2807883a 	mov	r3,r5
 8001f6c:	3005883a 	mov	r2,r6
 8001f70:	e13ffd05 	stb	r4,-12(fp)
 8001f74:	e0fffe05 	stb	r3,-8(fp)
 8001f78:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 8001f7c:	0001883a 	nop
 8001f80:	e037883a 	mov	sp,fp
 8001f84:	df000017 	ldw	fp,0(sp)
 8001f88:	dec00104 	addi	sp,sp,4
 8001f8c:	f800283a 	ret

08001f90 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 8001f90:	defffe04 	addi	sp,sp,-8
 8001f94:	df000115 	stw	fp,4(sp)
 8001f98:	df000104 	addi	fp,sp,4
 8001f9c:	2005883a 	mov	r2,r4
 8001fa0:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
 8001fa4:	0001883a 	nop
 8001fa8:	e037883a 	mov	sp,fp
 8001fac:	df000017 	ldw	fp,0(sp)
 8001fb0:	dec00104 	addi	sp,sp,4
 8001fb4:	f800283a 	ret

08001fb8 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 8001fb8:	defff804 	addi	sp,sp,-32
 8001fbc:	dfc00715 	stw	ra,28(sp)
 8001fc0:	df000615 	stw	fp,24(sp)
 8001fc4:	df000604 	addi	fp,sp,24
 8001fc8:	2007883a 	mov	r3,r4
 8001fcc:	2805883a 	mov	r2,r5
 8001fd0:	e0fffe05 	stb	r3,-8(fp)
 8001fd4:	e0bfff05 	stb	r2,-4(fp)
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	reg |= 0b10;
 8001fd8:	e0bffe03 	ldbu	r2,-8(fp)
 8001fdc:	10800094 	ori	r2,r2,2
 8001fe0:	e0bffe05 	stb	r2,-8(fp)
	int retcode;
	retcode = alt_avalon_spi_command(SPI_BASE, 0, 1, &reg, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);
 8001fe4:	00c04004 	movi	r3,256
 8001fe8:	e13ffe04 	addi	r4,fp,-8
 8001fec:	00800044 	movi	r2,1
 8001ff0:	d8800215 	stw	r2,8(sp)
 8001ff4:	d8000115 	stw	zero,4(sp)
 8001ff8:	d8000015 	stw	zero,0(sp)
 8001ffc:	200f883a 	mov	r7,r4
 8002000:	01800044 	movi	r6,1
 8002004:	000b883a 	mov	r5,zero
 8002008:	1809883a 	mov	r4,r3
 800200c:	8011b780 	call	8011b78 <alt_avalon_spi_command>
 8002010:	e0bffd15 	stw	r2,-12(fp)
	if (retcode < 0) {
 8002014:	e0bffd17 	ldw	r2,-12(fp)
 8002018:	1000030e 	bge	r2,zero,8002028 <MAXreg_wr+0x70>
			printf("Error writing to MAX3421E!!");
 800201c:	010200f4 	movhi	r4,2051
 8002020:	2104e404 	addi	r4,r4,5008
 8002024:	80037a40 	call	80037a4 <printf>
	}
	retcode = alt_avalon_spi_command(SPI_BASE, 0, 1, &val, 0, NULL, 0);
 8002028:	00804004 	movi	r2,256
 800202c:	e0ffff04 	addi	r3,fp,-4
 8002030:	d8000215 	stw	zero,8(sp)
 8002034:	d8000115 	stw	zero,4(sp)
 8002038:	d8000015 	stw	zero,0(sp)
 800203c:	180f883a 	mov	r7,r3
 8002040:	01800044 	movi	r6,1
 8002044:	000b883a 	mov	r5,zero
 8002048:	1009883a 	mov	r4,r2
 800204c:	8011b780 	call	8011b78 <alt_avalon_spi_command>
 8002050:	e0bffd15 	stw	r2,-12(fp)
	if (retcode < 0) {
 8002054:	e0bffd17 	ldw	r2,-12(fp)
 8002058:	1000030e 	bge	r2,zero,8002068 <MAXreg_wr+0xb0>
			printf("Error writing to MAX3421E!!");
 800205c:	010200f4 	movhi	r4,2051
 8002060:	2104e404 	addi	r4,r4,5008
 8002064:	80037a40 	call	80037a4 <printf>
	//write reg + 2 via SPI
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
}
 8002068:	0001883a 	nop
 800206c:	e037883a 	mov	sp,fp
 8002070:	dfc00117 	ldw	ra,4(sp)
 8002074:	df000017 	ldw	fp,0(sp)
 8002078:	dec00204 	addi	sp,sp,8
 800207c:	f800283a 	ret

08002080 <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 8002080:	defff704 	addi	sp,sp,-36
 8002084:	dfc00815 	stw	ra,32(sp)
 8002088:	df000715 	stw	fp,28(sp)
 800208c:	df000704 	addi	fp,sp,28
 8002090:	2007883a 	mov	r3,r4
 8002094:	2805883a 	mov	r2,r5
 8002098:	e1bfff15 	stw	r6,-4(fp)
 800209c:	e0fffd05 	stb	r3,-12(fp)
 80020a0:	e0bffe05 	stb	r2,-8(fp)
	reg |= 0b10;
 80020a4:	e0bffd03 	ldbu	r2,-12(fp)
 80020a8:	10800094 	ori	r2,r2,2
 80020ac:	e0bffd05 	stb	r2,-12(fp)
	int retcode;
	retcode = alt_avalon_spi_command(SPI_BASE, 0, 1, &reg, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);
 80020b0:	00c04004 	movi	r3,256
 80020b4:	e13ffd04 	addi	r4,fp,-12
 80020b8:	00800044 	movi	r2,1
 80020bc:	d8800215 	stw	r2,8(sp)
 80020c0:	d8000115 	stw	zero,4(sp)
 80020c4:	d8000015 	stw	zero,0(sp)
 80020c8:	200f883a 	mov	r7,r4
 80020cc:	01800044 	movi	r6,1
 80020d0:	000b883a 	mov	r5,zero
 80020d4:	1809883a 	mov	r4,r3
 80020d8:	8011b780 	call	8011b78 <alt_avalon_spi_command>
 80020dc:	e0bffc15 	stw	r2,-16(fp)
	if (retcode < 0) {
 80020e0:	e0bffc17 	ldw	r2,-16(fp)
 80020e4:	1000030e 	bge	r2,zero,80020f4 <MAXbytes_wr+0x74>
		printf("Error writing to MAX3421E!!");
 80020e8:	010200f4 	movhi	r4,2051
 80020ec:	2104e404 	addi	r4,r4,5008
 80020f0:	80037a40 	call	80037a4 <printf>
	}
	retcode = alt_avalon_spi_command(SPI_BASE, 0, nbytes, data, 0, NULL, 0);
 80020f4:	00804004 	movi	r2,256
 80020f8:	e0fffe03 	ldbu	r3,-8(fp)
 80020fc:	d8000215 	stw	zero,8(sp)
 8002100:	d8000115 	stw	zero,4(sp)
 8002104:	d8000015 	stw	zero,0(sp)
 8002108:	e1ffff17 	ldw	r7,-4(fp)
 800210c:	180d883a 	mov	r6,r3
 8002110:	000b883a 	mov	r5,zero
 8002114:	1009883a 	mov	r4,r2
 8002118:	8011b780 	call	8011b78 <alt_avalon_spi_command>
 800211c:	e0bffc15 	stw	r2,-16(fp)
	if (retcode < 0) {
 8002120:	e0bffc17 	ldw	r2,-16(fp)
 8002124:	1000030e 	bge	r2,zero,8002134 <MAXbytes_wr+0xb4>
		printf("Error writing to MAX3421E!!");
 8002128:	010200f4 	movhi	r4,2051
 800212c:	2104e404 	addi	r4,r4,5008
 8002130:	80037a40 	call	80037a4 <printf>
	}
	return data + nbytes;
 8002134:	e0bffe03 	ldbu	r2,-8(fp)
 8002138:	e0ffff17 	ldw	r3,-4(fp)
 800213c:	1885883a 	add	r2,r3,r2
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
}
 8002140:	e037883a 	mov	sp,fp
 8002144:	dfc00117 	ldw	ra,4(sp)
 8002148:	df000017 	ldw	fp,0(sp)
 800214c:	dec00204 	addi	sp,sp,8
 8002150:	f800283a 	ret

08002154 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 8002154:	defff804 	addi	sp,sp,-32
 8002158:	dfc00715 	stw	ra,28(sp)
 800215c:	df000615 	stw	fp,24(sp)
 8002160:	df000604 	addi	fp,sp,24
 8002164:	2005883a 	mov	r2,r4
 8002168:	e0bfff05 	stb	r2,-4(fp)
	BYTE data = 0;
 800216c:	e03ffe05 	stb	zero,-8(fp)
	int retcode;
	retcode = alt_avalon_spi_command(SPI_BASE, 0, 1, &reg, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);
 8002170:	00c04004 	movi	r3,256
 8002174:	e13fff04 	addi	r4,fp,-4
 8002178:	00800044 	movi	r2,1
 800217c:	d8800215 	stw	r2,8(sp)
 8002180:	d8000115 	stw	zero,4(sp)
 8002184:	d8000015 	stw	zero,0(sp)
 8002188:	200f883a 	mov	r7,r4
 800218c:	01800044 	movi	r6,1
 8002190:	000b883a 	mov	r5,zero
 8002194:	1809883a 	mov	r4,r3
 8002198:	8011b780 	call	8011b78 <alt_avalon_spi_command>
 800219c:	e0bffd15 	stw	r2,-12(fp)
	if (retcode < 0) {
 80021a0:	e0bffd17 	ldw	r2,-12(fp)
 80021a4:	1000030e 	bge	r2,zero,80021b4 <MAXreg_rd+0x60>
			printf("Error writing to MAX3421E!!");
 80021a8:	010200f4 	movhi	r4,2051
 80021ac:	2104e404 	addi	r4,r4,5008
 80021b0:	80037a40 	call	80037a4 <printf>
	}
	retcode = alt_avalon_spi_command(SPI_BASE, 0, 0, NULL, 1, &data, 0);
 80021b4:	00c04004 	movi	r3,256
 80021b8:	d8000215 	stw	zero,8(sp)
 80021bc:	e0bffe04 	addi	r2,fp,-8
 80021c0:	d8800115 	stw	r2,4(sp)
 80021c4:	00800044 	movi	r2,1
 80021c8:	d8800015 	stw	r2,0(sp)
 80021cc:	000f883a 	mov	r7,zero
 80021d0:	000d883a 	mov	r6,zero
 80021d4:	000b883a 	mov	r5,zero
 80021d8:	1809883a 	mov	r4,r3
 80021dc:	8011b780 	call	8011b78 <alt_avalon_spi_command>
 80021e0:	e0bffd15 	stw	r2,-12(fp)
	if (retcode < 0) {
 80021e4:	e0bffd17 	ldw	r2,-12(fp)
 80021e8:	1000030e 	bge	r2,zero,80021f8 <MAXreg_rd+0xa4>
		printf("Error reading from MAX3421E!!");
 80021ec:	010200f4 	movhi	r4,2051
 80021f0:	2104eb04 	addi	r4,r4,5036
 80021f4:	80037a40 	call	80037a4 <printf>
	}
	return data;
 80021f8:	e0bffe03 	ldbu	r2,-8(fp)
	//read val via SPI
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val
}
 80021fc:	e037883a 	mov	sp,fp
 8002200:	dfc00117 	ldw	ra,4(sp)
 8002204:	df000017 	ldw	fp,0(sp)
 8002208:	dec00204 	addi	sp,sp,8
 800220c:	f800283a 	ret

08002210 <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 8002210:	defff704 	addi	sp,sp,-36
 8002214:	dfc00815 	stw	ra,32(sp)
 8002218:	df000715 	stw	fp,28(sp)
 800221c:	df000704 	addi	fp,sp,28
 8002220:	2007883a 	mov	r3,r4
 8002224:	2805883a 	mov	r2,r5
 8002228:	e1bfff15 	stw	r6,-4(fp)
 800222c:	e0fffd05 	stb	r3,-12(fp)
 8002230:	e0bffe05 	stb	r2,-8(fp)
	int retcode;
	retcode = alt_avalon_spi_command(SPI_BASE, 0, 1, &reg, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);
 8002234:	00c04004 	movi	r3,256
 8002238:	e13ffd04 	addi	r4,fp,-12
 800223c:	00800044 	movi	r2,1
 8002240:	d8800215 	stw	r2,8(sp)
 8002244:	d8000115 	stw	zero,4(sp)
 8002248:	d8000015 	stw	zero,0(sp)
 800224c:	200f883a 	mov	r7,r4
 8002250:	01800044 	movi	r6,1
 8002254:	000b883a 	mov	r5,zero
 8002258:	1809883a 	mov	r4,r3
 800225c:	8011b780 	call	8011b78 <alt_avalon_spi_command>
 8002260:	e0bffc15 	stw	r2,-16(fp)
	if (retcode < 0) {
 8002264:	e0bffc17 	ldw	r2,-16(fp)
 8002268:	1000030e 	bge	r2,zero,8002278 <MAXbytes_rd+0x68>
			printf("Error writing to MAX3421E!!");
 800226c:	010200f4 	movhi	r4,2051
 8002270:	2104e404 	addi	r4,r4,5008
 8002274:	80037a40 	call	80037a4 <printf>
	}
	retcode = alt_avalon_spi_command(SPI_BASE, 0, 0, NULL, nbytes, data, 0);
 8002278:	01004004 	movi	r4,256
 800227c:	e0bffe03 	ldbu	r2,-8(fp)
 8002280:	d8000215 	stw	zero,8(sp)
 8002284:	e0ffff17 	ldw	r3,-4(fp)
 8002288:	d8c00115 	stw	r3,4(sp)
 800228c:	d8800015 	stw	r2,0(sp)
 8002290:	000f883a 	mov	r7,zero
 8002294:	000d883a 	mov	r6,zero
 8002298:	000b883a 	mov	r5,zero
 800229c:	8011b780 	call	8011b78 <alt_avalon_spi_command>
 80022a0:	e0bffc15 	stw	r2,-16(fp)
	if (retcode < 0) {
 80022a4:	e0bffc17 	ldw	r2,-16(fp)
 80022a8:	1000030e 	bge	r2,zero,80022b8 <MAXbytes_rd+0xa8>
		printf("Error reading from MAX3421E!!");
 80022ac:	010200f4 	movhi	r4,2051
 80022b0:	2104eb04 	addi	r4,r4,5036
 80022b4:	80037a40 	call	80037a4 <printf>
	}
	return data + nbytes;
 80022b8:	e0bffe03 	ldbu	r2,-8(fp)
 80022bc:	e0ffff17 	ldw	r3,-4(fp)
 80022c0:	1885883a 	add	r2,r3,r2
	//read data[n] from SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
}
 80022c4:	e037883a 	mov	sp,fp
 80022c8:	dfc00117 	ldw	ra,4(sp)
 80022cc:	df000017 	ldw	fp,0(sp)
 80022d0:	dec00204 	addi	sp,sp,8
 80022d4:	f800283a 	ret

080022d8 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 80022d8:	defffd04 	addi	sp,sp,-12
 80022dc:	dfc00215 	stw	ra,8(sp)
 80022e0:	df000115 	stw	fp,4(sp)
 80022e4:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 80022e8:	0007883a 	mov	r3,zero
 80022ec:	00805c04 	movi	r2,368
 80022f0:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 80022f4:	010003f4 	movhi	r4,15
 80022f8:	21109004 	addi	r4,r4,16960
 80022fc:	8010ed40 	call	8010ed4 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 8002300:	00c00044 	movi	r3,1
 8002304:	00805c04 	movi	r2,368
 8002308:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
 800230c:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 8002310:	01400804 	movi	r5,32
 8002314:	01001e04 	movi	r4,120
 8002318:	8001fb80 	call	8001fb8 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 800231c:	000b883a 	mov	r5,zero
 8002320:	01001e04 	movi	r4,120
 8002324:	8001fb80 	call	8001fb8 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 8002328:	00000806 	br	800234c <MAX3421E_reset+0x74>
		tmp++;                                      //timeout after 256 attempts
 800232c:	e0bfff03 	ldbu	r2,-4(fp)
 8002330:	10800044 	addi	r2,r2,1
 8002334:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
 8002338:	e0bfff03 	ldbu	r2,-4(fp)
 800233c:	1000031e 	bne	r2,zero,800234c <MAX3421E_reset+0x74>
			printf("reset timeout!");
 8002340:	010200f4 	movhi	r4,2051
 8002344:	2104f304 	addi	r4,r4,5068
 8002348:	80037a40 	call	80037a4 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 800234c:	01001a04 	movi	r4,104
 8002350:	80021540 	call	8002154 <MAXreg_rd>
 8002354:	10803fcc 	andi	r2,r2,255
 8002358:	1080004c 	andi	r2,r2,1
 800235c:	103ff326 	beq	r2,zero,800232c <__alt_data_end+0xfc00232c>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
 8002360:	0001883a 	nop
 8002364:	e037883a 	mov	sp,fp
 8002368:	dfc00117 	ldw	ra,4(sp)
 800236c:	df000017 	ldw	fp,0(sp)
 8002370:	dec00204 	addi	sp,sp,8
 8002374:	f800283a 	ret

08002378 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 8002378:	defffe04 	addi	sp,sp,-8
 800237c:	df000115 	stw	fp,4(sp)
 8002380:	df000104 	addi	fp,sp,4
 8002384:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 8002388:	00800044 	movi	r2,1
}
 800238c:	e037883a 	mov	sp,fp
 8002390:	df000017 	ldw	fp,0(sp)
 8002394:	dec00104 	addi	sp,sp,4
 8002398:	f800283a 	ret

0800239c <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 800239c:	defffd04 	addi	sp,sp,-12
 80023a0:	dfc00215 	stw	ra,8(sp)
 80023a4:	df000115 	stw	fp,4(sp)
 80023a8:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 80023ac:	01003e04 	movi	r4,248
 80023b0:	80021540 	call	8002154 <MAXreg_rd>
 80023b4:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 80023b8:	e0ffff03 	ldbu	r3,-4(fp)
 80023bc:	00bff004 	movi	r2,-64
 80023c0:	1884703a 	and	r2,r3,r2
 80023c4:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 80023c8:	e0bfff03 	ldbu	r2,-4(fp)
 80023cc:	10c01020 	cmpeqi	r3,r2,64
 80023d0:	1800221e 	bne	r3,zero,800245c <MAX_busprobe+0xc0>
 80023d4:	10c01048 	cmpgei	r3,r2,65
 80023d8:	1800021e 	bne	r3,zero,80023e4 <MAX_busprobe+0x48>
 80023dc:	10003b26 	beq	r2,zero,80024cc <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 80023e0:	00004a06 	br	800250c <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
 80023e4:	10c02020 	cmpeqi	r3,r2,128
 80023e8:	1800031e 	bne	r3,zero,80023f8 <MAX_busprobe+0x5c>
 80023ec:	10803020 	cmpeqi	r2,r2,192
 80023f0:	1000331e 	bne	r2,zero,80024c0 <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 80023f4:	00004506 	br	800250c <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 80023f8:	d0a00403 	ldbu	r2,-32752(gp)
 80023fc:	10803fcc 	andi	r2,r2,255
 8002400:	108004e0 	cmpeqi	r2,r2,19
 8002404:	10003e1e 	bne	r2,zero,8002500 <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 8002408:	01003604 	movi	r4,216
 800240c:	80021540 	call	8002154 <MAXreg_rd>
 8002410:	10803fcc 	andi	r2,r2,255
 8002414:	1080008c 	andi	r2,r2,2
 8002418:	1000071e 	bne	r2,zero,8002438 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 800241c:	01403244 	movi	r5,201
 8002420:	01003604 	movi	r4,216
 8002424:	8001fb80 	call	8001fb8 <MAXreg_wr>
				printf("Starting in full speed\n");
 8002428:	010200f4 	movhi	r4,2051
 800242c:	2104f704 	addi	r4,r4,5084
 8002430:	80038a00 	call	80038a0 <puts>
 8002434:	00000606 	br	8002450 <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 8002438:	014032c4 	movi	r5,203
 800243c:	01003604 	movi	r4,216
 8002440:	8001fb80 	call	8001fb8 <MAXreg_wr>
				printf("Starting in low speed\n");
 8002444:	010200f4 	movhi	r4,2051
 8002448:	2104fd04 	addi	r4,r4,5108
 800244c:	80038a00 	call	80038a0 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 8002450:	00800404 	movi	r2,16
 8002454:	d0a00405 	stb	r2,-32752(gp)
		}
		break;
 8002458:	00002906 	br	8002500 <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 800245c:	d0a00403 	ldbu	r2,-32752(gp)
 8002460:	10803fcc 	andi	r2,r2,255
 8002464:	108004e0 	cmpeqi	r2,r2,19
 8002468:	1000271e 	bne	r2,zero,8002508 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 800246c:	01003604 	movi	r4,216
 8002470:	80021540 	call	8002154 <MAXreg_rd>
 8002474:	10803fcc 	andi	r2,r2,255
 8002478:	1080008c 	andi	r2,r2,2
 800247c:	1000071e 	bne	r2,zero,800249c <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 8002480:	014032c4 	movi	r5,203
 8002484:	01003604 	movi	r4,216
 8002488:	8001fb80 	call	8001fb8 <MAXreg_wr>
				printf("Starting in low speed\n");
 800248c:	010200f4 	movhi	r4,2051
 8002490:	2104fd04 	addi	r4,r4,5108
 8002494:	80038a00 	call	80038a0 <puts>
 8002498:	00000606 	br	80024b4 <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 800249c:	01403244 	movi	r5,201
 80024a0:	01003604 	movi	r4,216
 80024a4:	8001fb80 	call	8001fb8 <MAXreg_wr>
				printf("Starting in full speed\n");
 80024a8:	010200f4 	movhi	r4,2051
 80024ac:	2104f704 	addi	r4,r4,5084
 80024b0:	80038a00 	call	80038a0 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 80024b4:	00800404 	movi	r2,16
 80024b8:	d0a00405 	stb	r2,-32752(gp)
		}
		break;
 80024bc:	00001206 	br	8002508 <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 80024c0:	00800104 	movi	r2,4
 80024c4:	d0a00405 	stb	r2,-32752(gp)
		break;
 80024c8:	00001006 	br	800250c <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 80024cc:	d0a00403 	ldbu	r2,-32752(gp)
 80024d0:	10803fcc 	andi	r2,r2,255
 80024d4:	10803c0c 	andi	r2,r2,240
 80024d8:	10000326 	beq	r2,zero,80024e8 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 80024dc:	00800044 	movi	r2,1
 80024e0:	d0a00405 	stb	r2,-32752(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
 80024e4:	00000906 	br	800250c <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 80024e8:	01403244 	movi	r5,201
 80024ec:	01003604 	movi	r4,216
 80024f0:	8001fb80 	call	8001fb8 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 80024f4:	008000c4 	movi	r2,3
 80024f8:	d0a00405 	stb	r2,-32752(gp)
		}
		break;
 80024fc:	00000306 	br	800250c <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 8002500:	0001883a 	nop
 8002504:	00000106 	br	800250c <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 8002508:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 800250c:	0001883a 	nop
 8002510:	e037883a 	mov	sp,fp
 8002514:	dfc00117 	ldw	ra,4(sp)
 8002518:	df000017 	ldw	fp,0(sp)
 800251c:	dec00204 	addi	sp,sp,8
 8002520:	f800283a 	ret

08002524 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 8002524:	defffe04 	addi	sp,sp,-8
 8002528:	dfc00115 	stw	ra,4(sp)
 800252c:	df000015 	stw	fp,0(sp)
 8002530:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 8002534:	01400684 	movi	r5,26
 8002538:	01002204 	movi	r4,136
 800253c:	8001fb80 	call	8001fb8 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 8002540:	80022d80 	call	80022d8 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 8002544:	0009883a 	mov	r4,zero
 8002548:	80023780 	call	8002378 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 800254c:	01402004 	movi	r5,128
 8002550:	01002e04 	movi	r4,184
 8002554:	8001fb80 	call	8001fb8 <MAXreg_wr>
	Vbus_power( ON);
 8002558:	01000044 	movi	r4,1
 800255c:	80023780 	call	8002378 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 8002560:	01403444 	movi	r5,209
 8002564:	01003604 	movi	r4,216
 8002568:	8001fb80 	call	8001fb8 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 800256c:	01400804 	movi	r5,32
 8002570:	01003404 	movi	r4,208
 8002574:	8001fb80 	call	8001fb8 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 8002578:	01400104 	movi	r5,4
 800257c:	01003a04 	movi	r4,232
 8002580:	8001fb80 	call	8001fb8 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 8002584:	800239c0 	call	800239c <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 8002588:	01400804 	movi	r5,32
 800258c:	01003204 	movi	r4,200
 8002590:	8001fb80 	call	8001fb8 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 8002594:	01400044 	movi	r5,1
 8002598:	01002004 	movi	r4,128
 800259c:	8001fb80 	call	8001fb8 <MAXreg_wr>
}
 80025a0:	0001883a 	nop
 80025a4:	e037883a 	mov	sp,fp
 80025a8:	dfc00117 	ldw	ra,4(sp)
 80025ac:	df000017 	ldw	fp,0(sp)
 80025b0:	dec00204 	addi	sp,sp,8
 80025b4:	f800283a 	ret

080025b8 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 80025b8:	defffe04 	addi	sp,sp,-8
 80025bc:	dfc00115 	stw	ra,4(sp)
 80025c0:	df000015 	stw	fp,0(sp)
 80025c4:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 80025c8:	00806404 	movi	r2,400
 80025cc:	10800037 	ldwio	r2,0(r2)
 80025d0:	1000041e 	bne	r2,zero,80025e4 <MAX3421E_Task+0x2c>
		printf("MAX interrupt\n\r");
 80025d4:	010200f4 	movhi	r4,2051
 80025d8:	21050304 	addi	r4,r4,5132
 80025dc:	80037a40 	call	80037a4 <printf>
		MaxIntHandler();
 80025e0:	800261c0 	call	800261c <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 80025e4:	00806004 	movi	r2,384
 80025e8:	10800037 	ldwio	r2,0(r2)
 80025ec:	10800058 	cmpnei	r2,r2,1
 80025f0:	1000041e 	bne	r2,zero,8002604 <MAX3421E_Task+0x4c>
		printf("GPX interrupt\n\r");
 80025f4:	010200f4 	movhi	r4,2051
 80025f8:	21050704 	addi	r4,r4,5148
 80025fc:	80037a40 	call	80037a4 <printf>
		MaxGpxHandler();
 8002600:	80026e80 	call	80026e8 <MaxGpxHandler>
	}
}
 8002604:	0001883a 	nop
 8002608:	e037883a 	mov	sp,fp
 800260c:	dfc00117 	ldw	ra,4(sp)
 8002610:	df000017 	ldw	fp,0(sp)
 8002614:	dec00204 	addi	sp,sp,8
 8002618:	f800283a 	ret

0800261c <MaxIntHandler>:

void MaxIntHandler(void) {
 800261c:	defffd04 	addi	sp,sp,-12
 8002620:	dfc00215 	stw	ra,8(sp)
 8002624:	df000115 	stw	fp,4(sp)
 8002628:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 800262c:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 8002630:	01003204 	movi	r4,200
 8002634:	80021540 	call	8002154 <MAXreg_rd>
 8002638:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
 800263c:	e0bfff43 	ldbu	r2,-3(fp)
 8002640:	100b883a 	mov	r5,r2
 8002644:	010200f4 	movhi	r4,2051
 8002648:	21050b04 	addi	r4,r4,5164
 800264c:	80037a40 	call	80037a4 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 8002650:	e0bfff43 	ldbu	r2,-3(fp)
 8002654:	1080100c 	andi	r2,r2,64
 8002658:	10000326 	beq	r2,zero,8002668 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 800265c:	e0bfff03 	ldbu	r2,-4(fp)
 8002660:	10801014 	ori	r2,r2,64
 8002664:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 8002668:	e0bfff43 	ldbu	r2,-3(fp)
 800266c:	1080080c 	andi	r2,r2,32
 8002670:	10000426 	beq	r2,zero,8002684 <MaxIntHandler+0x68>
		MAX_busprobe();
 8002674:	800239c0 	call	800239c <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 8002678:	e0bfff03 	ldbu	r2,-4(fp)
 800267c:	10800814 	ori	r2,r2,32
 8002680:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 8002684:	e0bfff43 	ldbu	r2,-3(fp)
 8002688:	1080020c 	andi	r2,r2,8
 800268c:	10000326 	beq	r2,zero,800269c <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 8002690:	000b883a 	mov	r5,zero
 8002694:	01000e04 	movi	r4,56
 8002698:	8001fb80 	call	8001fb8 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 800269c:	e0bfff43 	ldbu	r2,-3(fp)
 80026a0:	1080004c 	andi	r2,r2,1
 80026a4:	10000626 	beq	r2,zero,80026c0 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 80026a8:	d0a00403 	ldbu	r2,-32752(gp)
 80026ac:	10800044 	addi	r2,r2,1
 80026b0:	d0a00405 	stb	r2,-32752(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 80026b4:	e0bfff03 	ldbu	r2,-4(fp)
 80026b8:	10800054 	ori	r2,r2,1
 80026bc:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 80026c0:	e0bfff03 	ldbu	r2,-4(fp)
 80026c4:	100b883a 	mov	r5,r2
 80026c8:	01003204 	movi	r4,200
 80026cc:	8001fb80 	call	8001fb8 <MAXreg_wr>
}
 80026d0:	0001883a 	nop
 80026d4:	e037883a 	mov	sp,fp
 80026d8:	dfc00117 	ldw	ra,4(sp)
 80026dc:	df000017 	ldw	fp,0(sp)
 80026e0:	dec00204 	addi	sp,sp,8
 80026e4:	f800283a 	ret

080026e8 <MaxGpxHandler>:

void MaxGpxHandler(void) {
 80026e8:	defffd04 	addi	sp,sp,-12
 80026ec:	dfc00215 	stw	ra,8(sp)
 80026f0:	df000115 	stw	fp,4(sp)
 80026f4:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 80026f8:	01002c04 	movi	r4,176
 80026fc:	80021540 	call	8002154 <MAXreg_rd>
 8002700:	e0bfff05 	stb	r2,-4(fp)
}
 8002704:	0001883a 	nop
 8002708:	e037883a 	mov	sp,fp
 800270c:	dfc00117 	ldw	ra,4(sp)
 8002710:	df000017 	ldw	fp,0(sp)
 8002714:	dec00204 	addi	sp,sp,8
 8002718:	f800283a 	ret

0800271c <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 800271c:	defff104 	addi	sp,sp,-60
 8002720:	dfc00e15 	stw	ra,56(sp)
 8002724:	df000d15 	stw	fp,52(sp)
 8002728:	df000d04 	addi	fp,sp,52
 800272c:	2015883a 	mov	r10,r4
 8002730:	2813883a 	mov	r9,r5
 8002734:	3011883a 	mov	r8,r6
 8002738:	380d883a 	mov	r6,r7
 800273c:	e1400217 	ldw	r5,8(fp)
 8002740:	e1000317 	ldw	r4,12(fp)
 8002744:	e0c00417 	ldw	r3,16(fp)
 8002748:	e0800517 	ldw	r2,20(fp)
 800274c:	e2bff805 	stb	r10,-32(fp)
 8002750:	e27ff905 	stb	r9,-28(fp)
 8002754:	e23ffa05 	stb	r8,-24(fp)
 8002758:	e1bffb05 	stb	r6,-20(fp)
 800275c:	e17ffc05 	stb	r5,-16(fp)
 8002760:	e13ffd05 	stb	r4,-12(fp)
 8002764:	e0fffe0d 	sth	r3,-8(fp)
 8002768:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 800276c:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 8002770:	00800044 	movi	r2,1
 8002774:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 8002778:	e0800617 	ldw	r2,24(fp)
 800277c:	1000011e 	bne	r2,zero,8002784 <XferCtrlReq+0x68>
        datastage = 0;
 8002780:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 8002784:	e0bff803 	ldbu	r2,-32(fp)
 8002788:	100b883a 	mov	r5,r2
 800278c:	01003804 	movi	r4,224
 8002790:	8001fb80 	call	8001fb8 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 8002794:	e0bffa03 	ldbu	r2,-24(fp)
 8002798:	10803fcc 	andi	r2,r2,255
 800279c:	1080201c 	xori	r2,r2,128
 80027a0:	10bfe004 	addi	r2,r2,-128
 80027a4:	1000020e 	bge	r2,zero,80027b0 <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 80027a8:	00800044 	movi	r2,1
 80027ac:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 80027b0:	e0bffa03 	ldbu	r2,-24(fp)
 80027b4:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 80027b8:	e0bffb03 	ldbu	r2,-20(fp)
 80027bc:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 80027c0:	e0bffc03 	ldbu	r2,-16(fp)
 80027c4:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 80027c8:	e0bffd03 	ldbu	r2,-12(fp)
 80027cc:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 80027d0:	e0bffe0b 	ldhu	r2,-8(fp)
 80027d4:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 80027d8:	e0bfff0b 	ldhu	r2,-4(fp)
 80027dc:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 80027e0:	e0bff584 	addi	r2,fp,-42
 80027e4:	100d883a 	mov	r6,r2
 80027e8:	01400204 	movi	r5,8
 80027ec:	01000804 	movi	r4,32
 80027f0:	80020800 	call	8002080 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 80027f4:	e0bff903 	ldbu	r2,-28(fp)
 80027f8:	100b883a 	mov	r5,r2
 80027fc:	01000404 	movi	r4,16
 8002800:	80029c40 	call	80029c4 <XferDispatchPkt>
 8002804:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 8002808:	e0bff543 	ldbu	r2,-43(fp)
 800280c:	10000226 	beq	r2,zero,8002818 <XferCtrlReq+0xfc>
        return( rcode );
 8002810:	e0bff543 	ldbu	r2,-43(fp)
 8002814:	00000f06 	br	8002854 <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 8002818:	e0bff503 	ldbu	r2,-44(fp)
 800281c:	1085883a 	add	r2,r2,r2
 8002820:	1087883a 	add	r3,r2,r2
 8002824:	d0a00204 	addi	r2,gp,-32760
 8002828:	1885883a 	add	r2,r3,r2
 800282c:	10800017 	ldw	r2,0(r2)
 8002830:	e13ff803 	ldbu	r4,-32(fp)
 8002834:	e17ff903 	ldbu	r5,-28(fp)
 8002838:	e1bfff0b 	ldhu	r6,-4(fp)
 800283c:	e0fff417 	ldw	r3,-48(fp)
 8002840:	d8c00015 	stw	r3,0(sp)
 8002844:	e1c00617 	ldw	r7,24(fp)
 8002848:	103ee83a 	callr	r2
 800284c:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 8002850:	e0bff543 	ldbu	r2,-43(fp)
}
 8002854:	e037883a 	mov	sp,fp
 8002858:	dfc00117 	ldw	ra,4(sp)
 800285c:	df000017 	ldw	fp,0(sp)
 8002860:	dec00204 	addi	sp,sp,8
 8002864:	f800283a 	ret

08002868 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8002868:	defff804 	addi	sp,sp,-32
 800286c:	dfc00715 	stw	ra,28(sp)
 8002870:	df000615 	stw	fp,24(sp)
 8002874:	df000604 	addi	fp,sp,24
 8002878:	2807883a 	mov	r3,r5
 800287c:	3005883a 	mov	r2,r6
 8002880:	e1ffff15 	stw	r7,-4(fp)
 8002884:	e13ffc05 	stb	r4,-16(fp)
 8002888:	e0fffd05 	stb	r3,-12(fp)
 800288c:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 8002890:	e0800217 	ldw	r2,8(fp)
 8002894:	10002826 	beq	r2,zero,8002938 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8002898:	e0fffc03 	ldbu	r3,-16(fp)
 800289c:	008200f4 	movhi	r2,2051
 80028a0:	1094ca04 	addi	r2,r2,21288
 80028a4:	180690fa 	slli	r3,r3,3
 80028a8:	10c5883a 	add	r2,r2,r3
 80028ac:	10c00017 	ldw	r3,0(r2)
 80028b0:	e0bffd03 	ldbu	r2,-12(fp)
 80028b4:	100490fa 	slli	r2,r2,3
 80028b8:	1885883a 	add	r2,r3,r2
 80028bc:	00c00804 	movi	r3,32
 80028c0:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 80028c4:	e13ffc03 	ldbu	r4,-16(fp)
 80028c8:	e17ffd03 	ldbu	r5,-12(fp)
 80028cc:	e1bffe0b 	ldhu	r6,-8(fp)
 80028d0:	e0fffc03 	ldbu	r3,-16(fp)
 80028d4:	008200f4 	movhi	r2,2051
 80028d8:	1094ca04 	addi	r2,r2,21288
 80028dc:	180690fa 	slli	r3,r3,3
 80028e0:	10c5883a 	add	r2,r2,r3
 80028e4:	10c00017 	ldw	r3,0(r2)
 80028e8:	e0bffd03 	ldbu	r2,-12(fp)
 80028ec:	100490fa 	slli	r2,r2,3
 80028f0:	1885883a 	add	r2,r3,r2
 80028f4:	1080008b 	ldhu	r2,2(r2)
 80028f8:	10803fcc 	andi	r2,r2,255
 80028fc:	d8800015 	stw	r2,0(sp)
 8002900:	e1ffff17 	ldw	r7,-4(fp)
 8002904:	8002b240 	call	8002b24 <XferInTransfer>
 8002908:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 800290c:	e0bffb03 	ldbu	r2,-20(fp)
 8002910:	10000226 	beq	r2,zero,800291c <XferCtrlData+0xb4>
        return( rcode );
 8002914:	e0bffb03 	ldbu	r2,-20(fp)
 8002918:	00000806 	br	800293c <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 800291c:	e0bffd03 	ldbu	r2,-12(fp)
 8002920:	100b883a 	mov	r5,r2
 8002924:	01002804 	movi	r4,160
 8002928:	80029c40 	call	80029c4 <XferDispatchPkt>
 800292c:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 8002930:	e0bffb03 	ldbu	r2,-20(fp)
 8002934:	00000106 	br	800293c <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 8002938:	00bfffc4 	movi	r2,-1
    }
}
 800293c:	e037883a 	mov	sp,fp
 8002940:	dfc00117 	ldw	ra,4(sp)
 8002944:	df000017 	ldw	fp,0(sp)
 8002948:	dec00204 	addi	sp,sp,8
 800294c:	f800283a 	ret

08002950 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8002950:	defff904 	addi	sp,sp,-28
 8002954:	dfc00615 	stw	ra,24(sp)
 8002958:	df000515 	stw	fp,20(sp)
 800295c:	df000504 	addi	fp,sp,20
 8002960:	2807883a 	mov	r3,r5
 8002964:	3005883a 	mov	r2,r6
 8002968:	e1ffff15 	stw	r7,-4(fp)
 800296c:	e13ffc05 	stb	r4,-16(fp)
 8002970:	e0fffd05 	stb	r3,-12(fp)
 8002974:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 8002978:	e0800217 	ldw	r2,8(fp)
 800297c:	10000626 	beq	r2,zero,8002998 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8002980:	e0bffd03 	ldbu	r2,-12(fp)
 8002984:	100b883a 	mov	r5,r2
 8002988:	01002804 	movi	r4,160
 800298c:	80029c40 	call	80029c4 <XferDispatchPkt>
 8002990:	e0bffb05 	stb	r2,-20(fp)
 8002994:	00000506 	br	80029ac <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 8002998:	e0bffd03 	ldbu	r2,-12(fp)
 800299c:	100b883a 	mov	r5,r2
 80029a0:	01002004 	movi	r4,128
 80029a4:	80029c40 	call	80029c4 <XferDispatchPkt>
 80029a8:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 80029ac:	e0bffb03 	ldbu	r2,-20(fp)
}
 80029b0:	e037883a 	mov	sp,fp
 80029b4:	dfc00117 	ldw	ra,4(sp)
 80029b8:	df000017 	ldw	fp,0(sp)
 80029bc:	dec00204 	addi	sp,sp,8
 80029c0:	f800283a 	ret

080029c4 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 80029c4:	defff904 	addi	sp,sp,-28
 80029c8:	dfc00615 	stw	ra,24(sp)
 80029cc:	df000515 	stw	fp,20(sp)
 80029d0:	df000504 	addi	fp,sp,20
 80029d4:	2007883a 	mov	r3,r4
 80029d8:	2805883a 	mov	r2,r5
 80029dc:	e0fffe05 	stb	r3,-8(fp)
 80029e0:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80029e4:	d0a76a17 	ldw	r2,-25176(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 80029e8:	0140fa04 	movi	r5,1000
 80029ec:	1009883a 	mov	r4,r2
 80029f0:	800374c0 	call	800374c <__mulsi3>
 80029f4:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80029f8:	d0a76917 	ldw	r2,-25180(gp)
 80029fc:	100b883a 	mov	r5,r2
 8002a00:	1809883a 	mov	r4,r3
 8002a04:	80036900 	call	8003690 <__udivsi3>
 8002a08:	1084e204 	addi	r2,r2,5000
 8002a0c:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 8002a10:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
 8002a14:	e03ffd05 	stb	zero,-12(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 8002a18:	e0fffe03 	ldbu	r3,-8(fp)
 8002a1c:	e0bfff03 	ldbu	r2,-4(fp)
 8002a20:	1884b03a 	or	r2,r3,r2
 8002a24:	10803fcc 	andi	r2,r2,255
 8002a28:	100b883a 	mov	r5,r2
 8002a2c:	01003c04 	movi	r4,240
 8002a30:	8001fb80 	call	8001fb8 <MAXreg_wr>
        rcode = 0xff;
 8002a34:	00bfffc4 	movi	r2,-1
 8002a38:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8002a3c:	00000d06 	br	8002a74 <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
 8002a40:	01003204 	movi	r4,200
 8002a44:	80021540 	call	8002154 <MAXreg_rd>
 8002a48:	e0bffd45 	stb	r2,-11(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 8002a4c:	e0bffd43 	ldbu	r2,-11(fp)
 8002a50:	10803fcc 	andi	r2,r2,255
 8002a54:	1080201c 	xori	r2,r2,128
 8002a58:	10bfe004 	addi	r2,r2,-128
 8002a5c:	1000050e 	bge	r2,zero,8002a74 <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 8002a60:	01402004 	movi	r5,128
 8002a64:	01003204 	movi	r4,200
 8002a68:	8001fb80 	call	8001fb8 <MAXreg_wr>
                rcode = 0x00;
 8002a6c:	e03ffb05 	stb	zero,-20(fp)
                break;
 8002a70:	00000c06 	br	8002aa4 <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8002a74:	d0a76a17 	ldw	r2,-25176(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8002a78:	0140fa04 	movi	r5,1000
 8002a7c:	1009883a 	mov	r4,r2
 8002a80:	800374c0 	call	800374c <__mulsi3>
 8002a84:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8002a88:	d0a76917 	ldw	r2,-25180(gp)
 8002a8c:	100b883a 	mov	r5,r2
 8002a90:	1809883a 	mov	r4,r3
 8002a94:	80036900 	call	8003690 <__udivsi3>
 8002a98:	1007883a 	mov	r3,r2
 8002a9c:	e0bffc17 	ldw	r2,-16(fp)
 8002aa0:	18bfe736 	bltu	r3,r2,8002a40 <__alt_data_end+0xfc002a40>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 8002aa4:	e0bffb03 	ldbu	r2,-20(fp)
 8002aa8:	10000226 	beq	r2,zero,8002ab4 <XferDispatchPkt+0xf0>
            return( rcode );
 8002aac:	e0bffb03 	ldbu	r2,-20(fp)
 8002ab0:	00001706 	br	8002b10 <XferDispatchPkt+0x14c>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 8002ab4:	01003e04 	movi	r4,248
 8002ab8:	80021540 	call	8002154 <MAXreg_rd>
 8002abc:	108003cc 	andi	r2,r2,15
 8002ac0:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
 8002ac4:	e0bffb03 	ldbu	r2,-20(fp)
 8002ac8:	10800118 	cmpnei	r2,r2,4
 8002acc:	10000a26 	beq	r2,zero,8002af8 <XferDispatchPkt+0x134>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 8002ad0:	e0bffb03 	ldbu	r2,-20(fp)
 8002ad4:	10800398 	cmpnei	r2,r2,14
 8002ad8:	1000091e 	bne	r2,zero,8002b00 <XferDispatchPkt+0x13c>
            retry_count++;
 8002adc:	e0bffb43 	ldbu	r2,-19(fp)
 8002ae0:	10800044 	addi	r2,r2,1
 8002ae4:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 8002ae8:	e0bffb47 	ldb	r2,-19(fp)
 8002aec:	108000d8 	cmpnei	r2,r2,3
 8002af0:	10000526 	beq	r2,zero,8002b08 <XferDispatchPkt+0x144>
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
 8002af4:	003fc806 	br	8002a18 <__alt_data_end+0xfc002a18>
        if( rcode != 0x00 ) {               //exit if timeout
            return( rcode );
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
        if( rcode == hrNAK ) {
        	break;
 8002af8:	0001883a 	nop
 8002afc:	00000306 	br	8002b0c <XferDispatchPkt+0x148>
            }
            else {
                continue;
            }
        }
        else break;
 8002b00:	0001883a 	nop
 8002b04:	00000106 	br	8002b0c <XferDispatchPkt+0x148>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
 8002b08:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
 8002b0c:	e0bffb03 	ldbu	r2,-20(fp)
}
 8002b10:	e037883a 	mov	sp,fp
 8002b14:	dfc00117 	ldw	ra,4(sp)
 8002b18:	df000017 	ldw	fp,0(sp)
 8002b1c:	dec00204 	addi	sp,sp,8
 8002b20:	f800283a 	ret

08002b24 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 8002b24:	defff804 	addi	sp,sp,-32
 8002b28:	dfc00715 	stw	ra,28(sp)
 8002b2c:	df000615 	stw	fp,24(sp)
 8002b30:	df000604 	addi	fp,sp,24
 8002b34:	2011883a 	mov	r8,r4
 8002b38:	2809883a 	mov	r4,r5
 8002b3c:	3007883a 	mov	r3,r6
 8002b40:	e1fffe15 	stw	r7,-8(fp)
 8002b44:	e0800217 	ldw	r2,8(fp)
 8002b48:	e23ffb05 	stb	r8,-20(fp)
 8002b4c:	e13ffc05 	stb	r4,-16(fp)
 8002b50:	e0fffd0d 	sth	r3,-12(fp)
 8002b54:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 8002b58:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 8002b5c:	e0fffb03 	ldbu	r3,-20(fp)
 8002b60:	008200f4 	movhi	r2,2051
 8002b64:	1094ca04 	addi	r2,r2,21288
 8002b68:	180690fa 	slli	r3,r3,3
 8002b6c:	10c5883a 	add	r2,r2,r3
 8002b70:	10c00017 	ldw	r3,0(r2)
 8002b74:	e0bffc03 	ldbu	r2,-16(fp)
 8002b78:	100490fa 	slli	r2,r2,3
 8002b7c:	1885883a 	add	r2,r3,r2
 8002b80:	10800183 	ldbu	r2,6(r2)
 8002b84:	10803fcc 	andi	r2,r2,255
 8002b88:	100b883a 	mov	r5,r2
 8002b8c:	01003a04 	movi	r4,232
 8002b90:	8001fb80 	call	8001fb8 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8002b94:	e0bffc03 	ldbu	r2,-16(fp)
 8002b98:	100b883a 	mov	r5,r2
 8002b9c:	0009883a 	mov	r4,zero
 8002ba0:	80029c40 	call	80029c4 <XferDispatchPkt>
 8002ba4:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
 8002ba8:	e0bffa83 	ldbu	r2,-22(fp)
 8002bac:	10000226 	beq	r2,zero,8002bb8 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 8002bb0:	e0bffa83 	ldbu	r2,-22(fp)
 8002bb4:	00003a06 	br	8002ca0 <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 8002bb8:	01003204 	movi	r4,200
 8002bbc:	80021540 	call	8002154 <MAXreg_rd>
 8002bc0:	10803fcc 	andi	r2,r2,255
 8002bc4:	1080010c 	andi	r2,r2,4
 8002bc8:	1000021e 	bne	r2,zero,8002bd4 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 8002bcc:	00bffc04 	movi	r2,-16
 8002bd0:	00003306 	br	8002ca0 <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 8002bd4:	01000c04 	movi	r4,48
 8002bd8:	80021540 	call	8002154 <MAXreg_rd>
 8002bdc:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 8002be0:	e0bffac3 	ldbu	r2,-21(fp)
 8002be4:	e1bffe17 	ldw	r6,-8(fp)
 8002be8:	100b883a 	mov	r5,r2
 8002bec:	01000204 	movi	r4,8
 8002bf0:	80022100 	call	8002210 <MAXbytes_rd>
 8002bf4:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 8002bf8:	01400104 	movi	r5,4
 8002bfc:	01003204 	movi	r4,200
 8002c00:	8001fb80 	call	8001fb8 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 8002c04:	e0fffac3 	ldbu	r3,-21(fp)
 8002c08:	e0bffa0b 	ldhu	r2,-24(fp)
 8002c0c:	1885883a 	add	r2,r3,r2
 8002c10:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 8002c14:	e0fffac3 	ldbu	r3,-21(fp)
 8002c18:	e0bfff03 	ldbu	r2,-4(fp)
 8002c1c:	18800336 	bltu	r3,r2,8002c2c <XferInTransfer+0x108>
 8002c20:	e0fffa0b 	ldhu	r3,-24(fp)
 8002c24:	e0bffd0b 	ldhu	r2,-12(fp)
 8002c28:	18bfda36 	bltu	r3,r2,8002b94 <__alt_data_end+0xfc002b94>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 8002c2c:	01003e04 	movi	r4,248
 8002c30:	80021540 	call	8002154 <MAXreg_rd>
 8002c34:	10803fcc 	andi	r2,r2,255
 8002c38:	1080040c 	andi	r2,r2,16
 8002c3c:	10000c26 	beq	r2,zero,8002c70 <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8002c40:	e0fffb03 	ldbu	r3,-20(fp)
 8002c44:	008200f4 	movhi	r2,2051
 8002c48:	1094ca04 	addi	r2,r2,21288
 8002c4c:	180690fa 	slli	r3,r3,3
 8002c50:	10c5883a 	add	r2,r2,r3
 8002c54:	10c00017 	ldw	r3,0(r2)
 8002c58:	e0bffc03 	ldbu	r2,-16(fp)
 8002c5c:	100490fa 	slli	r2,r2,3
 8002c60:	1885883a 	add	r2,r3,r2
 8002c64:	00c00804 	movi	r3,32
 8002c68:	10c00185 	stb	r3,6(r2)
 8002c6c:	00000b06 	br	8002c9c <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 8002c70:	e0fffb03 	ldbu	r3,-20(fp)
 8002c74:	008200f4 	movhi	r2,2051
 8002c78:	1094ca04 	addi	r2,r2,21288
 8002c7c:	180690fa 	slli	r3,r3,3
 8002c80:	10c5883a 	add	r2,r2,r3
 8002c84:	10c00017 	ldw	r3,0(r2)
 8002c88:	e0bffc03 	ldbu	r2,-16(fp)
 8002c8c:	100490fa 	slli	r2,r2,3
 8002c90:	1885883a 	add	r2,r3,r2
 8002c94:	00c00404 	movi	r3,16
 8002c98:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 8002c9c:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 8002ca0:	e037883a 	mov	sp,fp
 8002ca4:	dfc00117 	ldw	ra,4(sp)
 8002ca8:	df000017 	ldw	fp,0(sp)
 8002cac:	dec00204 	addi	sp,sp,8
 8002cb0:	f800283a 	ret

08002cb4 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 8002cb4:	defffe04 	addi	sp,sp,-8
 8002cb8:	df000115 	stw	fp,4(sp)
 8002cbc:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 8002cc0:	e03fff05 	stb	zero,-4(fp)
 8002cc4:	00001006 	br	8002d08 <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 8002cc8:	e0ffff03 	ldbu	r3,-4(fp)
 8002ccc:	008200f4 	movhi	r2,2051
 8002cd0:	1094ca04 	addi	r2,r2,21288
 8002cd4:	180690fa 	slli	r3,r3,3
 8002cd8:	10c5883a 	add	r2,r2,r3
 8002cdc:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 8002ce0:	e0ffff03 	ldbu	r3,-4(fp)
 8002ce4:	008200f4 	movhi	r2,2051
 8002ce8:	1094ca04 	addi	r2,r2,21288
 8002cec:	180690fa 	slli	r3,r3,3
 8002cf0:	10c5883a 	add	r2,r2,r3
 8002cf4:	10800104 	addi	r2,r2,4
 8002cf8:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 8002cfc:	e0bfff03 	ldbu	r2,-4(fp)
 8002d00:	10800044 	addi	r2,r2,1
 8002d04:	e0bfff05 	stb	r2,-4(fp)
 8002d08:	e0bfff03 	ldbu	r2,-4(fp)
 8002d0c:	10800270 	cmpltui	r2,r2,9
 8002d10:	103fed1e 	bne	r2,zero,8002cc8 <__alt_data_end+0xfc002cc8>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 8002d14:	008200f4 	movhi	r2,2051
 8002d18:	1094ca04 	addi	r2,r2,21288
 8002d1c:	d0e75a04 	addi	r3,gp,-25240
 8002d20:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 8002d24:	d0275a8d 	sth	zero,-25238(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 8002d28:	00801004 	movi	r2,64
 8002d2c:	d0a75b45 	stb	r2,-25235(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 8002d30:	00800404 	movi	r2,16
 8002d34:	d0a75b85 	stb	r2,-25234(gp)
}
 8002d38:	0001883a 	nop
 8002d3c:	e037883a 	mov	sp,fp
 8002d40:	df000017 	ldw	fp,0(sp)
 8002d44:	dec00104 	addi	sp,sp,4
 8002d48:	f800283a 	ret

08002d4c <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 8002d4c:	deffb204 	addi	sp,sp,-312
 8002d50:	dfc04d15 	stw	ra,308(sp)
 8002d54:	df004c15 	stw	fp,304(sp)
 8002d58:	dc004b15 	stw	r16,300(sp)
 8002d5c:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8002d60:	d0a00403 	ldbu	r2,-32752(gp)
 8002d64:	10803fcc 	andi	r2,r2,255
 8002d68:	10803c0c 	andi	r2,r2,240
 8002d6c:	10c00820 	cmpeqi	r3,r2,32
 8002d70:	1801121e 	bne	r3,zero,80031bc <USB_Task+0x470>
 8002d74:	10c00848 	cmpgei	r3,r2,33
 8002d78:	1800041e 	bne	r3,zero,8002d8c <USB_Task+0x40>
 8002d7c:	10000a26 	beq	r2,zero,8002da8 <USB_Task+0x5c>
 8002d80:	10800420 	cmpeqi	r2,r2,16
 8002d84:	10001b1e 	bne	r2,zero,8002df4 <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 8002d88:	00017a06 	br	8003374 <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8002d8c:	10c01020 	cmpeqi	r3,r2,64
 8002d90:	18016f1e 	bne	r3,zero,8003350 <USB_Task+0x604>
 8002d94:	10c03fe0 	cmpeqi	r3,r2,255
 8002d98:	18016f1e 	bne	r3,zero,8003358 <USB_Task+0x60c>
 8002d9c:	10800c20 	cmpeqi	r2,r2,48
 8002da0:	1001441e 	bne	r2,zero,80032b4 <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 8002da4:	00017306 	br	8003374 <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
 8002da8:	d0a00403 	ldbu	r2,-32752(gp)
 8002dac:	10803fcc 	andi	r2,r2,255
 8002db0:	10c000e0 	cmpeqi	r3,r2,3
 8002db4:	1800091e 	bne	r3,zero,8002ddc <USB_Task+0x90>
 8002db8:	10c00120 	cmpeqi	r3,r2,4
 8002dbc:	18000b1e 	bne	r3,zero,8002dec <USB_Task+0xa0>
 8002dc0:	10800060 	cmpeqi	r2,r2,1
 8002dc4:	1000011e 	bne	r2,zero,8002dcc <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 8002dc8:	00016a06 	br	8003374 <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
 8002dcc:	8002cb40 	call	8002cb4 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 8002dd0:	008000c4 	movi	r2,3
 8002dd4:	d0a00405 	stb	r2,-32752(gp)
                    break;
 8002dd8:	00000506 	br	8002df0 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 8002ddc:	01400104 	movi	r5,4
 8002de0:	01003a04 	movi	r4,232
 8002de4:	8001fb80 	call	8001fb8 <MAXreg_wr>
                    break;
 8002de8:	00000106 	br	8002df0 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
 8002dec:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 8002df0:	00016006 	br	8003374 <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
 8002df4:	d0a00403 	ldbu	r2,-32752(gp)
 8002df8:	10803fcc 	andi	r2,r2,255
 8002dfc:	10bffc04 	addi	r2,r2,-16
 8002e00:	10c001a8 	cmpgeui	r3,r2,6
 8002e04:	1801561e 	bne	r3,zero,8003360 <USB_Task+0x614>
 8002e08:	100690ba 	slli	r3,r2,2
 8002e0c:	00820034 	movhi	r2,2048
 8002e10:	108b8804 	addi	r2,r2,11808
 8002e14:	1885883a 	add	r2,r3,r2
 8002e18:	10800017 	ldw	r2,0(r2)
 8002e1c:	1000683a 	jmp	r2
 8002e20:	08002e38 	rdprs	zero,at,184
 8002e24:	08002e70 	cmpltui	zero,at,185
 8002e28:	08002eac 	andhi	zero,at,186
 8002e2c:	08002ed0 	cmplti	zero,at,187
 8002e30:	08002f10 	cmplti	zero,at,188
 8002e34:	08002f24 	muli	zero,at,188
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8002e38:	d0a76a17 	ldw	r2,-25176(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 8002e3c:	0140fa04 	movi	r5,1000
 8002e40:	1009883a 	mov	r4,r2
 8002e44:	800374c0 	call	800374c <__mulsi3>
 8002e48:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8002e4c:	d0a76917 	ldw	r2,-25180(gp)
 8002e50:	100b883a 	mov	r5,r2
 8002e54:	1809883a 	mov	r4,r3
 8002e58:	80036900 	call	8003690 <__udivsi3>
 8002e5c:	10803204 	addi	r2,r2,200
 8002e60:	d0a75d15 	stw	r2,-25228(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8002e64:	00800444 	movi	r2,17
 8002e68:	d0a00405 	stb	r2,-32752(gp)
                    break;//case( USB_STATE_ATTACHED )
 8002e6c:	0000d206 	br	80031b8 <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8002e70:	d0a76a17 	ldw	r2,-25176(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 8002e74:	0140fa04 	movi	r5,1000
 8002e78:	1009883a 	mov	r4,r2
 8002e7c:	800374c0 	call	800374c <__mulsi3>
 8002e80:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8002e84:	d0a76917 	ldw	r2,-25180(gp)
 8002e88:	100b883a 	mov	r5,r2
 8002e8c:	1809883a 	mov	r4,r3
 8002e90:	80036900 	call	8003690 <__udivsi3>
 8002e94:	1007883a 	mov	r3,r2
 8002e98:	d0a75d17 	ldw	r2,-25228(gp)
 8002e9c:	10c0c32e 	bgeu	r2,r3,80031ac <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 8002ea0:	00800484 	movi	r2,18
 8002ea4:	d0a00405 	stb	r2,-32752(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 8002ea8:	0000c006 	br	80031ac <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 8002eac:	01400044 	movi	r5,1
 8002eb0:	01003204 	movi	r4,200
 8002eb4:	8001fb80 	call	8001fb8 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 8002eb8:	01400044 	movi	r5,1
 8002ebc:	01003a04 	movi	r4,232
 8002ec0:	8001fb80 	call	8001fb8 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 8002ec4:	008004c4 	movi	r2,19
 8002ec8:	d0a00405 	stb	r2,-32752(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 8002ecc:	0000ba06 	br	80031b8 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 8002ed0:	01003a04 	movi	r4,232
 8002ed4:	80021540 	call	8002154 <MAXreg_rd>
 8002ed8:	10803fcc 	andi	r2,r2,255
 8002edc:	1080004c 	andi	r2,r2,1
 8002ee0:	1000b41e 	bne	r2,zero,80031b4 <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 8002ee4:	01003604 	movi	r4,216
 8002ee8:	80021540 	call	8002154 <MAXreg_rd>
 8002eec:	10800214 	ori	r2,r2,8
 8002ef0:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 8002ef4:	e0bfb943 	ldbu	r2,-283(fp)
 8002ef8:	100b883a 	mov	r5,r2
 8002efc:	01003604 	movi	r4,216
 8002f00:	8001fb80 	call	8001fb8 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 8002f04:	00800504 	movi	r2,20
 8002f08:	d0a00405 	stb	r2,-32752(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8002f0c:	0000a906 	br	80031b4 <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 8002f10:	01003204 	movi	r4,200
 8002f14:	80021540 	call	8002154 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 8002f18:	00800544 	movi	r2,21
 8002f1c:	d0a00405 	stb	r2,-32752(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 8002f20:	0000a506 	br	80031b8 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 8002f24:	008200f4 	movhi	r2,2051
 8002f28:	1094ca04 	addi	r2,r2,21288
 8002f2c:	10800017 	ldw	r2,0(r2)
 8002f30:	00c00204 	movi	r3,8
 8002f34:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 8002f38:	e0bfba04 	addi	r2,fp,-280
 8002f3c:	d8800415 	stw	r2,16(sp)
 8002f40:	00800204 	movi	r2,8
 8002f44:	d8800315 	stw	r2,12(sp)
 8002f48:	d8000215 	stw	zero,8(sp)
 8002f4c:	00800044 	movi	r2,1
 8002f50:	d8800115 	stw	r2,4(sp)
 8002f54:	d8000015 	stw	zero,0(sp)
 8002f58:	01c00184 	movi	r7,6
 8002f5c:	01802004 	movi	r6,128
 8002f60:	000b883a 	mov	r5,zero
 8002f64:	0009883a 	mov	r4,zero
 8002f68:	800271c0 	call	800271c <XferCtrlReq>
 8002f6c:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 8002f70:	e0bfb983 	ldbu	r2,-282(fp)
 8002f74:	1000861e 	bne	r2,zero,8003190 <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 8002f78:	008200f4 	movhi	r2,2051
 8002f7c:	1094ca04 	addi	r2,r2,21288
 8002f80:	10800017 	ldw	r2,0(r2)
 8002f84:	e0ffbbc3 	ldbu	r3,-273(fp)
 8002f88:	18c03fcc 	andi	r3,r3,255
 8002f8c:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 8002f90:	e0bfba03 	ldbu	r2,-280(fp)
 8002f94:	10803fcc 	andi	r2,r2,255
 8002f98:	e0ffba04 	addi	r3,fp,-280
 8002f9c:	d8c00415 	stw	r3,16(sp)
 8002fa0:	d8800315 	stw	r2,12(sp)
 8002fa4:	d8000215 	stw	zero,8(sp)
 8002fa8:	00800044 	movi	r2,1
 8002fac:	d8800115 	stw	r2,4(sp)
 8002fb0:	d8000015 	stw	zero,0(sp)
 8002fb4:	01c00184 	movi	r7,6
 8002fb8:	01802004 	movi	r6,128
 8002fbc:	000b883a 	mov	r5,zero
 8002fc0:	0009883a 	mov	r4,zero
 8002fc4:	800271c0 	call	800271c <XferCtrlReq>
 8002fc8:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 8002fcc:	e0bfbd83 	ldbu	r2,-266(fp)
 8002fd0:	10803fcc 	andi	r2,r2,255
 8002fd4:	10003426 	beq	r2,zero,80030a8 <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8002fd8:	e0bfbd83 	ldbu	r2,-266(fp)
 8002fdc:	10803fcc 	andi	r2,r2,255
 8002fe0:	e0ffbe84 	addi	r3,fp,-262
 8002fe4:	d8c00415 	stw	r3,16(sp)
 8002fe8:	00c00084 	movi	r3,2
 8002fec:	d8c00315 	stw	r3,12(sp)
 8002ff0:	00c10244 	movi	r3,1033
 8002ff4:	d8c00215 	stw	r3,8(sp)
 8002ff8:	00c000c4 	movi	r3,3
 8002ffc:	d8c00115 	stw	r3,4(sp)
 8003000:	d8800015 	stw	r2,0(sp)
 8003004:	01c00184 	movi	r7,6
 8003008:	01802004 	movi	r6,128
 800300c:	000b883a 	mov	r5,zero
 8003010:	0009883a 	mov	r4,zero
 8003014:	800271c0 	call	800271c <XferCtrlReq>
 8003018:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 800301c:	e0bfbd83 	ldbu	r2,-266(fp)
 8003020:	10803fcc 	andi	r2,r2,255
 8003024:	e0ffbe83 	ldbu	r3,-262(fp)
 8003028:	18c03fcc 	andi	r3,r3,255
 800302c:	e13fbe84 	addi	r4,fp,-262
 8003030:	d9000415 	stw	r4,16(sp)
 8003034:	d8c00315 	stw	r3,12(sp)
 8003038:	00c10244 	movi	r3,1033
 800303c:	d8c00215 	stw	r3,8(sp)
 8003040:	00c000c4 	movi	r3,3
 8003044:	d8c00115 	stw	r3,4(sp)
 8003048:	d8800015 	stw	r2,0(sp)
 800304c:	01c00184 	movi	r7,6
 8003050:	01802004 	movi	r6,128
 8003054:	000b883a 	mov	r5,zero
 8003058:	0009883a 	mov	r4,zero
 800305c:	800271c0 	call	800271c <XferCtrlReq>
 8003060:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 8003064:	e0bfbd83 	ldbu	r2,-266(fp)
 8003068:	14003fcc 	andi	r16,r2,255
 800306c:	e0bfbe83 	ldbu	r2,-262(fp)
 8003070:	10803fcc 	andi	r2,r2,255
 8003074:	1004d07a 	srli	r2,r2,1
 8003078:	10bfffc4 	addi	r2,r2,-1
 800307c:	10c03fcc 	andi	r3,r2,255
 8003080:	e0bfbe84 	addi	r2,fp,-262
 8003084:	10800084 	addi	r2,r2,2
 8003088:	180b883a 	mov	r5,r3
 800308c:	1009883a 	mov	r4,r2
 8003090:	80035140 	call	8003514 <ConvUTF8ToStr>
 8003094:	100d883a 	mov	r6,r2
 8003098:	800b883a 	mov	r5,r16
 800309c:	010200f4 	movhi	r4,2051
 80030a0:	21050e04 	addi	r4,r4,5176
 80030a4:	80037a40 	call	80037a4 <printf>
                		}
                		if (buf.iProduct != 0)
 80030a8:	e0bfbdc3 	ldbu	r2,-265(fp)
 80030ac:	10803fcc 	andi	r2,r2,255
 80030b0:	10003426 	beq	r2,zero,8003184 <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 80030b4:	e0bfbdc3 	ldbu	r2,-265(fp)
 80030b8:	10803fcc 	andi	r2,r2,255
 80030bc:	e0ffbe84 	addi	r3,fp,-262
 80030c0:	d8c00415 	stw	r3,16(sp)
 80030c4:	00c00084 	movi	r3,2
 80030c8:	d8c00315 	stw	r3,12(sp)
 80030cc:	00c10244 	movi	r3,1033
 80030d0:	d8c00215 	stw	r3,8(sp)
 80030d4:	00c000c4 	movi	r3,3
 80030d8:	d8c00115 	stw	r3,4(sp)
 80030dc:	d8800015 	stw	r2,0(sp)
 80030e0:	01c00184 	movi	r7,6
 80030e4:	01802004 	movi	r6,128
 80030e8:	000b883a 	mov	r5,zero
 80030ec:	0009883a 	mov	r4,zero
 80030f0:	800271c0 	call	800271c <XferCtrlReq>
 80030f4:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 80030f8:	e0bfbdc3 	ldbu	r2,-265(fp)
 80030fc:	10803fcc 	andi	r2,r2,255
 8003100:	e0ffbe83 	ldbu	r3,-262(fp)
 8003104:	18c03fcc 	andi	r3,r3,255
 8003108:	e13fbe84 	addi	r4,fp,-262
 800310c:	d9000415 	stw	r4,16(sp)
 8003110:	d8c00315 	stw	r3,12(sp)
 8003114:	00c10244 	movi	r3,1033
 8003118:	d8c00215 	stw	r3,8(sp)
 800311c:	00c000c4 	movi	r3,3
 8003120:	d8c00115 	stw	r3,4(sp)
 8003124:	d8800015 	stw	r2,0(sp)
 8003128:	01c00184 	movi	r7,6
 800312c:	01802004 	movi	r6,128
 8003130:	000b883a 	mov	r5,zero
 8003134:	0009883a 	mov	r4,zero
 8003138:	800271c0 	call	800271c <XferCtrlReq>
 800313c:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 8003140:	e0bfbdc3 	ldbu	r2,-265(fp)
 8003144:	14003fcc 	andi	r16,r2,255
 8003148:	e0bfbe83 	ldbu	r2,-262(fp)
 800314c:	10803fcc 	andi	r2,r2,255
 8003150:	1004d07a 	srli	r2,r2,1
 8003154:	10bfffc4 	addi	r2,r2,-1
 8003158:	10c03fcc 	andi	r3,r2,255
 800315c:	e0bfbe84 	addi	r2,fp,-262
 8003160:	10800084 	addi	r2,r2,2
 8003164:	180b883a 	mov	r5,r3
 8003168:	1009883a 	mov	r4,r2
 800316c:	80035140 	call	8003514 <ConvUTF8ToStr>
 8003170:	100d883a 	mov	r6,r2
 8003174:	800b883a 	mov	r5,r16
 8003178:	010200f4 	movhi	r4,2051
 800317c:	21051404 	addi	r4,r4,5200
 8003180:	80037a40 	call	80037a4 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 8003184:	00800804 	movi	r2,32
 8003188:	d0a00405 	stb	r2,-32752(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 800318c:	00000a06 	br	80031b8 <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
 8003190:	e0bfb983 	ldbu	r2,-282(fp)
 8003194:	d0a75e45 	stb	r2,-25223(gp)
                        last_usb_task_state = usb_task_state;
 8003198:	d0a00403 	ldbu	r2,-32752(gp)
 800319c:	d0a75c05 	stb	r2,-25232(gp)
                        usb_task_state = USB_STATE_ERROR;
 80031a0:	00bfffc4 	movi	r2,-1
 80031a4:	d0a00405 	stb	r2,-32752(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 80031a8:	00000306 	br	80031b8 <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 80031ac:	0001883a 	nop
 80031b0:	00006b06 	br	8003360 <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 80031b4:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 80031b8:	00006906 	br	8003360 <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 80031bc:	00800044 	movi	r2,1
 80031c0:	e0bfb905 	stb	r2,-284(fp)
 80031c4:	00002d06 	br	800327c <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
 80031c8:	e0ffb903 	ldbu	r3,-284(fp)
 80031cc:	008200f4 	movhi	r2,2051
 80031d0:	1094ca04 	addi	r2,r2,21288
 80031d4:	180690fa 	slli	r3,r3,3
 80031d8:	10c5883a 	add	r2,r2,r3
 80031dc:	10800017 	ldw	r2,0(r2)
 80031e0:	1000231e 	bne	r2,zero,8003270 <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 80031e4:	e13fb903 	ldbu	r4,-284(fp)
 80031e8:	008200f4 	movhi	r2,2051
 80031ec:	1094ca04 	addi	r2,r2,21288
 80031f0:	10c00017 	ldw	r3,0(r2)
 80031f4:	008200f4 	movhi	r2,2051
 80031f8:	1094ca04 	addi	r2,r2,21288
 80031fc:	200890fa 	slli	r4,r4,3
 8003200:	1105883a 	add	r2,r2,r4
 8003204:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 8003208:	e0bfb903 	ldbu	r2,-284(fp)
 800320c:	d8000415 	stw	zero,16(sp)
 8003210:	d8000315 	stw	zero,12(sp)
 8003214:	d8000215 	stw	zero,8(sp)
 8003218:	d8000115 	stw	zero,4(sp)
 800321c:	d8800015 	stw	r2,0(sp)
 8003220:	01c00144 	movi	r7,5
 8003224:	000d883a 	mov	r6,zero
 8003228:	000b883a 	mov	r5,zero
 800322c:	0009883a 	mov	r4,zero
 8003230:	800271c0 	call	800271c <XferCtrlReq>
 8003234:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 8003238:	e0bfb983 	ldbu	r2,-282(fp)
 800323c:	1000051e 	bne	r2,zero,8003254 <USB_Task+0x508>
                        tmp_addr = i;
 8003240:	e0bfb903 	ldbu	r2,-284(fp)
 8003244:	d0a75e05 	stb	r2,-25224(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 8003248:	00800c04 	movi	r2,48
 800324c:	d0a00405 	stb	r2,-32752(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 8003250:	00000d06 	br	8003288 <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 8003254:	e0bfb983 	ldbu	r2,-282(fp)
 8003258:	d0a75e45 	stb	r2,-25223(gp)
                        last_usb_task_state = usb_task_state;
 800325c:	d0a00403 	ldbu	r2,-32752(gp)
 8003260:	d0a75c05 	stb	r2,-25232(gp)
                        usb_task_state = USB_STATE_ERROR;
 8003264:	00bfffc4 	movi	r2,-1
 8003268:	d0a00405 	stb	r2,-32752(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 800326c:	00000606 	br	8003288 <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 8003270:	e0bfb903 	ldbu	r2,-284(fp)
 8003274:	10800044 	addi	r2,r2,1
 8003278:	e0bfb905 	stb	r2,-284(fp)
 800327c:	e0bfb903 	ldbu	r2,-284(fp)
 8003280:	10800230 	cmpltui	r2,r2,8
 8003284:	103fd01e 	bne	r2,zero,80031c8 <__alt_data_end+0xfc0031c8>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 8003288:	d0a00403 	ldbu	r2,-32752(gp)
 800328c:	10803fcc 	andi	r2,r2,255
 8003290:	10800818 	cmpnei	r2,r2,32
 8003294:	1000341e 	bne	r2,zero,8003368 <USB_Task+0x61c>
                usb_error = 0xfe;
 8003298:	00bfff84 	movi	r2,-2
 800329c:	d0a75e45 	stb	r2,-25223(gp)
                last_usb_task_state = usb_task_state;
 80032a0:	d0a00403 	ldbu	r2,-32752(gp)
 80032a4:	d0a75c05 	stb	r2,-25232(gp)
                usb_task_state = USB_STATE_ERROR;
 80032a8:	00bfffc4 	movi	r2,-1
 80032ac:	d0a00405 	stb	r2,-32752(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 80032b0:	00002d06 	br	8003368 <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 80032b4:	e03fb905 	stb	zero,-284(fp)
 80032b8:	00001706 	br	8003318 <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 80032bc:	e0bfb903 	ldbu	r2,-284(fp)
 80032c0:	040200f4 	movhi	r16,2051
 80032c4:	84065204 	addi	r16,r16,6472
 80032c8:	01400304 	movi	r5,12
 80032cc:	1009883a 	mov	r4,r2
 80032d0:	800374c0 	call	800374c <__mulsi3>
 80032d4:	8085883a 	add	r2,r16,r2
 80032d8:	10800017 	ldw	r2,0(r2)
 80032dc:	d0e75e03 	ldbu	r3,-25224(gp)
 80032e0:	18c03fcc 	andi	r3,r3,255
 80032e4:	000b883a 	mov	r5,zero
 80032e8:	1809883a 	mov	r4,r3
 80032ec:	103ee83a 	callr	r2
 80032f0:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 80032f4:	e0bfb983 	ldbu	r2,-282(fp)
 80032f8:	10800058 	cmpnei	r2,r2,1
 80032fc:	1000031e 	bne	r2,zero,800330c <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
 8003300:	00801004 	movi	r2,64
 8003304:	d0a00405 	stb	r2,-32752(gp)
                    break;
 8003308:	00000606 	br	8003324 <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 800330c:	e0bfb903 	ldbu	r2,-284(fp)
 8003310:	10800044 	addi	r2,r2,1
 8003314:	e0bfb905 	stb	r2,-284(fp)
 8003318:	e0bfb903 	ldbu	r2,-284(fp)
 800331c:	10800130 	cmpltui	r2,r2,4
 8003320:	103fe61e 	bne	r2,zero,80032bc <__alt_data_end+0xfc0032bc>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 8003324:	d0a00403 	ldbu	r2,-32752(gp)
 8003328:	10803fcc 	andi	r2,r2,255
 800332c:	10800c18 	cmpnei	r2,r2,48
 8003330:	10000f1e 	bne	r2,zero,8003370 <USB_Task+0x624>
                usb_error = 0xfd;
 8003334:	00bfff44 	movi	r2,-3
 8003338:	d0a75e45 	stb	r2,-25223(gp)
                last_usb_task_state = usb_task_state;
 800333c:	d0a00403 	ldbu	r2,-32752(gp)
 8003340:	d0a75c05 	stb	r2,-25232(gp)
                usb_task_state = USB_STATE_ERROR;
 8003344:	00bfffc4 	movi	r2,-1
 8003348:	d0a00405 	stb	r2,-32752(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 800334c:	00000806 	br	8003370 <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 8003350:	0001883a 	nop
 8003354:	00000706 	br	8003374 <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 8003358:	0001883a 	nop
 800335c:	00000506 	br	8003374 <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 8003360:	0001883a 	nop
 8003364:	00000306 	br	8003374 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 8003368:	0001883a 	nop
 800336c:	00000106 	br	8003374 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 8003370:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 8003374:	0001883a 	nop
 8003378:	e6ffff04 	addi	sp,fp,-4
 800337c:	dfc00217 	ldw	ra,8(sp)
 8003380:	df000117 	ldw	fp,4(sp)
 8003384:	dc000017 	ldw	r16,0(sp)
 8003388:	dec00304 	addi	sp,sp,12
 800338c:	f800283a 	ret

08003390 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 8003390:	defffd04 	addi	sp,sp,-12
 8003394:	df000215 	stw	fp,8(sp)
 8003398:	df000204 	addi	fp,sp,8
 800339c:	2005883a 	mov	r2,r4
 80033a0:	e17fff15 	stw	r5,-4(fp)
 80033a4:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 80033a8:	0005883a 	mov	r2,zero
}
 80033ac:	e037883a 	mov	sp,fp
 80033b0:	df000017 	ldw	fp,0(sp)
 80033b4:	dec00104 	addi	sp,sp,4
 80033b8:	f800283a 	ret

080033bc <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 80033bc:	defffb04 	addi	sp,sp,-20
 80033c0:	df000415 	stw	fp,16(sp)
 80033c4:	df000404 	addi	fp,sp,16
 80033c8:	2007883a 	mov	r3,r4
 80033cc:	2805883a 	mov	r2,r5
 80033d0:	e1bffe15 	stw	r6,-8(fp)
 80033d4:	e1ffff15 	stw	r7,-4(fp)
 80033d8:	e0fffc05 	stb	r3,-16(fp)
 80033dc:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 80033e0:	0005883a 	mov	r2,zero

}
 80033e4:	e037883a 	mov	sp,fp
 80033e8:	df000017 	ldw	fp,0(sp)
 80033ec:	dec00104 	addi	sp,sp,4
 80033f0:	f800283a 	ret

080033f4 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 80033f4:	defffd04 	addi	sp,sp,-12
 80033f8:	df000215 	stw	fp,8(sp)
 80033fc:	df000204 	addi	fp,sp,8
 8003400:	2005883a 	mov	r2,r4
 8003404:	e17fff15 	stw	r5,-4(fp)
 8003408:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 800340c:	0005883a 	mov	r2,zero

}
 8003410:	e037883a 	mov	sp,fp
 8003414:	df000017 	ldw	fp,0(sp)
 8003418:	dec00104 	addi	sp,sp,4
 800341c:	f800283a 	ret

08003420 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8003420:	defffb04 	addi	sp,sp,-20
 8003424:	df000415 	stw	fp,16(sp)
 8003428:	df000404 	addi	fp,sp,16
 800342c:	2007883a 	mov	r3,r4
 8003430:	2805883a 	mov	r2,r5
 8003434:	e1bffe15 	stw	r6,-8(fp)
 8003438:	e1ffff15 	stw	r7,-4(fp)
 800343c:	e0fffc05 	stb	r3,-16(fp)
 8003440:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 8003444:	0005883a 	mov	r2,zero
}
 8003448:	e037883a 	mov	sp,fp
 800344c:	df000017 	ldw	fp,0(sp)
 8003450:	dec00104 	addi	sp,sp,4
 8003454:	f800283a 	ret

08003458 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 8003458:	defffd04 	addi	sp,sp,-12
 800345c:	df000215 	stw	fp,8(sp)
 8003460:	df000204 	addi	fp,sp,8
 8003464:	2005883a 	mov	r2,r4
 8003468:	e17fff15 	stw	r5,-4(fp)
 800346c:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 8003470:	0005883a 	mov	r2,zero
}
 8003474:	e037883a 	mov	sp,fp
 8003478:	df000017 	ldw	fp,0(sp)
 800347c:	dec00104 	addi	sp,sp,4
 8003480:	f800283a 	ret

08003484 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8003484:	defffb04 	addi	sp,sp,-20
 8003488:	df000415 	stw	fp,16(sp)
 800348c:	df000404 	addi	fp,sp,16
 8003490:	2007883a 	mov	r3,r4
 8003494:	2805883a 	mov	r2,r5
 8003498:	e1bffe15 	stw	r6,-8(fp)
 800349c:	e1ffff15 	stw	r7,-4(fp)
 80034a0:	e0fffc05 	stb	r3,-16(fp)
 80034a4:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 80034a8:	0005883a 	mov	r2,zero
}
 80034ac:	e037883a 	mov	sp,fp
 80034b0:	df000017 	ldw	fp,0(sp)
 80034b4:	dec00104 	addi	sp,sp,4
 80034b8:	f800283a 	ret

080034bc <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 80034bc:	deffff04 	addi	sp,sp,-4
 80034c0:	df000015 	stw	fp,0(sp)
 80034c4:	d839883a 	mov	fp,sp
    return( usb_task_state );
 80034c8:	d0a00403 	ldbu	r2,-32752(gp)
}
 80034cc:	e037883a 	mov	sp,fp
 80034d0:	df000017 	ldw	fp,0(sp)
 80034d4:	dec00104 	addi	sp,sp,4
 80034d8:	f800283a 	ret

080034dc <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 80034dc:	defffe04 	addi	sp,sp,-8
 80034e0:	df000115 	stw	fp,4(sp)
 80034e4:	df000104 	addi	fp,sp,4
 80034e8:	2005883a 	mov	r2,r4
 80034ec:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 80034f0:	e0bfff03 	ldbu	r2,-4(fp)
 80034f4:	100690fa 	slli	r3,r2,3
 80034f8:	008200f4 	movhi	r2,2051
 80034fc:	1094ca04 	addi	r2,r2,21288
 8003500:	1885883a 	add	r2,r3,r2
}
 8003504:	e037883a 	mov	sp,fp
 8003508:	df000017 	ldw	fp,0(sp)
 800350c:	dec00104 	addi	sp,sp,4
 8003510:	f800283a 	ret

08003514 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 8003514:	defffc04 	addi	sp,sp,-16
 8003518:	df000315 	stw	fp,12(sp)
 800351c:	df000304 	addi	fp,sp,12
 8003520:	e13ffe15 	stw	r4,-8(fp)
 8003524:	2805883a 	mov	r2,r5
 8003528:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 800352c:	e03ffd05 	stb	zero,-12(fp)
 8003530:	00000d06 	br	8003568 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 8003534:	e0bffd03 	ldbu	r2,-12(fp)
 8003538:	e0fffe17 	ldw	r3,-8(fp)
 800353c:	1887883a 	add	r3,r3,r2
 8003540:	e0bffd03 	ldbu	r2,-12(fp)
 8003544:	1085883a 	add	r2,r2,r2
 8003548:	1009883a 	mov	r4,r2
 800354c:	e0bffe17 	ldw	r2,-8(fp)
 8003550:	1105883a 	add	r2,r2,r4
 8003554:	10800003 	ldbu	r2,0(r2)
 8003558:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 800355c:	e0bffd03 	ldbu	r2,-12(fp)
 8003560:	10800044 	addi	r2,r2,1
 8003564:	e0bffd05 	stb	r2,-12(fp)
 8003568:	e0fffd03 	ldbu	r3,-12(fp)
 800356c:	e0bfff03 	ldbu	r2,-4(fp)
 8003570:	18bff036 	bltu	r3,r2,8003534 <__alt_data_end+0xfc003534>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 8003574:	e0bfff03 	ldbu	r2,-4(fp)
 8003578:	e0fffe17 	ldw	r3,-8(fp)
 800357c:	1885883a 	add	r2,r3,r2
 8003580:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 8003584:	e0bffe17 	ldw	r2,-8(fp)
}
 8003588:	e037883a 	mov	sp,fp
 800358c:	df000017 	ldw	fp,0(sp)
 8003590:	dec00104 	addi	sp,sp,4
 8003594:	f800283a 	ret

08003598 <__divsi3>:
 8003598:	20001b16 	blt	r4,zero,8003608 <__divsi3+0x70>
 800359c:	000f883a 	mov	r7,zero
 80035a0:	28001616 	blt	r5,zero,80035fc <__divsi3+0x64>
 80035a4:	200d883a 	mov	r6,r4
 80035a8:	29001a2e 	bgeu	r5,r4,8003614 <__divsi3+0x7c>
 80035ac:	00800804 	movi	r2,32
 80035b0:	00c00044 	movi	r3,1
 80035b4:	00000106 	br	80035bc <__divsi3+0x24>
 80035b8:	10000d26 	beq	r2,zero,80035f0 <__divsi3+0x58>
 80035bc:	294b883a 	add	r5,r5,r5
 80035c0:	10bfffc4 	addi	r2,r2,-1
 80035c4:	18c7883a 	add	r3,r3,r3
 80035c8:	293ffb36 	bltu	r5,r4,80035b8 <__alt_data_end+0xfc0035b8>
 80035cc:	0005883a 	mov	r2,zero
 80035d0:	18000726 	beq	r3,zero,80035f0 <__divsi3+0x58>
 80035d4:	0005883a 	mov	r2,zero
 80035d8:	31400236 	bltu	r6,r5,80035e4 <__divsi3+0x4c>
 80035dc:	314dc83a 	sub	r6,r6,r5
 80035e0:	10c4b03a 	or	r2,r2,r3
 80035e4:	1806d07a 	srli	r3,r3,1
 80035e8:	280ad07a 	srli	r5,r5,1
 80035ec:	183ffa1e 	bne	r3,zero,80035d8 <__alt_data_end+0xfc0035d8>
 80035f0:	38000126 	beq	r7,zero,80035f8 <__divsi3+0x60>
 80035f4:	0085c83a 	sub	r2,zero,r2
 80035f8:	f800283a 	ret
 80035fc:	014bc83a 	sub	r5,zero,r5
 8003600:	39c0005c 	xori	r7,r7,1
 8003604:	003fe706 	br	80035a4 <__alt_data_end+0xfc0035a4>
 8003608:	0109c83a 	sub	r4,zero,r4
 800360c:	01c00044 	movi	r7,1
 8003610:	003fe306 	br	80035a0 <__alt_data_end+0xfc0035a0>
 8003614:	00c00044 	movi	r3,1
 8003618:	003fee06 	br	80035d4 <__alt_data_end+0xfc0035d4>

0800361c <__modsi3>:
 800361c:	20001716 	blt	r4,zero,800367c <__modsi3+0x60>
 8003620:	000f883a 	mov	r7,zero
 8003624:	2005883a 	mov	r2,r4
 8003628:	28001216 	blt	r5,zero,8003674 <__modsi3+0x58>
 800362c:	2900162e 	bgeu	r5,r4,8003688 <__modsi3+0x6c>
 8003630:	01800804 	movi	r6,32
 8003634:	00c00044 	movi	r3,1
 8003638:	00000106 	br	8003640 <__modsi3+0x24>
 800363c:	30000a26 	beq	r6,zero,8003668 <__modsi3+0x4c>
 8003640:	294b883a 	add	r5,r5,r5
 8003644:	31bfffc4 	addi	r6,r6,-1
 8003648:	18c7883a 	add	r3,r3,r3
 800364c:	293ffb36 	bltu	r5,r4,800363c <__alt_data_end+0xfc00363c>
 8003650:	18000526 	beq	r3,zero,8003668 <__modsi3+0x4c>
 8003654:	1806d07a 	srli	r3,r3,1
 8003658:	11400136 	bltu	r2,r5,8003660 <__modsi3+0x44>
 800365c:	1145c83a 	sub	r2,r2,r5
 8003660:	280ad07a 	srli	r5,r5,1
 8003664:	183ffb1e 	bne	r3,zero,8003654 <__alt_data_end+0xfc003654>
 8003668:	38000126 	beq	r7,zero,8003670 <__modsi3+0x54>
 800366c:	0085c83a 	sub	r2,zero,r2
 8003670:	f800283a 	ret
 8003674:	014bc83a 	sub	r5,zero,r5
 8003678:	003fec06 	br	800362c <__alt_data_end+0xfc00362c>
 800367c:	0109c83a 	sub	r4,zero,r4
 8003680:	01c00044 	movi	r7,1
 8003684:	003fe706 	br	8003624 <__alt_data_end+0xfc003624>
 8003688:	00c00044 	movi	r3,1
 800368c:	003ff106 	br	8003654 <__alt_data_end+0xfc003654>

08003690 <__udivsi3>:
 8003690:	200d883a 	mov	r6,r4
 8003694:	2900152e 	bgeu	r5,r4,80036ec <__udivsi3+0x5c>
 8003698:	28001416 	blt	r5,zero,80036ec <__udivsi3+0x5c>
 800369c:	00800804 	movi	r2,32
 80036a0:	00c00044 	movi	r3,1
 80036a4:	00000206 	br	80036b0 <__udivsi3+0x20>
 80036a8:	10000e26 	beq	r2,zero,80036e4 <__udivsi3+0x54>
 80036ac:	28000516 	blt	r5,zero,80036c4 <__udivsi3+0x34>
 80036b0:	294b883a 	add	r5,r5,r5
 80036b4:	10bfffc4 	addi	r2,r2,-1
 80036b8:	18c7883a 	add	r3,r3,r3
 80036bc:	293ffa36 	bltu	r5,r4,80036a8 <__alt_data_end+0xfc0036a8>
 80036c0:	18000826 	beq	r3,zero,80036e4 <__udivsi3+0x54>
 80036c4:	0005883a 	mov	r2,zero
 80036c8:	31400236 	bltu	r6,r5,80036d4 <__udivsi3+0x44>
 80036cc:	314dc83a 	sub	r6,r6,r5
 80036d0:	10c4b03a 	or	r2,r2,r3
 80036d4:	1806d07a 	srli	r3,r3,1
 80036d8:	280ad07a 	srli	r5,r5,1
 80036dc:	183ffa1e 	bne	r3,zero,80036c8 <__alt_data_end+0xfc0036c8>
 80036e0:	f800283a 	ret
 80036e4:	0005883a 	mov	r2,zero
 80036e8:	f800283a 	ret
 80036ec:	00c00044 	movi	r3,1
 80036f0:	003ff406 	br	80036c4 <__alt_data_end+0xfc0036c4>

080036f4 <__umodsi3>:
 80036f4:	2005883a 	mov	r2,r4
 80036f8:	2900122e 	bgeu	r5,r4,8003744 <__umodsi3+0x50>
 80036fc:	28001116 	blt	r5,zero,8003744 <__umodsi3+0x50>
 8003700:	01800804 	movi	r6,32
 8003704:	00c00044 	movi	r3,1
 8003708:	00000206 	br	8003714 <__umodsi3+0x20>
 800370c:	30000c26 	beq	r6,zero,8003740 <__umodsi3+0x4c>
 8003710:	28000516 	blt	r5,zero,8003728 <__umodsi3+0x34>
 8003714:	294b883a 	add	r5,r5,r5
 8003718:	31bfffc4 	addi	r6,r6,-1
 800371c:	18c7883a 	add	r3,r3,r3
 8003720:	293ffa36 	bltu	r5,r4,800370c <__alt_data_end+0xfc00370c>
 8003724:	18000626 	beq	r3,zero,8003740 <__umodsi3+0x4c>
 8003728:	1806d07a 	srli	r3,r3,1
 800372c:	11400136 	bltu	r2,r5,8003734 <__umodsi3+0x40>
 8003730:	1145c83a 	sub	r2,r2,r5
 8003734:	280ad07a 	srli	r5,r5,1
 8003738:	183ffb1e 	bne	r3,zero,8003728 <__alt_data_end+0xfc003728>
 800373c:	f800283a 	ret
 8003740:	f800283a 	ret
 8003744:	00c00044 	movi	r3,1
 8003748:	003ff706 	br	8003728 <__alt_data_end+0xfc003728>

0800374c <__mulsi3>:
 800374c:	0005883a 	mov	r2,zero
 8003750:	20000726 	beq	r4,zero,8003770 <__mulsi3+0x24>
 8003754:	20c0004c 	andi	r3,r4,1
 8003758:	2008d07a 	srli	r4,r4,1
 800375c:	18000126 	beq	r3,zero,8003764 <__mulsi3+0x18>
 8003760:	1145883a 	add	r2,r2,r5
 8003764:	294b883a 	add	r5,r5,r5
 8003768:	203ffa1e 	bne	r4,zero,8003754 <__alt_data_end+0xfc003754>
 800376c:	f800283a 	ret
 8003770:	f800283a 	ret

08003774 <_printf_r>:
 8003774:	defffd04 	addi	sp,sp,-12
 8003778:	2805883a 	mov	r2,r5
 800377c:	dfc00015 	stw	ra,0(sp)
 8003780:	d9800115 	stw	r6,4(sp)
 8003784:	d9c00215 	stw	r7,8(sp)
 8003788:	21400217 	ldw	r5,8(r4)
 800378c:	d9c00104 	addi	r7,sp,4
 8003790:	100d883a 	mov	r6,r2
 8003794:	800394c0 	call	800394c <___vfprintf_internal_r>
 8003798:	dfc00017 	ldw	ra,0(sp)
 800379c:	dec00304 	addi	sp,sp,12
 80037a0:	f800283a 	ret

080037a4 <printf>:
 80037a4:	defffc04 	addi	sp,sp,-16
 80037a8:	dfc00015 	stw	ra,0(sp)
 80037ac:	d9400115 	stw	r5,4(sp)
 80037b0:	d9800215 	stw	r6,8(sp)
 80037b4:	d9c00315 	stw	r7,12(sp)
 80037b8:	008200f4 	movhi	r2,2051
 80037bc:	108d0f04 	addi	r2,r2,13372
 80037c0:	10800017 	ldw	r2,0(r2)
 80037c4:	200b883a 	mov	r5,r4
 80037c8:	d9800104 	addi	r6,sp,4
 80037cc:	11000217 	ldw	r4,8(r2)
 80037d0:	8005c280 	call	8005c28 <__vfprintf_internal>
 80037d4:	dfc00017 	ldw	ra,0(sp)
 80037d8:	dec00404 	addi	sp,sp,16
 80037dc:	f800283a 	ret

080037e0 <_puts_r>:
 80037e0:	defff604 	addi	sp,sp,-40
 80037e4:	dc000715 	stw	r16,28(sp)
 80037e8:	2021883a 	mov	r16,r4
 80037ec:	2809883a 	mov	r4,r5
 80037f0:	dc400815 	stw	r17,32(sp)
 80037f4:	dfc00915 	stw	ra,36(sp)
 80037f8:	2823883a 	mov	r17,r5
 80037fc:	80038b40 	call	80038b4 <strlen>
 8003800:	10c00044 	addi	r3,r2,1
 8003804:	d8800115 	stw	r2,4(sp)
 8003808:	008200f4 	movhi	r2,2051
 800380c:	10851a04 	addi	r2,r2,5224
 8003810:	d8800215 	stw	r2,8(sp)
 8003814:	00800044 	movi	r2,1
 8003818:	d8800315 	stw	r2,12(sp)
 800381c:	00800084 	movi	r2,2
 8003820:	dc400015 	stw	r17,0(sp)
 8003824:	d8c00615 	stw	r3,24(sp)
 8003828:	dec00415 	stw	sp,16(sp)
 800382c:	d8800515 	stw	r2,20(sp)
 8003830:	80000226 	beq	r16,zero,800383c <_puts_r+0x5c>
 8003834:	80800e17 	ldw	r2,56(r16)
 8003838:	10001426 	beq	r2,zero,800388c <_puts_r+0xac>
 800383c:	81400217 	ldw	r5,8(r16)
 8003840:	2880030b 	ldhu	r2,12(r5)
 8003844:	10c8000c 	andi	r3,r2,8192
 8003848:	1800061e 	bne	r3,zero,8003864 <_puts_r+0x84>
 800384c:	29001917 	ldw	r4,100(r5)
 8003850:	00f7ffc4 	movi	r3,-8193
 8003854:	10880014 	ori	r2,r2,8192
 8003858:	20c6703a 	and	r3,r4,r3
 800385c:	2880030d 	sth	r2,12(r5)
 8003860:	28c01915 	stw	r3,100(r5)
 8003864:	d9800404 	addi	r6,sp,16
 8003868:	8009883a 	mov	r4,r16
 800386c:	80081900 	call	8008190 <__sfvwrite_r>
 8003870:	1000091e 	bne	r2,zero,8003898 <_puts_r+0xb8>
 8003874:	00800284 	movi	r2,10
 8003878:	dfc00917 	ldw	ra,36(sp)
 800387c:	dc400817 	ldw	r17,32(sp)
 8003880:	dc000717 	ldw	r16,28(sp)
 8003884:	dec00a04 	addi	sp,sp,40
 8003888:	f800283a 	ret
 800388c:	8009883a 	mov	r4,r16
 8003890:	8007d0c0 	call	8007d0c <__sinit>
 8003894:	003fe906 	br	800383c <__alt_data_end+0xfc00383c>
 8003898:	00bfffc4 	movi	r2,-1
 800389c:	003ff606 	br	8003878 <__alt_data_end+0xfc003878>

080038a0 <puts>:
 80038a0:	008200f4 	movhi	r2,2051
 80038a4:	108d0f04 	addi	r2,r2,13372
 80038a8:	200b883a 	mov	r5,r4
 80038ac:	11000017 	ldw	r4,0(r2)
 80038b0:	80037e01 	jmpi	80037e0 <_puts_r>

080038b4 <strlen>:
 80038b4:	208000cc 	andi	r2,r4,3
 80038b8:	10002026 	beq	r2,zero,800393c <strlen+0x88>
 80038bc:	20800007 	ldb	r2,0(r4)
 80038c0:	10002026 	beq	r2,zero,8003944 <strlen+0x90>
 80038c4:	2005883a 	mov	r2,r4
 80038c8:	00000206 	br	80038d4 <strlen+0x20>
 80038cc:	10c00007 	ldb	r3,0(r2)
 80038d0:	18001826 	beq	r3,zero,8003934 <strlen+0x80>
 80038d4:	10800044 	addi	r2,r2,1
 80038d8:	10c000cc 	andi	r3,r2,3
 80038dc:	183ffb1e 	bne	r3,zero,80038cc <__alt_data_end+0xfc0038cc>
 80038e0:	10c00017 	ldw	r3,0(r2)
 80038e4:	01ffbff4 	movhi	r7,65279
 80038e8:	39ffbfc4 	addi	r7,r7,-257
 80038ec:	00ca303a 	nor	r5,zero,r3
 80038f0:	01a02074 	movhi	r6,32897
 80038f4:	19c7883a 	add	r3,r3,r7
 80038f8:	31a02004 	addi	r6,r6,-32640
 80038fc:	1946703a 	and	r3,r3,r5
 8003900:	1986703a 	and	r3,r3,r6
 8003904:	1800091e 	bne	r3,zero,800392c <strlen+0x78>
 8003908:	10800104 	addi	r2,r2,4
 800390c:	10c00017 	ldw	r3,0(r2)
 8003910:	19cb883a 	add	r5,r3,r7
 8003914:	00c6303a 	nor	r3,zero,r3
 8003918:	28c6703a 	and	r3,r5,r3
 800391c:	1986703a 	and	r3,r3,r6
 8003920:	183ff926 	beq	r3,zero,8003908 <__alt_data_end+0xfc003908>
 8003924:	00000106 	br	800392c <strlen+0x78>
 8003928:	10800044 	addi	r2,r2,1
 800392c:	10c00007 	ldb	r3,0(r2)
 8003930:	183ffd1e 	bne	r3,zero,8003928 <__alt_data_end+0xfc003928>
 8003934:	1105c83a 	sub	r2,r2,r4
 8003938:	f800283a 	ret
 800393c:	2005883a 	mov	r2,r4
 8003940:	003fe706 	br	80038e0 <__alt_data_end+0xfc0038e0>
 8003944:	0005883a 	mov	r2,zero
 8003948:	f800283a 	ret

0800394c <___vfprintf_internal_r>:
 800394c:	deffb804 	addi	sp,sp,-288
 8003950:	dfc04715 	stw	ra,284(sp)
 8003954:	ddc04515 	stw	r23,276(sp)
 8003958:	dd404315 	stw	r21,268(sp)
 800395c:	d9002d15 	stw	r4,180(sp)
 8003960:	282f883a 	mov	r23,r5
 8003964:	302b883a 	mov	r21,r6
 8003968:	d9c02e15 	stw	r7,184(sp)
 800396c:	df004615 	stw	fp,280(sp)
 8003970:	dd804415 	stw	r22,272(sp)
 8003974:	dd004215 	stw	r20,264(sp)
 8003978:	dcc04115 	stw	r19,260(sp)
 800397c:	dc804015 	stw	r18,256(sp)
 8003980:	dc403f15 	stw	r17,252(sp)
 8003984:	dc003e15 	stw	r16,248(sp)
 8003988:	800888c0 	call	800888c <_localeconv_r>
 800398c:	10800017 	ldw	r2,0(r2)
 8003990:	1009883a 	mov	r4,r2
 8003994:	d8803415 	stw	r2,208(sp)
 8003998:	80038b40 	call	80038b4 <strlen>
 800399c:	d8803715 	stw	r2,220(sp)
 80039a0:	d8802d17 	ldw	r2,180(sp)
 80039a4:	10000226 	beq	r2,zero,80039b0 <___vfprintf_internal_r+0x64>
 80039a8:	10800e17 	ldw	r2,56(r2)
 80039ac:	1000fb26 	beq	r2,zero,8003d9c <___vfprintf_internal_r+0x450>
 80039b0:	b880030b 	ldhu	r2,12(r23)
 80039b4:	10c8000c 	andi	r3,r2,8192
 80039b8:	1800061e 	bne	r3,zero,80039d4 <___vfprintf_internal_r+0x88>
 80039bc:	b9001917 	ldw	r4,100(r23)
 80039c0:	00f7ffc4 	movi	r3,-8193
 80039c4:	10880014 	ori	r2,r2,8192
 80039c8:	20c6703a 	and	r3,r4,r3
 80039cc:	b880030d 	sth	r2,12(r23)
 80039d0:	b8c01915 	stw	r3,100(r23)
 80039d4:	10c0020c 	andi	r3,r2,8
 80039d8:	1800c326 	beq	r3,zero,8003ce8 <___vfprintf_internal_r+0x39c>
 80039dc:	b8c00417 	ldw	r3,16(r23)
 80039e0:	1800c126 	beq	r3,zero,8003ce8 <___vfprintf_internal_r+0x39c>
 80039e4:	1080068c 	andi	r2,r2,26
 80039e8:	00c00284 	movi	r3,10
 80039ec:	10c0c626 	beq	r2,r3,8003d08 <___vfprintf_internal_r+0x3bc>
 80039f0:	d8c00404 	addi	r3,sp,16
 80039f4:	050200f4 	movhi	r20,2051
 80039f8:	d9001e04 	addi	r4,sp,120
 80039fc:	a5052b84 	addi	r20,r20,5294
 8003a00:	d8c01e15 	stw	r3,120(sp)
 8003a04:	d8002015 	stw	zero,128(sp)
 8003a08:	d8001f15 	stw	zero,124(sp)
 8003a0c:	d8003315 	stw	zero,204(sp)
 8003a10:	d8003615 	stw	zero,216(sp)
 8003a14:	d8003815 	stw	zero,224(sp)
 8003a18:	1811883a 	mov	r8,r3
 8003a1c:	d8003915 	stw	zero,228(sp)
 8003a20:	d8003a15 	stw	zero,232(sp)
 8003a24:	d8002f15 	stw	zero,188(sp)
 8003a28:	d9002815 	stw	r4,160(sp)
 8003a2c:	a8800007 	ldb	r2,0(r21)
 8003a30:	10028b26 	beq	r2,zero,8004460 <___vfprintf_internal_r+0xb14>
 8003a34:	00c00944 	movi	r3,37
 8003a38:	a823883a 	mov	r17,r21
 8003a3c:	10c0021e 	bne	r2,r3,8003a48 <___vfprintf_internal_r+0xfc>
 8003a40:	00001406 	br	8003a94 <___vfprintf_internal_r+0x148>
 8003a44:	10c00326 	beq	r2,r3,8003a54 <___vfprintf_internal_r+0x108>
 8003a48:	8c400044 	addi	r17,r17,1
 8003a4c:	88800007 	ldb	r2,0(r17)
 8003a50:	103ffc1e 	bne	r2,zero,8003a44 <__alt_data_end+0xfc003a44>
 8003a54:	8d61c83a 	sub	r16,r17,r21
 8003a58:	80000e26 	beq	r16,zero,8003a94 <___vfprintf_internal_r+0x148>
 8003a5c:	d8c02017 	ldw	r3,128(sp)
 8003a60:	d8801f17 	ldw	r2,124(sp)
 8003a64:	45400015 	stw	r21,0(r8)
 8003a68:	1c07883a 	add	r3,r3,r16
 8003a6c:	10800044 	addi	r2,r2,1
 8003a70:	d8c02015 	stw	r3,128(sp)
 8003a74:	44000115 	stw	r16,4(r8)
 8003a78:	d8801f15 	stw	r2,124(sp)
 8003a7c:	00c001c4 	movi	r3,7
 8003a80:	1880a916 	blt	r3,r2,8003d28 <___vfprintf_internal_r+0x3dc>
 8003a84:	42000204 	addi	r8,r8,8
 8003a88:	d9402f17 	ldw	r5,188(sp)
 8003a8c:	2c0b883a 	add	r5,r5,r16
 8003a90:	d9402f15 	stw	r5,188(sp)
 8003a94:	88800007 	ldb	r2,0(r17)
 8003a98:	1000aa26 	beq	r2,zero,8003d44 <___vfprintf_internal_r+0x3f8>
 8003a9c:	8d400044 	addi	r21,r17,1
 8003aa0:	8c400047 	ldb	r17,1(r17)
 8003aa4:	0021883a 	mov	r16,zero
 8003aa8:	00bfffc4 	movi	r2,-1
 8003aac:	0025883a 	mov	r18,zero
 8003ab0:	dc002905 	stb	r16,164(sp)
 8003ab4:	d8002785 	stb	zero,158(sp)
 8003ab8:	d8002b05 	stb	zero,172(sp)
 8003abc:	d8802a15 	stw	r2,168(sp)
 8003ac0:	d8003115 	stw	zero,196(sp)
 8003ac4:	04c01604 	movi	r19,88
 8003ac8:	05800244 	movi	r22,9
 8003acc:	9021883a 	mov	r16,r18
 8003ad0:	4039883a 	mov	fp,r8
 8003ad4:	ad400044 	addi	r21,r21,1
 8003ad8:	88bff804 	addi	r2,r17,-32
 8003adc:	98833236 	bltu	r19,r2,80047a8 <___vfprintf_internal_r+0xe5c>
 8003ae0:	100490ba 	slli	r2,r2,2
 8003ae4:	00c20034 	movhi	r3,2048
 8003ae8:	18cebe04 	addi	r3,r3,15096
 8003aec:	10c5883a 	add	r2,r2,r3
 8003af0:	10800017 	ldw	r2,0(r2)
 8003af4:	1000683a 	jmp	r2
 8003af8:	080046a0 	cmpeqi	zero,at,282
 8003afc:	080047a8 	cmpgeui	zero,at,286
 8003b00:	080047a8 	cmpgeui	zero,at,286
 8003b04:	080046c0 	call	80046c <__alt_mem_onchip_memory2_0+0x80046c>
 8003b08:	080047a8 	cmpgeui	zero,at,286
 8003b0c:	080047a8 	cmpgeui	zero,at,286
 8003b10:	080047a8 	cmpgeui	zero,at,286
 8003b14:	080047a8 	cmpgeui	zero,at,286
 8003b18:	080047a8 	cmpgeui	zero,at,286
 8003b1c:	080047a8 	cmpgeui	zero,at,286
 8003b20:	08003da8 	cmpgeui	zero,at,246
 8003b24:	080045b0 	cmpltui	zero,at,278
 8003b28:	080047a8 	cmpgeui	zero,at,286
 8003b2c:	08003c6c 	andhi	zero,at,241
 8003b30:	08003dcc 	andi	zero,at,247
 8003b34:	080047a8 	cmpgeui	zero,at,286
 8003b38:	08003e1c 	xori	zero,at,248
 8003b3c:	08003e28 	cmpgeui	zero,at,248
 8003b40:	08003e28 	cmpgeui	zero,at,248
 8003b44:	08003e28 	cmpgeui	zero,at,248
 8003b48:	08003e28 	cmpgeui	zero,at,248
 8003b4c:	08003e28 	cmpgeui	zero,at,248
 8003b50:	08003e28 	cmpgeui	zero,at,248
 8003b54:	08003e28 	cmpgeui	zero,at,248
 8003b58:	08003e28 	cmpgeui	zero,at,248
 8003b5c:	08003e28 	cmpgeui	zero,at,248
 8003b60:	080047a8 	cmpgeui	zero,at,286
 8003b64:	080047a8 	cmpgeui	zero,at,286
 8003b68:	080047a8 	cmpgeui	zero,at,286
 8003b6c:	080047a8 	cmpgeui	zero,at,286
 8003b70:	080047a8 	cmpgeui	zero,at,286
 8003b74:	080047a8 	cmpgeui	zero,at,286
 8003b78:	080047a8 	cmpgeui	zero,at,286
 8003b7c:	080047a8 	cmpgeui	zero,at,286
 8003b80:	080047a8 	cmpgeui	zero,at,286
 8003b84:	080047a8 	cmpgeui	zero,at,286
 8003b88:	08003e64 	muli	zero,at,249
 8003b8c:	08003f2c 	andhi	zero,at,252
 8003b90:	080047a8 	cmpgeui	zero,at,286
 8003b94:	08003f2c 	andhi	zero,at,252
 8003b98:	080047a8 	cmpgeui	zero,at,286
 8003b9c:	080047a8 	cmpgeui	zero,at,286
 8003ba0:	080047a8 	cmpgeui	zero,at,286
 8003ba4:	080047a8 	cmpgeui	zero,at,286
 8003ba8:	08003fd8 	cmpnei	zero,at,255
 8003bac:	080047a8 	cmpgeui	zero,at,286
 8003bb0:	080047a8 	cmpgeui	zero,at,286
 8003bb4:	08003fe4 	muli	zero,at,255
 8003bb8:	080047a8 	cmpgeui	zero,at,286
 8003bbc:	080047a8 	cmpgeui	zero,at,286
 8003bc0:	080047a8 	cmpgeui	zero,at,286
 8003bc4:	080047a8 	cmpgeui	zero,at,286
 8003bc8:	080047a8 	cmpgeui	zero,at,286
 8003bcc:	08004468 	cmpgeui	zero,at,273
 8003bd0:	080047a8 	cmpgeui	zero,at,286
 8003bd4:	080047a8 	cmpgeui	zero,at,286
 8003bd8:	080044d4 	ori	zero,at,275
 8003bdc:	080047a8 	cmpgeui	zero,at,286
 8003be0:	080047a8 	cmpgeui	zero,at,286
 8003be4:	080047a8 	cmpgeui	zero,at,286
 8003be8:	080047a8 	cmpgeui	zero,at,286
 8003bec:	080047a8 	cmpgeui	zero,at,286
 8003bf0:	080047a8 	cmpgeui	zero,at,286
 8003bf4:	080047a8 	cmpgeui	zero,at,286
 8003bf8:	080047a8 	cmpgeui	zero,at,286
 8003bfc:	080047a8 	cmpgeui	zero,at,286
 8003c00:	080047a8 	cmpgeui	zero,at,286
 8003c04:	0800474c 	andi	zero,at,285
 8003c08:	080046cc 	andi	zero,at,283
 8003c0c:	08003f2c 	andhi	zero,at,252
 8003c10:	08003f2c 	andhi	zero,at,252
 8003c14:	08003f2c 	andhi	zero,at,252
 8003c18:	080046ec 	andhi	zero,at,283
 8003c1c:	080046cc 	andi	zero,at,283
 8003c20:	080047a8 	cmpgeui	zero,at,286
 8003c24:	080047a8 	cmpgeui	zero,at,286
 8003c28:	080046f8 	rdprs	zero,at,283
 8003c2c:	080047a8 	cmpgeui	zero,at,286
 8003c30:	0800470c 	andi	zero,at,284
 8003c34:	08004590 	cmplti	zero,at,278
 8003c38:	08003c78 	rdprs	zero,at,241
 8003c3c:	080045c8 	cmpgei	zero,at,279
 8003c40:	080047a8 	cmpgeui	zero,at,286
 8003c44:	080045d4 	ori	zero,at,279
 8003c48:	080047a8 	cmpgeui	zero,at,286
 8003c4c:	08004638 	rdprs	zero,at,280
 8003c50:	080047a8 	cmpgeui	zero,at,286
 8003c54:	080047a8 	cmpgeui	zero,at,286
 8003c58:	08004658 	cmpnei	zero,at,281
 8003c5c:	d8c03117 	ldw	r3,196(sp)
 8003c60:	d8802e15 	stw	r2,184(sp)
 8003c64:	00c7c83a 	sub	r3,zero,r3
 8003c68:	d8c03115 	stw	r3,196(sp)
 8003c6c:	84000114 	ori	r16,r16,4
 8003c70:	ac400007 	ldb	r17,0(r21)
 8003c74:	003f9706 	br	8003ad4 <__alt_data_end+0xfc003ad4>
 8003c78:	00800c04 	movi	r2,48
 8003c7c:	d8802705 	stb	r2,156(sp)
 8003c80:	00801e04 	movi	r2,120
 8003c84:	d8802745 	stb	r2,157(sp)
 8003c88:	d9002a17 	ldw	r4,168(sp)
 8003c8c:	d8802e17 	ldw	r2,184(sp)
 8003c90:	d8002785 	stb	zero,158(sp)
 8003c94:	e011883a 	mov	r8,fp
 8003c98:	10c00104 	addi	r3,r2,4
 8003c9c:	14c00017 	ldw	r19,0(r2)
 8003ca0:	002d883a 	mov	r22,zero
 8003ca4:	80800094 	ori	r2,r16,2
 8003ca8:	2002ca16 	blt	r4,zero,80047d4 <___vfprintf_internal_r+0xe88>
 8003cac:	00bfdfc4 	movi	r2,-129
 8003cb0:	80a4703a 	and	r18,r16,r2
 8003cb4:	d8c02e15 	stw	r3,184(sp)
 8003cb8:	94800094 	ori	r18,r18,2
 8003cbc:	9802b41e 	bne	r19,zero,8004790 <___vfprintf_internal_r+0xe44>
 8003cc0:	014200f4 	movhi	r5,2051
 8003cc4:	29452404 	addi	r5,r5,5264
 8003cc8:	d9403915 	stw	r5,228(sp)
 8003ccc:	04401e04 	movi	r17,120
 8003cd0:	d8802a17 	ldw	r2,168(sp)
 8003cd4:	0039883a 	mov	fp,zero
 8003cd8:	1001fa26 	beq	r2,zero,80044c4 <___vfprintf_internal_r+0xb78>
 8003cdc:	0027883a 	mov	r19,zero
 8003ce0:	002d883a 	mov	r22,zero
 8003ce4:	00021906 	br	800454c <___vfprintf_internal_r+0xc00>
 8003ce8:	d9002d17 	ldw	r4,180(sp)
 8003cec:	b80b883a 	mov	r5,r23
 8003cf0:	8005d000 	call	8005d00 <__swsetup_r>
 8003cf4:	1005dc1e 	bne	r2,zero,8005468 <___vfprintf_internal_r+0x1b1c>
 8003cf8:	b880030b 	ldhu	r2,12(r23)
 8003cfc:	00c00284 	movi	r3,10
 8003d00:	1080068c 	andi	r2,r2,26
 8003d04:	10ff3a1e 	bne	r2,r3,80039f0 <__alt_data_end+0xfc0039f0>
 8003d08:	b880038f 	ldh	r2,14(r23)
 8003d0c:	103f3816 	blt	r2,zero,80039f0 <__alt_data_end+0xfc0039f0>
 8003d10:	d9c02e17 	ldw	r7,184(sp)
 8003d14:	d9002d17 	ldw	r4,180(sp)
 8003d18:	a80d883a 	mov	r6,r21
 8003d1c:	b80b883a 	mov	r5,r23
 8003d20:	8005c440 	call	8005c44 <__sbprintf>
 8003d24:	00001106 	br	8003d6c <___vfprintf_internal_r+0x420>
 8003d28:	d9002d17 	ldw	r4,180(sp)
 8003d2c:	d9801e04 	addi	r6,sp,120
 8003d30:	b80b883a 	mov	r5,r23
 8003d34:	800b12c0 	call	800b12c <__sprint_r>
 8003d38:	1000081e 	bne	r2,zero,8003d5c <___vfprintf_internal_r+0x410>
 8003d3c:	da000404 	addi	r8,sp,16
 8003d40:	003f5106 	br	8003a88 <__alt_data_end+0xfc003a88>
 8003d44:	d8802017 	ldw	r2,128(sp)
 8003d48:	10000426 	beq	r2,zero,8003d5c <___vfprintf_internal_r+0x410>
 8003d4c:	d9002d17 	ldw	r4,180(sp)
 8003d50:	d9801e04 	addi	r6,sp,120
 8003d54:	b80b883a 	mov	r5,r23
 8003d58:	800b12c0 	call	800b12c <__sprint_r>
 8003d5c:	b880030b 	ldhu	r2,12(r23)
 8003d60:	1080100c 	andi	r2,r2,64
 8003d64:	1005c01e 	bne	r2,zero,8005468 <___vfprintf_internal_r+0x1b1c>
 8003d68:	d8802f17 	ldw	r2,188(sp)
 8003d6c:	dfc04717 	ldw	ra,284(sp)
 8003d70:	df004617 	ldw	fp,280(sp)
 8003d74:	ddc04517 	ldw	r23,276(sp)
 8003d78:	dd804417 	ldw	r22,272(sp)
 8003d7c:	dd404317 	ldw	r21,268(sp)
 8003d80:	dd004217 	ldw	r20,264(sp)
 8003d84:	dcc04117 	ldw	r19,260(sp)
 8003d88:	dc804017 	ldw	r18,256(sp)
 8003d8c:	dc403f17 	ldw	r17,252(sp)
 8003d90:	dc003e17 	ldw	r16,248(sp)
 8003d94:	dec04804 	addi	sp,sp,288
 8003d98:	f800283a 	ret
 8003d9c:	d9002d17 	ldw	r4,180(sp)
 8003da0:	8007d0c0 	call	8007d0c <__sinit>
 8003da4:	003f0206 	br	80039b0 <__alt_data_end+0xfc0039b0>
 8003da8:	d9002e17 	ldw	r4,184(sp)
 8003dac:	d9402e17 	ldw	r5,184(sp)
 8003db0:	21000017 	ldw	r4,0(r4)
 8003db4:	28800104 	addi	r2,r5,4
 8003db8:	d9003115 	stw	r4,196(sp)
 8003dbc:	203fa716 	blt	r4,zero,8003c5c <__alt_data_end+0xfc003c5c>
 8003dc0:	d8802e15 	stw	r2,184(sp)
 8003dc4:	ac400007 	ldb	r17,0(r21)
 8003dc8:	003f4206 	br	8003ad4 <__alt_data_end+0xfc003ad4>
 8003dcc:	ac400007 	ldb	r17,0(r21)
 8003dd0:	01000a84 	movi	r4,42
 8003dd4:	a8c00044 	addi	r3,r21,1
 8003dd8:	89075826 	beq	r17,r4,8005b3c <___vfprintf_internal_r+0x21f0>
 8003ddc:	8cbff404 	addi	r18,r17,-48
 8003de0:	b486ae36 	bltu	r22,r18,800589c <___vfprintf_internal_r+0x1f50>
 8003de4:	0009883a 	mov	r4,zero
 8003de8:	1823883a 	mov	r17,r3
 8003dec:	01400284 	movi	r5,10
 8003df0:	800374c0 	call	800374c <__mulsi3>
 8003df4:	88c00007 	ldb	r3,0(r17)
 8003df8:	1489883a 	add	r4,r2,r18
 8003dfc:	8d400044 	addi	r21,r17,1
 8003e00:	1cbff404 	addi	r18,r3,-48
 8003e04:	a823883a 	mov	r17,r21
 8003e08:	b4bff82e 	bgeu	r22,r18,8003dec <__alt_data_end+0xfc003dec>
 8003e0c:	1823883a 	mov	r17,r3
 8003e10:	2005f616 	blt	r4,zero,80055ec <___vfprintf_internal_r+0x1ca0>
 8003e14:	d9002a15 	stw	r4,168(sp)
 8003e18:	003f2f06 	br	8003ad8 <__alt_data_end+0xfc003ad8>
 8003e1c:	84002014 	ori	r16,r16,128
 8003e20:	ac400007 	ldb	r17,0(r21)
 8003e24:	003f2b06 	br	8003ad4 <__alt_data_end+0xfc003ad4>
 8003e28:	8cbff404 	addi	r18,r17,-48
 8003e2c:	d8003115 	stw	zero,196(sp)
 8003e30:	0009883a 	mov	r4,zero
 8003e34:	a823883a 	mov	r17,r21
 8003e38:	01400284 	movi	r5,10
 8003e3c:	800374c0 	call	800374c <__mulsi3>
 8003e40:	88c00007 	ldb	r3,0(r17)
 8003e44:	9089883a 	add	r4,r18,r2
 8003e48:	ad400044 	addi	r21,r21,1
 8003e4c:	1cbff404 	addi	r18,r3,-48
 8003e50:	a823883a 	mov	r17,r21
 8003e54:	b4bff82e 	bgeu	r22,r18,8003e38 <__alt_data_end+0xfc003e38>
 8003e58:	1823883a 	mov	r17,r3
 8003e5c:	d9003115 	stw	r4,196(sp)
 8003e60:	003f1d06 	br	8003ad8 <__alt_data_end+0xfc003ad8>
 8003e64:	8025883a 	mov	r18,r16
 8003e68:	dc002903 	ldbu	r16,164(sp)
 8003e6c:	e011883a 	mov	r8,fp
 8003e70:	84003fcc 	andi	r16,r16,255
 8003e74:	8007531e 	bne	r16,zero,8005bc4 <___vfprintf_internal_r+0x2278>
 8003e78:	94800414 	ori	r18,r18,16
 8003e7c:	9080080c 	andi	r2,r18,32
 8003e80:	1003a326 	beq	r2,zero,8004d10 <___vfprintf_internal_r+0x13c4>
 8003e84:	d9002e17 	ldw	r4,184(sp)
 8003e88:	20800117 	ldw	r2,4(r4)
 8003e8c:	24c00017 	ldw	r19,0(r4)
 8003e90:	21000204 	addi	r4,r4,8
 8003e94:	d9002e15 	stw	r4,184(sp)
 8003e98:	102d883a 	mov	r22,r2
 8003e9c:	10047316 	blt	r2,zero,800506c <___vfprintf_internal_r+0x1720>
 8003ea0:	d9002a17 	ldw	r4,168(sp)
 8003ea4:	df002783 	ldbu	fp,158(sp)
 8003ea8:	2003e416 	blt	r4,zero,8004e3c <___vfprintf_internal_r+0x14f0>
 8003eac:	00ffdfc4 	movi	r3,-129
 8003eb0:	9d84b03a 	or	r2,r19,r22
 8003eb4:	90e4703a 	and	r18,r18,r3
 8003eb8:	10018026 	beq	r2,zero,80044bc <___vfprintf_internal_r+0xb70>
 8003ebc:	b003ab26 	beq	r22,zero,8004d6c <___vfprintf_internal_r+0x1420>
 8003ec0:	dc402915 	stw	r17,164(sp)
 8003ec4:	dc001e04 	addi	r16,sp,120
 8003ec8:	b023883a 	mov	r17,r22
 8003ecc:	402d883a 	mov	r22,r8
 8003ed0:	9809883a 	mov	r4,r19
 8003ed4:	880b883a 	mov	r5,r17
 8003ed8:	01800284 	movi	r6,10
 8003edc:	000f883a 	mov	r7,zero
 8003ee0:	800d6700 	call	800d670 <__umoddi3>
 8003ee4:	10800c04 	addi	r2,r2,48
 8003ee8:	843fffc4 	addi	r16,r16,-1
 8003eec:	9809883a 	mov	r4,r19
 8003ef0:	880b883a 	mov	r5,r17
 8003ef4:	80800005 	stb	r2,0(r16)
 8003ef8:	01800284 	movi	r6,10
 8003efc:	000f883a 	mov	r7,zero
 8003f00:	800d0740 	call	800d074 <__udivdi3>
 8003f04:	1027883a 	mov	r19,r2
 8003f08:	10c4b03a 	or	r2,r2,r3
 8003f0c:	1823883a 	mov	r17,r3
 8003f10:	103fef1e 	bne	r2,zero,8003ed0 <__alt_data_end+0xfc003ed0>
 8003f14:	d8c02817 	ldw	r3,160(sp)
 8003f18:	dc402917 	ldw	r17,164(sp)
 8003f1c:	b011883a 	mov	r8,r22
 8003f20:	1c07c83a 	sub	r3,r3,r16
 8003f24:	d8c02b15 	stw	r3,172(sp)
 8003f28:	00005f06 	br	80040a8 <___vfprintf_internal_r+0x75c>
 8003f2c:	8025883a 	mov	r18,r16
 8003f30:	dc002903 	ldbu	r16,164(sp)
 8003f34:	e011883a 	mov	r8,fp
 8003f38:	84003fcc 	andi	r16,r16,255
 8003f3c:	80071e1e 	bne	r16,zero,8005bb8 <___vfprintf_internal_r+0x226c>
 8003f40:	9080020c 	andi	r2,r18,8
 8003f44:	1004af26 	beq	r2,zero,8005204 <___vfprintf_internal_r+0x18b8>
 8003f48:	d9002e17 	ldw	r4,184(sp)
 8003f4c:	d9402e17 	ldw	r5,184(sp)
 8003f50:	d8802e17 	ldw	r2,184(sp)
 8003f54:	21000017 	ldw	r4,0(r4)
 8003f58:	29400117 	ldw	r5,4(r5)
 8003f5c:	10800204 	addi	r2,r2,8
 8003f60:	d9003615 	stw	r4,216(sp)
 8003f64:	d9403815 	stw	r5,224(sp)
 8003f68:	d8802e15 	stw	r2,184(sp)
 8003f6c:	d9003617 	ldw	r4,216(sp)
 8003f70:	d9403817 	ldw	r5,224(sp)
 8003f74:	da003d15 	stw	r8,244(sp)
 8003f78:	04000044 	movi	r16,1
 8003f7c:	800ad500 	call	800ad50 <__fpclassifyd>
 8003f80:	da003d17 	ldw	r8,244(sp)
 8003f84:	1404441e 	bne	r2,r16,8005098 <___vfprintf_internal_r+0x174c>
 8003f88:	d9003617 	ldw	r4,216(sp)
 8003f8c:	d9403817 	ldw	r5,224(sp)
 8003f90:	000d883a 	mov	r6,zero
 8003f94:	000f883a 	mov	r7,zero
 8003f98:	800f0140 	call	800f014 <__ledf2>
 8003f9c:	da003d17 	ldw	r8,244(sp)
 8003fa0:	1005e316 	blt	r2,zero,8005730 <___vfprintf_internal_r+0x1de4>
 8003fa4:	df002783 	ldbu	fp,158(sp)
 8003fa8:	008011c4 	movi	r2,71
 8003fac:	1445580e 	bge	r2,r17,8005510 <___vfprintf_internal_r+0x1bc4>
 8003fb0:	040200f4 	movhi	r16,2051
 8003fb4:	84051c04 	addi	r16,r16,5232
 8003fb8:	00c000c4 	movi	r3,3
 8003fbc:	00bfdfc4 	movi	r2,-129
 8003fc0:	d8c02915 	stw	r3,164(sp)
 8003fc4:	90a4703a 	and	r18,r18,r2
 8003fc8:	d8c02b15 	stw	r3,172(sp)
 8003fcc:	d8002a15 	stw	zero,168(sp)
 8003fd0:	d8003215 	stw	zero,200(sp)
 8003fd4:	00003a06 	br	80040c0 <___vfprintf_internal_r+0x774>
 8003fd8:	84000214 	ori	r16,r16,8
 8003fdc:	ac400007 	ldb	r17,0(r21)
 8003fe0:	003ebc06 	br	8003ad4 <__alt_data_end+0xfc003ad4>
 8003fe4:	8025883a 	mov	r18,r16
 8003fe8:	dc002903 	ldbu	r16,164(sp)
 8003fec:	e011883a 	mov	r8,fp
 8003ff0:	84003fcc 	andi	r16,r16,255
 8003ff4:	8007001e 	bne	r16,zero,8005bf8 <___vfprintf_internal_r+0x22ac>
 8003ff8:	94800414 	ori	r18,r18,16
 8003ffc:	9080080c 	andi	r2,r18,32
 8004000:	1002fa26 	beq	r2,zero,8004bec <___vfprintf_internal_r+0x12a0>
 8004004:	d9002e17 	ldw	r4,184(sp)
 8004008:	d9402a17 	ldw	r5,168(sp)
 800400c:	d8002785 	stb	zero,158(sp)
 8004010:	20800204 	addi	r2,r4,8
 8004014:	24c00017 	ldw	r19,0(r4)
 8004018:	25800117 	ldw	r22,4(r4)
 800401c:	2804b116 	blt	r5,zero,80052e4 <___vfprintf_internal_r+0x1998>
 8004020:	013fdfc4 	movi	r4,-129
 8004024:	9d86b03a 	or	r3,r19,r22
 8004028:	d8802e15 	stw	r2,184(sp)
 800402c:	9124703a 	and	r18,r18,r4
 8004030:	1802fb1e 	bne	r3,zero,8004c20 <___vfprintf_internal_r+0x12d4>
 8004034:	d8c02a17 	ldw	r3,168(sp)
 8004038:	0039883a 	mov	fp,zero
 800403c:	1805e526 	beq	r3,zero,80057d4 <___vfprintf_internal_r+0x1e88>
 8004040:	0027883a 	mov	r19,zero
 8004044:	002d883a 	mov	r22,zero
 8004048:	dc001e04 	addi	r16,sp,120
 800404c:	9806d0fa 	srli	r3,r19,3
 8004050:	b008977a 	slli	r4,r22,29
 8004054:	b02cd0fa 	srli	r22,r22,3
 8004058:	9cc001cc 	andi	r19,r19,7
 800405c:	98800c04 	addi	r2,r19,48
 8004060:	843fffc4 	addi	r16,r16,-1
 8004064:	20e6b03a 	or	r19,r4,r3
 8004068:	80800005 	stb	r2,0(r16)
 800406c:	9d86b03a 	or	r3,r19,r22
 8004070:	183ff61e 	bne	r3,zero,800404c <__alt_data_end+0xfc00404c>
 8004074:	90c0004c 	andi	r3,r18,1
 8004078:	18014126 	beq	r3,zero,8004580 <___vfprintf_internal_r+0xc34>
 800407c:	10803fcc 	andi	r2,r2,255
 8004080:	1080201c 	xori	r2,r2,128
 8004084:	10bfe004 	addi	r2,r2,-128
 8004088:	00c00c04 	movi	r3,48
 800408c:	10c13c26 	beq	r2,r3,8004580 <___vfprintf_internal_r+0xc34>
 8004090:	80ffffc5 	stb	r3,-1(r16)
 8004094:	d8c02817 	ldw	r3,160(sp)
 8004098:	80bfffc4 	addi	r2,r16,-1
 800409c:	1021883a 	mov	r16,r2
 80040a0:	1887c83a 	sub	r3,r3,r2
 80040a4:	d8c02b15 	stw	r3,172(sp)
 80040a8:	d8802b17 	ldw	r2,172(sp)
 80040ac:	d9002a17 	ldw	r4,168(sp)
 80040b0:	1100010e 	bge	r2,r4,80040b8 <___vfprintf_internal_r+0x76c>
 80040b4:	2005883a 	mov	r2,r4
 80040b8:	d8802915 	stw	r2,164(sp)
 80040bc:	d8003215 	stw	zero,200(sp)
 80040c0:	e7003fcc 	andi	fp,fp,255
 80040c4:	e700201c 	xori	fp,fp,128
 80040c8:	e73fe004 	addi	fp,fp,-128
 80040cc:	e0000326 	beq	fp,zero,80040dc <___vfprintf_internal_r+0x790>
 80040d0:	d8c02917 	ldw	r3,164(sp)
 80040d4:	18c00044 	addi	r3,r3,1
 80040d8:	d8c02915 	stw	r3,164(sp)
 80040dc:	90c0008c 	andi	r3,r18,2
 80040e0:	d8c02c15 	stw	r3,176(sp)
 80040e4:	18000326 	beq	r3,zero,80040f4 <___vfprintf_internal_r+0x7a8>
 80040e8:	d8c02917 	ldw	r3,164(sp)
 80040ec:	18c00084 	addi	r3,r3,2
 80040f0:	d8c02915 	stw	r3,164(sp)
 80040f4:	90c0210c 	andi	r3,r18,132
 80040f8:	d8c03015 	stw	r3,192(sp)
 80040fc:	1801c51e 	bne	r3,zero,8004814 <___vfprintf_internal_r+0xec8>
 8004100:	d9003117 	ldw	r4,196(sp)
 8004104:	d8c02917 	ldw	r3,164(sp)
 8004108:	20e7c83a 	sub	r19,r4,r3
 800410c:	04c1c10e 	bge	zero,r19,8004814 <___vfprintf_internal_r+0xec8>
 8004110:	02400404 	movi	r9,16
 8004114:	d8c02017 	ldw	r3,128(sp)
 8004118:	d8801f17 	ldw	r2,124(sp)
 800411c:	4cc52f0e 	bge	r9,r19,80055dc <___vfprintf_internal_r+0x1c90>
 8004120:	014200f4 	movhi	r5,2051
 8004124:	29452f84 	addi	r5,r5,5310
 8004128:	dc403b15 	stw	r17,236(sp)
 800412c:	d9403515 	stw	r5,212(sp)
 8004130:	9823883a 	mov	r17,r19
 8004134:	482d883a 	mov	r22,r9
 8004138:	9027883a 	mov	r19,r18
 800413c:	070001c4 	movi	fp,7
 8004140:	8025883a 	mov	r18,r16
 8004144:	dc002d17 	ldw	r16,180(sp)
 8004148:	00000306 	br	8004158 <___vfprintf_internal_r+0x80c>
 800414c:	8c7ffc04 	addi	r17,r17,-16
 8004150:	42000204 	addi	r8,r8,8
 8004154:	b440130e 	bge	r22,r17,80041a4 <___vfprintf_internal_r+0x858>
 8004158:	010200f4 	movhi	r4,2051
 800415c:	18c00404 	addi	r3,r3,16
 8004160:	10800044 	addi	r2,r2,1
 8004164:	21052f84 	addi	r4,r4,5310
 8004168:	41000015 	stw	r4,0(r8)
 800416c:	45800115 	stw	r22,4(r8)
 8004170:	d8c02015 	stw	r3,128(sp)
 8004174:	d8801f15 	stw	r2,124(sp)
 8004178:	e0bff40e 	bge	fp,r2,800414c <__alt_data_end+0xfc00414c>
 800417c:	d9801e04 	addi	r6,sp,120
 8004180:	b80b883a 	mov	r5,r23
 8004184:	8009883a 	mov	r4,r16
 8004188:	800b12c0 	call	800b12c <__sprint_r>
 800418c:	103ef31e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8004190:	8c7ffc04 	addi	r17,r17,-16
 8004194:	d8c02017 	ldw	r3,128(sp)
 8004198:	d8801f17 	ldw	r2,124(sp)
 800419c:	da000404 	addi	r8,sp,16
 80041a0:	b47fed16 	blt	r22,r17,8004158 <__alt_data_end+0xfc004158>
 80041a4:	9021883a 	mov	r16,r18
 80041a8:	9825883a 	mov	r18,r19
 80041ac:	8827883a 	mov	r19,r17
 80041b0:	dc403b17 	ldw	r17,236(sp)
 80041b4:	d9403517 	ldw	r5,212(sp)
 80041b8:	98c7883a 	add	r3,r19,r3
 80041bc:	10800044 	addi	r2,r2,1
 80041c0:	41400015 	stw	r5,0(r8)
 80041c4:	44c00115 	stw	r19,4(r8)
 80041c8:	d8c02015 	stw	r3,128(sp)
 80041cc:	d8801f15 	stw	r2,124(sp)
 80041d0:	010001c4 	movi	r4,7
 80041d4:	2082c516 	blt	r4,r2,8004cec <___vfprintf_internal_r+0x13a0>
 80041d8:	df002787 	ldb	fp,158(sp)
 80041dc:	42000204 	addi	r8,r8,8
 80041e0:	e0000c26 	beq	fp,zero,8004214 <___vfprintf_internal_r+0x8c8>
 80041e4:	d8801f17 	ldw	r2,124(sp)
 80041e8:	d9002784 	addi	r4,sp,158
 80041ec:	18c00044 	addi	r3,r3,1
 80041f0:	10800044 	addi	r2,r2,1
 80041f4:	41000015 	stw	r4,0(r8)
 80041f8:	01000044 	movi	r4,1
 80041fc:	41000115 	stw	r4,4(r8)
 8004200:	d8c02015 	stw	r3,128(sp)
 8004204:	d8801f15 	stw	r2,124(sp)
 8004208:	010001c4 	movi	r4,7
 800420c:	20825e16 	blt	r4,r2,8004b88 <___vfprintf_internal_r+0x123c>
 8004210:	42000204 	addi	r8,r8,8
 8004214:	d8802c17 	ldw	r2,176(sp)
 8004218:	10000c26 	beq	r2,zero,800424c <___vfprintf_internal_r+0x900>
 800421c:	d8801f17 	ldw	r2,124(sp)
 8004220:	d9002704 	addi	r4,sp,156
 8004224:	18c00084 	addi	r3,r3,2
 8004228:	10800044 	addi	r2,r2,1
 800422c:	41000015 	stw	r4,0(r8)
 8004230:	01000084 	movi	r4,2
 8004234:	41000115 	stw	r4,4(r8)
 8004238:	d8c02015 	stw	r3,128(sp)
 800423c:	d8801f15 	stw	r2,124(sp)
 8004240:	010001c4 	movi	r4,7
 8004244:	20825816 	blt	r4,r2,8004ba8 <___vfprintf_internal_r+0x125c>
 8004248:	42000204 	addi	r8,r8,8
 800424c:	d9003017 	ldw	r4,192(sp)
 8004250:	00802004 	movi	r2,128
 8004254:	2081bb26 	beq	r4,r2,8004944 <___vfprintf_internal_r+0xff8>
 8004258:	d9402a17 	ldw	r5,168(sp)
 800425c:	d8802b17 	ldw	r2,172(sp)
 8004260:	28adc83a 	sub	r22,r5,r2
 8004264:	0580310e 	bge	zero,r22,800432c <___vfprintf_internal_r+0x9e0>
 8004268:	07000404 	movi	fp,16
 800426c:	d8801f17 	ldw	r2,124(sp)
 8004270:	e584360e 	bge	fp,r22,800534c <___vfprintf_internal_r+0x1a00>
 8004274:	014200f4 	movhi	r5,2051
 8004278:	29452b84 	addi	r5,r5,5294
 800427c:	dc402a15 	stw	r17,168(sp)
 8004280:	d9402c15 	stw	r5,176(sp)
 8004284:	b023883a 	mov	r17,r22
 8004288:	04c001c4 	movi	r19,7
 800428c:	a82d883a 	mov	r22,r21
 8004290:	902b883a 	mov	r21,r18
 8004294:	8025883a 	mov	r18,r16
 8004298:	dc002d17 	ldw	r16,180(sp)
 800429c:	00000306 	br	80042ac <___vfprintf_internal_r+0x960>
 80042a0:	8c7ffc04 	addi	r17,r17,-16
 80042a4:	42000204 	addi	r8,r8,8
 80042a8:	e440110e 	bge	fp,r17,80042f0 <___vfprintf_internal_r+0x9a4>
 80042ac:	18c00404 	addi	r3,r3,16
 80042b0:	10800044 	addi	r2,r2,1
 80042b4:	45000015 	stw	r20,0(r8)
 80042b8:	47000115 	stw	fp,4(r8)
 80042bc:	d8c02015 	stw	r3,128(sp)
 80042c0:	d8801f15 	stw	r2,124(sp)
 80042c4:	98bff60e 	bge	r19,r2,80042a0 <__alt_data_end+0xfc0042a0>
 80042c8:	d9801e04 	addi	r6,sp,120
 80042cc:	b80b883a 	mov	r5,r23
 80042d0:	8009883a 	mov	r4,r16
 80042d4:	800b12c0 	call	800b12c <__sprint_r>
 80042d8:	103ea01e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 80042dc:	8c7ffc04 	addi	r17,r17,-16
 80042e0:	d8c02017 	ldw	r3,128(sp)
 80042e4:	d8801f17 	ldw	r2,124(sp)
 80042e8:	da000404 	addi	r8,sp,16
 80042ec:	e47fef16 	blt	fp,r17,80042ac <__alt_data_end+0xfc0042ac>
 80042f0:	9021883a 	mov	r16,r18
 80042f4:	a825883a 	mov	r18,r21
 80042f8:	b02b883a 	mov	r21,r22
 80042fc:	882d883a 	mov	r22,r17
 8004300:	dc402a17 	ldw	r17,168(sp)
 8004304:	d9002c17 	ldw	r4,176(sp)
 8004308:	1d87883a 	add	r3,r3,r22
 800430c:	10800044 	addi	r2,r2,1
 8004310:	41000015 	stw	r4,0(r8)
 8004314:	45800115 	stw	r22,4(r8)
 8004318:	d8c02015 	stw	r3,128(sp)
 800431c:	d8801f15 	stw	r2,124(sp)
 8004320:	010001c4 	movi	r4,7
 8004324:	20821016 	blt	r4,r2,8004b68 <___vfprintf_internal_r+0x121c>
 8004328:	42000204 	addi	r8,r8,8
 800432c:	9080400c 	andi	r2,r18,256
 8004330:	10013a1e 	bne	r2,zero,800481c <___vfprintf_internal_r+0xed0>
 8004334:	d9402b17 	ldw	r5,172(sp)
 8004338:	d8801f17 	ldw	r2,124(sp)
 800433c:	44000015 	stw	r16,0(r8)
 8004340:	1947883a 	add	r3,r3,r5
 8004344:	10800044 	addi	r2,r2,1
 8004348:	41400115 	stw	r5,4(r8)
 800434c:	d8c02015 	stw	r3,128(sp)
 8004350:	d8801f15 	stw	r2,124(sp)
 8004354:	010001c4 	movi	r4,7
 8004358:	2081f516 	blt	r4,r2,8004b30 <___vfprintf_internal_r+0x11e4>
 800435c:	42000204 	addi	r8,r8,8
 8004360:	9480010c 	andi	r18,r18,4
 8004364:	90003226 	beq	r18,zero,8004430 <___vfprintf_internal_r+0xae4>
 8004368:	d9403117 	ldw	r5,196(sp)
 800436c:	d8802917 	ldw	r2,164(sp)
 8004370:	28a1c83a 	sub	r16,r5,r2
 8004374:	04002e0e 	bge	zero,r16,8004430 <___vfprintf_internal_r+0xae4>
 8004378:	04400404 	movi	r17,16
 800437c:	d8801f17 	ldw	r2,124(sp)
 8004380:	8c04c40e 	bge	r17,r16,8005694 <___vfprintf_internal_r+0x1d48>
 8004384:	014200f4 	movhi	r5,2051
 8004388:	29452f84 	addi	r5,r5,5310
 800438c:	d9403515 	stw	r5,212(sp)
 8004390:	048001c4 	movi	r18,7
 8004394:	dcc02d17 	ldw	r19,180(sp)
 8004398:	00000306 	br	80043a8 <___vfprintf_internal_r+0xa5c>
 800439c:	843ffc04 	addi	r16,r16,-16
 80043a0:	42000204 	addi	r8,r8,8
 80043a4:	8c00130e 	bge	r17,r16,80043f4 <___vfprintf_internal_r+0xaa8>
 80043a8:	010200f4 	movhi	r4,2051
 80043ac:	18c00404 	addi	r3,r3,16
 80043b0:	10800044 	addi	r2,r2,1
 80043b4:	21052f84 	addi	r4,r4,5310
 80043b8:	41000015 	stw	r4,0(r8)
 80043bc:	44400115 	stw	r17,4(r8)
 80043c0:	d8c02015 	stw	r3,128(sp)
 80043c4:	d8801f15 	stw	r2,124(sp)
 80043c8:	90bff40e 	bge	r18,r2,800439c <__alt_data_end+0xfc00439c>
 80043cc:	d9801e04 	addi	r6,sp,120
 80043d0:	b80b883a 	mov	r5,r23
 80043d4:	9809883a 	mov	r4,r19
 80043d8:	800b12c0 	call	800b12c <__sprint_r>
 80043dc:	103e5f1e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 80043e0:	843ffc04 	addi	r16,r16,-16
 80043e4:	d8c02017 	ldw	r3,128(sp)
 80043e8:	d8801f17 	ldw	r2,124(sp)
 80043ec:	da000404 	addi	r8,sp,16
 80043f0:	8c3fed16 	blt	r17,r16,80043a8 <__alt_data_end+0xfc0043a8>
 80043f4:	d9403517 	ldw	r5,212(sp)
 80043f8:	1c07883a 	add	r3,r3,r16
 80043fc:	10800044 	addi	r2,r2,1
 8004400:	41400015 	stw	r5,0(r8)
 8004404:	44000115 	stw	r16,4(r8)
 8004408:	d8c02015 	stw	r3,128(sp)
 800440c:	d8801f15 	stw	r2,124(sp)
 8004410:	010001c4 	movi	r4,7
 8004414:	2080060e 	bge	r4,r2,8004430 <___vfprintf_internal_r+0xae4>
 8004418:	d9002d17 	ldw	r4,180(sp)
 800441c:	d9801e04 	addi	r6,sp,120
 8004420:	b80b883a 	mov	r5,r23
 8004424:	800b12c0 	call	800b12c <__sprint_r>
 8004428:	103e4c1e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 800442c:	d8c02017 	ldw	r3,128(sp)
 8004430:	d8803117 	ldw	r2,196(sp)
 8004434:	d9002917 	ldw	r4,164(sp)
 8004438:	1100010e 	bge	r2,r4,8004440 <___vfprintf_internal_r+0xaf4>
 800443c:	2005883a 	mov	r2,r4
 8004440:	d9402f17 	ldw	r5,188(sp)
 8004444:	288b883a 	add	r5,r5,r2
 8004448:	d9402f15 	stw	r5,188(sp)
 800444c:	1801c01e 	bne	r3,zero,8004b50 <___vfprintf_internal_r+0x1204>
 8004450:	a8800007 	ldb	r2,0(r21)
 8004454:	d8001f15 	stw	zero,124(sp)
 8004458:	da000404 	addi	r8,sp,16
 800445c:	103d751e 	bne	r2,zero,8003a34 <__alt_data_end+0xfc003a34>
 8004460:	a823883a 	mov	r17,r21
 8004464:	003d8b06 	br	8003a94 <__alt_data_end+0xfc003a94>
 8004468:	8025883a 	mov	r18,r16
 800446c:	dc002903 	ldbu	r16,164(sp)
 8004470:	e011883a 	mov	r8,fp
 8004474:	84003fcc 	andi	r16,r16,255
 8004478:	8005e51e 	bne	r16,zero,8005c10 <___vfprintf_internal_r+0x22c4>
 800447c:	94800414 	ori	r18,r18,16
 8004480:	9080080c 	andi	r2,r18,32
 8004484:	10022b26 	beq	r2,zero,8004d34 <___vfprintf_internal_r+0x13e8>
 8004488:	d9002e17 	ldw	r4,184(sp)
 800448c:	d9402a17 	ldw	r5,168(sp)
 8004490:	d8002785 	stb	zero,158(sp)
 8004494:	20c00204 	addi	r3,r4,8
 8004498:	24c00017 	ldw	r19,0(r4)
 800449c:	25800117 	ldw	r22,4(r4)
 80044a0:	28042e16 	blt	r5,zero,800555c <___vfprintf_internal_r+0x1c10>
 80044a4:	013fdfc4 	movi	r4,-129
 80044a8:	9d84b03a 	or	r2,r19,r22
 80044ac:	d8c02e15 	stw	r3,184(sp)
 80044b0:	9124703a 	and	r18,r18,r4
 80044b4:	0039883a 	mov	fp,zero
 80044b8:	103e801e 	bne	r2,zero,8003ebc <__alt_data_end+0xfc003ebc>
 80044bc:	d9002a17 	ldw	r4,168(sp)
 80044c0:	2002e01e 	bne	r4,zero,8005044 <___vfprintf_internal_r+0x16f8>
 80044c4:	d8002a15 	stw	zero,168(sp)
 80044c8:	d8002b15 	stw	zero,172(sp)
 80044cc:	dc001e04 	addi	r16,sp,120
 80044d0:	003ef506 	br	80040a8 <__alt_data_end+0xfc0040a8>
 80044d4:	8025883a 	mov	r18,r16
 80044d8:	dc002903 	ldbu	r16,164(sp)
 80044dc:	e011883a 	mov	r8,fp
 80044e0:	84003fcc 	andi	r16,r16,255
 80044e4:	8005ba1e 	bne	r16,zero,8005bd0 <___vfprintf_internal_r+0x2284>
 80044e8:	010200f4 	movhi	r4,2051
 80044ec:	21051f04 	addi	r4,r4,5244
 80044f0:	d9003915 	stw	r4,228(sp)
 80044f4:	9080080c 	andi	r2,r18,32
 80044f8:	10006126 	beq	r2,zero,8004680 <___vfprintf_internal_r+0xd34>
 80044fc:	d9402e17 	ldw	r5,184(sp)
 8004500:	2cc00017 	ldw	r19,0(r5)
 8004504:	2d800117 	ldw	r22,4(r5)
 8004508:	29400204 	addi	r5,r5,8
 800450c:	d9402e15 	stw	r5,184(sp)
 8004510:	9080004c 	andi	r2,r18,1
 8004514:	1001ac26 	beq	r2,zero,8004bc8 <___vfprintf_internal_r+0x127c>
 8004518:	9d84b03a 	or	r2,r19,r22
 800451c:	10038526 	beq	r2,zero,8005334 <___vfprintf_internal_r+0x19e8>
 8004520:	d8c02a17 	ldw	r3,168(sp)
 8004524:	00800c04 	movi	r2,48
 8004528:	d8802705 	stb	r2,156(sp)
 800452c:	dc402745 	stb	r17,157(sp)
 8004530:	d8002785 	stb	zero,158(sp)
 8004534:	90800094 	ori	r2,r18,2
 8004538:	18047916 	blt	r3,zero,8005720 <___vfprintf_internal_r+0x1dd4>
 800453c:	00bfdfc4 	movi	r2,-129
 8004540:	90a4703a 	and	r18,r18,r2
 8004544:	94800094 	ori	r18,r18,2
 8004548:	0039883a 	mov	fp,zero
 800454c:	d9003917 	ldw	r4,228(sp)
 8004550:	dc001e04 	addi	r16,sp,120
 8004554:	988003cc 	andi	r2,r19,15
 8004558:	b006973a 	slli	r3,r22,28
 800455c:	2085883a 	add	r2,r4,r2
 8004560:	9826d13a 	srli	r19,r19,4
 8004564:	10800003 	ldbu	r2,0(r2)
 8004568:	b02cd13a 	srli	r22,r22,4
 800456c:	843fffc4 	addi	r16,r16,-1
 8004570:	1ce6b03a 	or	r19,r3,r19
 8004574:	80800005 	stb	r2,0(r16)
 8004578:	9d84b03a 	or	r2,r19,r22
 800457c:	103ff51e 	bne	r2,zero,8004554 <__alt_data_end+0xfc004554>
 8004580:	d8c02817 	ldw	r3,160(sp)
 8004584:	1c07c83a 	sub	r3,r3,r16
 8004588:	d8c02b15 	stw	r3,172(sp)
 800458c:	003ec606 	br	80040a8 <__alt_data_end+0xfc0040a8>
 8004590:	8025883a 	mov	r18,r16
 8004594:	dc002903 	ldbu	r16,164(sp)
 8004598:	e011883a 	mov	r8,fp
 800459c:	84003fcc 	andi	r16,r16,255
 80045a0:	803e9626 	beq	r16,zero,8003ffc <__alt_data_end+0xfc003ffc>
 80045a4:	d8c02b03 	ldbu	r3,172(sp)
 80045a8:	d8c02785 	stb	r3,158(sp)
 80045ac:	003e9306 	br	8003ffc <__alt_data_end+0xfc003ffc>
 80045b0:	00c00044 	movi	r3,1
 80045b4:	d8c02905 	stb	r3,164(sp)
 80045b8:	00c00ac4 	movi	r3,43
 80045bc:	d8c02b05 	stb	r3,172(sp)
 80045c0:	ac400007 	ldb	r17,0(r21)
 80045c4:	003d4306 	br	8003ad4 <__alt_data_end+0xfc003ad4>
 80045c8:	84000814 	ori	r16,r16,32
 80045cc:	ac400007 	ldb	r17,0(r21)
 80045d0:	003d4006 	br	8003ad4 <__alt_data_end+0xfc003ad4>
 80045d4:	d8802e17 	ldw	r2,184(sp)
 80045d8:	8025883a 	mov	r18,r16
 80045dc:	d8002785 	stb	zero,158(sp)
 80045e0:	14000017 	ldw	r16,0(r2)
 80045e4:	e011883a 	mov	r8,fp
 80045e8:	14c00104 	addi	r19,r2,4
 80045ec:	80042d26 	beq	r16,zero,80056a4 <___vfprintf_internal_r+0x1d58>
 80045f0:	d8c02a17 	ldw	r3,168(sp)
 80045f4:	1803e416 	blt	r3,zero,8005588 <___vfprintf_internal_r+0x1c3c>
 80045f8:	180d883a 	mov	r6,r3
 80045fc:	000b883a 	mov	r5,zero
 8004600:	8009883a 	mov	r4,r16
 8004604:	df003d15 	stw	fp,244(sp)
 8004608:	80092840 	call	8009284 <memchr>
 800460c:	da003d17 	ldw	r8,244(sp)
 8004610:	10046826 	beq	r2,zero,80057b4 <___vfprintf_internal_r+0x1e68>
 8004614:	1405c83a 	sub	r2,r2,r16
 8004618:	d8802b15 	stw	r2,172(sp)
 800461c:	1003e016 	blt	r2,zero,80055a0 <___vfprintf_internal_r+0x1c54>
 8004620:	df002783 	ldbu	fp,158(sp)
 8004624:	d8802915 	stw	r2,164(sp)
 8004628:	dcc02e15 	stw	r19,184(sp)
 800462c:	d8002a15 	stw	zero,168(sp)
 8004630:	d8003215 	stw	zero,200(sp)
 8004634:	003ea206 	br	80040c0 <__alt_data_end+0xfc0040c0>
 8004638:	8025883a 	mov	r18,r16
 800463c:	dc002903 	ldbu	r16,164(sp)
 8004640:	e011883a 	mov	r8,fp
 8004644:	84003fcc 	andi	r16,r16,255
 8004648:	803f8d26 	beq	r16,zero,8004480 <__alt_data_end+0xfc004480>
 800464c:	d8c02b03 	ldbu	r3,172(sp)
 8004650:	d8c02785 	stb	r3,158(sp)
 8004654:	003f8a06 	br	8004480 <__alt_data_end+0xfc004480>
 8004658:	8025883a 	mov	r18,r16
 800465c:	dc002903 	ldbu	r16,164(sp)
 8004660:	e011883a 	mov	r8,fp
 8004664:	84003fcc 	andi	r16,r16,255
 8004668:	8005661e 	bne	r16,zero,8005c04 <___vfprintf_internal_r+0x22b8>
 800466c:	010200f4 	movhi	r4,2051
 8004670:	21052404 	addi	r4,r4,5264
 8004674:	d9003915 	stw	r4,228(sp)
 8004678:	9080080c 	andi	r2,r18,32
 800467c:	103f9f1e 	bne	r2,zero,80044fc <__alt_data_end+0xfc0044fc>
 8004680:	9080040c 	andi	r2,r18,16
 8004684:	1002eb26 	beq	r2,zero,8005234 <___vfprintf_internal_r+0x18e8>
 8004688:	d8802e17 	ldw	r2,184(sp)
 800468c:	002d883a 	mov	r22,zero
 8004690:	14c00017 	ldw	r19,0(r2)
 8004694:	10800104 	addi	r2,r2,4
 8004698:	d8802e15 	stw	r2,184(sp)
 800469c:	003f9c06 	br	8004510 <__alt_data_end+0xfc004510>
 80046a0:	d8802b07 	ldb	r2,172(sp)
 80046a4:	1002e11e 	bne	r2,zero,800522c <___vfprintf_internal_r+0x18e0>
 80046a8:	00c00044 	movi	r3,1
 80046ac:	d8c02905 	stb	r3,164(sp)
 80046b0:	00c00804 	movi	r3,32
 80046b4:	d8c02b05 	stb	r3,172(sp)
 80046b8:	ac400007 	ldb	r17,0(r21)
 80046bc:	003d0506 	br	8003ad4 <__alt_data_end+0xfc003ad4>
 80046c0:	84000054 	ori	r16,r16,1
 80046c4:	ac400007 	ldb	r17,0(r21)
 80046c8:	003d0206 	br	8003ad4 <__alt_data_end+0xfc003ad4>
 80046cc:	8025883a 	mov	r18,r16
 80046d0:	dc002903 	ldbu	r16,164(sp)
 80046d4:	e011883a 	mov	r8,fp
 80046d8:	84003fcc 	andi	r16,r16,255
 80046dc:	803de726 	beq	r16,zero,8003e7c <__alt_data_end+0xfc003e7c>
 80046e0:	d8c02b03 	ldbu	r3,172(sp)
 80046e4:	d8c02785 	stb	r3,158(sp)
 80046e8:	003de406 	br	8003e7c <__alt_data_end+0xfc003e7c>
 80046ec:	84001014 	ori	r16,r16,64
 80046f0:	ac400007 	ldb	r17,0(r21)
 80046f4:	003cf706 	br	8003ad4 <__alt_data_end+0xfc003ad4>
 80046f8:	ac400007 	ldb	r17,0(r21)
 80046fc:	00801b04 	movi	r2,108
 8004700:	88838f26 	beq	r17,r2,8005540 <___vfprintf_internal_r+0x1bf4>
 8004704:	84000414 	ori	r16,r16,16
 8004708:	003cf206 	br	8003ad4 <__alt_data_end+0xfc003ad4>
 800470c:	8025883a 	mov	r18,r16
 8004710:	dc002903 	ldbu	r16,164(sp)
 8004714:	e011883a 	mov	r8,fp
 8004718:	84003fcc 	andi	r16,r16,255
 800471c:	80053f1e 	bne	r16,zero,8005c1c <___vfprintf_internal_r+0x22d0>
 8004720:	9080080c 	andi	r2,r18,32
 8004724:	1002d226 	beq	r2,zero,8005270 <___vfprintf_internal_r+0x1924>
 8004728:	d9002e17 	ldw	r4,184(sp)
 800472c:	d9402f17 	ldw	r5,188(sp)
 8004730:	20800017 	ldw	r2,0(r4)
 8004734:	2807d7fa 	srai	r3,r5,31
 8004738:	21000104 	addi	r4,r4,4
 800473c:	d9002e15 	stw	r4,184(sp)
 8004740:	11400015 	stw	r5,0(r2)
 8004744:	10c00115 	stw	r3,4(r2)
 8004748:	003cb806 	br	8003a2c <__alt_data_end+0xfc003a2c>
 800474c:	d8c02e17 	ldw	r3,184(sp)
 8004750:	d9002e17 	ldw	r4,184(sp)
 8004754:	8025883a 	mov	r18,r16
 8004758:	18800017 	ldw	r2,0(r3)
 800475c:	21000104 	addi	r4,r4,4
 8004760:	00c00044 	movi	r3,1
 8004764:	e011883a 	mov	r8,fp
 8004768:	d8c02915 	stw	r3,164(sp)
 800476c:	d8002785 	stb	zero,158(sp)
 8004770:	d8801405 	stb	r2,80(sp)
 8004774:	d9002e15 	stw	r4,184(sp)
 8004778:	d8c02b15 	stw	r3,172(sp)
 800477c:	d8002a15 	stw	zero,168(sp)
 8004780:	d8003215 	stw	zero,200(sp)
 8004784:	dc001404 	addi	r16,sp,80
 8004788:	0039883a 	mov	fp,zero
 800478c:	003e5306 	br	80040dc <__alt_data_end+0xfc0040dc>
 8004790:	010200f4 	movhi	r4,2051
 8004794:	21052404 	addi	r4,r4,5264
 8004798:	0039883a 	mov	fp,zero
 800479c:	d9003915 	stw	r4,228(sp)
 80047a0:	04401e04 	movi	r17,120
 80047a4:	003f6906 	br	800454c <__alt_data_end+0xfc00454c>
 80047a8:	8025883a 	mov	r18,r16
 80047ac:	dc002903 	ldbu	r16,164(sp)
 80047b0:	e011883a 	mov	r8,fp
 80047b4:	84003fcc 	andi	r16,r16,255
 80047b8:	8005081e 	bne	r16,zero,8005bdc <___vfprintf_internal_r+0x2290>
 80047bc:	883d6126 	beq	r17,zero,8003d44 <__alt_data_end+0xfc003d44>
 80047c0:	00c00044 	movi	r3,1
 80047c4:	d8c02915 	stw	r3,164(sp)
 80047c8:	dc401405 	stb	r17,80(sp)
 80047cc:	d8002785 	stb	zero,158(sp)
 80047d0:	003fe906 	br	8004778 <__alt_data_end+0xfc004778>
 80047d4:	014200f4 	movhi	r5,2051
 80047d8:	29452404 	addi	r5,r5,5264
 80047dc:	d9403915 	stw	r5,228(sp)
 80047e0:	d8c02e15 	stw	r3,184(sp)
 80047e4:	1025883a 	mov	r18,r2
 80047e8:	04401e04 	movi	r17,120
 80047ec:	9d84b03a 	or	r2,r19,r22
 80047f0:	1000fc1e 	bne	r2,zero,8004be4 <___vfprintf_internal_r+0x1298>
 80047f4:	0039883a 	mov	fp,zero
 80047f8:	00800084 	movi	r2,2
 80047fc:	10803fcc 	andi	r2,r2,255
 8004800:	00c00044 	movi	r3,1
 8004804:	10c20f26 	beq	r2,r3,8005044 <___vfprintf_internal_r+0x16f8>
 8004808:	00c00084 	movi	r3,2
 800480c:	10fd3326 	beq	r2,r3,8003cdc <__alt_data_end+0xfc003cdc>
 8004810:	003e0b06 	br	8004040 <__alt_data_end+0xfc004040>
 8004814:	d8c02017 	ldw	r3,128(sp)
 8004818:	003e7106 	br	80041e0 <__alt_data_end+0xfc0041e0>
 800481c:	00801944 	movi	r2,101
 8004820:	14407e0e 	bge	r2,r17,8004a1c <___vfprintf_internal_r+0x10d0>
 8004824:	d9003617 	ldw	r4,216(sp)
 8004828:	d9403817 	ldw	r5,224(sp)
 800482c:	000d883a 	mov	r6,zero
 8004830:	000f883a 	mov	r7,zero
 8004834:	d8c03c15 	stw	r3,240(sp)
 8004838:	da003d15 	stw	r8,244(sp)
 800483c:	800eeb00 	call	800eeb0 <__eqdf2>
 8004840:	d8c03c17 	ldw	r3,240(sp)
 8004844:	da003d17 	ldw	r8,244(sp)
 8004848:	1000f71e 	bne	r2,zero,8004c28 <___vfprintf_internal_r+0x12dc>
 800484c:	d8801f17 	ldw	r2,124(sp)
 8004850:	010200f4 	movhi	r4,2051
 8004854:	21052b04 	addi	r4,r4,5292
 8004858:	18c00044 	addi	r3,r3,1
 800485c:	10800044 	addi	r2,r2,1
 8004860:	41000015 	stw	r4,0(r8)
 8004864:	01000044 	movi	r4,1
 8004868:	41000115 	stw	r4,4(r8)
 800486c:	d8c02015 	stw	r3,128(sp)
 8004870:	d8801f15 	stw	r2,124(sp)
 8004874:	010001c4 	movi	r4,7
 8004878:	2082b816 	blt	r4,r2,800535c <___vfprintf_internal_r+0x1a10>
 800487c:	42000204 	addi	r8,r8,8
 8004880:	d8802617 	ldw	r2,152(sp)
 8004884:	d9403317 	ldw	r5,204(sp)
 8004888:	11400216 	blt	r2,r5,8004894 <___vfprintf_internal_r+0xf48>
 800488c:	9080004c 	andi	r2,r18,1
 8004890:	103eb326 	beq	r2,zero,8004360 <__alt_data_end+0xfc004360>
 8004894:	d8803717 	ldw	r2,220(sp)
 8004898:	d9003417 	ldw	r4,208(sp)
 800489c:	d9403717 	ldw	r5,220(sp)
 80048a0:	1887883a 	add	r3,r3,r2
 80048a4:	d8801f17 	ldw	r2,124(sp)
 80048a8:	41000015 	stw	r4,0(r8)
 80048ac:	41400115 	stw	r5,4(r8)
 80048b0:	10800044 	addi	r2,r2,1
 80048b4:	d8c02015 	stw	r3,128(sp)
 80048b8:	d8801f15 	stw	r2,124(sp)
 80048bc:	010001c4 	movi	r4,7
 80048c0:	20832916 	blt	r4,r2,8005568 <___vfprintf_internal_r+0x1c1c>
 80048c4:	42000204 	addi	r8,r8,8
 80048c8:	d8803317 	ldw	r2,204(sp)
 80048cc:	143fffc4 	addi	r16,r2,-1
 80048d0:	043ea30e 	bge	zero,r16,8004360 <__alt_data_end+0xfc004360>
 80048d4:	04400404 	movi	r17,16
 80048d8:	d8801f17 	ldw	r2,124(sp)
 80048dc:	8c00880e 	bge	r17,r16,8004b00 <___vfprintf_internal_r+0x11b4>
 80048e0:	014200f4 	movhi	r5,2051
 80048e4:	29452b84 	addi	r5,r5,5294
 80048e8:	d9402c15 	stw	r5,176(sp)
 80048ec:	058001c4 	movi	r22,7
 80048f0:	dcc02d17 	ldw	r19,180(sp)
 80048f4:	00000306 	br	8004904 <___vfprintf_internal_r+0xfb8>
 80048f8:	42000204 	addi	r8,r8,8
 80048fc:	843ffc04 	addi	r16,r16,-16
 8004900:	8c00820e 	bge	r17,r16,8004b0c <___vfprintf_internal_r+0x11c0>
 8004904:	18c00404 	addi	r3,r3,16
 8004908:	10800044 	addi	r2,r2,1
 800490c:	45000015 	stw	r20,0(r8)
 8004910:	44400115 	stw	r17,4(r8)
 8004914:	d8c02015 	stw	r3,128(sp)
 8004918:	d8801f15 	stw	r2,124(sp)
 800491c:	b0bff60e 	bge	r22,r2,80048f8 <__alt_data_end+0xfc0048f8>
 8004920:	d9801e04 	addi	r6,sp,120
 8004924:	b80b883a 	mov	r5,r23
 8004928:	9809883a 	mov	r4,r19
 800492c:	800b12c0 	call	800b12c <__sprint_r>
 8004930:	103d0a1e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8004934:	d8c02017 	ldw	r3,128(sp)
 8004938:	d8801f17 	ldw	r2,124(sp)
 800493c:	da000404 	addi	r8,sp,16
 8004940:	003fee06 	br	80048fc <__alt_data_end+0xfc0048fc>
 8004944:	d9403117 	ldw	r5,196(sp)
 8004948:	d8802917 	ldw	r2,164(sp)
 800494c:	28adc83a 	sub	r22,r5,r2
 8004950:	05be410e 	bge	zero,r22,8004258 <__alt_data_end+0xfc004258>
 8004954:	07000404 	movi	fp,16
 8004958:	d8801f17 	ldw	r2,124(sp)
 800495c:	e5838f0e 	bge	fp,r22,800579c <___vfprintf_internal_r+0x1e50>
 8004960:	014200f4 	movhi	r5,2051
 8004964:	29452b84 	addi	r5,r5,5294
 8004968:	dc403015 	stw	r17,192(sp)
 800496c:	d9402c15 	stw	r5,176(sp)
 8004970:	b023883a 	mov	r17,r22
 8004974:	04c001c4 	movi	r19,7
 8004978:	a82d883a 	mov	r22,r21
 800497c:	902b883a 	mov	r21,r18
 8004980:	8025883a 	mov	r18,r16
 8004984:	dc002d17 	ldw	r16,180(sp)
 8004988:	00000306 	br	8004998 <___vfprintf_internal_r+0x104c>
 800498c:	8c7ffc04 	addi	r17,r17,-16
 8004990:	42000204 	addi	r8,r8,8
 8004994:	e440110e 	bge	fp,r17,80049dc <___vfprintf_internal_r+0x1090>
 8004998:	18c00404 	addi	r3,r3,16
 800499c:	10800044 	addi	r2,r2,1
 80049a0:	45000015 	stw	r20,0(r8)
 80049a4:	47000115 	stw	fp,4(r8)
 80049a8:	d8c02015 	stw	r3,128(sp)
 80049ac:	d8801f15 	stw	r2,124(sp)
 80049b0:	98bff60e 	bge	r19,r2,800498c <__alt_data_end+0xfc00498c>
 80049b4:	d9801e04 	addi	r6,sp,120
 80049b8:	b80b883a 	mov	r5,r23
 80049bc:	8009883a 	mov	r4,r16
 80049c0:	800b12c0 	call	800b12c <__sprint_r>
 80049c4:	103ce51e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 80049c8:	8c7ffc04 	addi	r17,r17,-16
 80049cc:	d8c02017 	ldw	r3,128(sp)
 80049d0:	d8801f17 	ldw	r2,124(sp)
 80049d4:	da000404 	addi	r8,sp,16
 80049d8:	e47fef16 	blt	fp,r17,8004998 <__alt_data_end+0xfc004998>
 80049dc:	9021883a 	mov	r16,r18
 80049e0:	a825883a 	mov	r18,r21
 80049e4:	b02b883a 	mov	r21,r22
 80049e8:	882d883a 	mov	r22,r17
 80049ec:	dc403017 	ldw	r17,192(sp)
 80049f0:	d9002c17 	ldw	r4,176(sp)
 80049f4:	1d87883a 	add	r3,r3,r22
 80049f8:	10800044 	addi	r2,r2,1
 80049fc:	41000015 	stw	r4,0(r8)
 8004a00:	45800115 	stw	r22,4(r8)
 8004a04:	d8c02015 	stw	r3,128(sp)
 8004a08:	d8801f15 	stw	r2,124(sp)
 8004a0c:	010001c4 	movi	r4,7
 8004a10:	20818e16 	blt	r4,r2,800504c <___vfprintf_internal_r+0x1700>
 8004a14:	42000204 	addi	r8,r8,8
 8004a18:	003e0f06 	br	8004258 <__alt_data_end+0xfc004258>
 8004a1c:	d9403317 	ldw	r5,204(sp)
 8004a20:	00800044 	movi	r2,1
 8004a24:	18c00044 	addi	r3,r3,1
 8004a28:	1141530e 	bge	r2,r5,8004f78 <___vfprintf_internal_r+0x162c>
 8004a2c:	dc401f17 	ldw	r17,124(sp)
 8004a30:	00800044 	movi	r2,1
 8004a34:	40800115 	stw	r2,4(r8)
 8004a38:	8c400044 	addi	r17,r17,1
 8004a3c:	44000015 	stw	r16,0(r8)
 8004a40:	d8c02015 	stw	r3,128(sp)
 8004a44:	dc401f15 	stw	r17,124(sp)
 8004a48:	008001c4 	movi	r2,7
 8004a4c:	14416b16 	blt	r2,r17,8004ffc <___vfprintf_internal_r+0x16b0>
 8004a50:	42000204 	addi	r8,r8,8
 8004a54:	d8803717 	ldw	r2,220(sp)
 8004a58:	d9003417 	ldw	r4,208(sp)
 8004a5c:	8c400044 	addi	r17,r17,1
 8004a60:	10c7883a 	add	r3,r2,r3
 8004a64:	40800115 	stw	r2,4(r8)
 8004a68:	41000015 	stw	r4,0(r8)
 8004a6c:	d8c02015 	stw	r3,128(sp)
 8004a70:	dc401f15 	stw	r17,124(sp)
 8004a74:	008001c4 	movi	r2,7
 8004a78:	14416916 	blt	r2,r17,8005020 <___vfprintf_internal_r+0x16d4>
 8004a7c:	45800204 	addi	r22,r8,8
 8004a80:	d9003617 	ldw	r4,216(sp)
 8004a84:	d9403817 	ldw	r5,224(sp)
 8004a88:	000d883a 	mov	r6,zero
 8004a8c:	000f883a 	mov	r7,zero
 8004a90:	d8c03c15 	stw	r3,240(sp)
 8004a94:	800eeb00 	call	800eeb0 <__eqdf2>
 8004a98:	d8c03c17 	ldw	r3,240(sp)
 8004a9c:	1000bc26 	beq	r2,zero,8004d90 <___vfprintf_internal_r+0x1444>
 8004aa0:	d9403317 	ldw	r5,204(sp)
 8004aa4:	84000044 	addi	r16,r16,1
 8004aa8:	8c400044 	addi	r17,r17,1
 8004aac:	28bfffc4 	addi	r2,r5,-1
 8004ab0:	1887883a 	add	r3,r3,r2
 8004ab4:	b0800115 	stw	r2,4(r22)
 8004ab8:	b4000015 	stw	r16,0(r22)
 8004abc:	d8c02015 	stw	r3,128(sp)
 8004ac0:	dc401f15 	stw	r17,124(sp)
 8004ac4:	008001c4 	movi	r2,7
 8004ac8:	14414316 	blt	r2,r17,8004fd8 <___vfprintf_internal_r+0x168c>
 8004acc:	b5800204 	addi	r22,r22,8
 8004ad0:	d9003a17 	ldw	r4,232(sp)
 8004ad4:	df0022c4 	addi	fp,sp,139
 8004ad8:	8c400044 	addi	r17,r17,1
 8004adc:	20c7883a 	add	r3,r4,r3
 8004ae0:	b7000015 	stw	fp,0(r22)
 8004ae4:	b1000115 	stw	r4,4(r22)
 8004ae8:	d8c02015 	stw	r3,128(sp)
 8004aec:	dc401f15 	stw	r17,124(sp)
 8004af0:	008001c4 	movi	r2,7
 8004af4:	14400e16 	blt	r2,r17,8004b30 <___vfprintf_internal_r+0x11e4>
 8004af8:	b2000204 	addi	r8,r22,8
 8004afc:	003e1806 	br	8004360 <__alt_data_end+0xfc004360>
 8004b00:	010200f4 	movhi	r4,2051
 8004b04:	21052b84 	addi	r4,r4,5294
 8004b08:	d9002c15 	stw	r4,176(sp)
 8004b0c:	d9002c17 	ldw	r4,176(sp)
 8004b10:	1c07883a 	add	r3,r3,r16
 8004b14:	44000115 	stw	r16,4(r8)
 8004b18:	41000015 	stw	r4,0(r8)
 8004b1c:	10800044 	addi	r2,r2,1
 8004b20:	d8c02015 	stw	r3,128(sp)
 8004b24:	d8801f15 	stw	r2,124(sp)
 8004b28:	010001c4 	movi	r4,7
 8004b2c:	20be0b0e 	bge	r4,r2,800435c <__alt_data_end+0xfc00435c>
 8004b30:	d9002d17 	ldw	r4,180(sp)
 8004b34:	d9801e04 	addi	r6,sp,120
 8004b38:	b80b883a 	mov	r5,r23
 8004b3c:	800b12c0 	call	800b12c <__sprint_r>
 8004b40:	103c861e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8004b44:	d8c02017 	ldw	r3,128(sp)
 8004b48:	da000404 	addi	r8,sp,16
 8004b4c:	003e0406 	br	8004360 <__alt_data_end+0xfc004360>
 8004b50:	d9002d17 	ldw	r4,180(sp)
 8004b54:	d9801e04 	addi	r6,sp,120
 8004b58:	b80b883a 	mov	r5,r23
 8004b5c:	800b12c0 	call	800b12c <__sprint_r>
 8004b60:	103e3b26 	beq	r2,zero,8004450 <__alt_data_end+0xfc004450>
 8004b64:	003c7d06 	br	8003d5c <__alt_data_end+0xfc003d5c>
 8004b68:	d9002d17 	ldw	r4,180(sp)
 8004b6c:	d9801e04 	addi	r6,sp,120
 8004b70:	b80b883a 	mov	r5,r23
 8004b74:	800b12c0 	call	800b12c <__sprint_r>
 8004b78:	103c781e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8004b7c:	d8c02017 	ldw	r3,128(sp)
 8004b80:	da000404 	addi	r8,sp,16
 8004b84:	003de906 	br	800432c <__alt_data_end+0xfc00432c>
 8004b88:	d9002d17 	ldw	r4,180(sp)
 8004b8c:	d9801e04 	addi	r6,sp,120
 8004b90:	b80b883a 	mov	r5,r23
 8004b94:	800b12c0 	call	800b12c <__sprint_r>
 8004b98:	103c701e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8004b9c:	d8c02017 	ldw	r3,128(sp)
 8004ba0:	da000404 	addi	r8,sp,16
 8004ba4:	003d9b06 	br	8004214 <__alt_data_end+0xfc004214>
 8004ba8:	d9002d17 	ldw	r4,180(sp)
 8004bac:	d9801e04 	addi	r6,sp,120
 8004bb0:	b80b883a 	mov	r5,r23
 8004bb4:	800b12c0 	call	800b12c <__sprint_r>
 8004bb8:	103c681e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8004bbc:	d8c02017 	ldw	r3,128(sp)
 8004bc0:	da000404 	addi	r8,sp,16
 8004bc4:	003da106 	br	800424c <__alt_data_end+0xfc00424c>
 8004bc8:	d9402a17 	ldw	r5,168(sp)
 8004bcc:	d8002785 	stb	zero,158(sp)
 8004bd0:	283f0616 	blt	r5,zero,80047ec <__alt_data_end+0xfc0047ec>
 8004bd4:	00ffdfc4 	movi	r3,-129
 8004bd8:	9d84b03a 	or	r2,r19,r22
 8004bdc:	90e4703a 	and	r18,r18,r3
 8004be0:	103c3b26 	beq	r2,zero,8003cd0 <__alt_data_end+0xfc003cd0>
 8004be4:	0039883a 	mov	fp,zero
 8004be8:	003e5806 	br	800454c <__alt_data_end+0xfc00454c>
 8004bec:	9080040c 	andi	r2,r18,16
 8004bf0:	1001b326 	beq	r2,zero,80052c0 <___vfprintf_internal_r+0x1974>
 8004bf4:	d8c02e17 	ldw	r3,184(sp)
 8004bf8:	d9002a17 	ldw	r4,168(sp)
 8004bfc:	d8002785 	stb	zero,158(sp)
 8004c00:	18800104 	addi	r2,r3,4
 8004c04:	1cc00017 	ldw	r19,0(r3)
 8004c08:	002d883a 	mov	r22,zero
 8004c0c:	2001b516 	blt	r4,zero,80052e4 <___vfprintf_internal_r+0x1998>
 8004c10:	00ffdfc4 	movi	r3,-129
 8004c14:	d8802e15 	stw	r2,184(sp)
 8004c18:	90e4703a 	and	r18,r18,r3
 8004c1c:	983d0526 	beq	r19,zero,8004034 <__alt_data_end+0xfc004034>
 8004c20:	0039883a 	mov	fp,zero
 8004c24:	003d0806 	br	8004048 <__alt_data_end+0xfc004048>
 8004c28:	dc402617 	ldw	r17,152(sp)
 8004c2c:	0441d30e 	bge	zero,r17,800537c <___vfprintf_internal_r+0x1a30>
 8004c30:	dc403217 	ldw	r17,200(sp)
 8004c34:	d8803317 	ldw	r2,204(sp)
 8004c38:	1440010e 	bge	r2,r17,8004c40 <___vfprintf_internal_r+0x12f4>
 8004c3c:	1023883a 	mov	r17,r2
 8004c40:	04400a0e 	bge	zero,r17,8004c6c <___vfprintf_internal_r+0x1320>
 8004c44:	d8801f17 	ldw	r2,124(sp)
 8004c48:	1c47883a 	add	r3,r3,r17
 8004c4c:	44000015 	stw	r16,0(r8)
 8004c50:	10800044 	addi	r2,r2,1
 8004c54:	44400115 	stw	r17,4(r8)
 8004c58:	d8c02015 	stw	r3,128(sp)
 8004c5c:	d8801f15 	stw	r2,124(sp)
 8004c60:	010001c4 	movi	r4,7
 8004c64:	20826516 	blt	r4,r2,80055fc <___vfprintf_internal_r+0x1cb0>
 8004c68:	42000204 	addi	r8,r8,8
 8004c6c:	88026116 	blt	r17,zero,80055f4 <___vfprintf_internal_r+0x1ca8>
 8004c70:	d9003217 	ldw	r4,200(sp)
 8004c74:	2463c83a 	sub	r17,r4,r17
 8004c78:	04407b0e 	bge	zero,r17,8004e68 <___vfprintf_internal_r+0x151c>
 8004c7c:	05800404 	movi	r22,16
 8004c80:	d8801f17 	ldw	r2,124(sp)
 8004c84:	b4419d0e 	bge	r22,r17,80052fc <___vfprintf_internal_r+0x19b0>
 8004c88:	010200f4 	movhi	r4,2051
 8004c8c:	21052b84 	addi	r4,r4,5294
 8004c90:	d9002c15 	stw	r4,176(sp)
 8004c94:	070001c4 	movi	fp,7
 8004c98:	dcc02d17 	ldw	r19,180(sp)
 8004c9c:	00000306 	br	8004cac <___vfprintf_internal_r+0x1360>
 8004ca0:	42000204 	addi	r8,r8,8
 8004ca4:	8c7ffc04 	addi	r17,r17,-16
 8004ca8:	b441970e 	bge	r22,r17,8005308 <___vfprintf_internal_r+0x19bc>
 8004cac:	18c00404 	addi	r3,r3,16
 8004cb0:	10800044 	addi	r2,r2,1
 8004cb4:	45000015 	stw	r20,0(r8)
 8004cb8:	45800115 	stw	r22,4(r8)
 8004cbc:	d8c02015 	stw	r3,128(sp)
 8004cc0:	d8801f15 	stw	r2,124(sp)
 8004cc4:	e0bff60e 	bge	fp,r2,8004ca0 <__alt_data_end+0xfc004ca0>
 8004cc8:	d9801e04 	addi	r6,sp,120
 8004ccc:	b80b883a 	mov	r5,r23
 8004cd0:	9809883a 	mov	r4,r19
 8004cd4:	800b12c0 	call	800b12c <__sprint_r>
 8004cd8:	103c201e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8004cdc:	d8c02017 	ldw	r3,128(sp)
 8004ce0:	d8801f17 	ldw	r2,124(sp)
 8004ce4:	da000404 	addi	r8,sp,16
 8004ce8:	003fee06 	br	8004ca4 <__alt_data_end+0xfc004ca4>
 8004cec:	d9002d17 	ldw	r4,180(sp)
 8004cf0:	d9801e04 	addi	r6,sp,120
 8004cf4:	b80b883a 	mov	r5,r23
 8004cf8:	800b12c0 	call	800b12c <__sprint_r>
 8004cfc:	103c171e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8004d00:	d8c02017 	ldw	r3,128(sp)
 8004d04:	df002787 	ldb	fp,158(sp)
 8004d08:	da000404 	addi	r8,sp,16
 8004d0c:	003d3406 	br	80041e0 <__alt_data_end+0xfc0041e0>
 8004d10:	9080040c 	andi	r2,r18,16
 8004d14:	10016126 	beq	r2,zero,800529c <___vfprintf_internal_r+0x1950>
 8004d18:	d9402e17 	ldw	r5,184(sp)
 8004d1c:	2cc00017 	ldw	r19,0(r5)
 8004d20:	29400104 	addi	r5,r5,4
 8004d24:	d9402e15 	stw	r5,184(sp)
 8004d28:	982dd7fa 	srai	r22,r19,31
 8004d2c:	b005883a 	mov	r2,r22
 8004d30:	003c5a06 	br	8003e9c <__alt_data_end+0xfc003e9c>
 8004d34:	9080040c 	andi	r2,r18,16
 8004d38:	10003526 	beq	r2,zero,8004e10 <___vfprintf_internal_r+0x14c4>
 8004d3c:	d8c02e17 	ldw	r3,184(sp)
 8004d40:	d9002a17 	ldw	r4,168(sp)
 8004d44:	d8002785 	stb	zero,158(sp)
 8004d48:	18800104 	addi	r2,r3,4
 8004d4c:	1cc00017 	ldw	r19,0(r3)
 8004d50:	002d883a 	mov	r22,zero
 8004d54:	20003716 	blt	r4,zero,8004e34 <___vfprintf_internal_r+0x14e8>
 8004d58:	00ffdfc4 	movi	r3,-129
 8004d5c:	d8802e15 	stw	r2,184(sp)
 8004d60:	90e4703a 	and	r18,r18,r3
 8004d64:	0039883a 	mov	fp,zero
 8004d68:	983dd426 	beq	r19,zero,80044bc <__alt_data_end+0xfc0044bc>
 8004d6c:	00800244 	movi	r2,9
 8004d70:	14fc5336 	bltu	r2,r19,8003ec0 <__alt_data_end+0xfc003ec0>
 8004d74:	d8c02817 	ldw	r3,160(sp)
 8004d78:	dc001dc4 	addi	r16,sp,119
 8004d7c:	9cc00c04 	addi	r19,r19,48
 8004d80:	1c07c83a 	sub	r3,r3,r16
 8004d84:	dcc01dc5 	stb	r19,119(sp)
 8004d88:	d8c02b15 	stw	r3,172(sp)
 8004d8c:	003cc606 	br	80040a8 <__alt_data_end+0xfc0040a8>
 8004d90:	d8803317 	ldw	r2,204(sp)
 8004d94:	143fffc4 	addi	r16,r2,-1
 8004d98:	043f4d0e 	bge	zero,r16,8004ad0 <__alt_data_end+0xfc004ad0>
 8004d9c:	07000404 	movi	fp,16
 8004da0:	e400810e 	bge	fp,r16,8004fa8 <___vfprintf_internal_r+0x165c>
 8004da4:	014200f4 	movhi	r5,2051
 8004da8:	29452b84 	addi	r5,r5,5294
 8004dac:	d9402c15 	stw	r5,176(sp)
 8004db0:	01c001c4 	movi	r7,7
 8004db4:	dcc02d17 	ldw	r19,180(sp)
 8004db8:	00000306 	br	8004dc8 <___vfprintf_internal_r+0x147c>
 8004dbc:	b5800204 	addi	r22,r22,8
 8004dc0:	843ffc04 	addi	r16,r16,-16
 8004dc4:	e4007b0e 	bge	fp,r16,8004fb4 <___vfprintf_internal_r+0x1668>
 8004dc8:	18c00404 	addi	r3,r3,16
 8004dcc:	8c400044 	addi	r17,r17,1
 8004dd0:	b5000015 	stw	r20,0(r22)
 8004dd4:	b7000115 	stw	fp,4(r22)
 8004dd8:	d8c02015 	stw	r3,128(sp)
 8004ddc:	dc401f15 	stw	r17,124(sp)
 8004de0:	3c7ff60e 	bge	r7,r17,8004dbc <__alt_data_end+0xfc004dbc>
 8004de4:	d9801e04 	addi	r6,sp,120
 8004de8:	b80b883a 	mov	r5,r23
 8004dec:	9809883a 	mov	r4,r19
 8004df0:	d9c03c15 	stw	r7,240(sp)
 8004df4:	800b12c0 	call	800b12c <__sprint_r>
 8004df8:	d9c03c17 	ldw	r7,240(sp)
 8004dfc:	103bd71e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8004e00:	d8c02017 	ldw	r3,128(sp)
 8004e04:	dc401f17 	ldw	r17,124(sp)
 8004e08:	dd800404 	addi	r22,sp,16
 8004e0c:	003fec06 	br	8004dc0 <__alt_data_end+0xfc004dc0>
 8004e10:	9080100c 	andi	r2,r18,64
 8004e14:	d8002785 	stb	zero,158(sp)
 8004e18:	10010e26 	beq	r2,zero,8005254 <___vfprintf_internal_r+0x1908>
 8004e1c:	d9402e17 	ldw	r5,184(sp)
 8004e20:	d8c02a17 	ldw	r3,168(sp)
 8004e24:	002d883a 	mov	r22,zero
 8004e28:	28800104 	addi	r2,r5,4
 8004e2c:	2cc0000b 	ldhu	r19,0(r5)
 8004e30:	183fc90e 	bge	r3,zero,8004d58 <__alt_data_end+0xfc004d58>
 8004e34:	d8802e15 	stw	r2,184(sp)
 8004e38:	0039883a 	mov	fp,zero
 8004e3c:	9d84b03a 	or	r2,r19,r22
 8004e40:	103c1e1e 	bne	r2,zero,8003ebc <__alt_data_end+0xfc003ebc>
 8004e44:	00800044 	movi	r2,1
 8004e48:	003e6c06 	br	80047fc <__alt_data_end+0xfc0047fc>
 8004e4c:	d9002d17 	ldw	r4,180(sp)
 8004e50:	d9801e04 	addi	r6,sp,120
 8004e54:	b80b883a 	mov	r5,r23
 8004e58:	800b12c0 	call	800b12c <__sprint_r>
 8004e5c:	103bbf1e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8004e60:	d8c02017 	ldw	r3,128(sp)
 8004e64:	da000404 	addi	r8,sp,16
 8004e68:	d9003217 	ldw	r4,200(sp)
 8004e6c:	d8802617 	ldw	r2,152(sp)
 8004e70:	d9403317 	ldw	r5,204(sp)
 8004e74:	8123883a 	add	r17,r16,r4
 8004e78:	11400216 	blt	r2,r5,8004e84 <___vfprintf_internal_r+0x1538>
 8004e7c:	9100004c 	andi	r4,r18,1
 8004e80:	20000d26 	beq	r4,zero,8004eb8 <___vfprintf_internal_r+0x156c>
 8004e84:	d9003717 	ldw	r4,220(sp)
 8004e88:	d9403417 	ldw	r5,208(sp)
 8004e8c:	1907883a 	add	r3,r3,r4
 8004e90:	d9001f17 	ldw	r4,124(sp)
 8004e94:	41400015 	stw	r5,0(r8)
 8004e98:	d9403717 	ldw	r5,220(sp)
 8004e9c:	21000044 	addi	r4,r4,1
 8004ea0:	d8c02015 	stw	r3,128(sp)
 8004ea4:	41400115 	stw	r5,4(r8)
 8004ea8:	d9001f15 	stw	r4,124(sp)
 8004eac:	014001c4 	movi	r5,7
 8004eb0:	2901e816 	blt	r5,r4,8005654 <___vfprintf_internal_r+0x1d08>
 8004eb4:	42000204 	addi	r8,r8,8
 8004eb8:	d9003317 	ldw	r4,204(sp)
 8004ebc:	8121883a 	add	r16,r16,r4
 8004ec0:	2085c83a 	sub	r2,r4,r2
 8004ec4:	8461c83a 	sub	r16,r16,r17
 8004ec8:	1400010e 	bge	r2,r16,8004ed0 <___vfprintf_internal_r+0x1584>
 8004ecc:	1021883a 	mov	r16,r2
 8004ed0:	04000a0e 	bge	zero,r16,8004efc <___vfprintf_internal_r+0x15b0>
 8004ed4:	d9001f17 	ldw	r4,124(sp)
 8004ed8:	1c07883a 	add	r3,r3,r16
 8004edc:	44400015 	stw	r17,0(r8)
 8004ee0:	21000044 	addi	r4,r4,1
 8004ee4:	44000115 	stw	r16,4(r8)
 8004ee8:	d8c02015 	stw	r3,128(sp)
 8004eec:	d9001f15 	stw	r4,124(sp)
 8004ef0:	014001c4 	movi	r5,7
 8004ef4:	2901fb16 	blt	r5,r4,80056e4 <___vfprintf_internal_r+0x1d98>
 8004ef8:	42000204 	addi	r8,r8,8
 8004efc:	8001f716 	blt	r16,zero,80056dc <___vfprintf_internal_r+0x1d90>
 8004f00:	1421c83a 	sub	r16,r2,r16
 8004f04:	043d160e 	bge	zero,r16,8004360 <__alt_data_end+0xfc004360>
 8004f08:	04400404 	movi	r17,16
 8004f0c:	d8801f17 	ldw	r2,124(sp)
 8004f10:	8c3efb0e 	bge	r17,r16,8004b00 <__alt_data_end+0xfc004b00>
 8004f14:	014200f4 	movhi	r5,2051
 8004f18:	29452b84 	addi	r5,r5,5294
 8004f1c:	d9402c15 	stw	r5,176(sp)
 8004f20:	058001c4 	movi	r22,7
 8004f24:	dcc02d17 	ldw	r19,180(sp)
 8004f28:	00000306 	br	8004f38 <___vfprintf_internal_r+0x15ec>
 8004f2c:	42000204 	addi	r8,r8,8
 8004f30:	843ffc04 	addi	r16,r16,-16
 8004f34:	8c3ef50e 	bge	r17,r16,8004b0c <__alt_data_end+0xfc004b0c>
 8004f38:	18c00404 	addi	r3,r3,16
 8004f3c:	10800044 	addi	r2,r2,1
 8004f40:	45000015 	stw	r20,0(r8)
 8004f44:	44400115 	stw	r17,4(r8)
 8004f48:	d8c02015 	stw	r3,128(sp)
 8004f4c:	d8801f15 	stw	r2,124(sp)
 8004f50:	b0bff60e 	bge	r22,r2,8004f2c <__alt_data_end+0xfc004f2c>
 8004f54:	d9801e04 	addi	r6,sp,120
 8004f58:	b80b883a 	mov	r5,r23
 8004f5c:	9809883a 	mov	r4,r19
 8004f60:	800b12c0 	call	800b12c <__sprint_r>
 8004f64:	103b7d1e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8004f68:	d8c02017 	ldw	r3,128(sp)
 8004f6c:	d8801f17 	ldw	r2,124(sp)
 8004f70:	da000404 	addi	r8,sp,16
 8004f74:	003fee06 	br	8004f30 <__alt_data_end+0xfc004f30>
 8004f78:	9088703a 	and	r4,r18,r2
 8004f7c:	203eab1e 	bne	r4,zero,8004a2c <__alt_data_end+0xfc004a2c>
 8004f80:	dc401f17 	ldw	r17,124(sp)
 8004f84:	40800115 	stw	r2,4(r8)
 8004f88:	44000015 	stw	r16,0(r8)
 8004f8c:	8c400044 	addi	r17,r17,1
 8004f90:	d8c02015 	stw	r3,128(sp)
 8004f94:	dc401f15 	stw	r17,124(sp)
 8004f98:	008001c4 	movi	r2,7
 8004f9c:	14400e16 	blt	r2,r17,8004fd8 <___vfprintf_internal_r+0x168c>
 8004fa0:	45800204 	addi	r22,r8,8
 8004fa4:	003eca06 	br	8004ad0 <__alt_data_end+0xfc004ad0>
 8004fa8:	010200f4 	movhi	r4,2051
 8004fac:	21052b84 	addi	r4,r4,5294
 8004fb0:	d9002c15 	stw	r4,176(sp)
 8004fb4:	d8802c17 	ldw	r2,176(sp)
 8004fb8:	1c07883a 	add	r3,r3,r16
 8004fbc:	8c400044 	addi	r17,r17,1
 8004fc0:	b0800015 	stw	r2,0(r22)
 8004fc4:	b4000115 	stw	r16,4(r22)
 8004fc8:	d8c02015 	stw	r3,128(sp)
 8004fcc:	dc401f15 	stw	r17,124(sp)
 8004fd0:	008001c4 	movi	r2,7
 8004fd4:	147ebd0e 	bge	r2,r17,8004acc <__alt_data_end+0xfc004acc>
 8004fd8:	d9002d17 	ldw	r4,180(sp)
 8004fdc:	d9801e04 	addi	r6,sp,120
 8004fe0:	b80b883a 	mov	r5,r23
 8004fe4:	800b12c0 	call	800b12c <__sprint_r>
 8004fe8:	103b5c1e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8004fec:	d8c02017 	ldw	r3,128(sp)
 8004ff0:	dc401f17 	ldw	r17,124(sp)
 8004ff4:	dd800404 	addi	r22,sp,16
 8004ff8:	003eb506 	br	8004ad0 <__alt_data_end+0xfc004ad0>
 8004ffc:	d9002d17 	ldw	r4,180(sp)
 8005000:	d9801e04 	addi	r6,sp,120
 8005004:	b80b883a 	mov	r5,r23
 8005008:	800b12c0 	call	800b12c <__sprint_r>
 800500c:	103b531e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8005010:	d8c02017 	ldw	r3,128(sp)
 8005014:	dc401f17 	ldw	r17,124(sp)
 8005018:	da000404 	addi	r8,sp,16
 800501c:	003e8d06 	br	8004a54 <__alt_data_end+0xfc004a54>
 8005020:	d9002d17 	ldw	r4,180(sp)
 8005024:	d9801e04 	addi	r6,sp,120
 8005028:	b80b883a 	mov	r5,r23
 800502c:	800b12c0 	call	800b12c <__sprint_r>
 8005030:	103b4a1e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8005034:	d8c02017 	ldw	r3,128(sp)
 8005038:	dc401f17 	ldw	r17,124(sp)
 800503c:	dd800404 	addi	r22,sp,16
 8005040:	003e8f06 	br	8004a80 <__alt_data_end+0xfc004a80>
 8005044:	0027883a 	mov	r19,zero
 8005048:	003f4a06 	br	8004d74 <__alt_data_end+0xfc004d74>
 800504c:	d9002d17 	ldw	r4,180(sp)
 8005050:	d9801e04 	addi	r6,sp,120
 8005054:	b80b883a 	mov	r5,r23
 8005058:	800b12c0 	call	800b12c <__sprint_r>
 800505c:	103b3f1e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8005060:	d8c02017 	ldw	r3,128(sp)
 8005064:	da000404 	addi	r8,sp,16
 8005068:	003c7b06 	br	8004258 <__alt_data_end+0xfc004258>
 800506c:	d9402a17 	ldw	r5,168(sp)
 8005070:	04e7c83a 	sub	r19,zero,r19
 8005074:	07000b44 	movi	fp,45
 8005078:	9804c03a 	cmpne	r2,r19,zero
 800507c:	05adc83a 	sub	r22,zero,r22
 8005080:	df002785 	stb	fp,158(sp)
 8005084:	b0adc83a 	sub	r22,r22,r2
 8005088:	28017b16 	blt	r5,zero,8005678 <___vfprintf_internal_r+0x1d2c>
 800508c:	00bfdfc4 	movi	r2,-129
 8005090:	90a4703a 	and	r18,r18,r2
 8005094:	003b8906 	br	8003ebc <__alt_data_end+0xfc003ebc>
 8005098:	d9003617 	ldw	r4,216(sp)
 800509c:	d9403817 	ldw	r5,224(sp)
 80050a0:	da003d15 	stw	r8,244(sp)
 80050a4:	800ad500 	call	800ad50 <__fpclassifyd>
 80050a8:	da003d17 	ldw	r8,244(sp)
 80050ac:	1000f026 	beq	r2,zero,8005470 <___vfprintf_internal_r+0x1b24>
 80050b0:	d9002a17 	ldw	r4,168(sp)
 80050b4:	05bff7c4 	movi	r22,-33
 80050b8:	00bfffc4 	movi	r2,-1
 80050bc:	8dac703a 	and	r22,r17,r22
 80050c0:	20820026 	beq	r4,r2,80058c4 <___vfprintf_internal_r+0x1f78>
 80050c4:	008011c4 	movi	r2,71
 80050c8:	b081f726 	beq	r22,r2,80058a8 <___vfprintf_internal_r+0x1f5c>
 80050cc:	d9003817 	ldw	r4,224(sp)
 80050d0:	90c04014 	ori	r3,r18,256
 80050d4:	d8c02c15 	stw	r3,176(sp)
 80050d8:	20021516 	blt	r4,zero,8005930 <___vfprintf_internal_r+0x1fe4>
 80050dc:	dcc03817 	ldw	r19,224(sp)
 80050e0:	d8002905 	stb	zero,164(sp)
 80050e4:	00801984 	movi	r2,102
 80050e8:	8881f926 	beq	r17,r2,80058d0 <___vfprintf_internal_r+0x1f84>
 80050ec:	00801184 	movi	r2,70
 80050f0:	88821c26 	beq	r17,r2,8005964 <___vfprintf_internal_r+0x2018>
 80050f4:	00801144 	movi	r2,69
 80050f8:	b081ef26 	beq	r22,r2,80058b8 <___vfprintf_internal_r+0x1f6c>
 80050fc:	d8c02a17 	ldw	r3,168(sp)
 8005100:	d8802104 	addi	r2,sp,132
 8005104:	d8800315 	stw	r2,12(sp)
 8005108:	d9403617 	ldw	r5,216(sp)
 800510c:	d8802504 	addi	r2,sp,148
 8005110:	d9002d17 	ldw	r4,180(sp)
 8005114:	d8800215 	stw	r2,8(sp)
 8005118:	d8802604 	addi	r2,sp,152
 800511c:	d8c00015 	stw	r3,0(sp)
 8005120:	d8800115 	stw	r2,4(sp)
 8005124:	01c00084 	movi	r7,2
 8005128:	980d883a 	mov	r6,r19
 800512c:	d8c03c15 	stw	r3,240(sp)
 8005130:	da003d15 	stw	r8,244(sp)
 8005134:	800607c0 	call	800607c <_dtoa_r>
 8005138:	1021883a 	mov	r16,r2
 800513c:	008019c4 	movi	r2,103
 8005140:	d8c03c17 	ldw	r3,240(sp)
 8005144:	da003d17 	ldw	r8,244(sp)
 8005148:	88817126 	beq	r17,r2,8005710 <___vfprintf_internal_r+0x1dc4>
 800514c:	008011c4 	movi	r2,71
 8005150:	88829126 	beq	r17,r2,8005b98 <___vfprintf_internal_r+0x224c>
 8005154:	80f9883a 	add	fp,r16,r3
 8005158:	d9003617 	ldw	r4,216(sp)
 800515c:	000d883a 	mov	r6,zero
 8005160:	000f883a 	mov	r7,zero
 8005164:	980b883a 	mov	r5,r19
 8005168:	da003d15 	stw	r8,244(sp)
 800516c:	800eeb00 	call	800eeb0 <__eqdf2>
 8005170:	da003d17 	ldw	r8,244(sp)
 8005174:	10018d26 	beq	r2,zero,80057ac <___vfprintf_internal_r+0x1e60>
 8005178:	d8802117 	ldw	r2,132(sp)
 800517c:	1700062e 	bgeu	r2,fp,8005198 <___vfprintf_internal_r+0x184c>
 8005180:	01000c04 	movi	r4,48
 8005184:	10c00044 	addi	r3,r2,1
 8005188:	d8c02115 	stw	r3,132(sp)
 800518c:	11000005 	stb	r4,0(r2)
 8005190:	d8802117 	ldw	r2,132(sp)
 8005194:	173ffb36 	bltu	r2,fp,8005184 <__alt_data_end+0xfc005184>
 8005198:	1405c83a 	sub	r2,r2,r16
 800519c:	d8803315 	stw	r2,204(sp)
 80051a0:	008011c4 	movi	r2,71
 80051a4:	b0817626 	beq	r22,r2,8005780 <___vfprintf_internal_r+0x1e34>
 80051a8:	00801944 	movi	r2,101
 80051ac:	1442800e 	bge	r2,r17,8005bb0 <___vfprintf_internal_r+0x2264>
 80051b0:	d8c02617 	ldw	r3,152(sp)
 80051b4:	00801984 	movi	r2,102
 80051b8:	d8c03215 	stw	r3,200(sp)
 80051bc:	8881fe26 	beq	r17,r2,80059b8 <___vfprintf_internal_r+0x206c>
 80051c0:	d8c03217 	ldw	r3,200(sp)
 80051c4:	d9003317 	ldw	r4,204(sp)
 80051c8:	1901dd16 	blt	r3,r4,8005940 <___vfprintf_internal_r+0x1ff4>
 80051cc:	9480004c 	andi	r18,r18,1
 80051d0:	90022b1e 	bne	r18,zero,8005a80 <___vfprintf_internal_r+0x2134>
 80051d4:	1805883a 	mov	r2,r3
 80051d8:	18028316 	blt	r3,zero,8005be8 <___vfprintf_internal_r+0x229c>
 80051dc:	d8c03217 	ldw	r3,200(sp)
 80051e0:	044019c4 	movi	r17,103
 80051e4:	d8c02b15 	stw	r3,172(sp)
 80051e8:	df002907 	ldb	fp,164(sp)
 80051ec:	e001531e 	bne	fp,zero,800573c <___vfprintf_internal_r+0x1df0>
 80051f0:	df002783 	ldbu	fp,158(sp)
 80051f4:	d8802915 	stw	r2,164(sp)
 80051f8:	dc802c17 	ldw	r18,176(sp)
 80051fc:	d8002a15 	stw	zero,168(sp)
 8005200:	003baf06 	br	80040c0 <__alt_data_end+0xfc0040c0>
 8005204:	d8c02e17 	ldw	r3,184(sp)
 8005208:	d9002e17 	ldw	r4,184(sp)
 800520c:	d9402e17 	ldw	r5,184(sp)
 8005210:	18c00017 	ldw	r3,0(r3)
 8005214:	21000117 	ldw	r4,4(r4)
 8005218:	29400204 	addi	r5,r5,8
 800521c:	d8c03615 	stw	r3,216(sp)
 8005220:	d9003815 	stw	r4,224(sp)
 8005224:	d9402e15 	stw	r5,184(sp)
 8005228:	003b5006 	br	8003f6c <__alt_data_end+0xfc003f6c>
 800522c:	ac400007 	ldb	r17,0(r21)
 8005230:	003a2806 	br	8003ad4 <__alt_data_end+0xfc003ad4>
 8005234:	9080100c 	andi	r2,r18,64
 8005238:	1000a826 	beq	r2,zero,80054dc <___vfprintf_internal_r+0x1b90>
 800523c:	d8c02e17 	ldw	r3,184(sp)
 8005240:	002d883a 	mov	r22,zero
 8005244:	1cc0000b 	ldhu	r19,0(r3)
 8005248:	18c00104 	addi	r3,r3,4
 800524c:	d8c02e15 	stw	r3,184(sp)
 8005250:	003caf06 	br	8004510 <__alt_data_end+0xfc004510>
 8005254:	d9002e17 	ldw	r4,184(sp)
 8005258:	d9402a17 	ldw	r5,168(sp)
 800525c:	002d883a 	mov	r22,zero
 8005260:	20800104 	addi	r2,r4,4
 8005264:	24c00017 	ldw	r19,0(r4)
 8005268:	283ebb0e 	bge	r5,zero,8004d58 <__alt_data_end+0xfc004d58>
 800526c:	003ef106 	br	8004e34 <__alt_data_end+0xfc004e34>
 8005270:	9080040c 	andi	r2,r18,16
 8005274:	1000921e 	bne	r2,zero,80054c0 <___vfprintf_internal_r+0x1b74>
 8005278:	9480100c 	andi	r18,r18,64
 800527c:	90013926 	beq	r18,zero,8005764 <___vfprintf_internal_r+0x1e18>
 8005280:	d9402e17 	ldw	r5,184(sp)
 8005284:	d8c02f17 	ldw	r3,188(sp)
 8005288:	28800017 	ldw	r2,0(r5)
 800528c:	29400104 	addi	r5,r5,4
 8005290:	d9402e15 	stw	r5,184(sp)
 8005294:	10c0000d 	sth	r3,0(r2)
 8005298:	0039e406 	br	8003a2c <__alt_data_end+0xfc003a2c>
 800529c:	9080100c 	andi	r2,r18,64
 80052a0:	10008026 	beq	r2,zero,80054a4 <___vfprintf_internal_r+0x1b58>
 80052a4:	d8802e17 	ldw	r2,184(sp)
 80052a8:	14c0000f 	ldh	r19,0(r2)
 80052ac:	10800104 	addi	r2,r2,4
 80052b0:	d8802e15 	stw	r2,184(sp)
 80052b4:	982dd7fa 	srai	r22,r19,31
 80052b8:	b005883a 	mov	r2,r22
 80052bc:	003af706 	br	8003e9c <__alt_data_end+0xfc003e9c>
 80052c0:	9080100c 	andi	r2,r18,64
 80052c4:	d8002785 	stb	zero,158(sp)
 80052c8:	10008a1e 	bne	r2,zero,80054f4 <___vfprintf_internal_r+0x1ba8>
 80052cc:	d9002e17 	ldw	r4,184(sp)
 80052d0:	d9402a17 	ldw	r5,168(sp)
 80052d4:	002d883a 	mov	r22,zero
 80052d8:	20800104 	addi	r2,r4,4
 80052dc:	24c00017 	ldw	r19,0(r4)
 80052e0:	283e4b0e 	bge	r5,zero,8004c10 <__alt_data_end+0xfc004c10>
 80052e4:	9d86b03a 	or	r3,r19,r22
 80052e8:	d8802e15 	stw	r2,184(sp)
 80052ec:	183e4c1e 	bne	r3,zero,8004c20 <__alt_data_end+0xfc004c20>
 80052f0:	0039883a 	mov	fp,zero
 80052f4:	0005883a 	mov	r2,zero
 80052f8:	003d4006 	br	80047fc <__alt_data_end+0xfc0047fc>
 80052fc:	014200f4 	movhi	r5,2051
 8005300:	29452b84 	addi	r5,r5,5294
 8005304:	d9402c15 	stw	r5,176(sp)
 8005308:	d9402c17 	ldw	r5,176(sp)
 800530c:	1c47883a 	add	r3,r3,r17
 8005310:	10800044 	addi	r2,r2,1
 8005314:	41400015 	stw	r5,0(r8)
 8005318:	44400115 	stw	r17,4(r8)
 800531c:	d8c02015 	stw	r3,128(sp)
 8005320:	d8801f15 	stw	r2,124(sp)
 8005324:	010001c4 	movi	r4,7
 8005328:	20bec816 	blt	r4,r2,8004e4c <__alt_data_end+0xfc004e4c>
 800532c:	42000204 	addi	r8,r8,8
 8005330:	003ecd06 	br	8004e68 <__alt_data_end+0xfc004e68>
 8005334:	d9002a17 	ldw	r4,168(sp)
 8005338:	d8002785 	stb	zero,158(sp)
 800533c:	203d2d16 	blt	r4,zero,80047f4 <__alt_data_end+0xfc0047f4>
 8005340:	00bfdfc4 	movi	r2,-129
 8005344:	90a4703a 	and	r18,r18,r2
 8005348:	003a6106 	br	8003cd0 <__alt_data_end+0xfc003cd0>
 800534c:	010200f4 	movhi	r4,2051
 8005350:	21052b84 	addi	r4,r4,5294
 8005354:	d9002c15 	stw	r4,176(sp)
 8005358:	003bea06 	br	8004304 <__alt_data_end+0xfc004304>
 800535c:	d9002d17 	ldw	r4,180(sp)
 8005360:	d9801e04 	addi	r6,sp,120
 8005364:	b80b883a 	mov	r5,r23
 8005368:	800b12c0 	call	800b12c <__sprint_r>
 800536c:	103a7b1e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8005370:	d8c02017 	ldw	r3,128(sp)
 8005374:	da000404 	addi	r8,sp,16
 8005378:	003d4106 	br	8004880 <__alt_data_end+0xfc004880>
 800537c:	d8801f17 	ldw	r2,124(sp)
 8005380:	014200f4 	movhi	r5,2051
 8005384:	01000044 	movi	r4,1
 8005388:	18c00044 	addi	r3,r3,1
 800538c:	10800044 	addi	r2,r2,1
 8005390:	29452b04 	addi	r5,r5,5292
 8005394:	41000115 	stw	r4,4(r8)
 8005398:	41400015 	stw	r5,0(r8)
 800539c:	d8c02015 	stw	r3,128(sp)
 80053a0:	d8801f15 	stw	r2,124(sp)
 80053a4:	010001c4 	movi	r4,7
 80053a8:	20805c16 	blt	r4,r2,800551c <___vfprintf_internal_r+0x1bd0>
 80053ac:	42000204 	addi	r8,r8,8
 80053b0:	8800041e 	bne	r17,zero,80053c4 <___vfprintf_internal_r+0x1a78>
 80053b4:	d8803317 	ldw	r2,204(sp)
 80053b8:	1000021e 	bne	r2,zero,80053c4 <___vfprintf_internal_r+0x1a78>
 80053bc:	9080004c 	andi	r2,r18,1
 80053c0:	103be726 	beq	r2,zero,8004360 <__alt_data_end+0xfc004360>
 80053c4:	d9003717 	ldw	r4,220(sp)
 80053c8:	d8801f17 	ldw	r2,124(sp)
 80053cc:	d9403417 	ldw	r5,208(sp)
 80053d0:	20c7883a 	add	r3,r4,r3
 80053d4:	10800044 	addi	r2,r2,1
 80053d8:	41000115 	stw	r4,4(r8)
 80053dc:	41400015 	stw	r5,0(r8)
 80053e0:	d8c02015 	stw	r3,128(sp)
 80053e4:	d8801f15 	stw	r2,124(sp)
 80053e8:	010001c4 	movi	r4,7
 80053ec:	20812116 	blt	r4,r2,8005874 <___vfprintf_internal_r+0x1f28>
 80053f0:	42000204 	addi	r8,r8,8
 80053f4:	0463c83a 	sub	r17,zero,r17
 80053f8:	0440730e 	bge	zero,r17,80055c8 <___vfprintf_internal_r+0x1c7c>
 80053fc:	05800404 	movi	r22,16
 8005400:	b440860e 	bge	r22,r17,800561c <___vfprintf_internal_r+0x1cd0>
 8005404:	014200f4 	movhi	r5,2051
 8005408:	29452b84 	addi	r5,r5,5294
 800540c:	d9402c15 	stw	r5,176(sp)
 8005410:	070001c4 	movi	fp,7
 8005414:	dcc02d17 	ldw	r19,180(sp)
 8005418:	00000306 	br	8005428 <___vfprintf_internal_r+0x1adc>
 800541c:	42000204 	addi	r8,r8,8
 8005420:	8c7ffc04 	addi	r17,r17,-16
 8005424:	b440800e 	bge	r22,r17,8005628 <___vfprintf_internal_r+0x1cdc>
 8005428:	18c00404 	addi	r3,r3,16
 800542c:	10800044 	addi	r2,r2,1
 8005430:	45000015 	stw	r20,0(r8)
 8005434:	45800115 	stw	r22,4(r8)
 8005438:	d8c02015 	stw	r3,128(sp)
 800543c:	d8801f15 	stw	r2,124(sp)
 8005440:	e0bff60e 	bge	fp,r2,800541c <__alt_data_end+0xfc00541c>
 8005444:	d9801e04 	addi	r6,sp,120
 8005448:	b80b883a 	mov	r5,r23
 800544c:	9809883a 	mov	r4,r19
 8005450:	800b12c0 	call	800b12c <__sprint_r>
 8005454:	103a411e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8005458:	d8c02017 	ldw	r3,128(sp)
 800545c:	d8801f17 	ldw	r2,124(sp)
 8005460:	da000404 	addi	r8,sp,16
 8005464:	003fee06 	br	8005420 <__alt_data_end+0xfc005420>
 8005468:	00bfffc4 	movi	r2,-1
 800546c:	003a3f06 	br	8003d6c <__alt_data_end+0xfc003d6c>
 8005470:	008011c4 	movi	r2,71
 8005474:	1440b816 	blt	r2,r17,8005758 <___vfprintf_internal_r+0x1e0c>
 8005478:	040200f4 	movhi	r16,2051
 800547c:	84051d04 	addi	r16,r16,5236
 8005480:	00c000c4 	movi	r3,3
 8005484:	00bfdfc4 	movi	r2,-129
 8005488:	d8c02915 	stw	r3,164(sp)
 800548c:	90a4703a 	and	r18,r18,r2
 8005490:	df002783 	ldbu	fp,158(sp)
 8005494:	d8c02b15 	stw	r3,172(sp)
 8005498:	d8002a15 	stw	zero,168(sp)
 800549c:	d8003215 	stw	zero,200(sp)
 80054a0:	003b0706 	br	80040c0 <__alt_data_end+0xfc0040c0>
 80054a4:	d8c02e17 	ldw	r3,184(sp)
 80054a8:	1cc00017 	ldw	r19,0(r3)
 80054ac:	18c00104 	addi	r3,r3,4
 80054b0:	d8c02e15 	stw	r3,184(sp)
 80054b4:	982dd7fa 	srai	r22,r19,31
 80054b8:	b005883a 	mov	r2,r22
 80054bc:	003a7706 	br	8003e9c <__alt_data_end+0xfc003e9c>
 80054c0:	d8c02e17 	ldw	r3,184(sp)
 80054c4:	d9002f17 	ldw	r4,188(sp)
 80054c8:	18800017 	ldw	r2,0(r3)
 80054cc:	18c00104 	addi	r3,r3,4
 80054d0:	d8c02e15 	stw	r3,184(sp)
 80054d4:	11000015 	stw	r4,0(r2)
 80054d8:	00395406 	br	8003a2c <__alt_data_end+0xfc003a2c>
 80054dc:	d9002e17 	ldw	r4,184(sp)
 80054e0:	002d883a 	mov	r22,zero
 80054e4:	24c00017 	ldw	r19,0(r4)
 80054e8:	21000104 	addi	r4,r4,4
 80054ec:	d9002e15 	stw	r4,184(sp)
 80054f0:	003c0706 	br	8004510 <__alt_data_end+0xfc004510>
 80054f4:	d9402e17 	ldw	r5,184(sp)
 80054f8:	d8c02a17 	ldw	r3,168(sp)
 80054fc:	002d883a 	mov	r22,zero
 8005500:	28800104 	addi	r2,r5,4
 8005504:	2cc0000b 	ldhu	r19,0(r5)
 8005508:	183dc10e 	bge	r3,zero,8004c10 <__alt_data_end+0xfc004c10>
 800550c:	003f7506 	br	80052e4 <__alt_data_end+0xfc0052e4>
 8005510:	040200f4 	movhi	r16,2051
 8005514:	84051b04 	addi	r16,r16,5228
 8005518:	003aa706 	br	8003fb8 <__alt_data_end+0xfc003fb8>
 800551c:	d9002d17 	ldw	r4,180(sp)
 8005520:	d9801e04 	addi	r6,sp,120
 8005524:	b80b883a 	mov	r5,r23
 8005528:	800b12c0 	call	800b12c <__sprint_r>
 800552c:	103a0b1e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8005530:	dc402617 	ldw	r17,152(sp)
 8005534:	d8c02017 	ldw	r3,128(sp)
 8005538:	da000404 	addi	r8,sp,16
 800553c:	003f9c06 	br	80053b0 <__alt_data_end+0xfc0053b0>
 8005540:	ac400043 	ldbu	r17,1(r21)
 8005544:	84000814 	ori	r16,r16,32
 8005548:	ad400044 	addi	r21,r21,1
 800554c:	8c403fcc 	andi	r17,r17,255
 8005550:	8c40201c 	xori	r17,r17,128
 8005554:	8c7fe004 	addi	r17,r17,-128
 8005558:	00395e06 	br	8003ad4 <__alt_data_end+0xfc003ad4>
 800555c:	d8c02e15 	stw	r3,184(sp)
 8005560:	0039883a 	mov	fp,zero
 8005564:	003e3506 	br	8004e3c <__alt_data_end+0xfc004e3c>
 8005568:	d9002d17 	ldw	r4,180(sp)
 800556c:	d9801e04 	addi	r6,sp,120
 8005570:	b80b883a 	mov	r5,r23
 8005574:	800b12c0 	call	800b12c <__sprint_r>
 8005578:	1039f81e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 800557c:	d8c02017 	ldw	r3,128(sp)
 8005580:	da000404 	addi	r8,sp,16
 8005584:	003cd006 	br	80048c8 <__alt_data_end+0xfc0048c8>
 8005588:	8009883a 	mov	r4,r16
 800558c:	df003d15 	stw	fp,244(sp)
 8005590:	80038b40 	call	80038b4 <strlen>
 8005594:	d8802b15 	stw	r2,172(sp)
 8005598:	da003d17 	ldw	r8,244(sp)
 800559c:	103c200e 	bge	r2,zero,8004620 <__alt_data_end+0xfc004620>
 80055a0:	0005883a 	mov	r2,zero
 80055a4:	003c1e06 	br	8004620 <__alt_data_end+0xfc004620>
 80055a8:	d9002d17 	ldw	r4,180(sp)
 80055ac:	d9801e04 	addi	r6,sp,120
 80055b0:	b80b883a 	mov	r5,r23
 80055b4:	800b12c0 	call	800b12c <__sprint_r>
 80055b8:	1039e81e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 80055bc:	d8c02017 	ldw	r3,128(sp)
 80055c0:	d8801f17 	ldw	r2,124(sp)
 80055c4:	da000404 	addi	r8,sp,16
 80055c8:	d9403317 	ldw	r5,204(sp)
 80055cc:	10800044 	addi	r2,r2,1
 80055d0:	44000015 	stw	r16,0(r8)
 80055d4:	28c7883a 	add	r3,r5,r3
 80055d8:	003b5b06 	br	8004348 <__alt_data_end+0xfc004348>
 80055dc:	010200f4 	movhi	r4,2051
 80055e0:	21052f84 	addi	r4,r4,5310
 80055e4:	d9003515 	stw	r4,212(sp)
 80055e8:	003af206 	br	80041b4 <__alt_data_end+0xfc0041b4>
 80055ec:	013fffc4 	movi	r4,-1
 80055f0:	003a0806 	br	8003e14 <__alt_data_end+0xfc003e14>
 80055f4:	0023883a 	mov	r17,zero
 80055f8:	003d9d06 	br	8004c70 <__alt_data_end+0xfc004c70>
 80055fc:	d9002d17 	ldw	r4,180(sp)
 8005600:	d9801e04 	addi	r6,sp,120
 8005604:	b80b883a 	mov	r5,r23
 8005608:	800b12c0 	call	800b12c <__sprint_r>
 800560c:	1039d31e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8005610:	d8c02017 	ldw	r3,128(sp)
 8005614:	da000404 	addi	r8,sp,16
 8005618:	003d9406 	br	8004c6c <__alt_data_end+0xfc004c6c>
 800561c:	010200f4 	movhi	r4,2051
 8005620:	21052b84 	addi	r4,r4,5294
 8005624:	d9002c15 	stw	r4,176(sp)
 8005628:	d9002c17 	ldw	r4,176(sp)
 800562c:	1c47883a 	add	r3,r3,r17
 8005630:	10800044 	addi	r2,r2,1
 8005634:	41000015 	stw	r4,0(r8)
 8005638:	44400115 	stw	r17,4(r8)
 800563c:	d8c02015 	stw	r3,128(sp)
 8005640:	d8801f15 	stw	r2,124(sp)
 8005644:	010001c4 	movi	r4,7
 8005648:	20bfd716 	blt	r4,r2,80055a8 <__alt_data_end+0xfc0055a8>
 800564c:	42000204 	addi	r8,r8,8
 8005650:	003fdd06 	br	80055c8 <__alt_data_end+0xfc0055c8>
 8005654:	d9002d17 	ldw	r4,180(sp)
 8005658:	d9801e04 	addi	r6,sp,120
 800565c:	b80b883a 	mov	r5,r23
 8005660:	800b12c0 	call	800b12c <__sprint_r>
 8005664:	1039bd1e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8005668:	d8802617 	ldw	r2,152(sp)
 800566c:	d8c02017 	ldw	r3,128(sp)
 8005670:	da000404 	addi	r8,sp,16
 8005674:	003e1006 	br	8004eb8 <__alt_data_end+0xfc004eb8>
 8005678:	00800044 	movi	r2,1
 800567c:	10803fcc 	andi	r2,r2,255
 8005680:	00c00044 	movi	r3,1
 8005684:	10fa0d26 	beq	r2,r3,8003ebc <__alt_data_end+0xfc003ebc>
 8005688:	00c00084 	movi	r3,2
 800568c:	10fbaf26 	beq	r2,r3,800454c <__alt_data_end+0xfc00454c>
 8005690:	003a6d06 	br	8004048 <__alt_data_end+0xfc004048>
 8005694:	010200f4 	movhi	r4,2051
 8005698:	21052f84 	addi	r4,r4,5310
 800569c:	d9003515 	stw	r4,212(sp)
 80056a0:	003b5406 	br	80043f4 <__alt_data_end+0xfc0043f4>
 80056a4:	d8802a17 	ldw	r2,168(sp)
 80056a8:	00c00184 	movi	r3,6
 80056ac:	1880012e 	bgeu	r3,r2,80056b4 <___vfprintf_internal_r+0x1d68>
 80056b0:	1805883a 	mov	r2,r3
 80056b4:	d8802b15 	stw	r2,172(sp)
 80056b8:	1000ef16 	blt	r2,zero,8005a78 <___vfprintf_internal_r+0x212c>
 80056bc:	040200f4 	movhi	r16,2051
 80056c0:	d8802915 	stw	r2,164(sp)
 80056c4:	dcc02e15 	stw	r19,184(sp)
 80056c8:	d8002a15 	stw	zero,168(sp)
 80056cc:	d8003215 	stw	zero,200(sp)
 80056d0:	84052904 	addi	r16,r16,5284
 80056d4:	0039883a 	mov	fp,zero
 80056d8:	003a8006 	br	80040dc <__alt_data_end+0xfc0040dc>
 80056dc:	0021883a 	mov	r16,zero
 80056e0:	003e0706 	br	8004f00 <__alt_data_end+0xfc004f00>
 80056e4:	d9002d17 	ldw	r4,180(sp)
 80056e8:	d9801e04 	addi	r6,sp,120
 80056ec:	b80b883a 	mov	r5,r23
 80056f0:	800b12c0 	call	800b12c <__sprint_r>
 80056f4:	1039991e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 80056f8:	d8802617 	ldw	r2,152(sp)
 80056fc:	d9403317 	ldw	r5,204(sp)
 8005700:	d8c02017 	ldw	r3,128(sp)
 8005704:	da000404 	addi	r8,sp,16
 8005708:	2885c83a 	sub	r2,r5,r2
 800570c:	003dfb06 	br	8004efc <__alt_data_end+0xfc004efc>
 8005710:	9080004c 	andi	r2,r18,1
 8005714:	103e8f1e 	bne	r2,zero,8005154 <__alt_data_end+0xfc005154>
 8005718:	d8802117 	ldw	r2,132(sp)
 800571c:	003e9e06 	br	8005198 <__alt_data_end+0xfc005198>
 8005720:	1025883a 	mov	r18,r2
 8005724:	0039883a 	mov	fp,zero
 8005728:	00800084 	movi	r2,2
 800572c:	003fd306 	br	800567c <__alt_data_end+0xfc00567c>
 8005730:	07000b44 	movi	fp,45
 8005734:	df002785 	stb	fp,158(sp)
 8005738:	003a1b06 	br	8003fa8 <__alt_data_end+0xfc003fa8>
 800573c:	00c00b44 	movi	r3,45
 8005740:	d8c02785 	stb	r3,158(sp)
 8005744:	d8802915 	stw	r2,164(sp)
 8005748:	dc802c17 	ldw	r18,176(sp)
 800574c:	d8002a15 	stw	zero,168(sp)
 8005750:	07000b44 	movi	fp,45
 8005754:	003a5e06 	br	80040d0 <__alt_data_end+0xfc0040d0>
 8005758:	040200f4 	movhi	r16,2051
 800575c:	84051e04 	addi	r16,r16,5240
 8005760:	003f4706 	br	8005480 <__alt_data_end+0xfc005480>
 8005764:	d9002e17 	ldw	r4,184(sp)
 8005768:	d9402f17 	ldw	r5,188(sp)
 800576c:	20800017 	ldw	r2,0(r4)
 8005770:	21000104 	addi	r4,r4,4
 8005774:	d9002e15 	stw	r4,184(sp)
 8005778:	11400015 	stw	r5,0(r2)
 800577c:	0038ab06 	br	8003a2c <__alt_data_end+0xfc003a2c>
 8005780:	dd802617 	ldw	r22,152(sp)
 8005784:	00bfff44 	movi	r2,-3
 8005788:	b0801c16 	blt	r22,r2,80057fc <___vfprintf_internal_r+0x1eb0>
 800578c:	d9402a17 	ldw	r5,168(sp)
 8005790:	2d801a16 	blt	r5,r22,80057fc <___vfprintf_internal_r+0x1eb0>
 8005794:	dd803215 	stw	r22,200(sp)
 8005798:	003e8906 	br	80051c0 <__alt_data_end+0xfc0051c0>
 800579c:	010200f4 	movhi	r4,2051
 80057a0:	21052b84 	addi	r4,r4,5294
 80057a4:	d9002c15 	stw	r4,176(sp)
 80057a8:	003c9106 	br	80049f0 <__alt_data_end+0xfc0049f0>
 80057ac:	e005883a 	mov	r2,fp
 80057b0:	003e7906 	br	8005198 <__alt_data_end+0xfc005198>
 80057b4:	d9002a17 	ldw	r4,168(sp)
 80057b8:	df002783 	ldbu	fp,158(sp)
 80057bc:	dcc02e15 	stw	r19,184(sp)
 80057c0:	d9002915 	stw	r4,164(sp)
 80057c4:	d9002b15 	stw	r4,172(sp)
 80057c8:	d8002a15 	stw	zero,168(sp)
 80057cc:	d8003215 	stw	zero,200(sp)
 80057d0:	003a3b06 	br	80040c0 <__alt_data_end+0xfc0040c0>
 80057d4:	9080004c 	andi	r2,r18,1
 80057d8:	0039883a 	mov	fp,zero
 80057dc:	10000426 	beq	r2,zero,80057f0 <___vfprintf_internal_r+0x1ea4>
 80057e0:	00800c04 	movi	r2,48
 80057e4:	dc001dc4 	addi	r16,sp,119
 80057e8:	d8801dc5 	stb	r2,119(sp)
 80057ec:	003b6406 	br	8004580 <__alt_data_end+0xfc004580>
 80057f0:	d8002b15 	stw	zero,172(sp)
 80057f4:	dc001e04 	addi	r16,sp,120
 80057f8:	003a2b06 	br	80040a8 <__alt_data_end+0xfc0040a8>
 80057fc:	8c7fff84 	addi	r17,r17,-2
 8005800:	b5bfffc4 	addi	r22,r22,-1
 8005804:	dd802615 	stw	r22,152(sp)
 8005808:	dc4022c5 	stb	r17,139(sp)
 800580c:	b000bf16 	blt	r22,zero,8005b0c <___vfprintf_internal_r+0x21c0>
 8005810:	00800ac4 	movi	r2,43
 8005814:	d8802305 	stb	r2,140(sp)
 8005818:	00800244 	movi	r2,9
 800581c:	15807016 	blt	r2,r22,80059e0 <___vfprintf_internal_r+0x2094>
 8005820:	00800c04 	movi	r2,48
 8005824:	b5800c04 	addi	r22,r22,48
 8005828:	d8802345 	stb	r2,141(sp)
 800582c:	dd802385 	stb	r22,142(sp)
 8005830:	d88023c4 	addi	r2,sp,143
 8005834:	df0022c4 	addi	fp,sp,139
 8005838:	d8c03317 	ldw	r3,204(sp)
 800583c:	1739c83a 	sub	fp,r2,fp
 8005840:	d9003317 	ldw	r4,204(sp)
 8005844:	e0c7883a 	add	r3,fp,r3
 8005848:	df003a15 	stw	fp,232(sp)
 800584c:	d8c02b15 	stw	r3,172(sp)
 8005850:	00800044 	movi	r2,1
 8005854:	1100b30e 	bge	r2,r4,8005b24 <___vfprintf_internal_r+0x21d8>
 8005858:	d8c02b17 	ldw	r3,172(sp)
 800585c:	18c00044 	addi	r3,r3,1
 8005860:	d8c02b15 	stw	r3,172(sp)
 8005864:	1805883a 	mov	r2,r3
 8005868:	1800ac16 	blt	r3,zero,8005b1c <___vfprintf_internal_r+0x21d0>
 800586c:	d8003215 	stw	zero,200(sp)
 8005870:	003e5d06 	br	80051e8 <__alt_data_end+0xfc0051e8>
 8005874:	d9002d17 	ldw	r4,180(sp)
 8005878:	d9801e04 	addi	r6,sp,120
 800587c:	b80b883a 	mov	r5,r23
 8005880:	800b12c0 	call	800b12c <__sprint_r>
 8005884:	1039351e 	bne	r2,zero,8003d5c <__alt_data_end+0xfc003d5c>
 8005888:	dc402617 	ldw	r17,152(sp)
 800588c:	d8c02017 	ldw	r3,128(sp)
 8005890:	d8801f17 	ldw	r2,124(sp)
 8005894:	da000404 	addi	r8,sp,16
 8005898:	003ed606 	br	80053f4 <__alt_data_end+0xfc0053f4>
 800589c:	182b883a 	mov	r21,r3
 80058a0:	d8002a15 	stw	zero,168(sp)
 80058a4:	00388c06 	br	8003ad8 <__alt_data_end+0xfc003ad8>
 80058a8:	d8802a17 	ldw	r2,168(sp)
 80058ac:	103e071e 	bne	r2,zero,80050cc <__alt_data_end+0xfc0050cc>
 80058b0:	dc002a15 	stw	r16,168(sp)
 80058b4:	003e0506 	br	80050cc <__alt_data_end+0xfc0050cc>
 80058b8:	d9002a17 	ldw	r4,168(sp)
 80058bc:	20c00044 	addi	r3,r4,1
 80058c0:	003e0f06 	br	8005100 <__alt_data_end+0xfc005100>
 80058c4:	01400184 	movi	r5,6
 80058c8:	d9402a15 	stw	r5,168(sp)
 80058cc:	003dff06 	br	80050cc <__alt_data_end+0xfc0050cc>
 80058d0:	d8802104 	addi	r2,sp,132
 80058d4:	d8800315 	stw	r2,12(sp)
 80058d8:	d8802504 	addi	r2,sp,148
 80058dc:	d8800215 	stw	r2,8(sp)
 80058e0:	d8802604 	addi	r2,sp,152
 80058e4:	d8800115 	stw	r2,4(sp)
 80058e8:	d8802a17 	ldw	r2,168(sp)
 80058ec:	d9403617 	ldw	r5,216(sp)
 80058f0:	d9002d17 	ldw	r4,180(sp)
 80058f4:	d8800015 	stw	r2,0(sp)
 80058f8:	01c000c4 	movi	r7,3
 80058fc:	980d883a 	mov	r6,r19
 8005900:	da003d15 	stw	r8,244(sp)
 8005904:	800607c0 	call	800607c <_dtoa_r>
 8005908:	d8c02a17 	ldw	r3,168(sp)
 800590c:	da003d17 	ldw	r8,244(sp)
 8005910:	1021883a 	mov	r16,r2
 8005914:	10f9883a 	add	fp,r2,r3
 8005918:	81000007 	ldb	r4,0(r16)
 800591c:	00800c04 	movi	r2,48
 8005920:	20805e26 	beq	r4,r2,8005a9c <___vfprintf_internal_r+0x2150>
 8005924:	d8c02617 	ldw	r3,152(sp)
 8005928:	e0f9883a 	add	fp,fp,r3
 800592c:	003e0a06 	br	8005158 <__alt_data_end+0xfc005158>
 8005930:	00c00b44 	movi	r3,45
 8005934:	24e0003c 	xorhi	r19,r4,32768
 8005938:	d8c02905 	stb	r3,164(sp)
 800593c:	003de906 	br	80050e4 <__alt_data_end+0xfc0050e4>
 8005940:	d8c03217 	ldw	r3,200(sp)
 8005944:	00c07a0e 	bge	zero,r3,8005b30 <___vfprintf_internal_r+0x21e4>
 8005948:	00800044 	movi	r2,1
 800594c:	d9003317 	ldw	r4,204(sp)
 8005950:	1105883a 	add	r2,r2,r4
 8005954:	d8802b15 	stw	r2,172(sp)
 8005958:	10004e16 	blt	r2,zero,8005a94 <___vfprintf_internal_r+0x2148>
 800595c:	044019c4 	movi	r17,103
 8005960:	003e2106 	br	80051e8 <__alt_data_end+0xfc0051e8>
 8005964:	d9002a17 	ldw	r4,168(sp)
 8005968:	d8802104 	addi	r2,sp,132
 800596c:	d8800315 	stw	r2,12(sp)
 8005970:	d9000015 	stw	r4,0(sp)
 8005974:	d8802504 	addi	r2,sp,148
 8005978:	d9403617 	ldw	r5,216(sp)
 800597c:	d9002d17 	ldw	r4,180(sp)
 8005980:	d8800215 	stw	r2,8(sp)
 8005984:	d8802604 	addi	r2,sp,152
 8005988:	d8800115 	stw	r2,4(sp)
 800598c:	01c000c4 	movi	r7,3
 8005990:	980d883a 	mov	r6,r19
 8005994:	da003d15 	stw	r8,244(sp)
 8005998:	800607c0 	call	800607c <_dtoa_r>
 800599c:	d8c02a17 	ldw	r3,168(sp)
 80059a0:	da003d17 	ldw	r8,244(sp)
 80059a4:	1021883a 	mov	r16,r2
 80059a8:	00801184 	movi	r2,70
 80059ac:	80f9883a 	add	fp,r16,r3
 80059b0:	88bfd926 	beq	r17,r2,8005918 <__alt_data_end+0xfc005918>
 80059b4:	003de806 	br	8005158 <__alt_data_end+0xfc005158>
 80059b8:	d9002a17 	ldw	r4,168(sp)
 80059bc:	00c04d0e 	bge	zero,r3,8005af4 <___vfprintf_internal_r+0x21a8>
 80059c0:	2000441e 	bne	r4,zero,8005ad4 <___vfprintf_internal_r+0x2188>
 80059c4:	9480004c 	andi	r18,r18,1
 80059c8:	9000421e 	bne	r18,zero,8005ad4 <___vfprintf_internal_r+0x2188>
 80059cc:	1805883a 	mov	r2,r3
 80059d0:	18006f16 	blt	r3,zero,8005b90 <___vfprintf_internal_r+0x2244>
 80059d4:	d8c03217 	ldw	r3,200(sp)
 80059d8:	d8c02b15 	stw	r3,172(sp)
 80059dc:	003e0206 	br	80051e8 <__alt_data_end+0xfc0051e8>
 80059e0:	df0022c4 	addi	fp,sp,139
 80059e4:	dc002a15 	stw	r16,168(sp)
 80059e8:	4027883a 	mov	r19,r8
 80059ec:	e021883a 	mov	r16,fp
 80059f0:	b009883a 	mov	r4,r22
 80059f4:	01400284 	movi	r5,10
 80059f8:	800361c0 	call	800361c <__modsi3>
 80059fc:	10800c04 	addi	r2,r2,48
 8005a00:	843fffc4 	addi	r16,r16,-1
 8005a04:	b009883a 	mov	r4,r22
 8005a08:	01400284 	movi	r5,10
 8005a0c:	80800005 	stb	r2,0(r16)
 8005a10:	80035980 	call	8003598 <__divsi3>
 8005a14:	102d883a 	mov	r22,r2
 8005a18:	00800244 	movi	r2,9
 8005a1c:	15bff416 	blt	r2,r22,80059f0 <__alt_data_end+0xfc0059f0>
 8005a20:	9811883a 	mov	r8,r19
 8005a24:	b0800c04 	addi	r2,r22,48
 8005a28:	8027883a 	mov	r19,r16
 8005a2c:	997fffc4 	addi	r5,r19,-1
 8005a30:	98bfffc5 	stb	r2,-1(r19)
 8005a34:	dc002a17 	ldw	r16,168(sp)
 8005a38:	2f006d2e 	bgeu	r5,fp,8005bf0 <___vfprintf_internal_r+0x22a4>
 8005a3c:	d9c02384 	addi	r7,sp,142
 8005a40:	3ccfc83a 	sub	r7,r7,r19
 8005a44:	d9002344 	addi	r4,sp,141
 8005a48:	e1cf883a 	add	r7,fp,r7
 8005a4c:	00000106 	br	8005a54 <___vfprintf_internal_r+0x2108>
 8005a50:	28800003 	ldbu	r2,0(r5)
 8005a54:	20800005 	stb	r2,0(r4)
 8005a58:	21000044 	addi	r4,r4,1
 8005a5c:	29400044 	addi	r5,r5,1
 8005a60:	393ffb1e 	bne	r7,r4,8005a50 <__alt_data_end+0xfc005a50>
 8005a64:	d8802304 	addi	r2,sp,140
 8005a68:	14c5c83a 	sub	r2,r2,r19
 8005a6c:	d8c02344 	addi	r3,sp,141
 8005a70:	1885883a 	add	r2,r3,r2
 8005a74:	003f7006 	br	8005838 <__alt_data_end+0xfc005838>
 8005a78:	0005883a 	mov	r2,zero
 8005a7c:	003f0f06 	br	80056bc <__alt_data_end+0xfc0056bc>
 8005a80:	d8c03217 	ldw	r3,200(sp)
 8005a84:	18c00044 	addi	r3,r3,1
 8005a88:	d8c02b15 	stw	r3,172(sp)
 8005a8c:	1805883a 	mov	r2,r3
 8005a90:	183fb20e 	bge	r3,zero,800595c <__alt_data_end+0xfc00595c>
 8005a94:	0005883a 	mov	r2,zero
 8005a98:	003fb006 	br	800595c <__alt_data_end+0xfc00595c>
 8005a9c:	d9003617 	ldw	r4,216(sp)
 8005aa0:	000d883a 	mov	r6,zero
 8005aa4:	000f883a 	mov	r7,zero
 8005aa8:	980b883a 	mov	r5,r19
 8005aac:	d8c03c15 	stw	r3,240(sp)
 8005ab0:	da003d15 	stw	r8,244(sp)
 8005ab4:	800eeb00 	call	800eeb0 <__eqdf2>
 8005ab8:	d8c03c17 	ldw	r3,240(sp)
 8005abc:	da003d17 	ldw	r8,244(sp)
 8005ac0:	103f9826 	beq	r2,zero,8005924 <__alt_data_end+0xfc005924>
 8005ac4:	00800044 	movi	r2,1
 8005ac8:	10c7c83a 	sub	r3,r2,r3
 8005acc:	d8c02615 	stw	r3,152(sp)
 8005ad0:	003f9506 	br	8005928 <__alt_data_end+0xfc005928>
 8005ad4:	d9002a17 	ldw	r4,168(sp)
 8005ad8:	d8c03217 	ldw	r3,200(sp)
 8005adc:	20800044 	addi	r2,r4,1
 8005ae0:	1885883a 	add	r2,r3,r2
 8005ae4:	d8802b15 	stw	r2,172(sp)
 8005ae8:	103dbf0e 	bge	r2,zero,80051e8 <__alt_data_end+0xfc0051e8>
 8005aec:	0005883a 	mov	r2,zero
 8005af0:	003dbd06 	br	80051e8 <__alt_data_end+0xfc0051e8>
 8005af4:	2000201e 	bne	r4,zero,8005b78 <___vfprintf_internal_r+0x222c>
 8005af8:	9480004c 	andi	r18,r18,1
 8005afc:	90001e1e 	bne	r18,zero,8005b78 <___vfprintf_internal_r+0x222c>
 8005b00:	00800044 	movi	r2,1
 8005b04:	d8802b15 	stw	r2,172(sp)
 8005b08:	003db706 	br	80051e8 <__alt_data_end+0xfc0051e8>
 8005b0c:	00800b44 	movi	r2,45
 8005b10:	05adc83a 	sub	r22,zero,r22
 8005b14:	d8802305 	stb	r2,140(sp)
 8005b18:	003f3f06 	br	8005818 <__alt_data_end+0xfc005818>
 8005b1c:	0005883a 	mov	r2,zero
 8005b20:	003f5206 	br	800586c <__alt_data_end+0xfc00586c>
 8005b24:	90a4703a 	and	r18,r18,r2
 8005b28:	903f4e26 	beq	r18,zero,8005864 <__alt_data_end+0xfc005864>
 8005b2c:	003f4a06 	br	8005858 <__alt_data_end+0xfc005858>
 8005b30:	00800084 	movi	r2,2
 8005b34:	10c5c83a 	sub	r2,r2,r3
 8005b38:	003f8406 	br	800594c <__alt_data_end+0xfc00594c>
 8005b3c:	d9402e17 	ldw	r5,184(sp)
 8005b40:	d9002e17 	ldw	r4,184(sp)
 8005b44:	ac400043 	ldbu	r17,1(r21)
 8005b48:	29400017 	ldw	r5,0(r5)
 8005b4c:	20800104 	addi	r2,r4,4
 8005b50:	d8802e15 	stw	r2,184(sp)
 8005b54:	d9402a15 	stw	r5,168(sp)
 8005b58:	182b883a 	mov	r21,r3
 8005b5c:	283e7b0e 	bge	r5,zero,800554c <__alt_data_end+0xfc00554c>
 8005b60:	8c403fcc 	andi	r17,r17,255
 8005b64:	017fffc4 	movi	r5,-1
 8005b68:	8c40201c 	xori	r17,r17,128
 8005b6c:	d9402a15 	stw	r5,168(sp)
 8005b70:	8c7fe004 	addi	r17,r17,-128
 8005b74:	0037d706 	br	8003ad4 <__alt_data_end+0xfc003ad4>
 8005b78:	d8c02a17 	ldw	r3,168(sp)
 8005b7c:	18c00084 	addi	r3,r3,2
 8005b80:	d8c02b15 	stw	r3,172(sp)
 8005b84:	1805883a 	mov	r2,r3
 8005b88:	183d970e 	bge	r3,zero,80051e8 <__alt_data_end+0xfc0051e8>
 8005b8c:	003fd706 	br	8005aec <__alt_data_end+0xfc005aec>
 8005b90:	0005883a 	mov	r2,zero
 8005b94:	003f8f06 	br	80059d4 <__alt_data_end+0xfc0059d4>
 8005b98:	9080004c 	andi	r2,r18,1
 8005b9c:	103f821e 	bne	r2,zero,80059a8 <__alt_data_end+0xfc0059a8>
 8005ba0:	d8802117 	ldw	r2,132(sp)
 8005ba4:	1405c83a 	sub	r2,r2,r16
 8005ba8:	d8803315 	stw	r2,204(sp)
 8005bac:	b47ef426 	beq	r22,r17,8005780 <__alt_data_end+0xfc005780>
 8005bb0:	dd802617 	ldw	r22,152(sp)
 8005bb4:	003f1206 	br	8005800 <__alt_data_end+0xfc005800>
 8005bb8:	d8c02b03 	ldbu	r3,172(sp)
 8005bbc:	d8c02785 	stb	r3,158(sp)
 8005bc0:	0038df06 	br	8003f40 <__alt_data_end+0xfc003f40>
 8005bc4:	d8c02b03 	ldbu	r3,172(sp)
 8005bc8:	d8c02785 	stb	r3,158(sp)
 8005bcc:	0038aa06 	br	8003e78 <__alt_data_end+0xfc003e78>
 8005bd0:	d8c02b03 	ldbu	r3,172(sp)
 8005bd4:	d8c02785 	stb	r3,158(sp)
 8005bd8:	003a4306 	br	80044e8 <__alt_data_end+0xfc0044e8>
 8005bdc:	d8c02b03 	ldbu	r3,172(sp)
 8005be0:	d8c02785 	stb	r3,158(sp)
 8005be4:	003af506 	br	80047bc <__alt_data_end+0xfc0047bc>
 8005be8:	0005883a 	mov	r2,zero
 8005bec:	003d7b06 	br	80051dc <__alt_data_end+0xfc0051dc>
 8005bf0:	d8802344 	addi	r2,sp,141
 8005bf4:	003f1006 	br	8005838 <__alt_data_end+0xfc005838>
 8005bf8:	d8c02b03 	ldbu	r3,172(sp)
 8005bfc:	d8c02785 	stb	r3,158(sp)
 8005c00:	0038fd06 	br	8003ff8 <__alt_data_end+0xfc003ff8>
 8005c04:	d8c02b03 	ldbu	r3,172(sp)
 8005c08:	d8c02785 	stb	r3,158(sp)
 8005c0c:	003a9706 	br	800466c <__alt_data_end+0xfc00466c>
 8005c10:	d8c02b03 	ldbu	r3,172(sp)
 8005c14:	d8c02785 	stb	r3,158(sp)
 8005c18:	003a1806 	br	800447c <__alt_data_end+0xfc00447c>
 8005c1c:	d8c02b03 	ldbu	r3,172(sp)
 8005c20:	d8c02785 	stb	r3,158(sp)
 8005c24:	003abe06 	br	8004720 <__alt_data_end+0xfc004720>

08005c28 <__vfprintf_internal>:
 8005c28:	008200f4 	movhi	r2,2051
 8005c2c:	108d0f04 	addi	r2,r2,13372
 8005c30:	300f883a 	mov	r7,r6
 8005c34:	280d883a 	mov	r6,r5
 8005c38:	200b883a 	mov	r5,r4
 8005c3c:	11000017 	ldw	r4,0(r2)
 8005c40:	800394c1 	jmpi	800394c <___vfprintf_internal_r>

08005c44 <__sbprintf>:
 8005c44:	2880030b 	ldhu	r2,12(r5)
 8005c48:	2ac01917 	ldw	r11,100(r5)
 8005c4c:	2a80038b 	ldhu	r10,14(r5)
 8005c50:	2a400717 	ldw	r9,28(r5)
 8005c54:	2a000917 	ldw	r8,36(r5)
 8005c58:	defee204 	addi	sp,sp,-1144
 8005c5c:	00c10004 	movi	r3,1024
 8005c60:	dc011a15 	stw	r16,1128(sp)
 8005c64:	10bfff4c 	andi	r2,r2,65533
 8005c68:	2821883a 	mov	r16,r5
 8005c6c:	d8cb883a 	add	r5,sp,r3
 8005c70:	dc811c15 	stw	r18,1136(sp)
 8005c74:	dc411b15 	stw	r17,1132(sp)
 8005c78:	dfc11d15 	stw	ra,1140(sp)
 8005c7c:	2025883a 	mov	r18,r4
 8005c80:	d881030d 	sth	r2,1036(sp)
 8005c84:	dac11915 	stw	r11,1124(sp)
 8005c88:	da81038d 	sth	r10,1038(sp)
 8005c8c:	da410715 	stw	r9,1052(sp)
 8005c90:	da010915 	stw	r8,1060(sp)
 8005c94:	dec10015 	stw	sp,1024(sp)
 8005c98:	dec10415 	stw	sp,1040(sp)
 8005c9c:	d8c10215 	stw	r3,1032(sp)
 8005ca0:	d8c10515 	stw	r3,1044(sp)
 8005ca4:	d8010615 	stw	zero,1048(sp)
 8005ca8:	800394c0 	call	800394c <___vfprintf_internal_r>
 8005cac:	1023883a 	mov	r17,r2
 8005cb0:	10000416 	blt	r2,zero,8005cc4 <__sbprintf+0x80>
 8005cb4:	d9410004 	addi	r5,sp,1024
 8005cb8:	9009883a 	mov	r4,r18
 8005cbc:	80079200 	call	8007920 <_fflush_r>
 8005cc0:	10000d1e 	bne	r2,zero,8005cf8 <__sbprintf+0xb4>
 8005cc4:	d881030b 	ldhu	r2,1036(sp)
 8005cc8:	1080100c 	andi	r2,r2,64
 8005ccc:	10000326 	beq	r2,zero,8005cdc <__sbprintf+0x98>
 8005cd0:	8080030b 	ldhu	r2,12(r16)
 8005cd4:	10801014 	ori	r2,r2,64
 8005cd8:	8080030d 	sth	r2,12(r16)
 8005cdc:	8805883a 	mov	r2,r17
 8005ce0:	dfc11d17 	ldw	ra,1140(sp)
 8005ce4:	dc811c17 	ldw	r18,1136(sp)
 8005ce8:	dc411b17 	ldw	r17,1132(sp)
 8005cec:	dc011a17 	ldw	r16,1128(sp)
 8005cf0:	dec11e04 	addi	sp,sp,1144
 8005cf4:	f800283a 	ret
 8005cf8:	047fffc4 	movi	r17,-1
 8005cfc:	003ff106 	br	8005cc4 <__alt_data_end+0xfc005cc4>

08005d00 <__swsetup_r>:
 8005d00:	008200f4 	movhi	r2,2051
 8005d04:	defffd04 	addi	sp,sp,-12
 8005d08:	108d0f04 	addi	r2,r2,13372
 8005d0c:	dc400115 	stw	r17,4(sp)
 8005d10:	2023883a 	mov	r17,r4
 8005d14:	11000017 	ldw	r4,0(r2)
 8005d18:	dc000015 	stw	r16,0(sp)
 8005d1c:	dfc00215 	stw	ra,8(sp)
 8005d20:	2821883a 	mov	r16,r5
 8005d24:	20000226 	beq	r4,zero,8005d30 <__swsetup_r+0x30>
 8005d28:	20800e17 	ldw	r2,56(r4)
 8005d2c:	10003126 	beq	r2,zero,8005df4 <__swsetup_r+0xf4>
 8005d30:	8080030b 	ldhu	r2,12(r16)
 8005d34:	10c0020c 	andi	r3,r2,8
 8005d38:	1009883a 	mov	r4,r2
 8005d3c:	18000f26 	beq	r3,zero,8005d7c <__swsetup_r+0x7c>
 8005d40:	80c00417 	ldw	r3,16(r16)
 8005d44:	18001526 	beq	r3,zero,8005d9c <__swsetup_r+0x9c>
 8005d48:	1100004c 	andi	r4,r2,1
 8005d4c:	20001c1e 	bne	r4,zero,8005dc0 <__swsetup_r+0xc0>
 8005d50:	1080008c 	andi	r2,r2,2
 8005d54:	1000291e 	bne	r2,zero,8005dfc <__swsetup_r+0xfc>
 8005d58:	80800517 	ldw	r2,20(r16)
 8005d5c:	80800215 	stw	r2,8(r16)
 8005d60:	18001c26 	beq	r3,zero,8005dd4 <__swsetup_r+0xd4>
 8005d64:	0005883a 	mov	r2,zero
 8005d68:	dfc00217 	ldw	ra,8(sp)
 8005d6c:	dc400117 	ldw	r17,4(sp)
 8005d70:	dc000017 	ldw	r16,0(sp)
 8005d74:	dec00304 	addi	sp,sp,12
 8005d78:	f800283a 	ret
 8005d7c:	2080040c 	andi	r2,r4,16
 8005d80:	10002e26 	beq	r2,zero,8005e3c <__swsetup_r+0x13c>
 8005d84:	2080010c 	andi	r2,r4,4
 8005d88:	10001e1e 	bne	r2,zero,8005e04 <__swsetup_r+0x104>
 8005d8c:	80c00417 	ldw	r3,16(r16)
 8005d90:	20800214 	ori	r2,r4,8
 8005d94:	8080030d 	sth	r2,12(r16)
 8005d98:	183feb1e 	bne	r3,zero,8005d48 <__alt_data_end+0xfc005d48>
 8005d9c:	1100a00c 	andi	r4,r2,640
 8005da0:	01408004 	movi	r5,512
 8005da4:	217fe826 	beq	r4,r5,8005d48 <__alt_data_end+0xfc005d48>
 8005da8:	800b883a 	mov	r5,r16
 8005dac:	8809883a 	mov	r4,r17
 8005db0:	80088bc0 	call	80088bc <__smakebuf_r>
 8005db4:	8080030b 	ldhu	r2,12(r16)
 8005db8:	80c00417 	ldw	r3,16(r16)
 8005dbc:	003fe206 	br	8005d48 <__alt_data_end+0xfc005d48>
 8005dc0:	80800517 	ldw	r2,20(r16)
 8005dc4:	80000215 	stw	zero,8(r16)
 8005dc8:	0085c83a 	sub	r2,zero,r2
 8005dcc:	80800615 	stw	r2,24(r16)
 8005dd0:	183fe41e 	bne	r3,zero,8005d64 <__alt_data_end+0xfc005d64>
 8005dd4:	80c0030b 	ldhu	r3,12(r16)
 8005dd8:	0005883a 	mov	r2,zero
 8005ddc:	1900200c 	andi	r4,r3,128
 8005de0:	203fe126 	beq	r4,zero,8005d68 <__alt_data_end+0xfc005d68>
 8005de4:	18c01014 	ori	r3,r3,64
 8005de8:	80c0030d 	sth	r3,12(r16)
 8005dec:	00bfffc4 	movi	r2,-1
 8005df0:	003fdd06 	br	8005d68 <__alt_data_end+0xfc005d68>
 8005df4:	8007d0c0 	call	8007d0c <__sinit>
 8005df8:	003fcd06 	br	8005d30 <__alt_data_end+0xfc005d30>
 8005dfc:	0005883a 	mov	r2,zero
 8005e00:	003fd606 	br	8005d5c <__alt_data_end+0xfc005d5c>
 8005e04:	81400c17 	ldw	r5,48(r16)
 8005e08:	28000626 	beq	r5,zero,8005e24 <__swsetup_r+0x124>
 8005e0c:	80801004 	addi	r2,r16,64
 8005e10:	28800326 	beq	r5,r2,8005e20 <__swsetup_r+0x120>
 8005e14:	8809883a 	mov	r4,r17
 8005e18:	8007e800 	call	8007e80 <_free_r>
 8005e1c:	8100030b 	ldhu	r4,12(r16)
 8005e20:	80000c15 	stw	zero,48(r16)
 8005e24:	80c00417 	ldw	r3,16(r16)
 8005e28:	00bff6c4 	movi	r2,-37
 8005e2c:	1108703a 	and	r4,r2,r4
 8005e30:	80000115 	stw	zero,4(r16)
 8005e34:	80c00015 	stw	r3,0(r16)
 8005e38:	003fd506 	br	8005d90 <__alt_data_end+0xfc005d90>
 8005e3c:	00800244 	movi	r2,9
 8005e40:	88800015 	stw	r2,0(r17)
 8005e44:	20801014 	ori	r2,r4,64
 8005e48:	8080030d 	sth	r2,12(r16)
 8005e4c:	00bfffc4 	movi	r2,-1
 8005e50:	003fc506 	br	8005d68 <__alt_data_end+0xfc005d68>

08005e54 <quorem>:
 8005e54:	defff204 	addi	sp,sp,-56
 8005e58:	ddc00b15 	stw	r23,44(sp)
 8005e5c:	20800417 	ldw	r2,16(r4)
 8005e60:	2dc00417 	ldw	r23,16(r5)
 8005e64:	dfc00d15 	stw	ra,52(sp)
 8005e68:	df000c15 	stw	fp,48(sp)
 8005e6c:	dd800a15 	stw	r22,40(sp)
 8005e70:	dd400915 	stw	r21,36(sp)
 8005e74:	dd000815 	stw	r20,32(sp)
 8005e78:	dcc00715 	stw	r19,28(sp)
 8005e7c:	dc800615 	stw	r18,24(sp)
 8005e80:	dc400515 	stw	r17,20(sp)
 8005e84:	dc000415 	stw	r16,16(sp)
 8005e88:	15c07a16 	blt	r2,r23,8006074 <quorem+0x220>
 8005e8c:	bdffffc4 	addi	r23,r23,-1
 8005e90:	bde9883a 	add	r20,r23,r23
 8005e94:	28c00504 	addi	r3,r5,20
 8005e98:	a529883a 	add	r20,r20,r20
 8005e9c:	1d39883a 	add	fp,r3,r20
 8005ea0:	24c00504 	addi	r19,r4,20
 8005ea4:	d9400215 	stw	r5,8(sp)
 8005ea8:	9d29883a 	add	r20,r19,r20
 8005eac:	e1400017 	ldw	r5,0(fp)
 8005eb0:	d9000015 	stw	r4,0(sp)
 8005eb4:	a1000017 	ldw	r4,0(r20)
 8005eb8:	29400044 	addi	r5,r5,1
 8005ebc:	d8c00115 	stw	r3,4(sp)
 8005ec0:	dd000315 	stw	r20,12(sp)
 8005ec4:	80036900 	call	8003690 <__udivsi3>
 8005ec8:	1025883a 	mov	r18,r2
 8005ecc:	10003026 	beq	r2,zero,8005f90 <quorem+0x13c>
 8005ed0:	dc400117 	ldw	r17,4(sp)
 8005ed4:	9829883a 	mov	r20,r19
 8005ed8:	002d883a 	mov	r22,zero
 8005edc:	0021883a 	mov	r16,zero
 8005ee0:	8d400017 	ldw	r21,0(r17)
 8005ee4:	900b883a 	mov	r5,r18
 8005ee8:	8c400104 	addi	r17,r17,4
 8005eec:	a93fffcc 	andi	r4,r21,65535
 8005ef0:	800374c0 	call	800374c <__mulsi3>
 8005ef4:	a808d43a 	srli	r4,r21,16
 8005ef8:	900b883a 	mov	r5,r18
 8005efc:	15ad883a 	add	r22,r2,r22
 8005f00:	800374c0 	call	800374c <__mulsi3>
 8005f04:	a1000017 	ldw	r4,0(r20)
 8005f08:	b00cd43a 	srli	r6,r22,16
 8005f0c:	b0ffffcc 	andi	r3,r22,65535
 8005f10:	217fffcc 	andi	r5,r4,65535
 8005f14:	2c21883a 	add	r16,r5,r16
 8005f18:	80c7c83a 	sub	r3,r16,r3
 8005f1c:	2008d43a 	srli	r4,r4,16
 8005f20:	1185883a 	add	r2,r2,r6
 8005f24:	1821d43a 	srai	r16,r3,16
 8005f28:	117fffcc 	andi	r5,r2,65535
 8005f2c:	2149c83a 	sub	r4,r4,r5
 8005f30:	2421883a 	add	r16,r4,r16
 8005f34:	8008943a 	slli	r4,r16,16
 8005f38:	18ffffcc 	andi	r3,r3,65535
 8005f3c:	102cd43a 	srli	r22,r2,16
 8005f40:	20c8b03a 	or	r4,r4,r3
 8005f44:	a1000015 	stw	r4,0(r20)
 8005f48:	8021d43a 	srai	r16,r16,16
 8005f4c:	a5000104 	addi	r20,r20,4
 8005f50:	e47fe32e 	bgeu	fp,r17,8005ee0 <__alt_data_end+0xfc005ee0>
 8005f54:	d8c00317 	ldw	r3,12(sp)
 8005f58:	18800017 	ldw	r2,0(r3)
 8005f5c:	10000c1e 	bne	r2,zero,8005f90 <quorem+0x13c>
 8005f60:	18bfff04 	addi	r2,r3,-4
 8005f64:	9880082e 	bgeu	r19,r2,8005f88 <quorem+0x134>
 8005f68:	18ffff17 	ldw	r3,-4(r3)
 8005f6c:	18000326 	beq	r3,zero,8005f7c <quorem+0x128>
 8005f70:	00000506 	br	8005f88 <quorem+0x134>
 8005f74:	10c00017 	ldw	r3,0(r2)
 8005f78:	1800031e 	bne	r3,zero,8005f88 <quorem+0x134>
 8005f7c:	10bfff04 	addi	r2,r2,-4
 8005f80:	bdffffc4 	addi	r23,r23,-1
 8005f84:	98bffb36 	bltu	r19,r2,8005f74 <__alt_data_end+0xfc005f74>
 8005f88:	d8c00017 	ldw	r3,0(sp)
 8005f8c:	1dc00415 	stw	r23,16(r3)
 8005f90:	d9400217 	ldw	r5,8(sp)
 8005f94:	d9000017 	ldw	r4,0(sp)
 8005f98:	800a0b80 	call	800a0b8 <__mcmp>
 8005f9c:	10002816 	blt	r2,zero,8006040 <quorem+0x1ec>
 8005fa0:	dc400117 	ldw	r17,4(sp)
 8005fa4:	94800044 	addi	r18,r18,1
 8005fa8:	980d883a 	mov	r6,r19
 8005fac:	0007883a 	mov	r3,zero
 8005fb0:	31000017 	ldw	r4,0(r6)
 8005fb4:	89400017 	ldw	r5,0(r17)
 8005fb8:	31800104 	addi	r6,r6,4
 8005fbc:	20bfffcc 	andi	r2,r4,65535
 8005fc0:	10c7883a 	add	r3,r2,r3
 8005fc4:	28bfffcc 	andi	r2,r5,65535
 8005fc8:	1885c83a 	sub	r2,r3,r2
 8005fcc:	280ad43a 	srli	r5,r5,16
 8005fd0:	2008d43a 	srli	r4,r4,16
 8005fd4:	1007d43a 	srai	r3,r2,16
 8005fd8:	10bfffcc 	andi	r2,r2,65535
 8005fdc:	2149c83a 	sub	r4,r4,r5
 8005fe0:	20c9883a 	add	r4,r4,r3
 8005fe4:	200a943a 	slli	r5,r4,16
 8005fe8:	8c400104 	addi	r17,r17,4
 8005fec:	2007d43a 	srai	r3,r4,16
 8005ff0:	2884b03a 	or	r2,r5,r2
 8005ff4:	30bfff15 	stw	r2,-4(r6)
 8005ff8:	e47fed2e 	bgeu	fp,r17,8005fb0 <__alt_data_end+0xfc005fb0>
 8005ffc:	bdc5883a 	add	r2,r23,r23
 8006000:	1085883a 	add	r2,r2,r2
 8006004:	9887883a 	add	r3,r19,r2
 8006008:	18800017 	ldw	r2,0(r3)
 800600c:	10000c1e 	bne	r2,zero,8006040 <quorem+0x1ec>
 8006010:	18bfff04 	addi	r2,r3,-4
 8006014:	9880082e 	bgeu	r19,r2,8006038 <quorem+0x1e4>
 8006018:	18ffff17 	ldw	r3,-4(r3)
 800601c:	18000326 	beq	r3,zero,800602c <quorem+0x1d8>
 8006020:	00000506 	br	8006038 <quorem+0x1e4>
 8006024:	10c00017 	ldw	r3,0(r2)
 8006028:	1800031e 	bne	r3,zero,8006038 <quorem+0x1e4>
 800602c:	10bfff04 	addi	r2,r2,-4
 8006030:	bdffffc4 	addi	r23,r23,-1
 8006034:	98bffb36 	bltu	r19,r2,8006024 <__alt_data_end+0xfc006024>
 8006038:	d8c00017 	ldw	r3,0(sp)
 800603c:	1dc00415 	stw	r23,16(r3)
 8006040:	9005883a 	mov	r2,r18
 8006044:	dfc00d17 	ldw	ra,52(sp)
 8006048:	df000c17 	ldw	fp,48(sp)
 800604c:	ddc00b17 	ldw	r23,44(sp)
 8006050:	dd800a17 	ldw	r22,40(sp)
 8006054:	dd400917 	ldw	r21,36(sp)
 8006058:	dd000817 	ldw	r20,32(sp)
 800605c:	dcc00717 	ldw	r19,28(sp)
 8006060:	dc800617 	ldw	r18,24(sp)
 8006064:	dc400517 	ldw	r17,20(sp)
 8006068:	dc000417 	ldw	r16,16(sp)
 800606c:	dec00e04 	addi	sp,sp,56
 8006070:	f800283a 	ret
 8006074:	0005883a 	mov	r2,zero
 8006078:	003ff206 	br	8006044 <__alt_data_end+0xfc006044>

0800607c <_dtoa_r>:
 800607c:	20801017 	ldw	r2,64(r4)
 8006080:	deffde04 	addi	sp,sp,-136
 8006084:	df002015 	stw	fp,128(sp)
 8006088:	dcc01b15 	stw	r19,108(sp)
 800608c:	dc801a15 	stw	r18,104(sp)
 8006090:	dc401915 	stw	r17,100(sp)
 8006094:	dc001815 	stw	r16,96(sp)
 8006098:	dfc02115 	stw	ra,132(sp)
 800609c:	ddc01f15 	stw	r23,124(sp)
 80060a0:	dd801e15 	stw	r22,120(sp)
 80060a4:	dd401d15 	stw	r21,116(sp)
 80060a8:	dd001c15 	stw	r20,112(sp)
 80060ac:	d9c00315 	stw	r7,12(sp)
 80060b0:	2039883a 	mov	fp,r4
 80060b4:	3023883a 	mov	r17,r6
 80060b8:	2825883a 	mov	r18,r5
 80060bc:	dc002417 	ldw	r16,144(sp)
 80060c0:	3027883a 	mov	r19,r6
 80060c4:	10000826 	beq	r2,zero,80060e8 <_dtoa_r+0x6c>
 80060c8:	21801117 	ldw	r6,68(r4)
 80060cc:	00c00044 	movi	r3,1
 80060d0:	100b883a 	mov	r5,r2
 80060d4:	1986983a 	sll	r3,r3,r6
 80060d8:	11800115 	stw	r6,4(r2)
 80060dc:	10c00215 	stw	r3,8(r2)
 80060e0:	80097dc0 	call	80097dc <_Bfree>
 80060e4:	e0001015 	stw	zero,64(fp)
 80060e8:	88002e16 	blt	r17,zero,80061a4 <_dtoa_r+0x128>
 80060ec:	80000015 	stw	zero,0(r16)
 80060f0:	889ffc2c 	andhi	r2,r17,32752
 80060f4:	00dffc34 	movhi	r3,32752
 80060f8:	10c01c26 	beq	r2,r3,800616c <_dtoa_r+0xf0>
 80060fc:	000d883a 	mov	r6,zero
 8006100:	000f883a 	mov	r7,zero
 8006104:	9009883a 	mov	r4,r18
 8006108:	980b883a 	mov	r5,r19
 800610c:	800eeb00 	call	800eeb0 <__eqdf2>
 8006110:	10002b1e 	bne	r2,zero,80061c0 <_dtoa_r+0x144>
 8006114:	d9c02317 	ldw	r7,140(sp)
 8006118:	00800044 	movi	r2,1
 800611c:	38800015 	stw	r2,0(r7)
 8006120:	d8802517 	ldw	r2,148(sp)
 8006124:	10019e26 	beq	r2,zero,80067a0 <_dtoa_r+0x724>
 8006128:	d8c02517 	ldw	r3,148(sp)
 800612c:	008200f4 	movhi	r2,2051
 8006130:	10852b44 	addi	r2,r2,5293
 8006134:	18800015 	stw	r2,0(r3)
 8006138:	10bfffc4 	addi	r2,r2,-1
 800613c:	dfc02117 	ldw	ra,132(sp)
 8006140:	df002017 	ldw	fp,128(sp)
 8006144:	ddc01f17 	ldw	r23,124(sp)
 8006148:	dd801e17 	ldw	r22,120(sp)
 800614c:	dd401d17 	ldw	r21,116(sp)
 8006150:	dd001c17 	ldw	r20,112(sp)
 8006154:	dcc01b17 	ldw	r19,108(sp)
 8006158:	dc801a17 	ldw	r18,104(sp)
 800615c:	dc401917 	ldw	r17,100(sp)
 8006160:	dc001817 	ldw	r16,96(sp)
 8006164:	dec02204 	addi	sp,sp,136
 8006168:	f800283a 	ret
 800616c:	d8c02317 	ldw	r3,140(sp)
 8006170:	0089c3c4 	movi	r2,9999
 8006174:	18800015 	stw	r2,0(r3)
 8006178:	90017726 	beq	r18,zero,8006758 <_dtoa_r+0x6dc>
 800617c:	008200f4 	movhi	r2,2051
 8006180:	10853704 	addi	r2,r2,5340
 8006184:	d9002517 	ldw	r4,148(sp)
 8006188:	203fec26 	beq	r4,zero,800613c <__alt_data_end+0xfc00613c>
 800618c:	10c000c7 	ldb	r3,3(r2)
 8006190:	1801781e 	bne	r3,zero,8006774 <_dtoa_r+0x6f8>
 8006194:	10c000c4 	addi	r3,r2,3
 8006198:	d9802517 	ldw	r6,148(sp)
 800619c:	30c00015 	stw	r3,0(r6)
 80061a0:	003fe606 	br	800613c <__alt_data_end+0xfc00613c>
 80061a4:	04e00034 	movhi	r19,32768
 80061a8:	9cffffc4 	addi	r19,r19,-1
 80061ac:	00800044 	movi	r2,1
 80061b0:	8ce6703a 	and	r19,r17,r19
 80061b4:	80800015 	stw	r2,0(r16)
 80061b8:	9823883a 	mov	r17,r19
 80061bc:	003fcc06 	br	80060f0 <__alt_data_end+0xfc0060f0>
 80061c0:	d8800204 	addi	r2,sp,8
 80061c4:	d8800015 	stw	r2,0(sp)
 80061c8:	d9c00104 	addi	r7,sp,4
 80061cc:	900b883a 	mov	r5,r18
 80061d0:	980d883a 	mov	r6,r19
 80061d4:	e009883a 	mov	r4,fp
 80061d8:	8820d53a 	srli	r16,r17,20
 80061dc:	800a4840 	call	800a484 <__d2b>
 80061e0:	d8800915 	stw	r2,36(sp)
 80061e4:	8001651e 	bne	r16,zero,800677c <_dtoa_r+0x700>
 80061e8:	dd800217 	ldw	r22,8(sp)
 80061ec:	dc000117 	ldw	r16,4(sp)
 80061f0:	00800804 	movi	r2,32
 80061f4:	b421883a 	add	r16,r22,r16
 80061f8:	80c10c84 	addi	r3,r16,1074
 80061fc:	10c2d10e 	bge	r2,r3,8006d44 <_dtoa_r+0xcc8>
 8006200:	00801004 	movi	r2,64
 8006204:	81010484 	addi	r4,r16,1042
 8006208:	10c7c83a 	sub	r3,r2,r3
 800620c:	9108d83a 	srl	r4,r18,r4
 8006210:	88e2983a 	sll	r17,r17,r3
 8006214:	2448b03a 	or	r4,r4,r17
 8006218:	80103cc0 	call	80103cc <__floatunsidf>
 800621c:	017f8434 	movhi	r5,65040
 8006220:	01800044 	movi	r6,1
 8006224:	1009883a 	mov	r4,r2
 8006228:	194b883a 	add	r5,r3,r5
 800622c:	843fffc4 	addi	r16,r16,-1
 8006230:	d9801115 	stw	r6,68(sp)
 8006234:	000d883a 	mov	r6,zero
 8006238:	01cffe34 	movhi	r7,16376
 800623c:	800f9740 	call	800f974 <__subdf3>
 8006240:	0198dbf4 	movhi	r6,25455
 8006244:	01cff4f4 	movhi	r7,16339
 8006248:	3190d844 	addi	r6,r6,17249
 800624c:	39e1e9c4 	addi	r7,r7,-30809
 8006250:	1009883a 	mov	r4,r2
 8006254:	180b883a 	mov	r5,r3
 8006258:	800f1080 	call	800f108 <__muldf3>
 800625c:	01a2d874 	movhi	r6,35681
 8006260:	01cff1f4 	movhi	r7,16327
 8006264:	31b22cc4 	addi	r6,r6,-14157
 8006268:	39e28a04 	addi	r7,r7,-30168
 800626c:	180b883a 	mov	r5,r3
 8006270:	1009883a 	mov	r4,r2
 8006274:	800dc340 	call	800dc34 <__adddf3>
 8006278:	8009883a 	mov	r4,r16
 800627c:	1029883a 	mov	r20,r2
 8006280:	1823883a 	mov	r17,r3
 8006284:	80102f00 	call	80102f0 <__floatsidf>
 8006288:	019427f4 	movhi	r6,20639
 800628c:	01cff4f4 	movhi	r7,16339
 8006290:	319e7ec4 	addi	r6,r6,31227
 8006294:	39d104c4 	addi	r7,r7,17427
 8006298:	1009883a 	mov	r4,r2
 800629c:	180b883a 	mov	r5,r3
 80062a0:	800f1080 	call	800f108 <__muldf3>
 80062a4:	100d883a 	mov	r6,r2
 80062a8:	180f883a 	mov	r7,r3
 80062ac:	a009883a 	mov	r4,r20
 80062b0:	880b883a 	mov	r5,r17
 80062b4:	800dc340 	call	800dc34 <__adddf3>
 80062b8:	1009883a 	mov	r4,r2
 80062bc:	180b883a 	mov	r5,r3
 80062c0:	1029883a 	mov	r20,r2
 80062c4:	1823883a 	mov	r17,r3
 80062c8:	80102700 	call	8010270 <__fixdfsi>
 80062cc:	000d883a 	mov	r6,zero
 80062d0:	000f883a 	mov	r7,zero
 80062d4:	a009883a 	mov	r4,r20
 80062d8:	880b883a 	mov	r5,r17
 80062dc:	d8800515 	stw	r2,20(sp)
 80062e0:	800f0140 	call	800f014 <__ledf2>
 80062e4:	10028716 	blt	r2,zero,8006d04 <_dtoa_r+0xc88>
 80062e8:	d8c00517 	ldw	r3,20(sp)
 80062ec:	00800584 	movi	r2,22
 80062f0:	10c27536 	bltu	r2,r3,8006cc8 <_dtoa_r+0xc4c>
 80062f4:	180490fa 	slli	r2,r3,3
 80062f8:	00c200f4 	movhi	r3,2051
 80062fc:	18c55304 	addi	r3,r3,5452
 8006300:	1885883a 	add	r2,r3,r2
 8006304:	11000017 	ldw	r4,0(r2)
 8006308:	11400117 	ldw	r5,4(r2)
 800630c:	900d883a 	mov	r6,r18
 8006310:	980f883a 	mov	r7,r19
 8006314:	800ef380 	call	800ef38 <__gedf2>
 8006318:	00828d0e 	bge	zero,r2,8006d50 <_dtoa_r+0xcd4>
 800631c:	d9000517 	ldw	r4,20(sp)
 8006320:	d8000e15 	stw	zero,56(sp)
 8006324:	213fffc4 	addi	r4,r4,-1
 8006328:	d9000515 	stw	r4,20(sp)
 800632c:	b42dc83a 	sub	r22,r22,r16
 8006330:	b5bfffc4 	addi	r22,r22,-1
 8006334:	b0026f16 	blt	r22,zero,8006cf4 <_dtoa_r+0xc78>
 8006338:	d8000815 	stw	zero,32(sp)
 800633c:	d9c00517 	ldw	r7,20(sp)
 8006340:	38026416 	blt	r7,zero,8006cd4 <_dtoa_r+0xc58>
 8006344:	b1ed883a 	add	r22,r22,r7
 8006348:	d9c00d15 	stw	r7,52(sp)
 800634c:	d8000a15 	stw	zero,40(sp)
 8006350:	d9800317 	ldw	r6,12(sp)
 8006354:	00800244 	movi	r2,9
 8006358:	11811436 	bltu	r2,r6,80067ac <_dtoa_r+0x730>
 800635c:	00800144 	movi	r2,5
 8006360:	1184e10e 	bge	r2,r6,80076e8 <_dtoa_r+0x166c>
 8006364:	31bfff04 	addi	r6,r6,-4
 8006368:	d9800315 	stw	r6,12(sp)
 800636c:	0023883a 	mov	r17,zero
 8006370:	d9800317 	ldw	r6,12(sp)
 8006374:	008000c4 	movi	r2,3
 8006378:	30836726 	beq	r6,r2,8007118 <_dtoa_r+0x109c>
 800637c:	1183410e 	bge	r2,r6,8007084 <_dtoa_r+0x1008>
 8006380:	d9c00317 	ldw	r7,12(sp)
 8006384:	00800104 	movi	r2,4
 8006388:	38827c26 	beq	r7,r2,8006d7c <_dtoa_r+0xd00>
 800638c:	00800144 	movi	r2,5
 8006390:	3884c41e 	bne	r7,r2,80076a4 <_dtoa_r+0x1628>
 8006394:	00800044 	movi	r2,1
 8006398:	d8800b15 	stw	r2,44(sp)
 800639c:	d8c00517 	ldw	r3,20(sp)
 80063a0:	d9002217 	ldw	r4,136(sp)
 80063a4:	1907883a 	add	r3,r3,r4
 80063a8:	19800044 	addi	r6,r3,1
 80063ac:	d8c00c15 	stw	r3,48(sp)
 80063b0:	d9800615 	stw	r6,24(sp)
 80063b4:	0183a40e 	bge	zero,r6,8007248 <_dtoa_r+0x11cc>
 80063b8:	d9800617 	ldw	r6,24(sp)
 80063bc:	3021883a 	mov	r16,r6
 80063c0:	e0001115 	stw	zero,68(fp)
 80063c4:	008005c4 	movi	r2,23
 80063c8:	1184c92e 	bgeu	r2,r6,80076f0 <_dtoa_r+0x1674>
 80063cc:	00c00044 	movi	r3,1
 80063d0:	00800104 	movi	r2,4
 80063d4:	1085883a 	add	r2,r2,r2
 80063d8:	11000504 	addi	r4,r2,20
 80063dc:	180b883a 	mov	r5,r3
 80063e0:	18c00044 	addi	r3,r3,1
 80063e4:	313ffb2e 	bgeu	r6,r4,80063d4 <__alt_data_end+0xfc0063d4>
 80063e8:	e1401115 	stw	r5,68(fp)
 80063ec:	e009883a 	mov	r4,fp
 80063f0:	80097340 	call	8009734 <_Balloc>
 80063f4:	d8800715 	stw	r2,28(sp)
 80063f8:	e0801015 	stw	r2,64(fp)
 80063fc:	00800384 	movi	r2,14
 8006400:	1400f736 	bltu	r2,r16,80067e0 <_dtoa_r+0x764>
 8006404:	8800f626 	beq	r17,zero,80067e0 <_dtoa_r+0x764>
 8006408:	d9c00517 	ldw	r7,20(sp)
 800640c:	01c39a0e 	bge	zero,r7,8007278 <_dtoa_r+0x11fc>
 8006410:	388003cc 	andi	r2,r7,15
 8006414:	100490fa 	slli	r2,r2,3
 8006418:	382bd13a 	srai	r21,r7,4
 800641c:	00c200f4 	movhi	r3,2051
 8006420:	18c55304 	addi	r3,r3,5452
 8006424:	1885883a 	add	r2,r3,r2
 8006428:	a8c0040c 	andi	r3,r21,16
 800642c:	12400017 	ldw	r9,0(r2)
 8006430:	12000117 	ldw	r8,4(r2)
 8006434:	18037926 	beq	r3,zero,800721c <_dtoa_r+0x11a0>
 8006438:	008200f4 	movhi	r2,2051
 800643c:	10854904 	addi	r2,r2,5412
 8006440:	11800817 	ldw	r6,32(r2)
 8006444:	11c00917 	ldw	r7,36(r2)
 8006448:	9009883a 	mov	r4,r18
 800644c:	980b883a 	mov	r5,r19
 8006450:	da001715 	stw	r8,92(sp)
 8006454:	da401615 	stw	r9,88(sp)
 8006458:	800e4e00 	call	800e4e0 <__divdf3>
 800645c:	da001717 	ldw	r8,92(sp)
 8006460:	da401617 	ldw	r9,88(sp)
 8006464:	ad4003cc 	andi	r21,r21,15
 8006468:	040000c4 	movi	r16,3
 800646c:	1023883a 	mov	r17,r2
 8006470:	1829883a 	mov	r20,r3
 8006474:	a8001126 	beq	r21,zero,80064bc <_dtoa_r+0x440>
 8006478:	05c200f4 	movhi	r23,2051
 800647c:	bdc54904 	addi	r23,r23,5412
 8006480:	4805883a 	mov	r2,r9
 8006484:	4007883a 	mov	r3,r8
 8006488:	a980004c 	andi	r6,r21,1
 800648c:	1009883a 	mov	r4,r2
 8006490:	a82bd07a 	srai	r21,r21,1
 8006494:	180b883a 	mov	r5,r3
 8006498:	30000426 	beq	r6,zero,80064ac <_dtoa_r+0x430>
 800649c:	b9800017 	ldw	r6,0(r23)
 80064a0:	b9c00117 	ldw	r7,4(r23)
 80064a4:	84000044 	addi	r16,r16,1
 80064a8:	800f1080 	call	800f108 <__muldf3>
 80064ac:	bdc00204 	addi	r23,r23,8
 80064b0:	a83ff51e 	bne	r21,zero,8006488 <__alt_data_end+0xfc006488>
 80064b4:	1013883a 	mov	r9,r2
 80064b8:	1811883a 	mov	r8,r3
 80064bc:	480d883a 	mov	r6,r9
 80064c0:	400f883a 	mov	r7,r8
 80064c4:	8809883a 	mov	r4,r17
 80064c8:	a00b883a 	mov	r5,r20
 80064cc:	800e4e00 	call	800e4e0 <__divdf3>
 80064d0:	d8800f15 	stw	r2,60(sp)
 80064d4:	d8c01015 	stw	r3,64(sp)
 80064d8:	d8c00e17 	ldw	r3,56(sp)
 80064dc:	18000626 	beq	r3,zero,80064f8 <_dtoa_r+0x47c>
 80064e0:	d9000f17 	ldw	r4,60(sp)
 80064e4:	d9401017 	ldw	r5,64(sp)
 80064e8:	000d883a 	mov	r6,zero
 80064ec:	01cffc34 	movhi	r7,16368
 80064f0:	800f0140 	call	800f014 <__ledf2>
 80064f4:	10040b16 	blt	r2,zero,8007524 <_dtoa_r+0x14a8>
 80064f8:	8009883a 	mov	r4,r16
 80064fc:	80102f00 	call	80102f0 <__floatsidf>
 8006500:	d9800f17 	ldw	r6,60(sp)
 8006504:	d9c01017 	ldw	r7,64(sp)
 8006508:	1009883a 	mov	r4,r2
 800650c:	180b883a 	mov	r5,r3
 8006510:	800f1080 	call	800f108 <__muldf3>
 8006514:	000d883a 	mov	r6,zero
 8006518:	01d00734 	movhi	r7,16412
 800651c:	1009883a 	mov	r4,r2
 8006520:	180b883a 	mov	r5,r3
 8006524:	800dc340 	call	800dc34 <__adddf3>
 8006528:	1021883a 	mov	r16,r2
 800652c:	d8800617 	ldw	r2,24(sp)
 8006530:	047f3034 	movhi	r17,64704
 8006534:	1c63883a 	add	r17,r3,r17
 8006538:	10031826 	beq	r2,zero,800719c <_dtoa_r+0x1120>
 800653c:	d8c00517 	ldw	r3,20(sp)
 8006540:	db000617 	ldw	r12,24(sp)
 8006544:	d8c01315 	stw	r3,76(sp)
 8006548:	d9000b17 	ldw	r4,44(sp)
 800654c:	20038f26 	beq	r4,zero,800738c <_dtoa_r+0x1310>
 8006550:	60bfffc4 	addi	r2,r12,-1
 8006554:	100490fa 	slli	r2,r2,3
 8006558:	00c200f4 	movhi	r3,2051
 800655c:	18c55304 	addi	r3,r3,5452
 8006560:	1885883a 	add	r2,r3,r2
 8006564:	11800017 	ldw	r6,0(r2)
 8006568:	11c00117 	ldw	r7,4(r2)
 800656c:	d8800717 	ldw	r2,28(sp)
 8006570:	0009883a 	mov	r4,zero
 8006574:	014ff834 	movhi	r5,16352
 8006578:	db001615 	stw	r12,88(sp)
 800657c:	15c00044 	addi	r23,r2,1
 8006580:	800e4e00 	call	800e4e0 <__divdf3>
 8006584:	800d883a 	mov	r6,r16
 8006588:	880f883a 	mov	r7,r17
 800658c:	1009883a 	mov	r4,r2
 8006590:	180b883a 	mov	r5,r3
 8006594:	800f9740 	call	800f974 <__subdf3>
 8006598:	d9401017 	ldw	r5,64(sp)
 800659c:	d9000f17 	ldw	r4,60(sp)
 80065a0:	102b883a 	mov	r21,r2
 80065a4:	d8c01215 	stw	r3,72(sp)
 80065a8:	80102700 	call	8010270 <__fixdfsi>
 80065ac:	1009883a 	mov	r4,r2
 80065b0:	1029883a 	mov	r20,r2
 80065b4:	80102f00 	call	80102f0 <__floatsidf>
 80065b8:	d9000f17 	ldw	r4,60(sp)
 80065bc:	d9401017 	ldw	r5,64(sp)
 80065c0:	100d883a 	mov	r6,r2
 80065c4:	180f883a 	mov	r7,r3
 80065c8:	800f9740 	call	800f974 <__subdf3>
 80065cc:	1823883a 	mov	r17,r3
 80065d0:	d8c00717 	ldw	r3,28(sp)
 80065d4:	d9401217 	ldw	r5,72(sp)
 80065d8:	a2000c04 	addi	r8,r20,48
 80065dc:	1021883a 	mov	r16,r2
 80065e0:	1a000005 	stb	r8,0(r3)
 80065e4:	800d883a 	mov	r6,r16
 80065e8:	880f883a 	mov	r7,r17
 80065ec:	a809883a 	mov	r4,r21
 80065f0:	4029883a 	mov	r20,r8
 80065f4:	800ef380 	call	800ef38 <__gedf2>
 80065f8:	00841d16 	blt	zero,r2,8007670 <_dtoa_r+0x15f4>
 80065fc:	800d883a 	mov	r6,r16
 8006600:	880f883a 	mov	r7,r17
 8006604:	0009883a 	mov	r4,zero
 8006608:	014ffc34 	movhi	r5,16368
 800660c:	800f9740 	call	800f974 <__subdf3>
 8006610:	d9401217 	ldw	r5,72(sp)
 8006614:	100d883a 	mov	r6,r2
 8006618:	180f883a 	mov	r7,r3
 800661c:	a809883a 	mov	r4,r21
 8006620:	800ef380 	call	800ef38 <__gedf2>
 8006624:	db001617 	ldw	r12,88(sp)
 8006628:	00840e16 	blt	zero,r2,8007664 <_dtoa_r+0x15e8>
 800662c:	00800044 	movi	r2,1
 8006630:	13006b0e 	bge	r2,r12,80067e0 <_dtoa_r+0x764>
 8006634:	d9000717 	ldw	r4,28(sp)
 8006638:	dd800f15 	stw	r22,60(sp)
 800663c:	dcc01015 	stw	r19,64(sp)
 8006640:	2319883a 	add	r12,r4,r12
 8006644:	dcc01217 	ldw	r19,72(sp)
 8006648:	602d883a 	mov	r22,r12
 800664c:	dc801215 	stw	r18,72(sp)
 8006650:	b825883a 	mov	r18,r23
 8006654:	00000906 	br	800667c <_dtoa_r+0x600>
 8006658:	800f9740 	call	800f974 <__subdf3>
 800665c:	a80d883a 	mov	r6,r21
 8006660:	980f883a 	mov	r7,r19
 8006664:	1009883a 	mov	r4,r2
 8006668:	180b883a 	mov	r5,r3
 800666c:	800f0140 	call	800f014 <__ledf2>
 8006670:	1003e816 	blt	r2,zero,8007614 <_dtoa_r+0x1598>
 8006674:	b825883a 	mov	r18,r23
 8006678:	bd83e926 	beq	r23,r22,8007620 <_dtoa_r+0x15a4>
 800667c:	a809883a 	mov	r4,r21
 8006680:	980b883a 	mov	r5,r19
 8006684:	000d883a 	mov	r6,zero
 8006688:	01d00934 	movhi	r7,16420
 800668c:	800f1080 	call	800f108 <__muldf3>
 8006690:	000d883a 	mov	r6,zero
 8006694:	01d00934 	movhi	r7,16420
 8006698:	8009883a 	mov	r4,r16
 800669c:	880b883a 	mov	r5,r17
 80066a0:	102b883a 	mov	r21,r2
 80066a4:	1827883a 	mov	r19,r3
 80066a8:	800f1080 	call	800f108 <__muldf3>
 80066ac:	180b883a 	mov	r5,r3
 80066b0:	1009883a 	mov	r4,r2
 80066b4:	1821883a 	mov	r16,r3
 80066b8:	1023883a 	mov	r17,r2
 80066bc:	80102700 	call	8010270 <__fixdfsi>
 80066c0:	1009883a 	mov	r4,r2
 80066c4:	1029883a 	mov	r20,r2
 80066c8:	80102f00 	call	80102f0 <__floatsidf>
 80066cc:	8809883a 	mov	r4,r17
 80066d0:	800b883a 	mov	r5,r16
 80066d4:	100d883a 	mov	r6,r2
 80066d8:	180f883a 	mov	r7,r3
 80066dc:	800f9740 	call	800f974 <__subdf3>
 80066e0:	a5000c04 	addi	r20,r20,48
 80066e4:	a80d883a 	mov	r6,r21
 80066e8:	980f883a 	mov	r7,r19
 80066ec:	1009883a 	mov	r4,r2
 80066f0:	180b883a 	mov	r5,r3
 80066f4:	95000005 	stb	r20,0(r18)
 80066f8:	1021883a 	mov	r16,r2
 80066fc:	1823883a 	mov	r17,r3
 8006700:	800f0140 	call	800f014 <__ledf2>
 8006704:	bdc00044 	addi	r23,r23,1
 8006708:	800d883a 	mov	r6,r16
 800670c:	880f883a 	mov	r7,r17
 8006710:	0009883a 	mov	r4,zero
 8006714:	014ffc34 	movhi	r5,16368
 8006718:	103fcf0e 	bge	r2,zero,8006658 <__alt_data_end+0xfc006658>
 800671c:	d8c01317 	ldw	r3,76(sp)
 8006720:	d8c00515 	stw	r3,20(sp)
 8006724:	d9400917 	ldw	r5,36(sp)
 8006728:	e009883a 	mov	r4,fp
 800672c:	80097dc0 	call	80097dc <_Bfree>
 8006730:	d9000517 	ldw	r4,20(sp)
 8006734:	d9802317 	ldw	r6,140(sp)
 8006738:	d9c02517 	ldw	r7,148(sp)
 800673c:	b8000005 	stb	zero,0(r23)
 8006740:	20800044 	addi	r2,r4,1
 8006744:	30800015 	stw	r2,0(r6)
 8006748:	3802aa26 	beq	r7,zero,80071f4 <_dtoa_r+0x1178>
 800674c:	3dc00015 	stw	r23,0(r7)
 8006750:	d8800717 	ldw	r2,28(sp)
 8006754:	003e7906 	br	800613c <__alt_data_end+0xfc00613c>
 8006758:	00800434 	movhi	r2,16
 800675c:	10bfffc4 	addi	r2,r2,-1
 8006760:	88a2703a 	and	r17,r17,r2
 8006764:	883e851e 	bne	r17,zero,800617c <__alt_data_end+0xfc00617c>
 8006768:	008200f4 	movhi	r2,2051
 800676c:	10853404 	addi	r2,r2,5328
 8006770:	003e8406 	br	8006184 <__alt_data_end+0xfc006184>
 8006774:	10c00204 	addi	r3,r2,8
 8006778:	003e8706 	br	8006198 <__alt_data_end+0xfc006198>
 800677c:	01400434 	movhi	r5,16
 8006780:	297fffc4 	addi	r5,r5,-1
 8006784:	994a703a 	and	r5,r19,r5
 8006788:	9009883a 	mov	r4,r18
 800678c:	843f0044 	addi	r16,r16,-1023
 8006790:	294ffc34 	orhi	r5,r5,16368
 8006794:	dd800217 	ldw	r22,8(sp)
 8006798:	d8001115 	stw	zero,68(sp)
 800679c:	003ea506 	br	8006234 <__alt_data_end+0xfc006234>
 80067a0:	008200f4 	movhi	r2,2051
 80067a4:	10852b04 	addi	r2,r2,5292
 80067a8:	003e6406 	br	800613c <__alt_data_end+0xfc00613c>
 80067ac:	e0001115 	stw	zero,68(fp)
 80067b0:	000b883a 	mov	r5,zero
 80067b4:	e009883a 	mov	r4,fp
 80067b8:	80097340 	call	8009734 <_Balloc>
 80067bc:	01bfffc4 	movi	r6,-1
 80067c0:	01c00044 	movi	r7,1
 80067c4:	d8800715 	stw	r2,28(sp)
 80067c8:	d9800c15 	stw	r6,48(sp)
 80067cc:	e0801015 	stw	r2,64(fp)
 80067d0:	d8000315 	stw	zero,12(sp)
 80067d4:	d9c00b15 	stw	r7,44(sp)
 80067d8:	d9800615 	stw	r6,24(sp)
 80067dc:	d8002215 	stw	zero,136(sp)
 80067e0:	d8800117 	ldw	r2,4(sp)
 80067e4:	10008916 	blt	r2,zero,8006a0c <_dtoa_r+0x990>
 80067e8:	d9000517 	ldw	r4,20(sp)
 80067ec:	00c00384 	movi	r3,14
 80067f0:	19008616 	blt	r3,r4,8006a0c <_dtoa_r+0x990>
 80067f4:	200490fa 	slli	r2,r4,3
 80067f8:	00c200f4 	movhi	r3,2051
 80067fc:	d9802217 	ldw	r6,136(sp)
 8006800:	18c55304 	addi	r3,r3,5452
 8006804:	1885883a 	add	r2,r3,r2
 8006808:	14000017 	ldw	r16,0(r2)
 800680c:	14400117 	ldw	r17,4(r2)
 8006810:	30016316 	blt	r6,zero,8006da0 <_dtoa_r+0xd24>
 8006814:	800d883a 	mov	r6,r16
 8006818:	880f883a 	mov	r7,r17
 800681c:	9009883a 	mov	r4,r18
 8006820:	980b883a 	mov	r5,r19
 8006824:	800e4e00 	call	800e4e0 <__divdf3>
 8006828:	180b883a 	mov	r5,r3
 800682c:	1009883a 	mov	r4,r2
 8006830:	80102700 	call	8010270 <__fixdfsi>
 8006834:	1009883a 	mov	r4,r2
 8006838:	102b883a 	mov	r21,r2
 800683c:	80102f00 	call	80102f0 <__floatsidf>
 8006840:	800d883a 	mov	r6,r16
 8006844:	880f883a 	mov	r7,r17
 8006848:	1009883a 	mov	r4,r2
 800684c:	180b883a 	mov	r5,r3
 8006850:	800f1080 	call	800f108 <__muldf3>
 8006854:	100d883a 	mov	r6,r2
 8006858:	180f883a 	mov	r7,r3
 800685c:	9009883a 	mov	r4,r18
 8006860:	980b883a 	mov	r5,r19
 8006864:	800f9740 	call	800f974 <__subdf3>
 8006868:	d9c00717 	ldw	r7,28(sp)
 800686c:	1009883a 	mov	r4,r2
 8006870:	a8800c04 	addi	r2,r21,48
 8006874:	38800005 	stb	r2,0(r7)
 8006878:	3dc00044 	addi	r23,r7,1
 800687c:	d9c00617 	ldw	r7,24(sp)
 8006880:	01800044 	movi	r6,1
 8006884:	180b883a 	mov	r5,r3
 8006888:	2005883a 	mov	r2,r4
 800688c:	39803826 	beq	r7,r6,8006970 <_dtoa_r+0x8f4>
 8006890:	000d883a 	mov	r6,zero
 8006894:	01d00934 	movhi	r7,16420
 8006898:	800f1080 	call	800f108 <__muldf3>
 800689c:	000d883a 	mov	r6,zero
 80068a0:	000f883a 	mov	r7,zero
 80068a4:	1009883a 	mov	r4,r2
 80068a8:	180b883a 	mov	r5,r3
 80068ac:	1025883a 	mov	r18,r2
 80068b0:	1827883a 	mov	r19,r3
 80068b4:	800eeb00 	call	800eeb0 <__eqdf2>
 80068b8:	103f9a26 	beq	r2,zero,8006724 <__alt_data_end+0xfc006724>
 80068bc:	d9c00617 	ldw	r7,24(sp)
 80068c0:	d8c00717 	ldw	r3,28(sp)
 80068c4:	b829883a 	mov	r20,r23
 80068c8:	38bfffc4 	addi	r2,r7,-1
 80068cc:	18ad883a 	add	r22,r3,r2
 80068d0:	00000a06 	br	80068fc <_dtoa_r+0x880>
 80068d4:	800f1080 	call	800f108 <__muldf3>
 80068d8:	000d883a 	mov	r6,zero
 80068dc:	000f883a 	mov	r7,zero
 80068e0:	1009883a 	mov	r4,r2
 80068e4:	180b883a 	mov	r5,r3
 80068e8:	1025883a 	mov	r18,r2
 80068ec:	1827883a 	mov	r19,r3
 80068f0:	b829883a 	mov	r20,r23
 80068f4:	800eeb00 	call	800eeb0 <__eqdf2>
 80068f8:	103f8a26 	beq	r2,zero,8006724 <__alt_data_end+0xfc006724>
 80068fc:	800d883a 	mov	r6,r16
 8006900:	880f883a 	mov	r7,r17
 8006904:	9009883a 	mov	r4,r18
 8006908:	980b883a 	mov	r5,r19
 800690c:	800e4e00 	call	800e4e0 <__divdf3>
 8006910:	180b883a 	mov	r5,r3
 8006914:	1009883a 	mov	r4,r2
 8006918:	80102700 	call	8010270 <__fixdfsi>
 800691c:	1009883a 	mov	r4,r2
 8006920:	102b883a 	mov	r21,r2
 8006924:	80102f00 	call	80102f0 <__floatsidf>
 8006928:	800d883a 	mov	r6,r16
 800692c:	880f883a 	mov	r7,r17
 8006930:	1009883a 	mov	r4,r2
 8006934:	180b883a 	mov	r5,r3
 8006938:	800f1080 	call	800f108 <__muldf3>
 800693c:	100d883a 	mov	r6,r2
 8006940:	180f883a 	mov	r7,r3
 8006944:	9009883a 	mov	r4,r18
 8006948:	980b883a 	mov	r5,r19
 800694c:	800f9740 	call	800f974 <__subdf3>
 8006950:	aa000c04 	addi	r8,r21,48
 8006954:	a2000005 	stb	r8,0(r20)
 8006958:	000d883a 	mov	r6,zero
 800695c:	01d00934 	movhi	r7,16420
 8006960:	1009883a 	mov	r4,r2
 8006964:	180b883a 	mov	r5,r3
 8006968:	a5c00044 	addi	r23,r20,1
 800696c:	b53fd91e 	bne	r22,r20,80068d4 <__alt_data_end+0xfc0068d4>
 8006970:	100d883a 	mov	r6,r2
 8006974:	180f883a 	mov	r7,r3
 8006978:	1009883a 	mov	r4,r2
 800697c:	180b883a 	mov	r5,r3
 8006980:	800dc340 	call	800dc34 <__adddf3>
 8006984:	100d883a 	mov	r6,r2
 8006988:	180f883a 	mov	r7,r3
 800698c:	8009883a 	mov	r4,r16
 8006990:	880b883a 	mov	r5,r17
 8006994:	1027883a 	mov	r19,r2
 8006998:	1825883a 	mov	r18,r3
 800699c:	800f0140 	call	800f014 <__ledf2>
 80069a0:	10000816 	blt	r2,zero,80069c4 <_dtoa_r+0x948>
 80069a4:	980d883a 	mov	r6,r19
 80069a8:	900f883a 	mov	r7,r18
 80069ac:	8009883a 	mov	r4,r16
 80069b0:	880b883a 	mov	r5,r17
 80069b4:	800eeb00 	call	800eeb0 <__eqdf2>
 80069b8:	103f5a1e 	bne	r2,zero,8006724 <__alt_data_end+0xfc006724>
 80069bc:	ad40004c 	andi	r21,r21,1
 80069c0:	a83f5826 	beq	r21,zero,8006724 <__alt_data_end+0xfc006724>
 80069c4:	bd3fffc3 	ldbu	r20,-1(r23)
 80069c8:	b8bfffc4 	addi	r2,r23,-1
 80069cc:	1007883a 	mov	r3,r2
 80069d0:	01400e44 	movi	r5,57
 80069d4:	d9800717 	ldw	r6,28(sp)
 80069d8:	00000506 	br	80069f0 <_dtoa_r+0x974>
 80069dc:	18ffffc4 	addi	r3,r3,-1
 80069e0:	11824726 	beq	r2,r6,8007300 <_dtoa_r+0x1284>
 80069e4:	1d000003 	ldbu	r20,0(r3)
 80069e8:	102f883a 	mov	r23,r2
 80069ec:	10bfffc4 	addi	r2,r2,-1
 80069f0:	a1003fcc 	andi	r4,r20,255
 80069f4:	2100201c 	xori	r4,r4,128
 80069f8:	213fe004 	addi	r4,r4,-128
 80069fc:	217ff726 	beq	r4,r5,80069dc <__alt_data_end+0xfc0069dc>
 8006a00:	a2000044 	addi	r8,r20,1
 8006a04:	12000005 	stb	r8,0(r2)
 8006a08:	003f4606 	br	8006724 <__alt_data_end+0xfc006724>
 8006a0c:	d9000b17 	ldw	r4,44(sp)
 8006a10:	2000c826 	beq	r4,zero,8006d34 <_dtoa_r+0xcb8>
 8006a14:	d9800317 	ldw	r6,12(sp)
 8006a18:	00c00044 	movi	r3,1
 8006a1c:	1980f90e 	bge	r3,r6,8006e04 <_dtoa_r+0xd88>
 8006a20:	d8800617 	ldw	r2,24(sp)
 8006a24:	d8c00a17 	ldw	r3,40(sp)
 8006a28:	157fffc4 	addi	r21,r2,-1
 8006a2c:	1d41f316 	blt	r3,r21,80071fc <_dtoa_r+0x1180>
 8006a30:	1d6bc83a 	sub	r21,r3,r21
 8006a34:	d9c00617 	ldw	r7,24(sp)
 8006a38:	3802aa16 	blt	r7,zero,80074e4 <_dtoa_r+0x1468>
 8006a3c:	dd000817 	ldw	r20,32(sp)
 8006a40:	d8800617 	ldw	r2,24(sp)
 8006a44:	d8c00817 	ldw	r3,32(sp)
 8006a48:	01400044 	movi	r5,1
 8006a4c:	e009883a 	mov	r4,fp
 8006a50:	1887883a 	add	r3,r3,r2
 8006a54:	d8c00815 	stw	r3,32(sp)
 8006a58:	b0ad883a 	add	r22,r22,r2
 8006a5c:	8009b680 	call	8009b68 <__i2b>
 8006a60:	1023883a 	mov	r17,r2
 8006a64:	a0000826 	beq	r20,zero,8006a88 <_dtoa_r+0xa0c>
 8006a68:	0580070e 	bge	zero,r22,8006a88 <_dtoa_r+0xa0c>
 8006a6c:	a005883a 	mov	r2,r20
 8006a70:	b500b916 	blt	r22,r20,8006d58 <_dtoa_r+0xcdc>
 8006a74:	d9000817 	ldw	r4,32(sp)
 8006a78:	a0a9c83a 	sub	r20,r20,r2
 8006a7c:	b0adc83a 	sub	r22,r22,r2
 8006a80:	2089c83a 	sub	r4,r4,r2
 8006a84:	d9000815 	stw	r4,32(sp)
 8006a88:	d9800a17 	ldw	r6,40(sp)
 8006a8c:	0181810e 	bge	zero,r6,8007094 <_dtoa_r+0x1018>
 8006a90:	d9c00b17 	ldw	r7,44(sp)
 8006a94:	3800b326 	beq	r7,zero,8006d64 <_dtoa_r+0xce8>
 8006a98:	a800b226 	beq	r21,zero,8006d64 <_dtoa_r+0xce8>
 8006a9c:	880b883a 	mov	r5,r17
 8006aa0:	a80d883a 	mov	r6,r21
 8006aa4:	e009883a 	mov	r4,fp
 8006aa8:	8009e300 	call	8009e30 <__pow5mult>
 8006aac:	d9800917 	ldw	r6,36(sp)
 8006ab0:	100b883a 	mov	r5,r2
 8006ab4:	e009883a 	mov	r4,fp
 8006ab8:	1023883a 	mov	r17,r2
 8006abc:	8009ba40 	call	8009ba4 <__multiply>
 8006ac0:	1021883a 	mov	r16,r2
 8006ac4:	d8800a17 	ldw	r2,40(sp)
 8006ac8:	d9400917 	ldw	r5,36(sp)
 8006acc:	e009883a 	mov	r4,fp
 8006ad0:	1545c83a 	sub	r2,r2,r21
 8006ad4:	d8800a15 	stw	r2,40(sp)
 8006ad8:	80097dc0 	call	80097dc <_Bfree>
 8006adc:	d8c00a17 	ldw	r3,40(sp)
 8006ae0:	18009f1e 	bne	r3,zero,8006d60 <_dtoa_r+0xce4>
 8006ae4:	05c00044 	movi	r23,1
 8006ae8:	e009883a 	mov	r4,fp
 8006aec:	b80b883a 	mov	r5,r23
 8006af0:	8009b680 	call	8009b68 <__i2b>
 8006af4:	d9000d17 	ldw	r4,52(sp)
 8006af8:	102b883a 	mov	r21,r2
 8006afc:	2000ce26 	beq	r4,zero,8006e38 <_dtoa_r+0xdbc>
 8006b00:	200d883a 	mov	r6,r4
 8006b04:	100b883a 	mov	r5,r2
 8006b08:	e009883a 	mov	r4,fp
 8006b0c:	8009e300 	call	8009e30 <__pow5mult>
 8006b10:	d9800317 	ldw	r6,12(sp)
 8006b14:	102b883a 	mov	r21,r2
 8006b18:	b981810e 	bge	r23,r6,8007120 <_dtoa_r+0x10a4>
 8006b1c:	0027883a 	mov	r19,zero
 8006b20:	a8800417 	ldw	r2,16(r21)
 8006b24:	05c00804 	movi	r23,32
 8006b28:	10800104 	addi	r2,r2,4
 8006b2c:	1085883a 	add	r2,r2,r2
 8006b30:	1085883a 	add	r2,r2,r2
 8006b34:	a885883a 	add	r2,r21,r2
 8006b38:	11000017 	ldw	r4,0(r2)
 8006b3c:	8009a500 	call	8009a50 <__hi0bits>
 8006b40:	b885c83a 	sub	r2,r23,r2
 8006b44:	1585883a 	add	r2,r2,r22
 8006b48:	108007cc 	andi	r2,r2,31
 8006b4c:	1000b326 	beq	r2,zero,8006e1c <_dtoa_r+0xda0>
 8006b50:	00c00804 	movi	r3,32
 8006b54:	1887c83a 	sub	r3,r3,r2
 8006b58:	01000104 	movi	r4,4
 8006b5c:	20c2cd0e 	bge	r4,r3,8007694 <_dtoa_r+0x1618>
 8006b60:	00c00704 	movi	r3,28
 8006b64:	1885c83a 	sub	r2,r3,r2
 8006b68:	d8c00817 	ldw	r3,32(sp)
 8006b6c:	a0a9883a 	add	r20,r20,r2
 8006b70:	b0ad883a 	add	r22,r22,r2
 8006b74:	1887883a 	add	r3,r3,r2
 8006b78:	d8c00815 	stw	r3,32(sp)
 8006b7c:	d9800817 	ldw	r6,32(sp)
 8006b80:	0180040e 	bge	zero,r6,8006b94 <_dtoa_r+0xb18>
 8006b84:	800b883a 	mov	r5,r16
 8006b88:	e009883a 	mov	r4,fp
 8006b8c:	8009f700 	call	8009f70 <__lshift>
 8006b90:	1021883a 	mov	r16,r2
 8006b94:	0580050e 	bge	zero,r22,8006bac <_dtoa_r+0xb30>
 8006b98:	a80b883a 	mov	r5,r21
 8006b9c:	b00d883a 	mov	r6,r22
 8006ba0:	e009883a 	mov	r4,fp
 8006ba4:	8009f700 	call	8009f70 <__lshift>
 8006ba8:	102b883a 	mov	r21,r2
 8006bac:	d9c00e17 	ldw	r7,56(sp)
 8006bb0:	3801211e 	bne	r7,zero,8007038 <_dtoa_r+0xfbc>
 8006bb4:	d9800617 	ldw	r6,24(sp)
 8006bb8:	0181380e 	bge	zero,r6,800709c <_dtoa_r+0x1020>
 8006bbc:	d8c00b17 	ldw	r3,44(sp)
 8006bc0:	1800ab1e 	bne	r3,zero,8006e70 <_dtoa_r+0xdf4>
 8006bc4:	dc800717 	ldw	r18,28(sp)
 8006bc8:	dcc00617 	ldw	r19,24(sp)
 8006bcc:	9029883a 	mov	r20,r18
 8006bd0:	00000206 	br	8006bdc <_dtoa_r+0xb60>
 8006bd4:	80098040 	call	8009804 <__multadd>
 8006bd8:	1021883a 	mov	r16,r2
 8006bdc:	a80b883a 	mov	r5,r21
 8006be0:	8009883a 	mov	r4,r16
 8006be4:	8005e540 	call	8005e54 <quorem>
 8006be8:	10800c04 	addi	r2,r2,48
 8006bec:	90800005 	stb	r2,0(r18)
 8006bf0:	94800044 	addi	r18,r18,1
 8006bf4:	9507c83a 	sub	r3,r18,r20
 8006bf8:	000f883a 	mov	r7,zero
 8006bfc:	01800284 	movi	r6,10
 8006c00:	800b883a 	mov	r5,r16
 8006c04:	e009883a 	mov	r4,fp
 8006c08:	1cfff216 	blt	r3,r19,8006bd4 <__alt_data_end+0xfc006bd4>
 8006c0c:	1011883a 	mov	r8,r2
 8006c10:	d8800617 	ldw	r2,24(sp)
 8006c14:	0082370e 	bge	zero,r2,80074f4 <_dtoa_r+0x1478>
 8006c18:	d9000717 	ldw	r4,28(sp)
 8006c1c:	0025883a 	mov	r18,zero
 8006c20:	20af883a 	add	r23,r4,r2
 8006c24:	01800044 	movi	r6,1
 8006c28:	800b883a 	mov	r5,r16
 8006c2c:	e009883a 	mov	r4,fp
 8006c30:	da001715 	stw	r8,92(sp)
 8006c34:	8009f700 	call	8009f70 <__lshift>
 8006c38:	a80b883a 	mov	r5,r21
 8006c3c:	1009883a 	mov	r4,r2
 8006c40:	d8800915 	stw	r2,36(sp)
 8006c44:	800a0b80 	call	800a0b8 <__mcmp>
 8006c48:	da001717 	ldw	r8,92(sp)
 8006c4c:	0081800e 	bge	zero,r2,8007250 <_dtoa_r+0x11d4>
 8006c50:	b93fffc3 	ldbu	r4,-1(r23)
 8006c54:	b8bfffc4 	addi	r2,r23,-1
 8006c58:	1007883a 	mov	r3,r2
 8006c5c:	01800e44 	movi	r6,57
 8006c60:	d9c00717 	ldw	r7,28(sp)
 8006c64:	00000506 	br	8006c7c <_dtoa_r+0xc00>
 8006c68:	18ffffc4 	addi	r3,r3,-1
 8006c6c:	11c12326 	beq	r2,r7,80070fc <_dtoa_r+0x1080>
 8006c70:	19000003 	ldbu	r4,0(r3)
 8006c74:	102f883a 	mov	r23,r2
 8006c78:	10bfffc4 	addi	r2,r2,-1
 8006c7c:	21403fcc 	andi	r5,r4,255
 8006c80:	2940201c 	xori	r5,r5,128
 8006c84:	297fe004 	addi	r5,r5,-128
 8006c88:	29bff726 	beq	r5,r6,8006c68 <__alt_data_end+0xfc006c68>
 8006c8c:	21000044 	addi	r4,r4,1
 8006c90:	11000005 	stb	r4,0(r2)
 8006c94:	a80b883a 	mov	r5,r21
 8006c98:	e009883a 	mov	r4,fp
 8006c9c:	80097dc0 	call	80097dc <_Bfree>
 8006ca0:	883ea026 	beq	r17,zero,8006724 <__alt_data_end+0xfc006724>
 8006ca4:	90000426 	beq	r18,zero,8006cb8 <_dtoa_r+0xc3c>
 8006ca8:	94400326 	beq	r18,r17,8006cb8 <_dtoa_r+0xc3c>
 8006cac:	900b883a 	mov	r5,r18
 8006cb0:	e009883a 	mov	r4,fp
 8006cb4:	80097dc0 	call	80097dc <_Bfree>
 8006cb8:	880b883a 	mov	r5,r17
 8006cbc:	e009883a 	mov	r4,fp
 8006cc0:	80097dc0 	call	80097dc <_Bfree>
 8006cc4:	003e9706 	br	8006724 <__alt_data_end+0xfc006724>
 8006cc8:	01800044 	movi	r6,1
 8006ccc:	d9800e15 	stw	r6,56(sp)
 8006cd0:	003d9606 	br	800632c <__alt_data_end+0xfc00632c>
 8006cd4:	d8800817 	ldw	r2,32(sp)
 8006cd8:	d8c00517 	ldw	r3,20(sp)
 8006cdc:	d8000d15 	stw	zero,52(sp)
 8006ce0:	10c5c83a 	sub	r2,r2,r3
 8006ce4:	00c9c83a 	sub	r4,zero,r3
 8006ce8:	d8800815 	stw	r2,32(sp)
 8006cec:	d9000a15 	stw	r4,40(sp)
 8006cf0:	003d9706 	br	8006350 <__alt_data_end+0xfc006350>
 8006cf4:	05adc83a 	sub	r22,zero,r22
 8006cf8:	dd800815 	stw	r22,32(sp)
 8006cfc:	002d883a 	mov	r22,zero
 8006d00:	003d8e06 	br	800633c <__alt_data_end+0xfc00633c>
 8006d04:	d9000517 	ldw	r4,20(sp)
 8006d08:	80102f00 	call	80102f0 <__floatsidf>
 8006d0c:	100d883a 	mov	r6,r2
 8006d10:	180f883a 	mov	r7,r3
 8006d14:	a009883a 	mov	r4,r20
 8006d18:	880b883a 	mov	r5,r17
 8006d1c:	800eeb00 	call	800eeb0 <__eqdf2>
 8006d20:	103d7126 	beq	r2,zero,80062e8 <__alt_data_end+0xfc0062e8>
 8006d24:	d9c00517 	ldw	r7,20(sp)
 8006d28:	39ffffc4 	addi	r7,r7,-1
 8006d2c:	d9c00515 	stw	r7,20(sp)
 8006d30:	003d6d06 	br	80062e8 <__alt_data_end+0xfc0062e8>
 8006d34:	dd400a17 	ldw	r21,40(sp)
 8006d38:	dd000817 	ldw	r20,32(sp)
 8006d3c:	0023883a 	mov	r17,zero
 8006d40:	003f4806 	br	8006a64 <__alt_data_end+0xfc006a64>
 8006d44:	10e3c83a 	sub	r17,r2,r3
 8006d48:	9448983a 	sll	r4,r18,r17
 8006d4c:	003d3206 	br	8006218 <__alt_data_end+0xfc006218>
 8006d50:	d8000e15 	stw	zero,56(sp)
 8006d54:	003d7506 	br	800632c <__alt_data_end+0xfc00632c>
 8006d58:	b005883a 	mov	r2,r22
 8006d5c:	003f4506 	br	8006a74 <__alt_data_end+0xfc006a74>
 8006d60:	dc000915 	stw	r16,36(sp)
 8006d64:	d9800a17 	ldw	r6,40(sp)
 8006d68:	d9400917 	ldw	r5,36(sp)
 8006d6c:	e009883a 	mov	r4,fp
 8006d70:	8009e300 	call	8009e30 <__pow5mult>
 8006d74:	1021883a 	mov	r16,r2
 8006d78:	003f5a06 	br	8006ae4 <__alt_data_end+0xfc006ae4>
 8006d7c:	01c00044 	movi	r7,1
 8006d80:	d9c00b15 	stw	r7,44(sp)
 8006d84:	d8802217 	ldw	r2,136(sp)
 8006d88:	0081280e 	bge	zero,r2,800722c <_dtoa_r+0x11b0>
 8006d8c:	100d883a 	mov	r6,r2
 8006d90:	1021883a 	mov	r16,r2
 8006d94:	d8800c15 	stw	r2,48(sp)
 8006d98:	d8800615 	stw	r2,24(sp)
 8006d9c:	003d8806 	br	80063c0 <__alt_data_end+0xfc0063c0>
 8006da0:	d8800617 	ldw	r2,24(sp)
 8006da4:	00be9b16 	blt	zero,r2,8006814 <__alt_data_end+0xfc006814>
 8006da8:	10010f1e 	bne	r2,zero,80071e8 <_dtoa_r+0x116c>
 8006dac:	880b883a 	mov	r5,r17
 8006db0:	000d883a 	mov	r6,zero
 8006db4:	01d00534 	movhi	r7,16404
 8006db8:	8009883a 	mov	r4,r16
 8006dbc:	800f1080 	call	800f108 <__muldf3>
 8006dc0:	900d883a 	mov	r6,r18
 8006dc4:	980f883a 	mov	r7,r19
 8006dc8:	1009883a 	mov	r4,r2
 8006dcc:	180b883a 	mov	r5,r3
 8006dd0:	800ef380 	call	800ef38 <__gedf2>
 8006dd4:	002b883a 	mov	r21,zero
 8006dd8:	0023883a 	mov	r17,zero
 8006ddc:	1000bf16 	blt	r2,zero,80070dc <_dtoa_r+0x1060>
 8006de0:	d9802217 	ldw	r6,136(sp)
 8006de4:	ddc00717 	ldw	r23,28(sp)
 8006de8:	018c303a 	nor	r6,zero,r6
 8006dec:	d9800515 	stw	r6,20(sp)
 8006df0:	a80b883a 	mov	r5,r21
 8006df4:	e009883a 	mov	r4,fp
 8006df8:	80097dc0 	call	80097dc <_Bfree>
 8006dfc:	883e4926 	beq	r17,zero,8006724 <__alt_data_end+0xfc006724>
 8006e00:	003fad06 	br	8006cb8 <__alt_data_end+0xfc006cb8>
 8006e04:	d9c01117 	ldw	r7,68(sp)
 8006e08:	3801bc26 	beq	r7,zero,80074fc <_dtoa_r+0x1480>
 8006e0c:	10810cc4 	addi	r2,r2,1075
 8006e10:	dd400a17 	ldw	r21,40(sp)
 8006e14:	dd000817 	ldw	r20,32(sp)
 8006e18:	003f0a06 	br	8006a44 <__alt_data_end+0xfc006a44>
 8006e1c:	00800704 	movi	r2,28
 8006e20:	d9000817 	ldw	r4,32(sp)
 8006e24:	a0a9883a 	add	r20,r20,r2
 8006e28:	b0ad883a 	add	r22,r22,r2
 8006e2c:	2089883a 	add	r4,r4,r2
 8006e30:	d9000815 	stw	r4,32(sp)
 8006e34:	003f5106 	br	8006b7c <__alt_data_end+0xfc006b7c>
 8006e38:	d8c00317 	ldw	r3,12(sp)
 8006e3c:	b8c1fc0e 	bge	r23,r3,8007630 <_dtoa_r+0x15b4>
 8006e40:	0027883a 	mov	r19,zero
 8006e44:	b805883a 	mov	r2,r23
 8006e48:	003f3e06 	br	8006b44 <__alt_data_end+0xfc006b44>
 8006e4c:	880b883a 	mov	r5,r17
 8006e50:	e009883a 	mov	r4,fp
 8006e54:	000f883a 	mov	r7,zero
 8006e58:	01800284 	movi	r6,10
 8006e5c:	80098040 	call	8009804 <__multadd>
 8006e60:	d9000c17 	ldw	r4,48(sp)
 8006e64:	1023883a 	mov	r17,r2
 8006e68:	0102040e 	bge	zero,r4,800767c <_dtoa_r+0x1600>
 8006e6c:	d9000615 	stw	r4,24(sp)
 8006e70:	0500050e 	bge	zero,r20,8006e88 <_dtoa_r+0xe0c>
 8006e74:	880b883a 	mov	r5,r17
 8006e78:	a00d883a 	mov	r6,r20
 8006e7c:	e009883a 	mov	r4,fp
 8006e80:	8009f700 	call	8009f70 <__lshift>
 8006e84:	1023883a 	mov	r17,r2
 8006e88:	9801241e 	bne	r19,zero,800731c <_dtoa_r+0x12a0>
 8006e8c:	8829883a 	mov	r20,r17
 8006e90:	d9000617 	ldw	r4,24(sp)
 8006e94:	dcc00717 	ldw	r19,28(sp)
 8006e98:	9480004c 	andi	r18,r18,1
 8006e9c:	20bfffc4 	addi	r2,r4,-1
 8006ea0:	9885883a 	add	r2,r19,r2
 8006ea4:	d8800415 	stw	r2,16(sp)
 8006ea8:	dc800615 	stw	r18,24(sp)
 8006eac:	a80b883a 	mov	r5,r21
 8006eb0:	8009883a 	mov	r4,r16
 8006eb4:	8005e540 	call	8005e54 <quorem>
 8006eb8:	880b883a 	mov	r5,r17
 8006ebc:	8009883a 	mov	r4,r16
 8006ec0:	102f883a 	mov	r23,r2
 8006ec4:	800a0b80 	call	800a0b8 <__mcmp>
 8006ec8:	a80b883a 	mov	r5,r21
 8006ecc:	a00d883a 	mov	r6,r20
 8006ed0:	e009883a 	mov	r4,fp
 8006ed4:	102d883a 	mov	r22,r2
 8006ed8:	800a1180 	call	800a118 <__mdiff>
 8006edc:	1007883a 	mov	r3,r2
 8006ee0:	10800317 	ldw	r2,12(r2)
 8006ee4:	bc800c04 	addi	r18,r23,48
 8006ee8:	180b883a 	mov	r5,r3
 8006eec:	10004e1e 	bne	r2,zero,8007028 <_dtoa_r+0xfac>
 8006ef0:	8009883a 	mov	r4,r16
 8006ef4:	d8c01615 	stw	r3,88(sp)
 8006ef8:	800a0b80 	call	800a0b8 <__mcmp>
 8006efc:	d8c01617 	ldw	r3,88(sp)
 8006f00:	e009883a 	mov	r4,fp
 8006f04:	d8801615 	stw	r2,88(sp)
 8006f08:	180b883a 	mov	r5,r3
 8006f0c:	80097dc0 	call	80097dc <_Bfree>
 8006f10:	d8801617 	ldw	r2,88(sp)
 8006f14:	1000041e 	bne	r2,zero,8006f28 <_dtoa_r+0xeac>
 8006f18:	d9800317 	ldw	r6,12(sp)
 8006f1c:	3000021e 	bne	r6,zero,8006f28 <_dtoa_r+0xeac>
 8006f20:	d8c00617 	ldw	r3,24(sp)
 8006f24:	18003726 	beq	r3,zero,8007004 <_dtoa_r+0xf88>
 8006f28:	b0002016 	blt	r22,zero,8006fac <_dtoa_r+0xf30>
 8006f2c:	b000041e 	bne	r22,zero,8006f40 <_dtoa_r+0xec4>
 8006f30:	d9000317 	ldw	r4,12(sp)
 8006f34:	2000021e 	bne	r4,zero,8006f40 <_dtoa_r+0xec4>
 8006f38:	d8c00617 	ldw	r3,24(sp)
 8006f3c:	18001b26 	beq	r3,zero,8006fac <_dtoa_r+0xf30>
 8006f40:	00810716 	blt	zero,r2,8007360 <_dtoa_r+0x12e4>
 8006f44:	d8c00417 	ldw	r3,16(sp)
 8006f48:	9d800044 	addi	r22,r19,1
 8006f4c:	9c800005 	stb	r18,0(r19)
 8006f50:	b02f883a 	mov	r23,r22
 8006f54:	98c10626 	beq	r19,r3,8007370 <_dtoa_r+0x12f4>
 8006f58:	800b883a 	mov	r5,r16
 8006f5c:	000f883a 	mov	r7,zero
 8006f60:	01800284 	movi	r6,10
 8006f64:	e009883a 	mov	r4,fp
 8006f68:	80098040 	call	8009804 <__multadd>
 8006f6c:	1021883a 	mov	r16,r2
 8006f70:	000f883a 	mov	r7,zero
 8006f74:	01800284 	movi	r6,10
 8006f78:	880b883a 	mov	r5,r17
 8006f7c:	e009883a 	mov	r4,fp
 8006f80:	8d002526 	beq	r17,r20,8007018 <_dtoa_r+0xf9c>
 8006f84:	80098040 	call	8009804 <__multadd>
 8006f88:	a00b883a 	mov	r5,r20
 8006f8c:	000f883a 	mov	r7,zero
 8006f90:	01800284 	movi	r6,10
 8006f94:	e009883a 	mov	r4,fp
 8006f98:	1023883a 	mov	r17,r2
 8006f9c:	80098040 	call	8009804 <__multadd>
 8006fa0:	1029883a 	mov	r20,r2
 8006fa4:	b027883a 	mov	r19,r22
 8006fa8:	003fc006 	br	8006eac <__alt_data_end+0xfc006eac>
 8006fac:	9011883a 	mov	r8,r18
 8006fb0:	00800e0e 	bge	zero,r2,8006fec <_dtoa_r+0xf70>
 8006fb4:	800b883a 	mov	r5,r16
 8006fb8:	01800044 	movi	r6,1
 8006fbc:	e009883a 	mov	r4,fp
 8006fc0:	da001715 	stw	r8,92(sp)
 8006fc4:	8009f700 	call	8009f70 <__lshift>
 8006fc8:	a80b883a 	mov	r5,r21
 8006fcc:	1009883a 	mov	r4,r2
 8006fd0:	1021883a 	mov	r16,r2
 8006fd4:	800a0b80 	call	800a0b8 <__mcmp>
 8006fd8:	da001717 	ldw	r8,92(sp)
 8006fdc:	0081960e 	bge	zero,r2,8007638 <_dtoa_r+0x15bc>
 8006fe0:	00800e44 	movi	r2,57
 8006fe4:	40817026 	beq	r8,r2,80075a8 <_dtoa_r+0x152c>
 8006fe8:	ba000c44 	addi	r8,r23,49
 8006fec:	8825883a 	mov	r18,r17
 8006ff0:	9dc00044 	addi	r23,r19,1
 8006ff4:	9a000005 	stb	r8,0(r19)
 8006ff8:	a023883a 	mov	r17,r20
 8006ffc:	dc000915 	stw	r16,36(sp)
 8007000:	003f2406 	br	8006c94 <__alt_data_end+0xfc006c94>
 8007004:	00800e44 	movi	r2,57
 8007008:	9011883a 	mov	r8,r18
 800700c:	90816626 	beq	r18,r2,80075a8 <_dtoa_r+0x152c>
 8007010:	05bff516 	blt	zero,r22,8006fe8 <__alt_data_end+0xfc006fe8>
 8007014:	003ff506 	br	8006fec <__alt_data_end+0xfc006fec>
 8007018:	80098040 	call	8009804 <__multadd>
 800701c:	1023883a 	mov	r17,r2
 8007020:	1029883a 	mov	r20,r2
 8007024:	003fdf06 	br	8006fa4 <__alt_data_end+0xfc006fa4>
 8007028:	e009883a 	mov	r4,fp
 800702c:	80097dc0 	call	80097dc <_Bfree>
 8007030:	00800044 	movi	r2,1
 8007034:	003fbc06 	br	8006f28 <__alt_data_end+0xfc006f28>
 8007038:	a80b883a 	mov	r5,r21
 800703c:	8009883a 	mov	r4,r16
 8007040:	800a0b80 	call	800a0b8 <__mcmp>
 8007044:	103edb0e 	bge	r2,zero,8006bb4 <__alt_data_end+0xfc006bb4>
 8007048:	800b883a 	mov	r5,r16
 800704c:	000f883a 	mov	r7,zero
 8007050:	01800284 	movi	r6,10
 8007054:	e009883a 	mov	r4,fp
 8007058:	80098040 	call	8009804 <__multadd>
 800705c:	1021883a 	mov	r16,r2
 8007060:	d8800517 	ldw	r2,20(sp)
 8007064:	d8c00b17 	ldw	r3,44(sp)
 8007068:	10bfffc4 	addi	r2,r2,-1
 800706c:	d8800515 	stw	r2,20(sp)
 8007070:	183f761e 	bne	r3,zero,8006e4c <__alt_data_end+0xfc006e4c>
 8007074:	d9000c17 	ldw	r4,48(sp)
 8007078:	0101730e 	bge	zero,r4,8007648 <_dtoa_r+0x15cc>
 800707c:	d9000615 	stw	r4,24(sp)
 8007080:	003ed006 	br	8006bc4 <__alt_data_end+0xfc006bc4>
 8007084:	00800084 	movi	r2,2
 8007088:	3081861e 	bne	r6,r2,80076a4 <_dtoa_r+0x1628>
 800708c:	d8000b15 	stw	zero,44(sp)
 8007090:	003f3c06 	br	8006d84 <__alt_data_end+0xfc006d84>
 8007094:	dc000917 	ldw	r16,36(sp)
 8007098:	003e9206 	br	8006ae4 <__alt_data_end+0xfc006ae4>
 800709c:	d9c00317 	ldw	r7,12(sp)
 80070a0:	00800084 	movi	r2,2
 80070a4:	11fec50e 	bge	r2,r7,8006bbc <__alt_data_end+0xfc006bbc>
 80070a8:	d9000617 	ldw	r4,24(sp)
 80070ac:	20013c1e 	bne	r4,zero,80075a0 <_dtoa_r+0x1524>
 80070b0:	a80b883a 	mov	r5,r21
 80070b4:	000f883a 	mov	r7,zero
 80070b8:	01800144 	movi	r6,5
 80070bc:	e009883a 	mov	r4,fp
 80070c0:	80098040 	call	8009804 <__multadd>
 80070c4:	100b883a 	mov	r5,r2
 80070c8:	8009883a 	mov	r4,r16
 80070cc:	102b883a 	mov	r21,r2
 80070d0:	800a0b80 	call	800a0b8 <__mcmp>
 80070d4:	dc000915 	stw	r16,36(sp)
 80070d8:	00bf410e 	bge	zero,r2,8006de0 <__alt_data_end+0xfc006de0>
 80070dc:	d9c00717 	ldw	r7,28(sp)
 80070e0:	00800c44 	movi	r2,49
 80070e4:	38800005 	stb	r2,0(r7)
 80070e8:	d8800517 	ldw	r2,20(sp)
 80070ec:	3dc00044 	addi	r23,r7,1
 80070f0:	10800044 	addi	r2,r2,1
 80070f4:	d8800515 	stw	r2,20(sp)
 80070f8:	003f3d06 	br	8006df0 <__alt_data_end+0xfc006df0>
 80070fc:	d9800517 	ldw	r6,20(sp)
 8007100:	d9c00717 	ldw	r7,28(sp)
 8007104:	00800c44 	movi	r2,49
 8007108:	31800044 	addi	r6,r6,1
 800710c:	d9800515 	stw	r6,20(sp)
 8007110:	38800005 	stb	r2,0(r7)
 8007114:	003edf06 	br	8006c94 <__alt_data_end+0xfc006c94>
 8007118:	d8000b15 	stw	zero,44(sp)
 800711c:	003c9f06 	br	800639c <__alt_data_end+0xfc00639c>
 8007120:	903e7e1e 	bne	r18,zero,8006b1c <__alt_data_end+0xfc006b1c>
 8007124:	00800434 	movhi	r2,16
 8007128:	10bfffc4 	addi	r2,r2,-1
 800712c:	9884703a 	and	r2,r19,r2
 8007130:	1000ea1e 	bne	r2,zero,80074dc <_dtoa_r+0x1460>
 8007134:	9cdffc2c 	andhi	r19,r19,32752
 8007138:	9800e826 	beq	r19,zero,80074dc <_dtoa_r+0x1460>
 800713c:	d9c00817 	ldw	r7,32(sp)
 8007140:	b5800044 	addi	r22,r22,1
 8007144:	04c00044 	movi	r19,1
 8007148:	39c00044 	addi	r7,r7,1
 800714c:	d9c00815 	stw	r7,32(sp)
 8007150:	d8800d17 	ldw	r2,52(sp)
 8007154:	103e721e 	bne	r2,zero,8006b20 <__alt_data_end+0xfc006b20>
 8007158:	00800044 	movi	r2,1
 800715c:	003e7906 	br	8006b44 <__alt_data_end+0xfc006b44>
 8007160:	8009883a 	mov	r4,r16
 8007164:	80102f00 	call	80102f0 <__floatsidf>
 8007168:	d9800f17 	ldw	r6,60(sp)
 800716c:	d9c01017 	ldw	r7,64(sp)
 8007170:	1009883a 	mov	r4,r2
 8007174:	180b883a 	mov	r5,r3
 8007178:	800f1080 	call	800f108 <__muldf3>
 800717c:	000d883a 	mov	r6,zero
 8007180:	01d00734 	movhi	r7,16412
 8007184:	1009883a 	mov	r4,r2
 8007188:	180b883a 	mov	r5,r3
 800718c:	800dc340 	call	800dc34 <__adddf3>
 8007190:	047f3034 	movhi	r17,64704
 8007194:	1021883a 	mov	r16,r2
 8007198:	1c63883a 	add	r17,r3,r17
 800719c:	d9000f17 	ldw	r4,60(sp)
 80071a0:	d9401017 	ldw	r5,64(sp)
 80071a4:	000d883a 	mov	r6,zero
 80071a8:	01d00534 	movhi	r7,16404
 80071ac:	800f9740 	call	800f974 <__subdf3>
 80071b0:	800d883a 	mov	r6,r16
 80071b4:	880f883a 	mov	r7,r17
 80071b8:	1009883a 	mov	r4,r2
 80071bc:	180b883a 	mov	r5,r3
 80071c0:	102b883a 	mov	r21,r2
 80071c4:	1829883a 	mov	r20,r3
 80071c8:	800ef380 	call	800ef38 <__gedf2>
 80071cc:	00806c16 	blt	zero,r2,8007380 <_dtoa_r+0x1304>
 80071d0:	89e0003c 	xorhi	r7,r17,32768
 80071d4:	800d883a 	mov	r6,r16
 80071d8:	a809883a 	mov	r4,r21
 80071dc:	a00b883a 	mov	r5,r20
 80071e0:	800f0140 	call	800f014 <__ledf2>
 80071e4:	103d7e0e 	bge	r2,zero,80067e0 <__alt_data_end+0xfc0067e0>
 80071e8:	002b883a 	mov	r21,zero
 80071ec:	0023883a 	mov	r17,zero
 80071f0:	003efb06 	br	8006de0 <__alt_data_end+0xfc006de0>
 80071f4:	d8800717 	ldw	r2,28(sp)
 80071f8:	003bd006 	br	800613c <__alt_data_end+0xfc00613c>
 80071fc:	d9000a17 	ldw	r4,40(sp)
 8007200:	d9800d17 	ldw	r6,52(sp)
 8007204:	dd400a15 	stw	r21,40(sp)
 8007208:	a905c83a 	sub	r2,r21,r4
 800720c:	308d883a 	add	r6,r6,r2
 8007210:	d9800d15 	stw	r6,52(sp)
 8007214:	002b883a 	mov	r21,zero
 8007218:	003e0606 	br	8006a34 <__alt_data_end+0xfc006a34>
 800721c:	9023883a 	mov	r17,r18
 8007220:	9829883a 	mov	r20,r19
 8007224:	04000084 	movi	r16,2
 8007228:	003c9206 	br	8006474 <__alt_data_end+0xfc006474>
 800722c:	04000044 	movi	r16,1
 8007230:	dc000c15 	stw	r16,48(sp)
 8007234:	dc000615 	stw	r16,24(sp)
 8007238:	dc002215 	stw	r16,136(sp)
 800723c:	e0001115 	stw	zero,68(fp)
 8007240:	000b883a 	mov	r5,zero
 8007244:	003c6906 	br	80063ec <__alt_data_end+0xfc0063ec>
 8007248:	3021883a 	mov	r16,r6
 800724c:	003ffb06 	br	800723c <__alt_data_end+0xfc00723c>
 8007250:	1000021e 	bne	r2,zero,800725c <_dtoa_r+0x11e0>
 8007254:	4200004c 	andi	r8,r8,1
 8007258:	403e7d1e 	bne	r8,zero,8006c50 <__alt_data_end+0xfc006c50>
 800725c:	01000c04 	movi	r4,48
 8007260:	00000106 	br	8007268 <_dtoa_r+0x11ec>
 8007264:	102f883a 	mov	r23,r2
 8007268:	b8bfffc4 	addi	r2,r23,-1
 800726c:	10c00007 	ldb	r3,0(r2)
 8007270:	193ffc26 	beq	r3,r4,8007264 <__alt_data_end+0xfc007264>
 8007274:	003e8706 	br	8006c94 <__alt_data_end+0xfc006c94>
 8007278:	d8800517 	ldw	r2,20(sp)
 800727c:	00a3c83a 	sub	r17,zero,r2
 8007280:	8800a426 	beq	r17,zero,8007514 <_dtoa_r+0x1498>
 8007284:	888003cc 	andi	r2,r17,15
 8007288:	100490fa 	slli	r2,r2,3
 800728c:	00c200f4 	movhi	r3,2051
 8007290:	18c55304 	addi	r3,r3,5452
 8007294:	1885883a 	add	r2,r3,r2
 8007298:	11800017 	ldw	r6,0(r2)
 800729c:	11c00117 	ldw	r7,4(r2)
 80072a0:	9009883a 	mov	r4,r18
 80072a4:	980b883a 	mov	r5,r19
 80072a8:	8823d13a 	srai	r17,r17,4
 80072ac:	800f1080 	call	800f108 <__muldf3>
 80072b0:	d8800f15 	stw	r2,60(sp)
 80072b4:	d8c01015 	stw	r3,64(sp)
 80072b8:	8800e826 	beq	r17,zero,800765c <_dtoa_r+0x15e0>
 80072bc:	050200f4 	movhi	r20,2051
 80072c0:	a5054904 	addi	r20,r20,5412
 80072c4:	04000084 	movi	r16,2
 80072c8:	8980004c 	andi	r6,r17,1
 80072cc:	1009883a 	mov	r4,r2
 80072d0:	8823d07a 	srai	r17,r17,1
 80072d4:	180b883a 	mov	r5,r3
 80072d8:	30000426 	beq	r6,zero,80072ec <_dtoa_r+0x1270>
 80072dc:	a1800017 	ldw	r6,0(r20)
 80072e0:	a1c00117 	ldw	r7,4(r20)
 80072e4:	84000044 	addi	r16,r16,1
 80072e8:	800f1080 	call	800f108 <__muldf3>
 80072ec:	a5000204 	addi	r20,r20,8
 80072f0:	883ff51e 	bne	r17,zero,80072c8 <__alt_data_end+0xfc0072c8>
 80072f4:	d8800f15 	stw	r2,60(sp)
 80072f8:	d8c01015 	stw	r3,64(sp)
 80072fc:	003c7606 	br	80064d8 <__alt_data_end+0xfc0064d8>
 8007300:	00c00c04 	movi	r3,48
 8007304:	10c00005 	stb	r3,0(r2)
 8007308:	d8c00517 	ldw	r3,20(sp)
 800730c:	bd3fffc3 	ldbu	r20,-1(r23)
 8007310:	18c00044 	addi	r3,r3,1
 8007314:	d8c00515 	stw	r3,20(sp)
 8007318:	003db906 	br	8006a00 <__alt_data_end+0xfc006a00>
 800731c:	89400117 	ldw	r5,4(r17)
 8007320:	e009883a 	mov	r4,fp
 8007324:	80097340 	call	8009734 <_Balloc>
 8007328:	89800417 	ldw	r6,16(r17)
 800732c:	89400304 	addi	r5,r17,12
 8007330:	11000304 	addi	r4,r2,12
 8007334:	31800084 	addi	r6,r6,2
 8007338:	318d883a 	add	r6,r6,r6
 800733c:	318d883a 	add	r6,r6,r6
 8007340:	1027883a 	mov	r19,r2
 8007344:	80093680 	call	8009368 <memcpy>
 8007348:	01800044 	movi	r6,1
 800734c:	980b883a 	mov	r5,r19
 8007350:	e009883a 	mov	r4,fp
 8007354:	8009f700 	call	8009f70 <__lshift>
 8007358:	1029883a 	mov	r20,r2
 800735c:	003ecc06 	br	8006e90 <__alt_data_end+0xfc006e90>
 8007360:	00800e44 	movi	r2,57
 8007364:	90809026 	beq	r18,r2,80075a8 <_dtoa_r+0x152c>
 8007368:	92000044 	addi	r8,r18,1
 800736c:	003f1f06 	br	8006fec <__alt_data_end+0xfc006fec>
 8007370:	9011883a 	mov	r8,r18
 8007374:	8825883a 	mov	r18,r17
 8007378:	a023883a 	mov	r17,r20
 800737c:	003e2906 	br	8006c24 <__alt_data_end+0xfc006c24>
 8007380:	002b883a 	mov	r21,zero
 8007384:	0023883a 	mov	r17,zero
 8007388:	003f5406 	br	80070dc <__alt_data_end+0xfc0070dc>
 800738c:	61bfffc4 	addi	r6,r12,-1
 8007390:	300490fa 	slli	r2,r6,3
 8007394:	00c200f4 	movhi	r3,2051
 8007398:	18c55304 	addi	r3,r3,5452
 800739c:	1885883a 	add	r2,r3,r2
 80073a0:	11000017 	ldw	r4,0(r2)
 80073a4:	11400117 	ldw	r5,4(r2)
 80073a8:	d8800717 	ldw	r2,28(sp)
 80073ac:	880f883a 	mov	r7,r17
 80073b0:	d9801215 	stw	r6,72(sp)
 80073b4:	800d883a 	mov	r6,r16
 80073b8:	db001615 	stw	r12,88(sp)
 80073bc:	15c00044 	addi	r23,r2,1
 80073c0:	800f1080 	call	800f108 <__muldf3>
 80073c4:	d9401017 	ldw	r5,64(sp)
 80073c8:	d9000f17 	ldw	r4,60(sp)
 80073cc:	d8c01515 	stw	r3,84(sp)
 80073d0:	d8801415 	stw	r2,80(sp)
 80073d4:	80102700 	call	8010270 <__fixdfsi>
 80073d8:	1009883a 	mov	r4,r2
 80073dc:	1021883a 	mov	r16,r2
 80073e0:	80102f00 	call	80102f0 <__floatsidf>
 80073e4:	d9000f17 	ldw	r4,60(sp)
 80073e8:	d9401017 	ldw	r5,64(sp)
 80073ec:	100d883a 	mov	r6,r2
 80073f0:	180f883a 	mov	r7,r3
 80073f4:	800f9740 	call	800f974 <__subdf3>
 80073f8:	1829883a 	mov	r20,r3
 80073fc:	d8c00717 	ldw	r3,28(sp)
 8007400:	84000c04 	addi	r16,r16,48
 8007404:	1023883a 	mov	r17,r2
 8007408:	1c000005 	stb	r16,0(r3)
 800740c:	db001617 	ldw	r12,88(sp)
 8007410:	00800044 	movi	r2,1
 8007414:	60802226 	beq	r12,r2,80074a0 <_dtoa_r+0x1424>
 8007418:	d9c00717 	ldw	r7,28(sp)
 800741c:	8805883a 	mov	r2,r17
 8007420:	b82b883a 	mov	r21,r23
 8007424:	3b19883a 	add	r12,r7,r12
 8007428:	6023883a 	mov	r17,r12
 800742c:	a007883a 	mov	r3,r20
 8007430:	dc800f15 	stw	r18,60(sp)
 8007434:	000d883a 	mov	r6,zero
 8007438:	01d00934 	movhi	r7,16420
 800743c:	1009883a 	mov	r4,r2
 8007440:	180b883a 	mov	r5,r3
 8007444:	800f1080 	call	800f108 <__muldf3>
 8007448:	180b883a 	mov	r5,r3
 800744c:	1009883a 	mov	r4,r2
 8007450:	1829883a 	mov	r20,r3
 8007454:	1025883a 	mov	r18,r2
 8007458:	80102700 	call	8010270 <__fixdfsi>
 800745c:	1009883a 	mov	r4,r2
 8007460:	1021883a 	mov	r16,r2
 8007464:	80102f00 	call	80102f0 <__floatsidf>
 8007468:	100d883a 	mov	r6,r2
 800746c:	180f883a 	mov	r7,r3
 8007470:	9009883a 	mov	r4,r18
 8007474:	a00b883a 	mov	r5,r20
 8007478:	84000c04 	addi	r16,r16,48
 800747c:	800f9740 	call	800f974 <__subdf3>
 8007480:	ad400044 	addi	r21,r21,1
 8007484:	ac3fffc5 	stb	r16,-1(r21)
 8007488:	ac7fea1e 	bne	r21,r17,8007434 <__alt_data_end+0xfc007434>
 800748c:	1023883a 	mov	r17,r2
 8007490:	d8801217 	ldw	r2,72(sp)
 8007494:	dc800f17 	ldw	r18,60(sp)
 8007498:	1829883a 	mov	r20,r3
 800749c:	b8af883a 	add	r23,r23,r2
 80074a0:	d9001417 	ldw	r4,80(sp)
 80074a4:	d9401517 	ldw	r5,84(sp)
 80074a8:	000d883a 	mov	r6,zero
 80074ac:	01cff834 	movhi	r7,16352
 80074b0:	800dc340 	call	800dc34 <__adddf3>
 80074b4:	880d883a 	mov	r6,r17
 80074b8:	a00f883a 	mov	r7,r20
 80074bc:	1009883a 	mov	r4,r2
 80074c0:	180b883a 	mov	r5,r3
 80074c4:	800f0140 	call	800f014 <__ledf2>
 80074c8:	10003e0e 	bge	r2,zero,80075c4 <_dtoa_r+0x1548>
 80074cc:	d9001317 	ldw	r4,76(sp)
 80074d0:	bd3fffc3 	ldbu	r20,-1(r23)
 80074d4:	d9000515 	stw	r4,20(sp)
 80074d8:	003d3b06 	br	80069c8 <__alt_data_end+0xfc0069c8>
 80074dc:	0027883a 	mov	r19,zero
 80074e0:	003f1b06 	br	8007150 <__alt_data_end+0xfc007150>
 80074e4:	d8800817 	ldw	r2,32(sp)
 80074e8:	11e9c83a 	sub	r20,r2,r7
 80074ec:	0005883a 	mov	r2,zero
 80074f0:	003d5406 	br	8006a44 <__alt_data_end+0xfc006a44>
 80074f4:	00800044 	movi	r2,1
 80074f8:	003dc706 	br	8006c18 <__alt_data_end+0xfc006c18>
 80074fc:	d8c00217 	ldw	r3,8(sp)
 8007500:	00800d84 	movi	r2,54
 8007504:	dd400a17 	ldw	r21,40(sp)
 8007508:	10c5c83a 	sub	r2,r2,r3
 800750c:	dd000817 	ldw	r20,32(sp)
 8007510:	003d4c06 	br	8006a44 <__alt_data_end+0xfc006a44>
 8007514:	dc800f15 	stw	r18,60(sp)
 8007518:	dcc01015 	stw	r19,64(sp)
 800751c:	04000084 	movi	r16,2
 8007520:	003bed06 	br	80064d8 <__alt_data_end+0xfc0064d8>
 8007524:	d9000617 	ldw	r4,24(sp)
 8007528:	203f0d26 	beq	r4,zero,8007160 <__alt_data_end+0xfc007160>
 800752c:	d9800c17 	ldw	r6,48(sp)
 8007530:	01bcab0e 	bge	zero,r6,80067e0 <__alt_data_end+0xfc0067e0>
 8007534:	d9401017 	ldw	r5,64(sp)
 8007538:	d9000f17 	ldw	r4,60(sp)
 800753c:	000d883a 	mov	r6,zero
 8007540:	01d00934 	movhi	r7,16420
 8007544:	800f1080 	call	800f108 <__muldf3>
 8007548:	81000044 	addi	r4,r16,1
 800754c:	d8800f15 	stw	r2,60(sp)
 8007550:	d8c01015 	stw	r3,64(sp)
 8007554:	80102f00 	call	80102f0 <__floatsidf>
 8007558:	d9800f17 	ldw	r6,60(sp)
 800755c:	d9c01017 	ldw	r7,64(sp)
 8007560:	1009883a 	mov	r4,r2
 8007564:	180b883a 	mov	r5,r3
 8007568:	800f1080 	call	800f108 <__muldf3>
 800756c:	01d00734 	movhi	r7,16412
 8007570:	000d883a 	mov	r6,zero
 8007574:	1009883a 	mov	r4,r2
 8007578:	180b883a 	mov	r5,r3
 800757c:	800dc340 	call	800dc34 <__adddf3>
 8007580:	d9c00517 	ldw	r7,20(sp)
 8007584:	047f3034 	movhi	r17,64704
 8007588:	1021883a 	mov	r16,r2
 800758c:	39ffffc4 	addi	r7,r7,-1
 8007590:	d9c01315 	stw	r7,76(sp)
 8007594:	1c63883a 	add	r17,r3,r17
 8007598:	db000c17 	ldw	r12,48(sp)
 800759c:	003bea06 	br	8006548 <__alt_data_end+0xfc006548>
 80075a0:	dc000915 	stw	r16,36(sp)
 80075a4:	003e0e06 	br	8006de0 <__alt_data_end+0xfc006de0>
 80075a8:	01000e44 	movi	r4,57
 80075ac:	8825883a 	mov	r18,r17
 80075b0:	9dc00044 	addi	r23,r19,1
 80075b4:	99000005 	stb	r4,0(r19)
 80075b8:	a023883a 	mov	r17,r20
 80075bc:	dc000915 	stw	r16,36(sp)
 80075c0:	003da406 	br	8006c54 <__alt_data_end+0xfc006c54>
 80075c4:	d9801417 	ldw	r6,80(sp)
 80075c8:	d9c01517 	ldw	r7,84(sp)
 80075cc:	0009883a 	mov	r4,zero
 80075d0:	014ff834 	movhi	r5,16352
 80075d4:	800f9740 	call	800f974 <__subdf3>
 80075d8:	880d883a 	mov	r6,r17
 80075dc:	a00f883a 	mov	r7,r20
 80075e0:	1009883a 	mov	r4,r2
 80075e4:	180b883a 	mov	r5,r3
 80075e8:	800ef380 	call	800ef38 <__gedf2>
 80075ec:	00bc7c0e 	bge	zero,r2,80067e0 <__alt_data_end+0xfc0067e0>
 80075f0:	01000c04 	movi	r4,48
 80075f4:	00000106 	br	80075fc <_dtoa_r+0x1580>
 80075f8:	102f883a 	mov	r23,r2
 80075fc:	b8bfffc4 	addi	r2,r23,-1
 8007600:	10c00007 	ldb	r3,0(r2)
 8007604:	193ffc26 	beq	r3,r4,80075f8 <__alt_data_end+0xfc0075f8>
 8007608:	d9801317 	ldw	r6,76(sp)
 800760c:	d9800515 	stw	r6,20(sp)
 8007610:	003c4406 	br	8006724 <__alt_data_end+0xfc006724>
 8007614:	d9801317 	ldw	r6,76(sp)
 8007618:	d9800515 	stw	r6,20(sp)
 800761c:	003cea06 	br	80069c8 <__alt_data_end+0xfc0069c8>
 8007620:	dd800f17 	ldw	r22,60(sp)
 8007624:	dcc01017 	ldw	r19,64(sp)
 8007628:	dc801217 	ldw	r18,72(sp)
 800762c:	003c6c06 	br	80067e0 <__alt_data_end+0xfc0067e0>
 8007630:	903e031e 	bne	r18,zero,8006e40 <__alt_data_end+0xfc006e40>
 8007634:	003ebb06 	br	8007124 <__alt_data_end+0xfc007124>
 8007638:	103e6c1e 	bne	r2,zero,8006fec <__alt_data_end+0xfc006fec>
 800763c:	4080004c 	andi	r2,r8,1
 8007640:	103e6a26 	beq	r2,zero,8006fec <__alt_data_end+0xfc006fec>
 8007644:	003e6606 	br	8006fe0 <__alt_data_end+0xfc006fe0>
 8007648:	d8c00317 	ldw	r3,12(sp)
 800764c:	00800084 	movi	r2,2
 8007650:	10c02916 	blt	r2,r3,80076f8 <_dtoa_r+0x167c>
 8007654:	d9000c17 	ldw	r4,48(sp)
 8007658:	003e8806 	br	800707c <__alt_data_end+0xfc00707c>
 800765c:	04000084 	movi	r16,2
 8007660:	003b9d06 	br	80064d8 <__alt_data_end+0xfc0064d8>
 8007664:	d9001317 	ldw	r4,76(sp)
 8007668:	d9000515 	stw	r4,20(sp)
 800766c:	003cd606 	br	80069c8 <__alt_data_end+0xfc0069c8>
 8007670:	d8801317 	ldw	r2,76(sp)
 8007674:	d8800515 	stw	r2,20(sp)
 8007678:	003c2a06 	br	8006724 <__alt_data_end+0xfc006724>
 800767c:	d9800317 	ldw	r6,12(sp)
 8007680:	00800084 	movi	r2,2
 8007684:	11801516 	blt	r2,r6,80076dc <_dtoa_r+0x1660>
 8007688:	d9c00c17 	ldw	r7,48(sp)
 800768c:	d9c00615 	stw	r7,24(sp)
 8007690:	003df706 	br	8006e70 <__alt_data_end+0xfc006e70>
 8007694:	193d3926 	beq	r3,r4,8006b7c <__alt_data_end+0xfc006b7c>
 8007698:	00c00f04 	movi	r3,60
 800769c:	1885c83a 	sub	r2,r3,r2
 80076a0:	003ddf06 	br	8006e20 <__alt_data_end+0xfc006e20>
 80076a4:	e009883a 	mov	r4,fp
 80076a8:	e0001115 	stw	zero,68(fp)
 80076ac:	000b883a 	mov	r5,zero
 80076b0:	80097340 	call	8009734 <_Balloc>
 80076b4:	d8800715 	stw	r2,28(sp)
 80076b8:	d8c00717 	ldw	r3,28(sp)
 80076bc:	00bfffc4 	movi	r2,-1
 80076c0:	01000044 	movi	r4,1
 80076c4:	d8800c15 	stw	r2,48(sp)
 80076c8:	e0c01015 	stw	r3,64(fp)
 80076cc:	d9000b15 	stw	r4,44(sp)
 80076d0:	d8800615 	stw	r2,24(sp)
 80076d4:	d8002215 	stw	zero,136(sp)
 80076d8:	003c4106 	br	80067e0 <__alt_data_end+0xfc0067e0>
 80076dc:	d8c00c17 	ldw	r3,48(sp)
 80076e0:	d8c00615 	stw	r3,24(sp)
 80076e4:	003e7006 	br	80070a8 <__alt_data_end+0xfc0070a8>
 80076e8:	04400044 	movi	r17,1
 80076ec:	003b2006 	br	8006370 <__alt_data_end+0xfc006370>
 80076f0:	000b883a 	mov	r5,zero
 80076f4:	003b3d06 	br	80063ec <__alt_data_end+0xfc0063ec>
 80076f8:	d8800c17 	ldw	r2,48(sp)
 80076fc:	d8800615 	stw	r2,24(sp)
 8007700:	003e6906 	br	80070a8 <__alt_data_end+0xfc0070a8>

08007704 <__sflush_r>:
 8007704:	2880030b 	ldhu	r2,12(r5)
 8007708:	defffb04 	addi	sp,sp,-20
 800770c:	dcc00315 	stw	r19,12(sp)
 8007710:	dc400115 	stw	r17,4(sp)
 8007714:	dfc00415 	stw	ra,16(sp)
 8007718:	dc800215 	stw	r18,8(sp)
 800771c:	dc000015 	stw	r16,0(sp)
 8007720:	10c0020c 	andi	r3,r2,8
 8007724:	2823883a 	mov	r17,r5
 8007728:	2027883a 	mov	r19,r4
 800772c:	1800311e 	bne	r3,zero,80077f4 <__sflush_r+0xf0>
 8007730:	28c00117 	ldw	r3,4(r5)
 8007734:	10820014 	ori	r2,r2,2048
 8007738:	2880030d 	sth	r2,12(r5)
 800773c:	00c04b0e 	bge	zero,r3,800786c <__sflush_r+0x168>
 8007740:	8a000a17 	ldw	r8,40(r17)
 8007744:	40002326 	beq	r8,zero,80077d4 <__sflush_r+0xd0>
 8007748:	9c000017 	ldw	r16,0(r19)
 800774c:	10c4000c 	andi	r3,r2,4096
 8007750:	98000015 	stw	zero,0(r19)
 8007754:	18004826 	beq	r3,zero,8007878 <__sflush_r+0x174>
 8007758:	89801417 	ldw	r6,80(r17)
 800775c:	10c0010c 	andi	r3,r2,4
 8007760:	18000626 	beq	r3,zero,800777c <__sflush_r+0x78>
 8007764:	88c00117 	ldw	r3,4(r17)
 8007768:	88800c17 	ldw	r2,48(r17)
 800776c:	30cdc83a 	sub	r6,r6,r3
 8007770:	10000226 	beq	r2,zero,800777c <__sflush_r+0x78>
 8007774:	88800f17 	ldw	r2,60(r17)
 8007778:	308dc83a 	sub	r6,r6,r2
 800777c:	89400717 	ldw	r5,28(r17)
 8007780:	000f883a 	mov	r7,zero
 8007784:	9809883a 	mov	r4,r19
 8007788:	403ee83a 	callr	r8
 800778c:	00ffffc4 	movi	r3,-1
 8007790:	10c04426 	beq	r2,r3,80078a4 <__sflush_r+0x1a0>
 8007794:	88c0030b 	ldhu	r3,12(r17)
 8007798:	89000417 	ldw	r4,16(r17)
 800779c:	88000115 	stw	zero,4(r17)
 80077a0:	197dffcc 	andi	r5,r3,63487
 80077a4:	8940030d 	sth	r5,12(r17)
 80077a8:	89000015 	stw	r4,0(r17)
 80077ac:	18c4000c 	andi	r3,r3,4096
 80077b0:	18002c1e 	bne	r3,zero,8007864 <__sflush_r+0x160>
 80077b4:	89400c17 	ldw	r5,48(r17)
 80077b8:	9c000015 	stw	r16,0(r19)
 80077bc:	28000526 	beq	r5,zero,80077d4 <__sflush_r+0xd0>
 80077c0:	88801004 	addi	r2,r17,64
 80077c4:	28800226 	beq	r5,r2,80077d0 <__sflush_r+0xcc>
 80077c8:	9809883a 	mov	r4,r19
 80077cc:	8007e800 	call	8007e80 <_free_r>
 80077d0:	88000c15 	stw	zero,48(r17)
 80077d4:	0005883a 	mov	r2,zero
 80077d8:	dfc00417 	ldw	ra,16(sp)
 80077dc:	dcc00317 	ldw	r19,12(sp)
 80077e0:	dc800217 	ldw	r18,8(sp)
 80077e4:	dc400117 	ldw	r17,4(sp)
 80077e8:	dc000017 	ldw	r16,0(sp)
 80077ec:	dec00504 	addi	sp,sp,20
 80077f0:	f800283a 	ret
 80077f4:	2c800417 	ldw	r18,16(r5)
 80077f8:	903ff626 	beq	r18,zero,80077d4 <__alt_data_end+0xfc0077d4>
 80077fc:	2c000017 	ldw	r16,0(r5)
 8007800:	108000cc 	andi	r2,r2,3
 8007804:	2c800015 	stw	r18,0(r5)
 8007808:	84a1c83a 	sub	r16,r16,r18
 800780c:	1000131e 	bne	r2,zero,800785c <__sflush_r+0x158>
 8007810:	28800517 	ldw	r2,20(r5)
 8007814:	88800215 	stw	r2,8(r17)
 8007818:	04000316 	blt	zero,r16,8007828 <__sflush_r+0x124>
 800781c:	003fed06 	br	80077d4 <__alt_data_end+0xfc0077d4>
 8007820:	90a5883a 	add	r18,r18,r2
 8007824:	043feb0e 	bge	zero,r16,80077d4 <__alt_data_end+0xfc0077d4>
 8007828:	88800917 	ldw	r2,36(r17)
 800782c:	89400717 	ldw	r5,28(r17)
 8007830:	800f883a 	mov	r7,r16
 8007834:	900d883a 	mov	r6,r18
 8007838:	9809883a 	mov	r4,r19
 800783c:	103ee83a 	callr	r2
 8007840:	80a1c83a 	sub	r16,r16,r2
 8007844:	00bff616 	blt	zero,r2,8007820 <__alt_data_end+0xfc007820>
 8007848:	88c0030b 	ldhu	r3,12(r17)
 800784c:	00bfffc4 	movi	r2,-1
 8007850:	18c01014 	ori	r3,r3,64
 8007854:	88c0030d 	sth	r3,12(r17)
 8007858:	003fdf06 	br	80077d8 <__alt_data_end+0xfc0077d8>
 800785c:	0005883a 	mov	r2,zero
 8007860:	003fec06 	br	8007814 <__alt_data_end+0xfc007814>
 8007864:	88801415 	stw	r2,80(r17)
 8007868:	003fd206 	br	80077b4 <__alt_data_end+0xfc0077b4>
 800786c:	28c00f17 	ldw	r3,60(r5)
 8007870:	00ffb316 	blt	zero,r3,8007740 <__alt_data_end+0xfc007740>
 8007874:	003fd706 	br	80077d4 <__alt_data_end+0xfc0077d4>
 8007878:	89400717 	ldw	r5,28(r17)
 800787c:	000d883a 	mov	r6,zero
 8007880:	01c00044 	movi	r7,1
 8007884:	9809883a 	mov	r4,r19
 8007888:	403ee83a 	callr	r8
 800788c:	100d883a 	mov	r6,r2
 8007890:	00bfffc4 	movi	r2,-1
 8007894:	30801426 	beq	r6,r2,80078e8 <__sflush_r+0x1e4>
 8007898:	8880030b 	ldhu	r2,12(r17)
 800789c:	8a000a17 	ldw	r8,40(r17)
 80078a0:	003fae06 	br	800775c <__alt_data_end+0xfc00775c>
 80078a4:	98c00017 	ldw	r3,0(r19)
 80078a8:	183fba26 	beq	r3,zero,8007794 <__alt_data_end+0xfc007794>
 80078ac:	01000744 	movi	r4,29
 80078b0:	19000626 	beq	r3,r4,80078cc <__sflush_r+0x1c8>
 80078b4:	01000584 	movi	r4,22
 80078b8:	19000426 	beq	r3,r4,80078cc <__sflush_r+0x1c8>
 80078bc:	88c0030b 	ldhu	r3,12(r17)
 80078c0:	18c01014 	ori	r3,r3,64
 80078c4:	88c0030d 	sth	r3,12(r17)
 80078c8:	003fc306 	br	80077d8 <__alt_data_end+0xfc0077d8>
 80078cc:	8880030b 	ldhu	r2,12(r17)
 80078d0:	88c00417 	ldw	r3,16(r17)
 80078d4:	88000115 	stw	zero,4(r17)
 80078d8:	10bdffcc 	andi	r2,r2,63487
 80078dc:	8880030d 	sth	r2,12(r17)
 80078e0:	88c00015 	stw	r3,0(r17)
 80078e4:	003fb306 	br	80077b4 <__alt_data_end+0xfc0077b4>
 80078e8:	98800017 	ldw	r2,0(r19)
 80078ec:	103fea26 	beq	r2,zero,8007898 <__alt_data_end+0xfc007898>
 80078f0:	00c00744 	movi	r3,29
 80078f4:	10c00226 	beq	r2,r3,8007900 <__sflush_r+0x1fc>
 80078f8:	00c00584 	movi	r3,22
 80078fc:	10c0031e 	bne	r2,r3,800790c <__sflush_r+0x208>
 8007900:	9c000015 	stw	r16,0(r19)
 8007904:	0005883a 	mov	r2,zero
 8007908:	003fb306 	br	80077d8 <__alt_data_end+0xfc0077d8>
 800790c:	88c0030b 	ldhu	r3,12(r17)
 8007910:	3005883a 	mov	r2,r6
 8007914:	18c01014 	ori	r3,r3,64
 8007918:	88c0030d 	sth	r3,12(r17)
 800791c:	003fae06 	br	80077d8 <__alt_data_end+0xfc0077d8>

08007920 <_fflush_r>:
 8007920:	defffd04 	addi	sp,sp,-12
 8007924:	dc000115 	stw	r16,4(sp)
 8007928:	dfc00215 	stw	ra,8(sp)
 800792c:	2021883a 	mov	r16,r4
 8007930:	20000226 	beq	r4,zero,800793c <_fflush_r+0x1c>
 8007934:	20800e17 	ldw	r2,56(r4)
 8007938:	10000c26 	beq	r2,zero,800796c <_fflush_r+0x4c>
 800793c:	2880030f 	ldh	r2,12(r5)
 8007940:	1000051e 	bne	r2,zero,8007958 <_fflush_r+0x38>
 8007944:	0005883a 	mov	r2,zero
 8007948:	dfc00217 	ldw	ra,8(sp)
 800794c:	dc000117 	ldw	r16,4(sp)
 8007950:	dec00304 	addi	sp,sp,12
 8007954:	f800283a 	ret
 8007958:	8009883a 	mov	r4,r16
 800795c:	dfc00217 	ldw	ra,8(sp)
 8007960:	dc000117 	ldw	r16,4(sp)
 8007964:	dec00304 	addi	sp,sp,12
 8007968:	80077041 	jmpi	8007704 <__sflush_r>
 800796c:	d9400015 	stw	r5,0(sp)
 8007970:	8007d0c0 	call	8007d0c <__sinit>
 8007974:	d9400017 	ldw	r5,0(sp)
 8007978:	003ff006 	br	800793c <__alt_data_end+0xfc00793c>

0800797c <fflush>:
 800797c:	20000526 	beq	r4,zero,8007994 <fflush+0x18>
 8007980:	008200f4 	movhi	r2,2051
 8007984:	108d0f04 	addi	r2,r2,13372
 8007988:	200b883a 	mov	r5,r4
 800798c:	11000017 	ldw	r4,0(r2)
 8007990:	80079201 	jmpi	8007920 <_fflush_r>
 8007994:	008200f4 	movhi	r2,2051
 8007998:	108d0e04 	addi	r2,r2,13368
 800799c:	11000017 	ldw	r4,0(r2)
 80079a0:	01420034 	movhi	r5,2048
 80079a4:	295e4804 	addi	r5,r5,31008
 80079a8:	800871c1 	jmpi	800871c <_fwalk_reent>

080079ac <__fp_unlock>:
 80079ac:	0005883a 	mov	r2,zero
 80079b0:	f800283a 	ret

080079b4 <_cleanup_r>:
 80079b4:	01420074 	movhi	r5,2049
 80079b8:	29722e04 	addi	r5,r5,-14152
 80079bc:	800871c1 	jmpi	800871c <_fwalk_reent>

080079c0 <__sinit.part.1>:
 80079c0:	defff704 	addi	sp,sp,-36
 80079c4:	00c20034 	movhi	r3,2048
 80079c8:	dfc00815 	stw	ra,32(sp)
 80079cc:	ddc00715 	stw	r23,28(sp)
 80079d0:	dd800615 	stw	r22,24(sp)
 80079d4:	dd400515 	stw	r21,20(sp)
 80079d8:	dd000415 	stw	r20,16(sp)
 80079dc:	dcc00315 	stw	r19,12(sp)
 80079e0:	dc800215 	stw	r18,8(sp)
 80079e4:	dc400115 	stw	r17,4(sp)
 80079e8:	dc000015 	stw	r16,0(sp)
 80079ec:	18de6d04 	addi	r3,r3,31156
 80079f0:	24000117 	ldw	r16,4(r4)
 80079f4:	20c00f15 	stw	r3,60(r4)
 80079f8:	2080bb04 	addi	r2,r4,748
 80079fc:	00c000c4 	movi	r3,3
 8007a00:	20c0b915 	stw	r3,740(r4)
 8007a04:	2080ba15 	stw	r2,744(r4)
 8007a08:	2000b815 	stw	zero,736(r4)
 8007a0c:	05c00204 	movi	r23,8
 8007a10:	00800104 	movi	r2,4
 8007a14:	2025883a 	mov	r18,r4
 8007a18:	b80d883a 	mov	r6,r23
 8007a1c:	81001704 	addi	r4,r16,92
 8007a20:	000b883a 	mov	r5,zero
 8007a24:	80000015 	stw	zero,0(r16)
 8007a28:	80000115 	stw	zero,4(r16)
 8007a2c:	80000215 	stw	zero,8(r16)
 8007a30:	8080030d 	sth	r2,12(r16)
 8007a34:	80001915 	stw	zero,100(r16)
 8007a38:	8000038d 	sth	zero,14(r16)
 8007a3c:	80000415 	stw	zero,16(r16)
 8007a40:	80000515 	stw	zero,20(r16)
 8007a44:	80000615 	stw	zero,24(r16)
 8007a48:	800960c0 	call	800960c <memset>
 8007a4c:	05820074 	movhi	r22,2049
 8007a50:	94400217 	ldw	r17,8(r18)
 8007a54:	05420074 	movhi	r21,2049
 8007a58:	05020074 	movhi	r20,2049
 8007a5c:	04c20074 	movhi	r19,2049
 8007a60:	b5ab8604 	addi	r22,r22,-20968
 8007a64:	ad6b9d04 	addi	r21,r21,-20876
 8007a68:	a52bbc04 	addi	r20,r20,-20752
 8007a6c:	9cebd304 	addi	r19,r19,-20660
 8007a70:	85800815 	stw	r22,32(r16)
 8007a74:	85400915 	stw	r21,36(r16)
 8007a78:	85000a15 	stw	r20,40(r16)
 8007a7c:	84c00b15 	stw	r19,44(r16)
 8007a80:	84000715 	stw	r16,28(r16)
 8007a84:	00800284 	movi	r2,10
 8007a88:	8880030d 	sth	r2,12(r17)
 8007a8c:	00800044 	movi	r2,1
 8007a90:	b80d883a 	mov	r6,r23
 8007a94:	89001704 	addi	r4,r17,92
 8007a98:	000b883a 	mov	r5,zero
 8007a9c:	88000015 	stw	zero,0(r17)
 8007aa0:	88000115 	stw	zero,4(r17)
 8007aa4:	88000215 	stw	zero,8(r17)
 8007aa8:	88001915 	stw	zero,100(r17)
 8007aac:	8880038d 	sth	r2,14(r17)
 8007ab0:	88000415 	stw	zero,16(r17)
 8007ab4:	88000515 	stw	zero,20(r17)
 8007ab8:	88000615 	stw	zero,24(r17)
 8007abc:	800960c0 	call	800960c <memset>
 8007ac0:	94000317 	ldw	r16,12(r18)
 8007ac4:	00800484 	movi	r2,18
 8007ac8:	8c400715 	stw	r17,28(r17)
 8007acc:	8d800815 	stw	r22,32(r17)
 8007ad0:	8d400915 	stw	r21,36(r17)
 8007ad4:	8d000a15 	stw	r20,40(r17)
 8007ad8:	8cc00b15 	stw	r19,44(r17)
 8007adc:	8080030d 	sth	r2,12(r16)
 8007ae0:	00800084 	movi	r2,2
 8007ae4:	80000015 	stw	zero,0(r16)
 8007ae8:	80000115 	stw	zero,4(r16)
 8007aec:	80000215 	stw	zero,8(r16)
 8007af0:	80001915 	stw	zero,100(r16)
 8007af4:	8080038d 	sth	r2,14(r16)
 8007af8:	80000415 	stw	zero,16(r16)
 8007afc:	80000515 	stw	zero,20(r16)
 8007b00:	80000615 	stw	zero,24(r16)
 8007b04:	b80d883a 	mov	r6,r23
 8007b08:	000b883a 	mov	r5,zero
 8007b0c:	81001704 	addi	r4,r16,92
 8007b10:	800960c0 	call	800960c <memset>
 8007b14:	00800044 	movi	r2,1
 8007b18:	84000715 	stw	r16,28(r16)
 8007b1c:	85800815 	stw	r22,32(r16)
 8007b20:	85400915 	stw	r21,36(r16)
 8007b24:	85000a15 	stw	r20,40(r16)
 8007b28:	84c00b15 	stw	r19,44(r16)
 8007b2c:	90800e15 	stw	r2,56(r18)
 8007b30:	dfc00817 	ldw	ra,32(sp)
 8007b34:	ddc00717 	ldw	r23,28(sp)
 8007b38:	dd800617 	ldw	r22,24(sp)
 8007b3c:	dd400517 	ldw	r21,20(sp)
 8007b40:	dd000417 	ldw	r20,16(sp)
 8007b44:	dcc00317 	ldw	r19,12(sp)
 8007b48:	dc800217 	ldw	r18,8(sp)
 8007b4c:	dc400117 	ldw	r17,4(sp)
 8007b50:	dc000017 	ldw	r16,0(sp)
 8007b54:	dec00904 	addi	sp,sp,36
 8007b58:	f800283a 	ret

08007b5c <__fp_lock>:
 8007b5c:	0005883a 	mov	r2,zero
 8007b60:	f800283a 	ret

08007b64 <__sfmoreglue>:
 8007b64:	defffc04 	addi	sp,sp,-16
 8007b68:	dc800215 	stw	r18,8(sp)
 8007b6c:	2825883a 	mov	r18,r5
 8007b70:	dc000015 	stw	r16,0(sp)
 8007b74:	01401a04 	movi	r5,104
 8007b78:	2021883a 	mov	r16,r4
 8007b7c:	913fffc4 	addi	r4,r18,-1
 8007b80:	dfc00315 	stw	ra,12(sp)
 8007b84:	dc400115 	stw	r17,4(sp)
 8007b88:	800374c0 	call	800374c <__mulsi3>
 8007b8c:	8009883a 	mov	r4,r16
 8007b90:	11401d04 	addi	r5,r2,116
 8007b94:	1023883a 	mov	r17,r2
 8007b98:	8008a780 	call	8008a78 <_malloc_r>
 8007b9c:	1021883a 	mov	r16,r2
 8007ba0:	10000726 	beq	r2,zero,8007bc0 <__sfmoreglue+0x5c>
 8007ba4:	11000304 	addi	r4,r2,12
 8007ba8:	10000015 	stw	zero,0(r2)
 8007bac:	14800115 	stw	r18,4(r2)
 8007bb0:	11000215 	stw	r4,8(r2)
 8007bb4:	89801a04 	addi	r6,r17,104
 8007bb8:	000b883a 	mov	r5,zero
 8007bbc:	800960c0 	call	800960c <memset>
 8007bc0:	8005883a 	mov	r2,r16
 8007bc4:	dfc00317 	ldw	ra,12(sp)
 8007bc8:	dc800217 	ldw	r18,8(sp)
 8007bcc:	dc400117 	ldw	r17,4(sp)
 8007bd0:	dc000017 	ldw	r16,0(sp)
 8007bd4:	dec00404 	addi	sp,sp,16
 8007bd8:	f800283a 	ret

08007bdc <__sfp>:
 8007bdc:	defffb04 	addi	sp,sp,-20
 8007be0:	dc000015 	stw	r16,0(sp)
 8007be4:	040200f4 	movhi	r16,2051
 8007be8:	840d0e04 	addi	r16,r16,13368
 8007bec:	dcc00315 	stw	r19,12(sp)
 8007bf0:	2027883a 	mov	r19,r4
 8007bf4:	81000017 	ldw	r4,0(r16)
 8007bf8:	dfc00415 	stw	ra,16(sp)
 8007bfc:	dc800215 	stw	r18,8(sp)
 8007c00:	20800e17 	ldw	r2,56(r4)
 8007c04:	dc400115 	stw	r17,4(sp)
 8007c08:	1000021e 	bne	r2,zero,8007c14 <__sfp+0x38>
 8007c0c:	80079c00 	call	80079c0 <__sinit.part.1>
 8007c10:	81000017 	ldw	r4,0(r16)
 8007c14:	2480b804 	addi	r18,r4,736
 8007c18:	047fffc4 	movi	r17,-1
 8007c1c:	91000117 	ldw	r4,4(r18)
 8007c20:	94000217 	ldw	r16,8(r18)
 8007c24:	213fffc4 	addi	r4,r4,-1
 8007c28:	20000a16 	blt	r4,zero,8007c54 <__sfp+0x78>
 8007c2c:	8080030f 	ldh	r2,12(r16)
 8007c30:	10000c26 	beq	r2,zero,8007c64 <__sfp+0x88>
 8007c34:	80c01d04 	addi	r3,r16,116
 8007c38:	00000206 	br	8007c44 <__sfp+0x68>
 8007c3c:	18bfe60f 	ldh	r2,-104(r3)
 8007c40:	10000826 	beq	r2,zero,8007c64 <__sfp+0x88>
 8007c44:	213fffc4 	addi	r4,r4,-1
 8007c48:	1c3ffd04 	addi	r16,r3,-12
 8007c4c:	18c01a04 	addi	r3,r3,104
 8007c50:	247ffa1e 	bne	r4,r17,8007c3c <__alt_data_end+0xfc007c3c>
 8007c54:	90800017 	ldw	r2,0(r18)
 8007c58:	10001d26 	beq	r2,zero,8007cd0 <__sfp+0xf4>
 8007c5c:	1025883a 	mov	r18,r2
 8007c60:	003fee06 	br	8007c1c <__alt_data_end+0xfc007c1c>
 8007c64:	00bfffc4 	movi	r2,-1
 8007c68:	8080038d 	sth	r2,14(r16)
 8007c6c:	00800044 	movi	r2,1
 8007c70:	8080030d 	sth	r2,12(r16)
 8007c74:	80001915 	stw	zero,100(r16)
 8007c78:	80000015 	stw	zero,0(r16)
 8007c7c:	80000215 	stw	zero,8(r16)
 8007c80:	80000115 	stw	zero,4(r16)
 8007c84:	80000415 	stw	zero,16(r16)
 8007c88:	80000515 	stw	zero,20(r16)
 8007c8c:	80000615 	stw	zero,24(r16)
 8007c90:	01800204 	movi	r6,8
 8007c94:	000b883a 	mov	r5,zero
 8007c98:	81001704 	addi	r4,r16,92
 8007c9c:	800960c0 	call	800960c <memset>
 8007ca0:	8005883a 	mov	r2,r16
 8007ca4:	80000c15 	stw	zero,48(r16)
 8007ca8:	80000d15 	stw	zero,52(r16)
 8007cac:	80001115 	stw	zero,68(r16)
 8007cb0:	80001215 	stw	zero,72(r16)
 8007cb4:	dfc00417 	ldw	ra,16(sp)
 8007cb8:	dcc00317 	ldw	r19,12(sp)
 8007cbc:	dc800217 	ldw	r18,8(sp)
 8007cc0:	dc400117 	ldw	r17,4(sp)
 8007cc4:	dc000017 	ldw	r16,0(sp)
 8007cc8:	dec00504 	addi	sp,sp,20
 8007ccc:	f800283a 	ret
 8007cd0:	01400104 	movi	r5,4
 8007cd4:	9809883a 	mov	r4,r19
 8007cd8:	8007b640 	call	8007b64 <__sfmoreglue>
 8007cdc:	90800015 	stw	r2,0(r18)
 8007ce0:	103fde1e 	bne	r2,zero,8007c5c <__alt_data_end+0xfc007c5c>
 8007ce4:	00800304 	movi	r2,12
 8007ce8:	98800015 	stw	r2,0(r19)
 8007cec:	0005883a 	mov	r2,zero
 8007cf0:	003ff006 	br	8007cb4 <__alt_data_end+0xfc007cb4>

08007cf4 <_cleanup>:
 8007cf4:	008200f4 	movhi	r2,2051
 8007cf8:	108d0e04 	addi	r2,r2,13368
 8007cfc:	11000017 	ldw	r4,0(r2)
 8007d00:	01420074 	movhi	r5,2049
 8007d04:	29722e04 	addi	r5,r5,-14152
 8007d08:	800871c1 	jmpi	800871c <_fwalk_reent>

08007d0c <__sinit>:
 8007d0c:	20800e17 	ldw	r2,56(r4)
 8007d10:	10000126 	beq	r2,zero,8007d18 <__sinit+0xc>
 8007d14:	f800283a 	ret
 8007d18:	80079c01 	jmpi	80079c0 <__sinit.part.1>

08007d1c <__sfp_lock_acquire>:
 8007d1c:	f800283a 	ret

08007d20 <__sfp_lock_release>:
 8007d20:	f800283a 	ret

08007d24 <__sinit_lock_acquire>:
 8007d24:	f800283a 	ret

08007d28 <__sinit_lock_release>:
 8007d28:	f800283a 	ret

08007d2c <__fp_lock_all>:
 8007d2c:	008200f4 	movhi	r2,2051
 8007d30:	108d0f04 	addi	r2,r2,13372
 8007d34:	11000017 	ldw	r4,0(r2)
 8007d38:	01420034 	movhi	r5,2048
 8007d3c:	295ed704 	addi	r5,r5,31580
 8007d40:	80086581 	jmpi	8008658 <_fwalk>

08007d44 <__fp_unlock_all>:
 8007d44:	008200f4 	movhi	r2,2051
 8007d48:	108d0f04 	addi	r2,r2,13372
 8007d4c:	11000017 	ldw	r4,0(r2)
 8007d50:	01420034 	movhi	r5,2048
 8007d54:	295e6b04 	addi	r5,r5,31148
 8007d58:	80086581 	jmpi	8008658 <_fwalk>

08007d5c <_malloc_trim_r>:
 8007d5c:	defffb04 	addi	sp,sp,-20
 8007d60:	dcc00315 	stw	r19,12(sp)
 8007d64:	04c200f4 	movhi	r19,2051
 8007d68:	dc800215 	stw	r18,8(sp)
 8007d6c:	dc400115 	stw	r17,4(sp)
 8007d70:	dc000015 	stw	r16,0(sp)
 8007d74:	dfc00415 	stw	ra,16(sp)
 8007d78:	2821883a 	mov	r16,r5
 8007d7c:	9cc78504 	addi	r19,r19,7700
 8007d80:	2025883a 	mov	r18,r4
 8007d84:	8010a740 	call	8010a74 <__malloc_lock>
 8007d88:	98800217 	ldw	r2,8(r19)
 8007d8c:	14400117 	ldw	r17,4(r2)
 8007d90:	00bfff04 	movi	r2,-4
 8007d94:	88a2703a 	and	r17,r17,r2
 8007d98:	8c21c83a 	sub	r16,r17,r16
 8007d9c:	8403fbc4 	addi	r16,r16,4079
 8007da0:	8020d33a 	srli	r16,r16,12
 8007da4:	0083ffc4 	movi	r2,4095
 8007da8:	843fffc4 	addi	r16,r16,-1
 8007dac:	8020933a 	slli	r16,r16,12
 8007db0:	1400060e 	bge	r2,r16,8007dcc <_malloc_trim_r+0x70>
 8007db4:	000b883a 	mov	r5,zero
 8007db8:	9009883a 	mov	r4,r18
 8007dbc:	800adc40 	call	800adc4 <_sbrk_r>
 8007dc0:	98c00217 	ldw	r3,8(r19)
 8007dc4:	1c47883a 	add	r3,r3,r17
 8007dc8:	10c00a26 	beq	r2,r3,8007df4 <_malloc_trim_r+0x98>
 8007dcc:	9009883a 	mov	r4,r18
 8007dd0:	8010a980 	call	8010a98 <__malloc_unlock>
 8007dd4:	0005883a 	mov	r2,zero
 8007dd8:	dfc00417 	ldw	ra,16(sp)
 8007ddc:	dcc00317 	ldw	r19,12(sp)
 8007de0:	dc800217 	ldw	r18,8(sp)
 8007de4:	dc400117 	ldw	r17,4(sp)
 8007de8:	dc000017 	ldw	r16,0(sp)
 8007dec:	dec00504 	addi	sp,sp,20
 8007df0:	f800283a 	ret
 8007df4:	040bc83a 	sub	r5,zero,r16
 8007df8:	9009883a 	mov	r4,r18
 8007dfc:	800adc40 	call	800adc4 <_sbrk_r>
 8007e00:	00ffffc4 	movi	r3,-1
 8007e04:	10c00d26 	beq	r2,r3,8007e3c <_malloc_trim_r+0xe0>
 8007e08:	00c200f4 	movhi	r3,2051
 8007e0c:	18d48004 	addi	r3,r3,20992
 8007e10:	18800017 	ldw	r2,0(r3)
 8007e14:	99000217 	ldw	r4,8(r19)
 8007e18:	8c23c83a 	sub	r17,r17,r16
 8007e1c:	8c400054 	ori	r17,r17,1
 8007e20:	1421c83a 	sub	r16,r2,r16
 8007e24:	24400115 	stw	r17,4(r4)
 8007e28:	9009883a 	mov	r4,r18
 8007e2c:	1c000015 	stw	r16,0(r3)
 8007e30:	8010a980 	call	8010a98 <__malloc_unlock>
 8007e34:	00800044 	movi	r2,1
 8007e38:	003fe706 	br	8007dd8 <__alt_data_end+0xfc007dd8>
 8007e3c:	000b883a 	mov	r5,zero
 8007e40:	9009883a 	mov	r4,r18
 8007e44:	800adc40 	call	800adc4 <_sbrk_r>
 8007e48:	99000217 	ldw	r4,8(r19)
 8007e4c:	014003c4 	movi	r5,15
 8007e50:	1107c83a 	sub	r3,r2,r4
 8007e54:	28ffdd0e 	bge	r5,r3,8007dcc <__alt_data_end+0xfc007dcc>
 8007e58:	014200f4 	movhi	r5,2051
 8007e5c:	294d1104 	addi	r5,r5,13380
 8007e60:	29400017 	ldw	r5,0(r5)
 8007e64:	18c00054 	ori	r3,r3,1
 8007e68:	20c00115 	stw	r3,4(r4)
 8007e6c:	00c200f4 	movhi	r3,2051
 8007e70:	1145c83a 	sub	r2,r2,r5
 8007e74:	18d48004 	addi	r3,r3,20992
 8007e78:	18800015 	stw	r2,0(r3)
 8007e7c:	003fd306 	br	8007dcc <__alt_data_end+0xfc007dcc>

08007e80 <_free_r>:
 8007e80:	28004126 	beq	r5,zero,8007f88 <_free_r+0x108>
 8007e84:	defffd04 	addi	sp,sp,-12
 8007e88:	dc400115 	stw	r17,4(sp)
 8007e8c:	dc000015 	stw	r16,0(sp)
 8007e90:	2023883a 	mov	r17,r4
 8007e94:	2821883a 	mov	r16,r5
 8007e98:	dfc00215 	stw	ra,8(sp)
 8007e9c:	8010a740 	call	8010a74 <__malloc_lock>
 8007ea0:	81ffff17 	ldw	r7,-4(r16)
 8007ea4:	00bfff84 	movi	r2,-2
 8007ea8:	010200f4 	movhi	r4,2051
 8007eac:	81bffe04 	addi	r6,r16,-8
 8007eb0:	3884703a 	and	r2,r7,r2
 8007eb4:	21078504 	addi	r4,r4,7700
 8007eb8:	308b883a 	add	r5,r6,r2
 8007ebc:	2a400117 	ldw	r9,4(r5)
 8007ec0:	22000217 	ldw	r8,8(r4)
 8007ec4:	00ffff04 	movi	r3,-4
 8007ec8:	48c6703a 	and	r3,r9,r3
 8007ecc:	2a005726 	beq	r5,r8,800802c <_free_r+0x1ac>
 8007ed0:	28c00115 	stw	r3,4(r5)
 8007ed4:	39c0004c 	andi	r7,r7,1
 8007ed8:	3800091e 	bne	r7,zero,8007f00 <_free_r+0x80>
 8007edc:	823ffe17 	ldw	r8,-8(r16)
 8007ee0:	22400204 	addi	r9,r4,8
 8007ee4:	320dc83a 	sub	r6,r6,r8
 8007ee8:	31c00217 	ldw	r7,8(r6)
 8007eec:	1205883a 	add	r2,r2,r8
 8007ef0:	3a406526 	beq	r7,r9,8008088 <_free_r+0x208>
 8007ef4:	32000317 	ldw	r8,12(r6)
 8007ef8:	3a000315 	stw	r8,12(r7)
 8007efc:	41c00215 	stw	r7,8(r8)
 8007f00:	28cf883a 	add	r7,r5,r3
 8007f04:	39c00117 	ldw	r7,4(r7)
 8007f08:	39c0004c 	andi	r7,r7,1
 8007f0c:	38003a26 	beq	r7,zero,8007ff8 <_free_r+0x178>
 8007f10:	10c00054 	ori	r3,r2,1
 8007f14:	30c00115 	stw	r3,4(r6)
 8007f18:	3087883a 	add	r3,r6,r2
 8007f1c:	18800015 	stw	r2,0(r3)
 8007f20:	00c07fc4 	movi	r3,511
 8007f24:	18801936 	bltu	r3,r2,8007f8c <_free_r+0x10c>
 8007f28:	1004d0fa 	srli	r2,r2,3
 8007f2c:	01c00044 	movi	r7,1
 8007f30:	21400117 	ldw	r5,4(r4)
 8007f34:	10c00044 	addi	r3,r2,1
 8007f38:	18c7883a 	add	r3,r3,r3
 8007f3c:	1005d0ba 	srai	r2,r2,2
 8007f40:	18c7883a 	add	r3,r3,r3
 8007f44:	18c7883a 	add	r3,r3,r3
 8007f48:	1907883a 	add	r3,r3,r4
 8007f4c:	3884983a 	sll	r2,r7,r2
 8007f50:	19c00017 	ldw	r7,0(r3)
 8007f54:	1a3ffe04 	addi	r8,r3,-8
 8007f58:	1144b03a 	or	r2,r2,r5
 8007f5c:	32000315 	stw	r8,12(r6)
 8007f60:	31c00215 	stw	r7,8(r6)
 8007f64:	20800115 	stw	r2,4(r4)
 8007f68:	19800015 	stw	r6,0(r3)
 8007f6c:	39800315 	stw	r6,12(r7)
 8007f70:	8809883a 	mov	r4,r17
 8007f74:	dfc00217 	ldw	ra,8(sp)
 8007f78:	dc400117 	ldw	r17,4(sp)
 8007f7c:	dc000017 	ldw	r16,0(sp)
 8007f80:	dec00304 	addi	sp,sp,12
 8007f84:	8010a981 	jmpi	8010a98 <__malloc_unlock>
 8007f88:	f800283a 	ret
 8007f8c:	100ad27a 	srli	r5,r2,9
 8007f90:	00c00104 	movi	r3,4
 8007f94:	19404a36 	bltu	r3,r5,80080c0 <_free_r+0x240>
 8007f98:	100ad1ba 	srli	r5,r2,6
 8007f9c:	28c00e44 	addi	r3,r5,57
 8007fa0:	18c7883a 	add	r3,r3,r3
 8007fa4:	29400e04 	addi	r5,r5,56
 8007fa8:	18c7883a 	add	r3,r3,r3
 8007fac:	18c7883a 	add	r3,r3,r3
 8007fb0:	1909883a 	add	r4,r3,r4
 8007fb4:	20c00017 	ldw	r3,0(r4)
 8007fb8:	01c200f4 	movhi	r7,2051
 8007fbc:	213ffe04 	addi	r4,r4,-8
 8007fc0:	39c78504 	addi	r7,r7,7700
 8007fc4:	20c04426 	beq	r4,r3,80080d8 <_free_r+0x258>
 8007fc8:	01ffff04 	movi	r7,-4
 8007fcc:	19400117 	ldw	r5,4(r3)
 8007fd0:	29ca703a 	and	r5,r5,r7
 8007fd4:	1140022e 	bgeu	r2,r5,8007fe0 <_free_r+0x160>
 8007fd8:	18c00217 	ldw	r3,8(r3)
 8007fdc:	20fffb1e 	bne	r4,r3,8007fcc <__alt_data_end+0xfc007fcc>
 8007fe0:	19000317 	ldw	r4,12(r3)
 8007fe4:	31000315 	stw	r4,12(r6)
 8007fe8:	30c00215 	stw	r3,8(r6)
 8007fec:	21800215 	stw	r6,8(r4)
 8007ff0:	19800315 	stw	r6,12(r3)
 8007ff4:	003fde06 	br	8007f70 <__alt_data_end+0xfc007f70>
 8007ff8:	29c00217 	ldw	r7,8(r5)
 8007ffc:	10c5883a 	add	r2,r2,r3
 8008000:	00c200f4 	movhi	r3,2051
 8008004:	18c78704 	addi	r3,r3,7708
 8008008:	38c03b26 	beq	r7,r3,80080f8 <_free_r+0x278>
 800800c:	2a000317 	ldw	r8,12(r5)
 8008010:	11400054 	ori	r5,r2,1
 8008014:	3087883a 	add	r3,r6,r2
 8008018:	3a000315 	stw	r8,12(r7)
 800801c:	41c00215 	stw	r7,8(r8)
 8008020:	31400115 	stw	r5,4(r6)
 8008024:	18800015 	stw	r2,0(r3)
 8008028:	003fbd06 	br	8007f20 <__alt_data_end+0xfc007f20>
 800802c:	39c0004c 	andi	r7,r7,1
 8008030:	10c5883a 	add	r2,r2,r3
 8008034:	3800071e 	bne	r7,zero,8008054 <_free_r+0x1d4>
 8008038:	81fffe17 	ldw	r7,-8(r16)
 800803c:	31cdc83a 	sub	r6,r6,r7
 8008040:	30c00317 	ldw	r3,12(r6)
 8008044:	31400217 	ldw	r5,8(r6)
 8008048:	11c5883a 	add	r2,r2,r7
 800804c:	28c00315 	stw	r3,12(r5)
 8008050:	19400215 	stw	r5,8(r3)
 8008054:	10c00054 	ori	r3,r2,1
 8008058:	30c00115 	stw	r3,4(r6)
 800805c:	00c200f4 	movhi	r3,2051
 8008060:	18cd1204 	addi	r3,r3,13384
 8008064:	18c00017 	ldw	r3,0(r3)
 8008068:	21800215 	stw	r6,8(r4)
 800806c:	10ffc036 	bltu	r2,r3,8007f70 <__alt_data_end+0xfc007f70>
 8008070:	008200f4 	movhi	r2,2051
 8008074:	10946d04 	addi	r2,r2,20916
 8008078:	11400017 	ldw	r5,0(r2)
 800807c:	8809883a 	mov	r4,r17
 8008080:	8007d5c0 	call	8007d5c <_malloc_trim_r>
 8008084:	003fba06 	br	8007f70 <__alt_data_end+0xfc007f70>
 8008088:	28c9883a 	add	r4,r5,r3
 800808c:	21000117 	ldw	r4,4(r4)
 8008090:	2100004c 	andi	r4,r4,1
 8008094:	2000391e 	bne	r4,zero,800817c <_free_r+0x2fc>
 8008098:	29c00217 	ldw	r7,8(r5)
 800809c:	29000317 	ldw	r4,12(r5)
 80080a0:	1885883a 	add	r2,r3,r2
 80080a4:	10c00054 	ori	r3,r2,1
 80080a8:	39000315 	stw	r4,12(r7)
 80080ac:	21c00215 	stw	r7,8(r4)
 80080b0:	30c00115 	stw	r3,4(r6)
 80080b4:	308d883a 	add	r6,r6,r2
 80080b8:	30800015 	stw	r2,0(r6)
 80080bc:	003fac06 	br	8007f70 <__alt_data_end+0xfc007f70>
 80080c0:	00c00504 	movi	r3,20
 80080c4:	19401536 	bltu	r3,r5,800811c <_free_r+0x29c>
 80080c8:	28c01704 	addi	r3,r5,92
 80080cc:	18c7883a 	add	r3,r3,r3
 80080d0:	294016c4 	addi	r5,r5,91
 80080d4:	003fb406 	br	8007fa8 <__alt_data_end+0xfc007fa8>
 80080d8:	280bd0ba 	srai	r5,r5,2
 80080dc:	00c00044 	movi	r3,1
 80080e0:	38800117 	ldw	r2,4(r7)
 80080e4:	194a983a 	sll	r5,r3,r5
 80080e8:	2007883a 	mov	r3,r4
 80080ec:	2884b03a 	or	r2,r5,r2
 80080f0:	38800115 	stw	r2,4(r7)
 80080f4:	003fbb06 	br	8007fe4 <__alt_data_end+0xfc007fe4>
 80080f8:	21800515 	stw	r6,20(r4)
 80080fc:	21800415 	stw	r6,16(r4)
 8008100:	10c00054 	ori	r3,r2,1
 8008104:	31c00315 	stw	r7,12(r6)
 8008108:	31c00215 	stw	r7,8(r6)
 800810c:	30c00115 	stw	r3,4(r6)
 8008110:	308d883a 	add	r6,r6,r2
 8008114:	30800015 	stw	r2,0(r6)
 8008118:	003f9506 	br	8007f70 <__alt_data_end+0xfc007f70>
 800811c:	00c01504 	movi	r3,84
 8008120:	19400536 	bltu	r3,r5,8008138 <_free_r+0x2b8>
 8008124:	100ad33a 	srli	r5,r2,12
 8008128:	28c01bc4 	addi	r3,r5,111
 800812c:	18c7883a 	add	r3,r3,r3
 8008130:	29401b84 	addi	r5,r5,110
 8008134:	003f9c06 	br	8007fa8 <__alt_data_end+0xfc007fa8>
 8008138:	00c05504 	movi	r3,340
 800813c:	19400536 	bltu	r3,r5,8008154 <_free_r+0x2d4>
 8008140:	100ad3fa 	srli	r5,r2,15
 8008144:	28c01e04 	addi	r3,r5,120
 8008148:	18c7883a 	add	r3,r3,r3
 800814c:	29401dc4 	addi	r5,r5,119
 8008150:	003f9506 	br	8007fa8 <__alt_data_end+0xfc007fa8>
 8008154:	00c15504 	movi	r3,1364
 8008158:	19400536 	bltu	r3,r5,8008170 <_free_r+0x2f0>
 800815c:	100ad4ba 	srli	r5,r2,18
 8008160:	28c01f44 	addi	r3,r5,125
 8008164:	18c7883a 	add	r3,r3,r3
 8008168:	29401f04 	addi	r5,r5,124
 800816c:	003f8e06 	br	8007fa8 <__alt_data_end+0xfc007fa8>
 8008170:	00c03f84 	movi	r3,254
 8008174:	01401f84 	movi	r5,126
 8008178:	003f8b06 	br	8007fa8 <__alt_data_end+0xfc007fa8>
 800817c:	10c00054 	ori	r3,r2,1
 8008180:	30c00115 	stw	r3,4(r6)
 8008184:	308d883a 	add	r6,r6,r2
 8008188:	30800015 	stw	r2,0(r6)
 800818c:	003f7806 	br	8007f70 <__alt_data_end+0xfc007f70>

08008190 <__sfvwrite_r>:
 8008190:	30800217 	ldw	r2,8(r6)
 8008194:	10006726 	beq	r2,zero,8008334 <__sfvwrite_r+0x1a4>
 8008198:	28c0030b 	ldhu	r3,12(r5)
 800819c:	defff404 	addi	sp,sp,-48
 80081a0:	dd400715 	stw	r21,28(sp)
 80081a4:	dd000615 	stw	r20,24(sp)
 80081a8:	dc000215 	stw	r16,8(sp)
 80081ac:	dfc00b15 	stw	ra,44(sp)
 80081b0:	df000a15 	stw	fp,40(sp)
 80081b4:	ddc00915 	stw	r23,36(sp)
 80081b8:	dd800815 	stw	r22,32(sp)
 80081bc:	dcc00515 	stw	r19,20(sp)
 80081c0:	dc800415 	stw	r18,16(sp)
 80081c4:	dc400315 	stw	r17,12(sp)
 80081c8:	1880020c 	andi	r2,r3,8
 80081cc:	2821883a 	mov	r16,r5
 80081d0:	202b883a 	mov	r21,r4
 80081d4:	3029883a 	mov	r20,r6
 80081d8:	10002726 	beq	r2,zero,8008278 <__sfvwrite_r+0xe8>
 80081dc:	28800417 	ldw	r2,16(r5)
 80081e0:	10002526 	beq	r2,zero,8008278 <__sfvwrite_r+0xe8>
 80081e4:	1880008c 	andi	r2,r3,2
 80081e8:	a4400017 	ldw	r17,0(r20)
 80081ec:	10002a26 	beq	r2,zero,8008298 <__sfvwrite_r+0x108>
 80081f0:	05a00034 	movhi	r22,32768
 80081f4:	0027883a 	mov	r19,zero
 80081f8:	0025883a 	mov	r18,zero
 80081fc:	b5bf0004 	addi	r22,r22,-1024
 8008200:	980d883a 	mov	r6,r19
 8008204:	a809883a 	mov	r4,r21
 8008208:	90004626 	beq	r18,zero,8008324 <__sfvwrite_r+0x194>
 800820c:	900f883a 	mov	r7,r18
 8008210:	b480022e 	bgeu	r22,r18,800821c <__sfvwrite_r+0x8c>
 8008214:	01e00034 	movhi	r7,32768
 8008218:	39ff0004 	addi	r7,r7,-1024
 800821c:	80800917 	ldw	r2,36(r16)
 8008220:	81400717 	ldw	r5,28(r16)
 8008224:	103ee83a 	callr	r2
 8008228:	00805a0e 	bge	zero,r2,8008394 <__sfvwrite_r+0x204>
 800822c:	a0c00217 	ldw	r3,8(r20)
 8008230:	98a7883a 	add	r19,r19,r2
 8008234:	90a5c83a 	sub	r18,r18,r2
 8008238:	1885c83a 	sub	r2,r3,r2
 800823c:	a0800215 	stw	r2,8(r20)
 8008240:	103fef1e 	bne	r2,zero,8008200 <__alt_data_end+0xfc008200>
 8008244:	0005883a 	mov	r2,zero
 8008248:	dfc00b17 	ldw	ra,44(sp)
 800824c:	df000a17 	ldw	fp,40(sp)
 8008250:	ddc00917 	ldw	r23,36(sp)
 8008254:	dd800817 	ldw	r22,32(sp)
 8008258:	dd400717 	ldw	r21,28(sp)
 800825c:	dd000617 	ldw	r20,24(sp)
 8008260:	dcc00517 	ldw	r19,20(sp)
 8008264:	dc800417 	ldw	r18,16(sp)
 8008268:	dc400317 	ldw	r17,12(sp)
 800826c:	dc000217 	ldw	r16,8(sp)
 8008270:	dec00c04 	addi	sp,sp,48
 8008274:	f800283a 	ret
 8008278:	800b883a 	mov	r5,r16
 800827c:	a809883a 	mov	r4,r21
 8008280:	8005d000 	call	8005d00 <__swsetup_r>
 8008284:	1000ee1e 	bne	r2,zero,8008640 <__sfvwrite_r+0x4b0>
 8008288:	80c0030b 	ldhu	r3,12(r16)
 800828c:	a4400017 	ldw	r17,0(r20)
 8008290:	1880008c 	andi	r2,r3,2
 8008294:	103fd61e 	bne	r2,zero,80081f0 <__alt_data_end+0xfc0081f0>
 8008298:	1880004c 	andi	r2,r3,1
 800829c:	1000421e 	bne	r2,zero,80083a8 <__sfvwrite_r+0x218>
 80082a0:	0039883a 	mov	fp,zero
 80082a4:	0025883a 	mov	r18,zero
 80082a8:	90001a26 	beq	r18,zero,8008314 <__sfvwrite_r+0x184>
 80082ac:	1880800c 	andi	r2,r3,512
 80082b0:	84c00217 	ldw	r19,8(r16)
 80082b4:	10002126 	beq	r2,zero,800833c <__sfvwrite_r+0x1ac>
 80082b8:	982f883a 	mov	r23,r19
 80082bc:	94c09636 	bltu	r18,r19,8008518 <__sfvwrite_r+0x388>
 80082c0:	1881200c 	andi	r2,r3,1152
 80082c4:	1000a11e 	bne	r2,zero,800854c <__sfvwrite_r+0x3bc>
 80082c8:	81000017 	ldw	r4,0(r16)
 80082cc:	b80d883a 	mov	r6,r23
 80082d0:	e00b883a 	mov	r5,fp
 80082d4:	80094b00 	call	80094b0 <memmove>
 80082d8:	80c00217 	ldw	r3,8(r16)
 80082dc:	81000017 	ldw	r4,0(r16)
 80082e0:	9005883a 	mov	r2,r18
 80082e4:	1ce7c83a 	sub	r19,r3,r19
 80082e8:	25cf883a 	add	r7,r4,r23
 80082ec:	84c00215 	stw	r19,8(r16)
 80082f0:	81c00015 	stw	r7,0(r16)
 80082f4:	a0c00217 	ldw	r3,8(r20)
 80082f8:	e0b9883a 	add	fp,fp,r2
 80082fc:	90a5c83a 	sub	r18,r18,r2
 8008300:	18a7c83a 	sub	r19,r3,r2
 8008304:	a4c00215 	stw	r19,8(r20)
 8008308:	983fce26 	beq	r19,zero,8008244 <__alt_data_end+0xfc008244>
 800830c:	80c0030b 	ldhu	r3,12(r16)
 8008310:	903fe61e 	bne	r18,zero,80082ac <__alt_data_end+0xfc0082ac>
 8008314:	8f000017 	ldw	fp,0(r17)
 8008318:	8c800117 	ldw	r18,4(r17)
 800831c:	8c400204 	addi	r17,r17,8
 8008320:	003fe106 	br	80082a8 <__alt_data_end+0xfc0082a8>
 8008324:	8cc00017 	ldw	r19,0(r17)
 8008328:	8c800117 	ldw	r18,4(r17)
 800832c:	8c400204 	addi	r17,r17,8
 8008330:	003fb306 	br	8008200 <__alt_data_end+0xfc008200>
 8008334:	0005883a 	mov	r2,zero
 8008338:	f800283a 	ret
 800833c:	81000017 	ldw	r4,0(r16)
 8008340:	80800417 	ldw	r2,16(r16)
 8008344:	11005a36 	bltu	r2,r4,80084b0 <__sfvwrite_r+0x320>
 8008348:	85c00517 	ldw	r23,20(r16)
 800834c:	95c05836 	bltu	r18,r23,80084b0 <__sfvwrite_r+0x320>
 8008350:	00a00034 	movhi	r2,32768
 8008354:	10bfffc4 	addi	r2,r2,-1
 8008358:	9009883a 	mov	r4,r18
 800835c:	1480012e 	bgeu	r2,r18,8008364 <__sfvwrite_r+0x1d4>
 8008360:	1009883a 	mov	r4,r2
 8008364:	b80b883a 	mov	r5,r23
 8008368:	80035980 	call	8003598 <__divsi3>
 800836c:	b80b883a 	mov	r5,r23
 8008370:	1009883a 	mov	r4,r2
 8008374:	800374c0 	call	800374c <__mulsi3>
 8008378:	81400717 	ldw	r5,28(r16)
 800837c:	80c00917 	ldw	r3,36(r16)
 8008380:	100f883a 	mov	r7,r2
 8008384:	e00d883a 	mov	r6,fp
 8008388:	a809883a 	mov	r4,r21
 800838c:	183ee83a 	callr	r3
 8008390:	00bfd816 	blt	zero,r2,80082f4 <__alt_data_end+0xfc0082f4>
 8008394:	8080030b 	ldhu	r2,12(r16)
 8008398:	10801014 	ori	r2,r2,64
 800839c:	8080030d 	sth	r2,12(r16)
 80083a0:	00bfffc4 	movi	r2,-1
 80083a4:	003fa806 	br	8008248 <__alt_data_end+0xfc008248>
 80083a8:	0027883a 	mov	r19,zero
 80083ac:	0011883a 	mov	r8,zero
 80083b0:	0039883a 	mov	fp,zero
 80083b4:	0025883a 	mov	r18,zero
 80083b8:	90001f26 	beq	r18,zero,8008438 <__sfvwrite_r+0x2a8>
 80083bc:	40005a26 	beq	r8,zero,8008528 <__sfvwrite_r+0x398>
 80083c0:	982d883a 	mov	r22,r19
 80083c4:	94c0012e 	bgeu	r18,r19,80083cc <__sfvwrite_r+0x23c>
 80083c8:	902d883a 	mov	r22,r18
 80083cc:	81000017 	ldw	r4,0(r16)
 80083d0:	80800417 	ldw	r2,16(r16)
 80083d4:	b02f883a 	mov	r23,r22
 80083d8:	81c00517 	ldw	r7,20(r16)
 80083dc:	1100032e 	bgeu	r2,r4,80083ec <__sfvwrite_r+0x25c>
 80083e0:	80c00217 	ldw	r3,8(r16)
 80083e4:	38c7883a 	add	r3,r7,r3
 80083e8:	1d801816 	blt	r3,r22,800844c <__sfvwrite_r+0x2bc>
 80083ec:	b1c03e16 	blt	r22,r7,80084e8 <__sfvwrite_r+0x358>
 80083f0:	80800917 	ldw	r2,36(r16)
 80083f4:	81400717 	ldw	r5,28(r16)
 80083f8:	e00d883a 	mov	r6,fp
 80083fc:	da000115 	stw	r8,4(sp)
 8008400:	a809883a 	mov	r4,r21
 8008404:	103ee83a 	callr	r2
 8008408:	102f883a 	mov	r23,r2
 800840c:	da000117 	ldw	r8,4(sp)
 8008410:	00bfe00e 	bge	zero,r2,8008394 <__alt_data_end+0xfc008394>
 8008414:	9de7c83a 	sub	r19,r19,r23
 8008418:	98001f26 	beq	r19,zero,8008498 <__sfvwrite_r+0x308>
 800841c:	a0800217 	ldw	r2,8(r20)
 8008420:	e5f9883a 	add	fp,fp,r23
 8008424:	95e5c83a 	sub	r18,r18,r23
 8008428:	15efc83a 	sub	r23,r2,r23
 800842c:	a5c00215 	stw	r23,8(r20)
 8008430:	b83f8426 	beq	r23,zero,8008244 <__alt_data_end+0xfc008244>
 8008434:	903fe11e 	bne	r18,zero,80083bc <__alt_data_end+0xfc0083bc>
 8008438:	8f000017 	ldw	fp,0(r17)
 800843c:	8c800117 	ldw	r18,4(r17)
 8008440:	0011883a 	mov	r8,zero
 8008444:	8c400204 	addi	r17,r17,8
 8008448:	003fdb06 	br	80083b8 <__alt_data_end+0xfc0083b8>
 800844c:	180d883a 	mov	r6,r3
 8008450:	e00b883a 	mov	r5,fp
 8008454:	da000115 	stw	r8,4(sp)
 8008458:	d8c00015 	stw	r3,0(sp)
 800845c:	80094b00 	call	80094b0 <memmove>
 8008460:	d8c00017 	ldw	r3,0(sp)
 8008464:	80800017 	ldw	r2,0(r16)
 8008468:	800b883a 	mov	r5,r16
 800846c:	a809883a 	mov	r4,r21
 8008470:	10c5883a 	add	r2,r2,r3
 8008474:	80800015 	stw	r2,0(r16)
 8008478:	d8c00015 	stw	r3,0(sp)
 800847c:	80079200 	call	8007920 <_fflush_r>
 8008480:	d8c00017 	ldw	r3,0(sp)
 8008484:	da000117 	ldw	r8,4(sp)
 8008488:	103fc21e 	bne	r2,zero,8008394 <__alt_data_end+0xfc008394>
 800848c:	182f883a 	mov	r23,r3
 8008490:	9de7c83a 	sub	r19,r19,r23
 8008494:	983fe11e 	bne	r19,zero,800841c <__alt_data_end+0xfc00841c>
 8008498:	800b883a 	mov	r5,r16
 800849c:	a809883a 	mov	r4,r21
 80084a0:	80079200 	call	8007920 <_fflush_r>
 80084a4:	103fbb1e 	bne	r2,zero,8008394 <__alt_data_end+0xfc008394>
 80084a8:	0011883a 	mov	r8,zero
 80084ac:	003fdb06 	br	800841c <__alt_data_end+0xfc00841c>
 80084b0:	94c0012e 	bgeu	r18,r19,80084b8 <__sfvwrite_r+0x328>
 80084b4:	9027883a 	mov	r19,r18
 80084b8:	980d883a 	mov	r6,r19
 80084bc:	e00b883a 	mov	r5,fp
 80084c0:	80094b00 	call	80094b0 <memmove>
 80084c4:	80800217 	ldw	r2,8(r16)
 80084c8:	80c00017 	ldw	r3,0(r16)
 80084cc:	14c5c83a 	sub	r2,r2,r19
 80084d0:	1cc7883a 	add	r3,r3,r19
 80084d4:	80800215 	stw	r2,8(r16)
 80084d8:	80c00015 	stw	r3,0(r16)
 80084dc:	10004326 	beq	r2,zero,80085ec <__sfvwrite_r+0x45c>
 80084e0:	9805883a 	mov	r2,r19
 80084e4:	003f8306 	br	80082f4 <__alt_data_end+0xfc0082f4>
 80084e8:	b00d883a 	mov	r6,r22
 80084ec:	e00b883a 	mov	r5,fp
 80084f0:	da000115 	stw	r8,4(sp)
 80084f4:	80094b00 	call	80094b0 <memmove>
 80084f8:	80800217 	ldw	r2,8(r16)
 80084fc:	80c00017 	ldw	r3,0(r16)
 8008500:	da000117 	ldw	r8,4(sp)
 8008504:	1585c83a 	sub	r2,r2,r22
 8008508:	1dad883a 	add	r22,r3,r22
 800850c:	80800215 	stw	r2,8(r16)
 8008510:	85800015 	stw	r22,0(r16)
 8008514:	003fbf06 	br	8008414 <__alt_data_end+0xfc008414>
 8008518:	81000017 	ldw	r4,0(r16)
 800851c:	9027883a 	mov	r19,r18
 8008520:	902f883a 	mov	r23,r18
 8008524:	003f6906 	br	80082cc <__alt_data_end+0xfc0082cc>
 8008528:	900d883a 	mov	r6,r18
 800852c:	01400284 	movi	r5,10
 8008530:	e009883a 	mov	r4,fp
 8008534:	80092840 	call	8009284 <memchr>
 8008538:	10003e26 	beq	r2,zero,8008634 <__sfvwrite_r+0x4a4>
 800853c:	10800044 	addi	r2,r2,1
 8008540:	1727c83a 	sub	r19,r2,fp
 8008544:	02000044 	movi	r8,1
 8008548:	003f9d06 	br	80083c0 <__alt_data_end+0xfc0083c0>
 800854c:	80800517 	ldw	r2,20(r16)
 8008550:	81400417 	ldw	r5,16(r16)
 8008554:	81c00017 	ldw	r7,0(r16)
 8008558:	10a7883a 	add	r19,r2,r2
 800855c:	9885883a 	add	r2,r19,r2
 8008560:	1026d7fa 	srli	r19,r2,31
 8008564:	396dc83a 	sub	r22,r7,r5
 8008568:	b1000044 	addi	r4,r22,1
 800856c:	9885883a 	add	r2,r19,r2
 8008570:	1027d07a 	srai	r19,r2,1
 8008574:	2485883a 	add	r2,r4,r18
 8008578:	980d883a 	mov	r6,r19
 800857c:	9880022e 	bgeu	r19,r2,8008588 <__sfvwrite_r+0x3f8>
 8008580:	1027883a 	mov	r19,r2
 8008584:	100d883a 	mov	r6,r2
 8008588:	18c1000c 	andi	r3,r3,1024
 800858c:	18001c26 	beq	r3,zero,8008600 <__sfvwrite_r+0x470>
 8008590:	300b883a 	mov	r5,r6
 8008594:	a809883a 	mov	r4,r21
 8008598:	8008a780 	call	8008a78 <_malloc_r>
 800859c:	102f883a 	mov	r23,r2
 80085a0:	10002926 	beq	r2,zero,8008648 <__sfvwrite_r+0x4b8>
 80085a4:	81400417 	ldw	r5,16(r16)
 80085a8:	b00d883a 	mov	r6,r22
 80085ac:	1009883a 	mov	r4,r2
 80085b0:	80093680 	call	8009368 <memcpy>
 80085b4:	8080030b 	ldhu	r2,12(r16)
 80085b8:	00fedfc4 	movi	r3,-1153
 80085bc:	10c4703a 	and	r2,r2,r3
 80085c0:	10802014 	ori	r2,r2,128
 80085c4:	8080030d 	sth	r2,12(r16)
 80085c8:	bd89883a 	add	r4,r23,r22
 80085cc:	9d8fc83a 	sub	r7,r19,r22
 80085d0:	85c00415 	stw	r23,16(r16)
 80085d4:	84c00515 	stw	r19,20(r16)
 80085d8:	81000015 	stw	r4,0(r16)
 80085dc:	9027883a 	mov	r19,r18
 80085e0:	81c00215 	stw	r7,8(r16)
 80085e4:	902f883a 	mov	r23,r18
 80085e8:	003f3806 	br	80082cc <__alt_data_end+0xfc0082cc>
 80085ec:	800b883a 	mov	r5,r16
 80085f0:	a809883a 	mov	r4,r21
 80085f4:	80079200 	call	8007920 <_fflush_r>
 80085f8:	103fb926 	beq	r2,zero,80084e0 <__alt_data_end+0xfc0084e0>
 80085fc:	003f6506 	br	8008394 <__alt_data_end+0xfc008394>
 8008600:	a809883a 	mov	r4,r21
 8008604:	800a7ec0 	call	800a7ec <_realloc_r>
 8008608:	102f883a 	mov	r23,r2
 800860c:	103fee1e 	bne	r2,zero,80085c8 <__alt_data_end+0xfc0085c8>
 8008610:	81400417 	ldw	r5,16(r16)
 8008614:	a809883a 	mov	r4,r21
 8008618:	8007e800 	call	8007e80 <_free_r>
 800861c:	8080030b 	ldhu	r2,12(r16)
 8008620:	00ffdfc4 	movi	r3,-129
 8008624:	1884703a 	and	r2,r3,r2
 8008628:	00c00304 	movi	r3,12
 800862c:	a8c00015 	stw	r3,0(r21)
 8008630:	003f5906 	br	8008398 <__alt_data_end+0xfc008398>
 8008634:	94c00044 	addi	r19,r18,1
 8008638:	02000044 	movi	r8,1
 800863c:	003f6006 	br	80083c0 <__alt_data_end+0xfc0083c0>
 8008640:	00bfffc4 	movi	r2,-1
 8008644:	003f0006 	br	8008248 <__alt_data_end+0xfc008248>
 8008648:	00800304 	movi	r2,12
 800864c:	a8800015 	stw	r2,0(r21)
 8008650:	8080030b 	ldhu	r2,12(r16)
 8008654:	003f5006 	br	8008398 <__alt_data_end+0xfc008398>

08008658 <_fwalk>:
 8008658:	defff704 	addi	sp,sp,-36
 800865c:	dd000415 	stw	r20,16(sp)
 8008660:	dfc00815 	stw	ra,32(sp)
 8008664:	ddc00715 	stw	r23,28(sp)
 8008668:	dd800615 	stw	r22,24(sp)
 800866c:	dd400515 	stw	r21,20(sp)
 8008670:	dcc00315 	stw	r19,12(sp)
 8008674:	dc800215 	stw	r18,8(sp)
 8008678:	dc400115 	stw	r17,4(sp)
 800867c:	dc000015 	stw	r16,0(sp)
 8008680:	2500b804 	addi	r20,r4,736
 8008684:	a0002326 	beq	r20,zero,8008714 <_fwalk+0xbc>
 8008688:	282b883a 	mov	r21,r5
 800868c:	002f883a 	mov	r23,zero
 8008690:	05800044 	movi	r22,1
 8008694:	04ffffc4 	movi	r19,-1
 8008698:	a4400117 	ldw	r17,4(r20)
 800869c:	a4800217 	ldw	r18,8(r20)
 80086a0:	8c7fffc4 	addi	r17,r17,-1
 80086a4:	88000d16 	blt	r17,zero,80086dc <_fwalk+0x84>
 80086a8:	94000304 	addi	r16,r18,12
 80086ac:	94800384 	addi	r18,r18,14
 80086b0:	8080000b 	ldhu	r2,0(r16)
 80086b4:	8c7fffc4 	addi	r17,r17,-1
 80086b8:	813ffd04 	addi	r4,r16,-12
 80086bc:	b080042e 	bgeu	r22,r2,80086d0 <_fwalk+0x78>
 80086c0:	9080000f 	ldh	r2,0(r18)
 80086c4:	14c00226 	beq	r2,r19,80086d0 <_fwalk+0x78>
 80086c8:	a83ee83a 	callr	r21
 80086cc:	b8aeb03a 	or	r23,r23,r2
 80086d0:	84001a04 	addi	r16,r16,104
 80086d4:	94801a04 	addi	r18,r18,104
 80086d8:	8cfff51e 	bne	r17,r19,80086b0 <__alt_data_end+0xfc0086b0>
 80086dc:	a5000017 	ldw	r20,0(r20)
 80086e0:	a03fed1e 	bne	r20,zero,8008698 <__alt_data_end+0xfc008698>
 80086e4:	b805883a 	mov	r2,r23
 80086e8:	dfc00817 	ldw	ra,32(sp)
 80086ec:	ddc00717 	ldw	r23,28(sp)
 80086f0:	dd800617 	ldw	r22,24(sp)
 80086f4:	dd400517 	ldw	r21,20(sp)
 80086f8:	dd000417 	ldw	r20,16(sp)
 80086fc:	dcc00317 	ldw	r19,12(sp)
 8008700:	dc800217 	ldw	r18,8(sp)
 8008704:	dc400117 	ldw	r17,4(sp)
 8008708:	dc000017 	ldw	r16,0(sp)
 800870c:	dec00904 	addi	sp,sp,36
 8008710:	f800283a 	ret
 8008714:	002f883a 	mov	r23,zero
 8008718:	003ff206 	br	80086e4 <__alt_data_end+0xfc0086e4>

0800871c <_fwalk_reent>:
 800871c:	defff704 	addi	sp,sp,-36
 8008720:	dd000415 	stw	r20,16(sp)
 8008724:	dfc00815 	stw	ra,32(sp)
 8008728:	ddc00715 	stw	r23,28(sp)
 800872c:	dd800615 	stw	r22,24(sp)
 8008730:	dd400515 	stw	r21,20(sp)
 8008734:	dcc00315 	stw	r19,12(sp)
 8008738:	dc800215 	stw	r18,8(sp)
 800873c:	dc400115 	stw	r17,4(sp)
 8008740:	dc000015 	stw	r16,0(sp)
 8008744:	2500b804 	addi	r20,r4,736
 8008748:	a0002326 	beq	r20,zero,80087d8 <_fwalk_reent+0xbc>
 800874c:	282b883a 	mov	r21,r5
 8008750:	2027883a 	mov	r19,r4
 8008754:	002f883a 	mov	r23,zero
 8008758:	05800044 	movi	r22,1
 800875c:	04bfffc4 	movi	r18,-1
 8008760:	a4400117 	ldw	r17,4(r20)
 8008764:	a4000217 	ldw	r16,8(r20)
 8008768:	8c7fffc4 	addi	r17,r17,-1
 800876c:	88000c16 	blt	r17,zero,80087a0 <_fwalk_reent+0x84>
 8008770:	84000304 	addi	r16,r16,12
 8008774:	8080000b 	ldhu	r2,0(r16)
 8008778:	8c7fffc4 	addi	r17,r17,-1
 800877c:	817ffd04 	addi	r5,r16,-12
 8008780:	b080052e 	bgeu	r22,r2,8008798 <_fwalk_reent+0x7c>
 8008784:	8080008f 	ldh	r2,2(r16)
 8008788:	9809883a 	mov	r4,r19
 800878c:	14800226 	beq	r2,r18,8008798 <_fwalk_reent+0x7c>
 8008790:	a83ee83a 	callr	r21
 8008794:	b8aeb03a 	or	r23,r23,r2
 8008798:	84001a04 	addi	r16,r16,104
 800879c:	8cbff51e 	bne	r17,r18,8008774 <__alt_data_end+0xfc008774>
 80087a0:	a5000017 	ldw	r20,0(r20)
 80087a4:	a03fee1e 	bne	r20,zero,8008760 <__alt_data_end+0xfc008760>
 80087a8:	b805883a 	mov	r2,r23
 80087ac:	dfc00817 	ldw	ra,32(sp)
 80087b0:	ddc00717 	ldw	r23,28(sp)
 80087b4:	dd800617 	ldw	r22,24(sp)
 80087b8:	dd400517 	ldw	r21,20(sp)
 80087bc:	dd000417 	ldw	r20,16(sp)
 80087c0:	dcc00317 	ldw	r19,12(sp)
 80087c4:	dc800217 	ldw	r18,8(sp)
 80087c8:	dc400117 	ldw	r17,4(sp)
 80087cc:	dc000017 	ldw	r16,0(sp)
 80087d0:	dec00904 	addi	sp,sp,36
 80087d4:	f800283a 	ret
 80087d8:	002f883a 	mov	r23,zero
 80087dc:	003ff206 	br	80087a8 <__alt_data_end+0xfc0087a8>

080087e0 <_setlocale_r>:
 80087e0:	30001b26 	beq	r6,zero,8008850 <_setlocale_r+0x70>
 80087e4:	014200f4 	movhi	r5,2051
 80087e8:	defffe04 	addi	sp,sp,-8
 80087ec:	29453904 	addi	r5,r5,5348
 80087f0:	3009883a 	mov	r4,r6
 80087f4:	dc000015 	stw	r16,0(sp)
 80087f8:	dfc00115 	stw	ra,4(sp)
 80087fc:	3021883a 	mov	r16,r6
 8008800:	800af540 	call	800af54 <strcmp>
 8008804:	1000061e 	bne	r2,zero,8008820 <_setlocale_r+0x40>
 8008808:	008200f4 	movhi	r2,2051
 800880c:	10853804 	addi	r2,r2,5344
 8008810:	dfc00117 	ldw	ra,4(sp)
 8008814:	dc000017 	ldw	r16,0(sp)
 8008818:	dec00204 	addi	sp,sp,8
 800881c:	f800283a 	ret
 8008820:	014200f4 	movhi	r5,2051
 8008824:	29453804 	addi	r5,r5,5344
 8008828:	8009883a 	mov	r4,r16
 800882c:	800af540 	call	800af54 <strcmp>
 8008830:	103ff526 	beq	r2,zero,8008808 <__alt_data_end+0xfc008808>
 8008834:	014200f4 	movhi	r5,2051
 8008838:	29452304 	addi	r5,r5,5260
 800883c:	8009883a 	mov	r4,r16
 8008840:	800af540 	call	800af54 <strcmp>
 8008844:	103ff026 	beq	r2,zero,8008808 <__alt_data_end+0xfc008808>
 8008848:	0005883a 	mov	r2,zero
 800884c:	003ff006 	br	8008810 <__alt_data_end+0xfc008810>
 8008850:	008200f4 	movhi	r2,2051
 8008854:	10853804 	addi	r2,r2,5344
 8008858:	f800283a 	ret

0800885c <__locale_charset>:
 800885c:	008200f4 	movhi	r2,2051
 8008860:	10876f04 	addi	r2,r2,7612
 8008864:	f800283a 	ret

08008868 <__locale_mb_cur_max>:
 8008868:	008200f4 	movhi	r2,2051
 800886c:	108d1004 	addi	r2,r2,13376
 8008870:	10800017 	ldw	r2,0(r2)
 8008874:	f800283a 	ret

08008878 <__locale_msgcharset>:
 8008878:	008200f4 	movhi	r2,2051
 800887c:	10876704 	addi	r2,r2,7580
 8008880:	f800283a 	ret

08008884 <__locale_cjk_lang>:
 8008884:	0005883a 	mov	r2,zero
 8008888:	f800283a 	ret

0800888c <_localeconv_r>:
 800888c:	008200f4 	movhi	r2,2051
 8008890:	10877704 	addi	r2,r2,7644
 8008894:	f800283a 	ret

08008898 <setlocale>:
 8008898:	008200f4 	movhi	r2,2051
 800889c:	108d0f04 	addi	r2,r2,13372
 80088a0:	280d883a 	mov	r6,r5
 80088a4:	200b883a 	mov	r5,r4
 80088a8:	11000017 	ldw	r4,0(r2)
 80088ac:	80087e01 	jmpi	80087e0 <_setlocale_r>

080088b0 <localeconv>:
 80088b0:	008200f4 	movhi	r2,2051
 80088b4:	10877704 	addi	r2,r2,7644
 80088b8:	f800283a 	ret

080088bc <__smakebuf_r>:
 80088bc:	2880030b 	ldhu	r2,12(r5)
 80088c0:	10c0008c 	andi	r3,r2,2
 80088c4:	1800411e 	bne	r3,zero,80089cc <__smakebuf_r+0x110>
 80088c8:	deffec04 	addi	sp,sp,-80
 80088cc:	dc000f15 	stw	r16,60(sp)
 80088d0:	2821883a 	mov	r16,r5
 80088d4:	2940038f 	ldh	r5,14(r5)
 80088d8:	dc401015 	stw	r17,64(sp)
 80088dc:	dfc01315 	stw	ra,76(sp)
 80088e0:	dcc01215 	stw	r19,72(sp)
 80088e4:	dc801115 	stw	r18,68(sp)
 80088e8:	2023883a 	mov	r17,r4
 80088ec:	28001c16 	blt	r5,zero,8008960 <__smakebuf_r+0xa4>
 80088f0:	d80d883a 	mov	r6,sp
 80088f4:	800cbc40 	call	800cbc4 <_fstat_r>
 80088f8:	10001816 	blt	r2,zero,800895c <__smakebuf_r+0xa0>
 80088fc:	d8800117 	ldw	r2,4(sp)
 8008900:	00e00014 	movui	r3,32768
 8008904:	10bc000c 	andi	r2,r2,61440
 8008908:	14c80020 	cmpeqi	r19,r2,8192
 800890c:	10c03726 	beq	r2,r3,80089ec <__smakebuf_r+0x130>
 8008910:	80c0030b 	ldhu	r3,12(r16)
 8008914:	18c20014 	ori	r3,r3,2048
 8008918:	80c0030d 	sth	r3,12(r16)
 800891c:	00c80004 	movi	r3,8192
 8008920:	10c0521e 	bne	r2,r3,8008a6c <__smakebuf_r+0x1b0>
 8008924:	8140038f 	ldh	r5,14(r16)
 8008928:	8809883a 	mov	r4,r17
 800892c:	800cc200 	call	800cc20 <_isatty_r>
 8008930:	10004c26 	beq	r2,zero,8008a64 <__smakebuf_r+0x1a8>
 8008934:	8080030b 	ldhu	r2,12(r16)
 8008938:	80c010c4 	addi	r3,r16,67
 800893c:	80c00015 	stw	r3,0(r16)
 8008940:	10800054 	ori	r2,r2,1
 8008944:	8080030d 	sth	r2,12(r16)
 8008948:	00800044 	movi	r2,1
 800894c:	80c00415 	stw	r3,16(r16)
 8008950:	80800515 	stw	r2,20(r16)
 8008954:	04810004 	movi	r18,1024
 8008958:	00000706 	br	8008978 <__smakebuf_r+0xbc>
 800895c:	8080030b 	ldhu	r2,12(r16)
 8008960:	10c0200c 	andi	r3,r2,128
 8008964:	18001f1e 	bne	r3,zero,80089e4 <__smakebuf_r+0x128>
 8008968:	04810004 	movi	r18,1024
 800896c:	10820014 	ori	r2,r2,2048
 8008970:	8080030d 	sth	r2,12(r16)
 8008974:	0027883a 	mov	r19,zero
 8008978:	900b883a 	mov	r5,r18
 800897c:	8809883a 	mov	r4,r17
 8008980:	8008a780 	call	8008a78 <_malloc_r>
 8008984:	10002c26 	beq	r2,zero,8008a38 <__smakebuf_r+0x17c>
 8008988:	80c0030b 	ldhu	r3,12(r16)
 800898c:	01020034 	movhi	r4,2048
 8008990:	211e6d04 	addi	r4,r4,31156
 8008994:	89000f15 	stw	r4,60(r17)
 8008998:	18c02014 	ori	r3,r3,128
 800899c:	80c0030d 	sth	r3,12(r16)
 80089a0:	80800015 	stw	r2,0(r16)
 80089a4:	80800415 	stw	r2,16(r16)
 80089a8:	84800515 	stw	r18,20(r16)
 80089ac:	98001a1e 	bne	r19,zero,8008a18 <__smakebuf_r+0x15c>
 80089b0:	dfc01317 	ldw	ra,76(sp)
 80089b4:	dcc01217 	ldw	r19,72(sp)
 80089b8:	dc801117 	ldw	r18,68(sp)
 80089bc:	dc401017 	ldw	r17,64(sp)
 80089c0:	dc000f17 	ldw	r16,60(sp)
 80089c4:	dec01404 	addi	sp,sp,80
 80089c8:	f800283a 	ret
 80089cc:	288010c4 	addi	r2,r5,67
 80089d0:	28800015 	stw	r2,0(r5)
 80089d4:	28800415 	stw	r2,16(r5)
 80089d8:	00800044 	movi	r2,1
 80089dc:	28800515 	stw	r2,20(r5)
 80089e0:	f800283a 	ret
 80089e4:	04801004 	movi	r18,64
 80089e8:	003fe006 	br	800896c <__alt_data_end+0xfc00896c>
 80089ec:	81000a17 	ldw	r4,40(r16)
 80089f0:	00c20074 	movhi	r3,2049
 80089f4:	18ebbc04 	addi	r3,r3,-20752
 80089f8:	20ffc51e 	bne	r4,r3,8008910 <__alt_data_end+0xfc008910>
 80089fc:	8080030b 	ldhu	r2,12(r16)
 8008a00:	04810004 	movi	r18,1024
 8008a04:	84801315 	stw	r18,76(r16)
 8008a08:	1484b03a 	or	r2,r2,r18
 8008a0c:	8080030d 	sth	r2,12(r16)
 8008a10:	0027883a 	mov	r19,zero
 8008a14:	003fd806 	br	8008978 <__alt_data_end+0xfc008978>
 8008a18:	8140038f 	ldh	r5,14(r16)
 8008a1c:	8809883a 	mov	r4,r17
 8008a20:	800cc200 	call	800cc20 <_isatty_r>
 8008a24:	103fe226 	beq	r2,zero,80089b0 <__alt_data_end+0xfc0089b0>
 8008a28:	8080030b 	ldhu	r2,12(r16)
 8008a2c:	10800054 	ori	r2,r2,1
 8008a30:	8080030d 	sth	r2,12(r16)
 8008a34:	003fde06 	br	80089b0 <__alt_data_end+0xfc0089b0>
 8008a38:	8080030b 	ldhu	r2,12(r16)
 8008a3c:	10c0800c 	andi	r3,r2,512
 8008a40:	183fdb1e 	bne	r3,zero,80089b0 <__alt_data_end+0xfc0089b0>
 8008a44:	10800094 	ori	r2,r2,2
 8008a48:	80c010c4 	addi	r3,r16,67
 8008a4c:	8080030d 	sth	r2,12(r16)
 8008a50:	00800044 	movi	r2,1
 8008a54:	80c00015 	stw	r3,0(r16)
 8008a58:	80c00415 	stw	r3,16(r16)
 8008a5c:	80800515 	stw	r2,20(r16)
 8008a60:	003fd306 	br	80089b0 <__alt_data_end+0xfc0089b0>
 8008a64:	04810004 	movi	r18,1024
 8008a68:	003fc306 	br	8008978 <__alt_data_end+0xfc008978>
 8008a6c:	0027883a 	mov	r19,zero
 8008a70:	04810004 	movi	r18,1024
 8008a74:	003fc006 	br	8008978 <__alt_data_end+0xfc008978>

08008a78 <_malloc_r>:
 8008a78:	defff504 	addi	sp,sp,-44
 8008a7c:	dc800315 	stw	r18,12(sp)
 8008a80:	dfc00a15 	stw	ra,40(sp)
 8008a84:	df000915 	stw	fp,36(sp)
 8008a88:	ddc00815 	stw	r23,32(sp)
 8008a8c:	dd800715 	stw	r22,28(sp)
 8008a90:	dd400615 	stw	r21,24(sp)
 8008a94:	dd000515 	stw	r20,20(sp)
 8008a98:	dcc00415 	stw	r19,16(sp)
 8008a9c:	dc400215 	stw	r17,8(sp)
 8008aa0:	dc000115 	stw	r16,4(sp)
 8008aa4:	288002c4 	addi	r2,r5,11
 8008aa8:	00c00584 	movi	r3,22
 8008aac:	2025883a 	mov	r18,r4
 8008ab0:	18807f2e 	bgeu	r3,r2,8008cb0 <_malloc_r+0x238>
 8008ab4:	047ffe04 	movi	r17,-8
 8008ab8:	1462703a 	and	r17,r2,r17
 8008abc:	8800a316 	blt	r17,zero,8008d4c <_malloc_r+0x2d4>
 8008ac0:	8940a236 	bltu	r17,r5,8008d4c <_malloc_r+0x2d4>
 8008ac4:	8010a740 	call	8010a74 <__malloc_lock>
 8008ac8:	00807dc4 	movi	r2,503
 8008acc:	1441e92e 	bgeu	r2,r17,8009274 <_malloc_r+0x7fc>
 8008ad0:	8804d27a 	srli	r2,r17,9
 8008ad4:	1000a126 	beq	r2,zero,8008d5c <_malloc_r+0x2e4>
 8008ad8:	00c00104 	movi	r3,4
 8008adc:	18811e36 	bltu	r3,r2,8008f58 <_malloc_r+0x4e0>
 8008ae0:	8804d1ba 	srli	r2,r17,6
 8008ae4:	12000e44 	addi	r8,r2,57
 8008ae8:	11c00e04 	addi	r7,r2,56
 8008aec:	4209883a 	add	r4,r8,r8
 8008af0:	04c200f4 	movhi	r19,2051
 8008af4:	2109883a 	add	r4,r4,r4
 8008af8:	9cc78504 	addi	r19,r19,7700
 8008afc:	2109883a 	add	r4,r4,r4
 8008b00:	9909883a 	add	r4,r19,r4
 8008b04:	24000117 	ldw	r16,4(r4)
 8008b08:	213ffe04 	addi	r4,r4,-8
 8008b0c:	24009726 	beq	r4,r16,8008d6c <_malloc_r+0x2f4>
 8008b10:	80800117 	ldw	r2,4(r16)
 8008b14:	01bfff04 	movi	r6,-4
 8008b18:	014003c4 	movi	r5,15
 8008b1c:	1184703a 	and	r2,r2,r6
 8008b20:	1447c83a 	sub	r3,r2,r17
 8008b24:	28c00716 	blt	r5,r3,8008b44 <_malloc_r+0xcc>
 8008b28:	1800920e 	bge	r3,zero,8008d74 <_malloc_r+0x2fc>
 8008b2c:	84000317 	ldw	r16,12(r16)
 8008b30:	24008e26 	beq	r4,r16,8008d6c <_malloc_r+0x2f4>
 8008b34:	80800117 	ldw	r2,4(r16)
 8008b38:	1184703a 	and	r2,r2,r6
 8008b3c:	1447c83a 	sub	r3,r2,r17
 8008b40:	28fff90e 	bge	r5,r3,8008b28 <__alt_data_end+0xfc008b28>
 8008b44:	3809883a 	mov	r4,r7
 8008b48:	018200f4 	movhi	r6,2051
 8008b4c:	9c000417 	ldw	r16,16(r19)
 8008b50:	31878504 	addi	r6,r6,7700
 8008b54:	32000204 	addi	r8,r6,8
 8008b58:	82013426 	beq	r16,r8,800902c <_malloc_r+0x5b4>
 8008b5c:	80c00117 	ldw	r3,4(r16)
 8008b60:	00bfff04 	movi	r2,-4
 8008b64:	188e703a 	and	r7,r3,r2
 8008b68:	3c45c83a 	sub	r2,r7,r17
 8008b6c:	00c003c4 	movi	r3,15
 8008b70:	18811f16 	blt	r3,r2,8008ff0 <_malloc_r+0x578>
 8008b74:	32000515 	stw	r8,20(r6)
 8008b78:	32000415 	stw	r8,16(r6)
 8008b7c:	10007f0e 	bge	r2,zero,8008d7c <_malloc_r+0x304>
 8008b80:	00807fc4 	movi	r2,511
 8008b84:	11c0fd36 	bltu	r2,r7,8008f7c <_malloc_r+0x504>
 8008b88:	3806d0fa 	srli	r3,r7,3
 8008b8c:	01c00044 	movi	r7,1
 8008b90:	30800117 	ldw	r2,4(r6)
 8008b94:	19400044 	addi	r5,r3,1
 8008b98:	294b883a 	add	r5,r5,r5
 8008b9c:	1807d0ba 	srai	r3,r3,2
 8008ba0:	294b883a 	add	r5,r5,r5
 8008ba4:	294b883a 	add	r5,r5,r5
 8008ba8:	298b883a 	add	r5,r5,r6
 8008bac:	38c6983a 	sll	r3,r7,r3
 8008bb0:	29c00017 	ldw	r7,0(r5)
 8008bb4:	2a7ffe04 	addi	r9,r5,-8
 8008bb8:	1886b03a 	or	r3,r3,r2
 8008bbc:	82400315 	stw	r9,12(r16)
 8008bc0:	81c00215 	stw	r7,8(r16)
 8008bc4:	30c00115 	stw	r3,4(r6)
 8008bc8:	2c000015 	stw	r16,0(r5)
 8008bcc:	3c000315 	stw	r16,12(r7)
 8008bd0:	2005d0ba 	srai	r2,r4,2
 8008bd4:	01400044 	movi	r5,1
 8008bd8:	288a983a 	sll	r5,r5,r2
 8008bdc:	19406f36 	bltu	r3,r5,8008d9c <_malloc_r+0x324>
 8008be0:	28c4703a 	and	r2,r5,r3
 8008be4:	10000a1e 	bne	r2,zero,8008c10 <_malloc_r+0x198>
 8008be8:	00bfff04 	movi	r2,-4
 8008bec:	294b883a 	add	r5,r5,r5
 8008bf0:	2088703a 	and	r4,r4,r2
 8008bf4:	28c4703a 	and	r2,r5,r3
 8008bf8:	21000104 	addi	r4,r4,4
 8008bfc:	1000041e 	bne	r2,zero,8008c10 <_malloc_r+0x198>
 8008c00:	294b883a 	add	r5,r5,r5
 8008c04:	28c4703a 	and	r2,r5,r3
 8008c08:	21000104 	addi	r4,r4,4
 8008c0c:	103ffc26 	beq	r2,zero,8008c00 <__alt_data_end+0xfc008c00>
 8008c10:	02bfff04 	movi	r10,-4
 8008c14:	024003c4 	movi	r9,15
 8008c18:	21800044 	addi	r6,r4,1
 8008c1c:	318d883a 	add	r6,r6,r6
 8008c20:	318d883a 	add	r6,r6,r6
 8008c24:	318d883a 	add	r6,r6,r6
 8008c28:	998d883a 	add	r6,r19,r6
 8008c2c:	333ffe04 	addi	r12,r6,-8
 8008c30:	2017883a 	mov	r11,r4
 8008c34:	31800104 	addi	r6,r6,4
 8008c38:	34000017 	ldw	r16,0(r6)
 8008c3c:	31fffd04 	addi	r7,r6,-12
 8008c40:	81c0041e 	bne	r16,r7,8008c54 <_malloc_r+0x1dc>
 8008c44:	0000fb06 	br	8009034 <_malloc_r+0x5bc>
 8008c48:	1801030e 	bge	r3,zero,8009058 <_malloc_r+0x5e0>
 8008c4c:	84000317 	ldw	r16,12(r16)
 8008c50:	81c0f826 	beq	r16,r7,8009034 <_malloc_r+0x5bc>
 8008c54:	80800117 	ldw	r2,4(r16)
 8008c58:	1284703a 	and	r2,r2,r10
 8008c5c:	1447c83a 	sub	r3,r2,r17
 8008c60:	48fff90e 	bge	r9,r3,8008c48 <__alt_data_end+0xfc008c48>
 8008c64:	80800317 	ldw	r2,12(r16)
 8008c68:	81000217 	ldw	r4,8(r16)
 8008c6c:	89400054 	ori	r5,r17,1
 8008c70:	81400115 	stw	r5,4(r16)
 8008c74:	20800315 	stw	r2,12(r4)
 8008c78:	11000215 	stw	r4,8(r2)
 8008c7c:	8463883a 	add	r17,r16,r17
 8008c80:	9c400515 	stw	r17,20(r19)
 8008c84:	9c400415 	stw	r17,16(r19)
 8008c88:	18800054 	ori	r2,r3,1
 8008c8c:	88800115 	stw	r2,4(r17)
 8008c90:	8a000315 	stw	r8,12(r17)
 8008c94:	8a000215 	stw	r8,8(r17)
 8008c98:	88e3883a 	add	r17,r17,r3
 8008c9c:	88c00015 	stw	r3,0(r17)
 8008ca0:	9009883a 	mov	r4,r18
 8008ca4:	8010a980 	call	8010a98 <__malloc_unlock>
 8008ca8:	80800204 	addi	r2,r16,8
 8008cac:	00001b06 	br	8008d1c <_malloc_r+0x2a4>
 8008cb0:	04400404 	movi	r17,16
 8008cb4:	89402536 	bltu	r17,r5,8008d4c <_malloc_r+0x2d4>
 8008cb8:	8010a740 	call	8010a74 <__malloc_lock>
 8008cbc:	00800184 	movi	r2,6
 8008cc0:	01000084 	movi	r4,2
 8008cc4:	04c200f4 	movhi	r19,2051
 8008cc8:	1085883a 	add	r2,r2,r2
 8008ccc:	9cc78504 	addi	r19,r19,7700
 8008cd0:	1085883a 	add	r2,r2,r2
 8008cd4:	9885883a 	add	r2,r19,r2
 8008cd8:	14000117 	ldw	r16,4(r2)
 8008cdc:	10fffe04 	addi	r3,r2,-8
 8008ce0:	80c0d926 	beq	r16,r3,8009048 <_malloc_r+0x5d0>
 8008ce4:	80c00117 	ldw	r3,4(r16)
 8008ce8:	81000317 	ldw	r4,12(r16)
 8008cec:	00bfff04 	movi	r2,-4
 8008cf0:	1884703a 	and	r2,r3,r2
 8008cf4:	81400217 	ldw	r5,8(r16)
 8008cf8:	8085883a 	add	r2,r16,r2
 8008cfc:	10c00117 	ldw	r3,4(r2)
 8008d00:	29000315 	stw	r4,12(r5)
 8008d04:	21400215 	stw	r5,8(r4)
 8008d08:	18c00054 	ori	r3,r3,1
 8008d0c:	10c00115 	stw	r3,4(r2)
 8008d10:	9009883a 	mov	r4,r18
 8008d14:	8010a980 	call	8010a98 <__malloc_unlock>
 8008d18:	80800204 	addi	r2,r16,8
 8008d1c:	dfc00a17 	ldw	ra,40(sp)
 8008d20:	df000917 	ldw	fp,36(sp)
 8008d24:	ddc00817 	ldw	r23,32(sp)
 8008d28:	dd800717 	ldw	r22,28(sp)
 8008d2c:	dd400617 	ldw	r21,24(sp)
 8008d30:	dd000517 	ldw	r20,20(sp)
 8008d34:	dcc00417 	ldw	r19,16(sp)
 8008d38:	dc800317 	ldw	r18,12(sp)
 8008d3c:	dc400217 	ldw	r17,8(sp)
 8008d40:	dc000117 	ldw	r16,4(sp)
 8008d44:	dec00b04 	addi	sp,sp,44
 8008d48:	f800283a 	ret
 8008d4c:	00800304 	movi	r2,12
 8008d50:	90800015 	stw	r2,0(r18)
 8008d54:	0005883a 	mov	r2,zero
 8008d58:	003ff006 	br	8008d1c <__alt_data_end+0xfc008d1c>
 8008d5c:	01002004 	movi	r4,128
 8008d60:	02001004 	movi	r8,64
 8008d64:	01c00fc4 	movi	r7,63
 8008d68:	003f6106 	br	8008af0 <__alt_data_end+0xfc008af0>
 8008d6c:	4009883a 	mov	r4,r8
 8008d70:	003f7506 	br	8008b48 <__alt_data_end+0xfc008b48>
 8008d74:	81000317 	ldw	r4,12(r16)
 8008d78:	003fde06 	br	8008cf4 <__alt_data_end+0xfc008cf4>
 8008d7c:	81c5883a 	add	r2,r16,r7
 8008d80:	11400117 	ldw	r5,4(r2)
 8008d84:	9009883a 	mov	r4,r18
 8008d88:	29400054 	ori	r5,r5,1
 8008d8c:	11400115 	stw	r5,4(r2)
 8008d90:	8010a980 	call	8010a98 <__malloc_unlock>
 8008d94:	80800204 	addi	r2,r16,8
 8008d98:	003fe006 	br	8008d1c <__alt_data_end+0xfc008d1c>
 8008d9c:	9c000217 	ldw	r16,8(r19)
 8008da0:	00bfff04 	movi	r2,-4
 8008da4:	85800117 	ldw	r22,4(r16)
 8008da8:	b0ac703a 	and	r22,r22,r2
 8008dac:	b4400336 	bltu	r22,r17,8008dbc <_malloc_r+0x344>
 8008db0:	b445c83a 	sub	r2,r22,r17
 8008db4:	00c003c4 	movi	r3,15
 8008db8:	18805d16 	blt	r3,r2,8008f30 <_malloc_r+0x4b8>
 8008dbc:	05c200f4 	movhi	r23,2051
 8008dc0:	008200f4 	movhi	r2,2051
 8008dc4:	10946d04 	addi	r2,r2,20916
 8008dc8:	bdcd1104 	addi	r23,r23,13380
 8008dcc:	15400017 	ldw	r21,0(r2)
 8008dd0:	b8c00017 	ldw	r3,0(r23)
 8008dd4:	00bfffc4 	movi	r2,-1
 8008dd8:	858d883a 	add	r6,r16,r22
 8008ddc:	8d6b883a 	add	r21,r17,r21
 8008de0:	1880ea26 	beq	r3,r2,800918c <_malloc_r+0x714>
 8008de4:	ad4403c4 	addi	r21,r21,4111
 8008de8:	00bc0004 	movi	r2,-4096
 8008dec:	a8aa703a 	and	r21,r21,r2
 8008df0:	a80b883a 	mov	r5,r21
 8008df4:	9009883a 	mov	r4,r18
 8008df8:	d9800015 	stw	r6,0(sp)
 8008dfc:	800adc40 	call	800adc4 <_sbrk_r>
 8008e00:	1029883a 	mov	r20,r2
 8008e04:	00bfffc4 	movi	r2,-1
 8008e08:	d9800017 	ldw	r6,0(sp)
 8008e0c:	a080e826 	beq	r20,r2,80091b0 <_malloc_r+0x738>
 8008e10:	a180a636 	bltu	r20,r6,80090ac <_malloc_r+0x634>
 8008e14:	070200f4 	movhi	fp,2051
 8008e18:	e7148004 	addi	fp,fp,20992
 8008e1c:	e0800017 	ldw	r2,0(fp)
 8008e20:	a887883a 	add	r3,r21,r2
 8008e24:	e0c00015 	stw	r3,0(fp)
 8008e28:	3500e626 	beq	r6,r20,80091c4 <_malloc_r+0x74c>
 8008e2c:	b9000017 	ldw	r4,0(r23)
 8008e30:	00bfffc4 	movi	r2,-1
 8008e34:	2080ee26 	beq	r4,r2,80091f0 <_malloc_r+0x778>
 8008e38:	a185c83a 	sub	r2,r20,r6
 8008e3c:	10c5883a 	add	r2,r2,r3
 8008e40:	e0800015 	stw	r2,0(fp)
 8008e44:	a0c001cc 	andi	r3,r20,7
 8008e48:	1800bc26 	beq	r3,zero,800913c <_malloc_r+0x6c4>
 8008e4c:	a0e9c83a 	sub	r20,r20,r3
 8008e50:	00840204 	movi	r2,4104
 8008e54:	a5000204 	addi	r20,r20,8
 8008e58:	10c7c83a 	sub	r3,r2,r3
 8008e5c:	a545883a 	add	r2,r20,r21
 8008e60:	1083ffcc 	andi	r2,r2,4095
 8008e64:	18abc83a 	sub	r21,r3,r2
 8008e68:	a80b883a 	mov	r5,r21
 8008e6c:	9009883a 	mov	r4,r18
 8008e70:	800adc40 	call	800adc4 <_sbrk_r>
 8008e74:	00ffffc4 	movi	r3,-1
 8008e78:	10c0e126 	beq	r2,r3,8009200 <_malloc_r+0x788>
 8008e7c:	1505c83a 	sub	r2,r2,r20
 8008e80:	1545883a 	add	r2,r2,r21
 8008e84:	10800054 	ori	r2,r2,1
 8008e88:	e0c00017 	ldw	r3,0(fp)
 8008e8c:	9d000215 	stw	r20,8(r19)
 8008e90:	a0800115 	stw	r2,4(r20)
 8008e94:	a8c7883a 	add	r3,r21,r3
 8008e98:	e0c00015 	stw	r3,0(fp)
 8008e9c:	84c00e26 	beq	r16,r19,8008ed8 <_malloc_r+0x460>
 8008ea0:	018003c4 	movi	r6,15
 8008ea4:	3580a72e 	bgeu	r6,r22,8009144 <_malloc_r+0x6cc>
 8008ea8:	81400117 	ldw	r5,4(r16)
 8008eac:	013ffe04 	movi	r4,-8
 8008eb0:	b0bffd04 	addi	r2,r22,-12
 8008eb4:	1104703a 	and	r2,r2,r4
 8008eb8:	2900004c 	andi	r4,r5,1
 8008ebc:	2088b03a 	or	r4,r4,r2
 8008ec0:	81000115 	stw	r4,4(r16)
 8008ec4:	01400144 	movi	r5,5
 8008ec8:	8089883a 	add	r4,r16,r2
 8008ecc:	21400115 	stw	r5,4(r4)
 8008ed0:	21400215 	stw	r5,8(r4)
 8008ed4:	3080cd36 	bltu	r6,r2,800920c <_malloc_r+0x794>
 8008ed8:	008200f4 	movhi	r2,2051
 8008edc:	10946c04 	addi	r2,r2,20912
 8008ee0:	11000017 	ldw	r4,0(r2)
 8008ee4:	20c0012e 	bgeu	r4,r3,8008eec <_malloc_r+0x474>
 8008ee8:	10c00015 	stw	r3,0(r2)
 8008eec:	008200f4 	movhi	r2,2051
 8008ef0:	10946b04 	addi	r2,r2,20908
 8008ef4:	11000017 	ldw	r4,0(r2)
 8008ef8:	9c000217 	ldw	r16,8(r19)
 8008efc:	20c0012e 	bgeu	r4,r3,8008f04 <_malloc_r+0x48c>
 8008f00:	10c00015 	stw	r3,0(r2)
 8008f04:	80c00117 	ldw	r3,4(r16)
 8008f08:	00bfff04 	movi	r2,-4
 8008f0c:	1886703a 	and	r3,r3,r2
 8008f10:	1c45c83a 	sub	r2,r3,r17
 8008f14:	1c400236 	bltu	r3,r17,8008f20 <_malloc_r+0x4a8>
 8008f18:	00c003c4 	movi	r3,15
 8008f1c:	18800416 	blt	r3,r2,8008f30 <_malloc_r+0x4b8>
 8008f20:	9009883a 	mov	r4,r18
 8008f24:	8010a980 	call	8010a98 <__malloc_unlock>
 8008f28:	0005883a 	mov	r2,zero
 8008f2c:	003f7b06 	br	8008d1c <__alt_data_end+0xfc008d1c>
 8008f30:	88c00054 	ori	r3,r17,1
 8008f34:	80c00115 	stw	r3,4(r16)
 8008f38:	8463883a 	add	r17,r16,r17
 8008f3c:	10800054 	ori	r2,r2,1
 8008f40:	9c400215 	stw	r17,8(r19)
 8008f44:	88800115 	stw	r2,4(r17)
 8008f48:	9009883a 	mov	r4,r18
 8008f4c:	8010a980 	call	8010a98 <__malloc_unlock>
 8008f50:	80800204 	addi	r2,r16,8
 8008f54:	003f7106 	br	8008d1c <__alt_data_end+0xfc008d1c>
 8008f58:	00c00504 	movi	r3,20
 8008f5c:	18804a2e 	bgeu	r3,r2,8009088 <_malloc_r+0x610>
 8008f60:	00c01504 	movi	r3,84
 8008f64:	18806e36 	bltu	r3,r2,8009120 <_malloc_r+0x6a8>
 8008f68:	8804d33a 	srli	r2,r17,12
 8008f6c:	12001bc4 	addi	r8,r2,111
 8008f70:	11c01b84 	addi	r7,r2,110
 8008f74:	4209883a 	add	r4,r8,r8
 8008f78:	003edd06 	br	8008af0 <__alt_data_end+0xfc008af0>
 8008f7c:	3804d27a 	srli	r2,r7,9
 8008f80:	00c00104 	movi	r3,4
 8008f84:	1880442e 	bgeu	r3,r2,8009098 <_malloc_r+0x620>
 8008f88:	00c00504 	movi	r3,20
 8008f8c:	18808136 	bltu	r3,r2,8009194 <_malloc_r+0x71c>
 8008f90:	11401704 	addi	r5,r2,92
 8008f94:	10c016c4 	addi	r3,r2,91
 8008f98:	294b883a 	add	r5,r5,r5
 8008f9c:	294b883a 	add	r5,r5,r5
 8008fa0:	294b883a 	add	r5,r5,r5
 8008fa4:	994b883a 	add	r5,r19,r5
 8008fa8:	28800017 	ldw	r2,0(r5)
 8008fac:	018200f4 	movhi	r6,2051
 8008fb0:	297ffe04 	addi	r5,r5,-8
 8008fb4:	31878504 	addi	r6,r6,7700
 8008fb8:	28806526 	beq	r5,r2,8009150 <_malloc_r+0x6d8>
 8008fbc:	01bfff04 	movi	r6,-4
 8008fc0:	10c00117 	ldw	r3,4(r2)
 8008fc4:	1986703a 	and	r3,r3,r6
 8008fc8:	38c0022e 	bgeu	r7,r3,8008fd4 <_malloc_r+0x55c>
 8008fcc:	10800217 	ldw	r2,8(r2)
 8008fd0:	28bffb1e 	bne	r5,r2,8008fc0 <__alt_data_end+0xfc008fc0>
 8008fd4:	11400317 	ldw	r5,12(r2)
 8008fd8:	98c00117 	ldw	r3,4(r19)
 8008fdc:	81400315 	stw	r5,12(r16)
 8008fe0:	80800215 	stw	r2,8(r16)
 8008fe4:	2c000215 	stw	r16,8(r5)
 8008fe8:	14000315 	stw	r16,12(r2)
 8008fec:	003ef806 	br	8008bd0 <__alt_data_end+0xfc008bd0>
 8008ff0:	88c00054 	ori	r3,r17,1
 8008ff4:	80c00115 	stw	r3,4(r16)
 8008ff8:	8463883a 	add	r17,r16,r17
 8008ffc:	34400515 	stw	r17,20(r6)
 8009000:	34400415 	stw	r17,16(r6)
 8009004:	10c00054 	ori	r3,r2,1
 8009008:	8a000315 	stw	r8,12(r17)
 800900c:	8a000215 	stw	r8,8(r17)
 8009010:	88c00115 	stw	r3,4(r17)
 8009014:	88a3883a 	add	r17,r17,r2
 8009018:	88800015 	stw	r2,0(r17)
 800901c:	9009883a 	mov	r4,r18
 8009020:	8010a980 	call	8010a98 <__malloc_unlock>
 8009024:	80800204 	addi	r2,r16,8
 8009028:	003f3c06 	br	8008d1c <__alt_data_end+0xfc008d1c>
 800902c:	30c00117 	ldw	r3,4(r6)
 8009030:	003ee706 	br	8008bd0 <__alt_data_end+0xfc008bd0>
 8009034:	5ac00044 	addi	r11,r11,1
 8009038:	588000cc 	andi	r2,r11,3
 800903c:	31800204 	addi	r6,r6,8
 8009040:	103efd1e 	bne	r2,zero,8008c38 <__alt_data_end+0xfc008c38>
 8009044:	00002406 	br	80090d8 <_malloc_r+0x660>
 8009048:	14000317 	ldw	r16,12(r2)
 800904c:	143f251e 	bne	r2,r16,8008ce4 <__alt_data_end+0xfc008ce4>
 8009050:	21000084 	addi	r4,r4,2
 8009054:	003ebc06 	br	8008b48 <__alt_data_end+0xfc008b48>
 8009058:	8085883a 	add	r2,r16,r2
 800905c:	10c00117 	ldw	r3,4(r2)
 8009060:	81000317 	ldw	r4,12(r16)
 8009064:	81400217 	ldw	r5,8(r16)
 8009068:	18c00054 	ori	r3,r3,1
 800906c:	10c00115 	stw	r3,4(r2)
 8009070:	29000315 	stw	r4,12(r5)
 8009074:	21400215 	stw	r5,8(r4)
 8009078:	9009883a 	mov	r4,r18
 800907c:	8010a980 	call	8010a98 <__malloc_unlock>
 8009080:	80800204 	addi	r2,r16,8
 8009084:	003f2506 	br	8008d1c <__alt_data_end+0xfc008d1c>
 8009088:	12001704 	addi	r8,r2,92
 800908c:	11c016c4 	addi	r7,r2,91
 8009090:	4209883a 	add	r4,r8,r8
 8009094:	003e9606 	br	8008af0 <__alt_data_end+0xfc008af0>
 8009098:	3804d1ba 	srli	r2,r7,6
 800909c:	11400e44 	addi	r5,r2,57
 80090a0:	10c00e04 	addi	r3,r2,56
 80090a4:	294b883a 	add	r5,r5,r5
 80090a8:	003fbc06 	br	8008f9c <__alt_data_end+0xfc008f9c>
 80090ac:	84ff5926 	beq	r16,r19,8008e14 <__alt_data_end+0xfc008e14>
 80090b0:	008200f4 	movhi	r2,2051
 80090b4:	10878504 	addi	r2,r2,7700
 80090b8:	14000217 	ldw	r16,8(r2)
 80090bc:	00bfff04 	movi	r2,-4
 80090c0:	80c00117 	ldw	r3,4(r16)
 80090c4:	1886703a 	and	r3,r3,r2
 80090c8:	003f9106 	br	8008f10 <__alt_data_end+0xfc008f10>
 80090cc:	60800217 	ldw	r2,8(r12)
 80090d0:	213fffc4 	addi	r4,r4,-1
 80090d4:	1300651e 	bne	r2,r12,800926c <_malloc_r+0x7f4>
 80090d8:	208000cc 	andi	r2,r4,3
 80090dc:	633ffe04 	addi	r12,r12,-8
 80090e0:	103ffa1e 	bne	r2,zero,80090cc <__alt_data_end+0xfc0090cc>
 80090e4:	98800117 	ldw	r2,4(r19)
 80090e8:	0146303a 	nor	r3,zero,r5
 80090ec:	1884703a 	and	r2,r3,r2
 80090f0:	98800115 	stw	r2,4(r19)
 80090f4:	294b883a 	add	r5,r5,r5
 80090f8:	117f2836 	bltu	r2,r5,8008d9c <__alt_data_end+0xfc008d9c>
 80090fc:	283f2726 	beq	r5,zero,8008d9c <__alt_data_end+0xfc008d9c>
 8009100:	2886703a 	and	r3,r5,r2
 8009104:	5809883a 	mov	r4,r11
 8009108:	183ec31e 	bne	r3,zero,8008c18 <__alt_data_end+0xfc008c18>
 800910c:	294b883a 	add	r5,r5,r5
 8009110:	2886703a 	and	r3,r5,r2
 8009114:	21000104 	addi	r4,r4,4
 8009118:	183ffc26 	beq	r3,zero,800910c <__alt_data_end+0xfc00910c>
 800911c:	003ebe06 	br	8008c18 <__alt_data_end+0xfc008c18>
 8009120:	00c05504 	movi	r3,340
 8009124:	18801236 	bltu	r3,r2,8009170 <_malloc_r+0x6f8>
 8009128:	8804d3fa 	srli	r2,r17,15
 800912c:	12001e04 	addi	r8,r2,120
 8009130:	11c01dc4 	addi	r7,r2,119
 8009134:	4209883a 	add	r4,r8,r8
 8009138:	003e6d06 	br	8008af0 <__alt_data_end+0xfc008af0>
 800913c:	00c40004 	movi	r3,4096
 8009140:	003f4606 	br	8008e5c <__alt_data_end+0xfc008e5c>
 8009144:	00800044 	movi	r2,1
 8009148:	a0800115 	stw	r2,4(r20)
 800914c:	003f7406 	br	8008f20 <__alt_data_end+0xfc008f20>
 8009150:	1805d0ba 	srai	r2,r3,2
 8009154:	01c00044 	movi	r7,1
 8009158:	30c00117 	ldw	r3,4(r6)
 800915c:	388e983a 	sll	r7,r7,r2
 8009160:	2805883a 	mov	r2,r5
 8009164:	38c6b03a 	or	r3,r7,r3
 8009168:	30c00115 	stw	r3,4(r6)
 800916c:	003f9b06 	br	8008fdc <__alt_data_end+0xfc008fdc>
 8009170:	00c15504 	movi	r3,1364
 8009174:	18801a36 	bltu	r3,r2,80091e0 <_malloc_r+0x768>
 8009178:	8804d4ba 	srli	r2,r17,18
 800917c:	12001f44 	addi	r8,r2,125
 8009180:	11c01f04 	addi	r7,r2,124
 8009184:	4209883a 	add	r4,r8,r8
 8009188:	003e5906 	br	8008af0 <__alt_data_end+0xfc008af0>
 800918c:	ad400404 	addi	r21,r21,16
 8009190:	003f1706 	br	8008df0 <__alt_data_end+0xfc008df0>
 8009194:	00c01504 	movi	r3,84
 8009198:	18802336 	bltu	r3,r2,8009228 <_malloc_r+0x7b0>
 800919c:	3804d33a 	srli	r2,r7,12
 80091a0:	11401bc4 	addi	r5,r2,111
 80091a4:	10c01b84 	addi	r3,r2,110
 80091a8:	294b883a 	add	r5,r5,r5
 80091ac:	003f7b06 	br	8008f9c <__alt_data_end+0xfc008f9c>
 80091b0:	9c000217 	ldw	r16,8(r19)
 80091b4:	00bfff04 	movi	r2,-4
 80091b8:	80c00117 	ldw	r3,4(r16)
 80091bc:	1886703a 	and	r3,r3,r2
 80091c0:	003f5306 	br	8008f10 <__alt_data_end+0xfc008f10>
 80091c4:	3083ffcc 	andi	r2,r6,4095
 80091c8:	103f181e 	bne	r2,zero,8008e2c <__alt_data_end+0xfc008e2c>
 80091cc:	99000217 	ldw	r4,8(r19)
 80091d0:	b545883a 	add	r2,r22,r21
 80091d4:	10800054 	ori	r2,r2,1
 80091d8:	20800115 	stw	r2,4(r4)
 80091dc:	003f3e06 	br	8008ed8 <__alt_data_end+0xfc008ed8>
 80091e0:	01003f84 	movi	r4,254
 80091e4:	02001fc4 	movi	r8,127
 80091e8:	01c01f84 	movi	r7,126
 80091ec:	003e4006 	br	8008af0 <__alt_data_end+0xfc008af0>
 80091f0:	008200f4 	movhi	r2,2051
 80091f4:	108d1104 	addi	r2,r2,13380
 80091f8:	15000015 	stw	r20,0(r2)
 80091fc:	003f1106 	br	8008e44 <__alt_data_end+0xfc008e44>
 8009200:	00800044 	movi	r2,1
 8009204:	002b883a 	mov	r21,zero
 8009208:	003f1f06 	br	8008e88 <__alt_data_end+0xfc008e88>
 800920c:	81400204 	addi	r5,r16,8
 8009210:	9009883a 	mov	r4,r18
 8009214:	8007e800 	call	8007e80 <_free_r>
 8009218:	008200f4 	movhi	r2,2051
 800921c:	10948004 	addi	r2,r2,20992
 8009220:	10c00017 	ldw	r3,0(r2)
 8009224:	003f2c06 	br	8008ed8 <__alt_data_end+0xfc008ed8>
 8009228:	00c05504 	movi	r3,340
 800922c:	18800536 	bltu	r3,r2,8009244 <_malloc_r+0x7cc>
 8009230:	3804d3fa 	srli	r2,r7,15
 8009234:	11401e04 	addi	r5,r2,120
 8009238:	10c01dc4 	addi	r3,r2,119
 800923c:	294b883a 	add	r5,r5,r5
 8009240:	003f5606 	br	8008f9c <__alt_data_end+0xfc008f9c>
 8009244:	00c15504 	movi	r3,1364
 8009248:	18800536 	bltu	r3,r2,8009260 <_malloc_r+0x7e8>
 800924c:	3804d4ba 	srli	r2,r7,18
 8009250:	11401f44 	addi	r5,r2,125
 8009254:	10c01f04 	addi	r3,r2,124
 8009258:	294b883a 	add	r5,r5,r5
 800925c:	003f4f06 	br	8008f9c <__alt_data_end+0xfc008f9c>
 8009260:	01403f84 	movi	r5,254
 8009264:	00c01f84 	movi	r3,126
 8009268:	003f4c06 	br	8008f9c <__alt_data_end+0xfc008f9c>
 800926c:	98800117 	ldw	r2,4(r19)
 8009270:	003fa006 	br	80090f4 <__alt_data_end+0xfc0090f4>
 8009274:	8808d0fa 	srli	r4,r17,3
 8009278:	20800044 	addi	r2,r4,1
 800927c:	1085883a 	add	r2,r2,r2
 8009280:	003e9006 	br	8008cc4 <__alt_data_end+0xfc008cc4>

08009284 <memchr>:
 8009284:	208000cc 	andi	r2,r4,3
 8009288:	280f883a 	mov	r7,r5
 800928c:	10003426 	beq	r2,zero,8009360 <memchr+0xdc>
 8009290:	30bfffc4 	addi	r2,r6,-1
 8009294:	30001a26 	beq	r6,zero,8009300 <memchr+0x7c>
 8009298:	20c00003 	ldbu	r3,0(r4)
 800929c:	29803fcc 	andi	r6,r5,255
 80092a0:	30c0051e 	bne	r6,r3,80092b8 <memchr+0x34>
 80092a4:	00001806 	br	8009308 <memchr+0x84>
 80092a8:	10001526 	beq	r2,zero,8009300 <memchr+0x7c>
 80092ac:	20c00003 	ldbu	r3,0(r4)
 80092b0:	10bfffc4 	addi	r2,r2,-1
 80092b4:	30c01426 	beq	r6,r3,8009308 <memchr+0x84>
 80092b8:	21000044 	addi	r4,r4,1
 80092bc:	20c000cc 	andi	r3,r4,3
 80092c0:	183ff91e 	bne	r3,zero,80092a8 <__alt_data_end+0xfc0092a8>
 80092c4:	020000c4 	movi	r8,3
 80092c8:	40801136 	bltu	r8,r2,8009310 <memchr+0x8c>
 80092cc:	10000c26 	beq	r2,zero,8009300 <memchr+0x7c>
 80092d0:	20c00003 	ldbu	r3,0(r4)
 80092d4:	29403fcc 	andi	r5,r5,255
 80092d8:	28c00b26 	beq	r5,r3,8009308 <memchr+0x84>
 80092dc:	20c00044 	addi	r3,r4,1
 80092e0:	39803fcc 	andi	r6,r7,255
 80092e4:	2089883a 	add	r4,r4,r2
 80092e8:	00000306 	br	80092f8 <memchr+0x74>
 80092ec:	18c00044 	addi	r3,r3,1
 80092f0:	197fffc3 	ldbu	r5,-1(r3)
 80092f4:	31400526 	beq	r6,r5,800930c <memchr+0x88>
 80092f8:	1805883a 	mov	r2,r3
 80092fc:	20fffb1e 	bne	r4,r3,80092ec <__alt_data_end+0xfc0092ec>
 8009300:	0005883a 	mov	r2,zero
 8009304:	f800283a 	ret
 8009308:	2005883a 	mov	r2,r4
 800930c:	f800283a 	ret
 8009310:	28c03fcc 	andi	r3,r5,255
 8009314:	1812923a 	slli	r9,r3,8
 8009318:	02ffbff4 	movhi	r11,65279
 800931c:	02a02074 	movhi	r10,32897
 8009320:	48d2b03a 	or	r9,r9,r3
 8009324:	4806943a 	slli	r3,r9,16
 8009328:	5affbfc4 	addi	r11,r11,-257
 800932c:	52a02004 	addi	r10,r10,-32640
 8009330:	48d2b03a 	or	r9,r9,r3
 8009334:	20c00017 	ldw	r3,0(r4)
 8009338:	48c6f03a 	xor	r3,r9,r3
 800933c:	1acd883a 	add	r6,r3,r11
 8009340:	00c6303a 	nor	r3,zero,r3
 8009344:	30c6703a 	and	r3,r6,r3
 8009348:	1a86703a 	and	r3,r3,r10
 800934c:	183fe01e 	bne	r3,zero,80092d0 <__alt_data_end+0xfc0092d0>
 8009350:	10bfff04 	addi	r2,r2,-4
 8009354:	21000104 	addi	r4,r4,4
 8009358:	40bff636 	bltu	r8,r2,8009334 <__alt_data_end+0xfc009334>
 800935c:	003fdb06 	br	80092cc <__alt_data_end+0xfc0092cc>
 8009360:	3005883a 	mov	r2,r6
 8009364:	003fd706 	br	80092c4 <__alt_data_end+0xfc0092c4>

08009368 <memcpy>:
 8009368:	defffd04 	addi	sp,sp,-12
 800936c:	dfc00215 	stw	ra,8(sp)
 8009370:	dc400115 	stw	r17,4(sp)
 8009374:	dc000015 	stw	r16,0(sp)
 8009378:	00c003c4 	movi	r3,15
 800937c:	2005883a 	mov	r2,r4
 8009380:	1980452e 	bgeu	r3,r6,8009498 <memcpy+0x130>
 8009384:	2906b03a 	or	r3,r5,r4
 8009388:	18c000cc 	andi	r3,r3,3
 800938c:	1800441e 	bne	r3,zero,80094a0 <memcpy+0x138>
 8009390:	347ffc04 	addi	r17,r6,-16
 8009394:	8822d13a 	srli	r17,r17,4
 8009398:	28c00104 	addi	r3,r5,4
 800939c:	23400104 	addi	r13,r4,4
 80093a0:	8820913a 	slli	r16,r17,4
 80093a4:	2b000204 	addi	r12,r5,8
 80093a8:	22c00204 	addi	r11,r4,8
 80093ac:	84000504 	addi	r16,r16,20
 80093b0:	2a800304 	addi	r10,r5,12
 80093b4:	22400304 	addi	r9,r4,12
 80093b8:	2c21883a 	add	r16,r5,r16
 80093bc:	2811883a 	mov	r8,r5
 80093c0:	200f883a 	mov	r7,r4
 80093c4:	41000017 	ldw	r4,0(r8)
 80093c8:	1fc00017 	ldw	ra,0(r3)
 80093cc:	63c00017 	ldw	r15,0(r12)
 80093d0:	39000015 	stw	r4,0(r7)
 80093d4:	53800017 	ldw	r14,0(r10)
 80093d8:	6fc00015 	stw	ra,0(r13)
 80093dc:	5bc00015 	stw	r15,0(r11)
 80093e0:	4b800015 	stw	r14,0(r9)
 80093e4:	18c00404 	addi	r3,r3,16
 80093e8:	39c00404 	addi	r7,r7,16
 80093ec:	42000404 	addi	r8,r8,16
 80093f0:	6b400404 	addi	r13,r13,16
 80093f4:	63000404 	addi	r12,r12,16
 80093f8:	5ac00404 	addi	r11,r11,16
 80093fc:	52800404 	addi	r10,r10,16
 8009400:	4a400404 	addi	r9,r9,16
 8009404:	1c3fef1e 	bne	r3,r16,80093c4 <__alt_data_end+0xfc0093c4>
 8009408:	89c00044 	addi	r7,r17,1
 800940c:	380e913a 	slli	r7,r7,4
 8009410:	310003cc 	andi	r4,r6,15
 8009414:	02c000c4 	movi	r11,3
 8009418:	11c7883a 	add	r3,r2,r7
 800941c:	29cb883a 	add	r5,r5,r7
 8009420:	5900212e 	bgeu	r11,r4,80094a8 <memcpy+0x140>
 8009424:	1813883a 	mov	r9,r3
 8009428:	2811883a 	mov	r8,r5
 800942c:	200f883a 	mov	r7,r4
 8009430:	42800017 	ldw	r10,0(r8)
 8009434:	4a400104 	addi	r9,r9,4
 8009438:	39ffff04 	addi	r7,r7,-4
 800943c:	4abfff15 	stw	r10,-4(r9)
 8009440:	42000104 	addi	r8,r8,4
 8009444:	59fffa36 	bltu	r11,r7,8009430 <__alt_data_end+0xfc009430>
 8009448:	213fff04 	addi	r4,r4,-4
 800944c:	2008d0ba 	srli	r4,r4,2
 8009450:	318000cc 	andi	r6,r6,3
 8009454:	21000044 	addi	r4,r4,1
 8009458:	2109883a 	add	r4,r4,r4
 800945c:	2109883a 	add	r4,r4,r4
 8009460:	1907883a 	add	r3,r3,r4
 8009464:	290b883a 	add	r5,r5,r4
 8009468:	30000626 	beq	r6,zero,8009484 <memcpy+0x11c>
 800946c:	198d883a 	add	r6,r3,r6
 8009470:	29c00003 	ldbu	r7,0(r5)
 8009474:	18c00044 	addi	r3,r3,1
 8009478:	29400044 	addi	r5,r5,1
 800947c:	19ffffc5 	stb	r7,-1(r3)
 8009480:	19bffb1e 	bne	r3,r6,8009470 <__alt_data_end+0xfc009470>
 8009484:	dfc00217 	ldw	ra,8(sp)
 8009488:	dc400117 	ldw	r17,4(sp)
 800948c:	dc000017 	ldw	r16,0(sp)
 8009490:	dec00304 	addi	sp,sp,12
 8009494:	f800283a 	ret
 8009498:	2007883a 	mov	r3,r4
 800949c:	003ff206 	br	8009468 <__alt_data_end+0xfc009468>
 80094a0:	2007883a 	mov	r3,r4
 80094a4:	003ff106 	br	800946c <__alt_data_end+0xfc00946c>
 80094a8:	200d883a 	mov	r6,r4
 80094ac:	003fee06 	br	8009468 <__alt_data_end+0xfc009468>

080094b0 <memmove>:
 80094b0:	2005883a 	mov	r2,r4
 80094b4:	29000b2e 	bgeu	r5,r4,80094e4 <memmove+0x34>
 80094b8:	298f883a 	add	r7,r5,r6
 80094bc:	21c0092e 	bgeu	r4,r7,80094e4 <memmove+0x34>
 80094c0:	2187883a 	add	r3,r4,r6
 80094c4:	198bc83a 	sub	r5,r3,r6
 80094c8:	30004826 	beq	r6,zero,80095ec <memmove+0x13c>
 80094cc:	39ffffc4 	addi	r7,r7,-1
 80094d0:	39000003 	ldbu	r4,0(r7)
 80094d4:	18ffffc4 	addi	r3,r3,-1
 80094d8:	19000005 	stb	r4,0(r3)
 80094dc:	28fffb1e 	bne	r5,r3,80094cc <__alt_data_end+0xfc0094cc>
 80094e0:	f800283a 	ret
 80094e4:	00c003c4 	movi	r3,15
 80094e8:	1980412e 	bgeu	r3,r6,80095f0 <memmove+0x140>
 80094ec:	2886b03a 	or	r3,r5,r2
 80094f0:	18c000cc 	andi	r3,r3,3
 80094f4:	1800401e 	bne	r3,zero,80095f8 <memmove+0x148>
 80094f8:	33fffc04 	addi	r15,r6,-16
 80094fc:	781ed13a 	srli	r15,r15,4
 8009500:	28c00104 	addi	r3,r5,4
 8009504:	13400104 	addi	r13,r2,4
 8009508:	781c913a 	slli	r14,r15,4
 800950c:	2b000204 	addi	r12,r5,8
 8009510:	12c00204 	addi	r11,r2,8
 8009514:	73800504 	addi	r14,r14,20
 8009518:	2a800304 	addi	r10,r5,12
 800951c:	12400304 	addi	r9,r2,12
 8009520:	2b9d883a 	add	r14,r5,r14
 8009524:	2811883a 	mov	r8,r5
 8009528:	100f883a 	mov	r7,r2
 800952c:	41000017 	ldw	r4,0(r8)
 8009530:	39c00404 	addi	r7,r7,16
 8009534:	18c00404 	addi	r3,r3,16
 8009538:	393ffc15 	stw	r4,-16(r7)
 800953c:	193ffc17 	ldw	r4,-16(r3)
 8009540:	6b400404 	addi	r13,r13,16
 8009544:	5ac00404 	addi	r11,r11,16
 8009548:	693ffc15 	stw	r4,-16(r13)
 800954c:	61000017 	ldw	r4,0(r12)
 8009550:	4a400404 	addi	r9,r9,16
 8009554:	42000404 	addi	r8,r8,16
 8009558:	593ffc15 	stw	r4,-16(r11)
 800955c:	51000017 	ldw	r4,0(r10)
 8009560:	63000404 	addi	r12,r12,16
 8009564:	52800404 	addi	r10,r10,16
 8009568:	493ffc15 	stw	r4,-16(r9)
 800956c:	1bbfef1e 	bne	r3,r14,800952c <__alt_data_end+0xfc00952c>
 8009570:	79000044 	addi	r4,r15,1
 8009574:	2008913a 	slli	r4,r4,4
 8009578:	328003cc 	andi	r10,r6,15
 800957c:	02c000c4 	movi	r11,3
 8009580:	1107883a 	add	r3,r2,r4
 8009584:	290b883a 	add	r5,r5,r4
 8009588:	5a801e2e 	bgeu	r11,r10,8009604 <memmove+0x154>
 800958c:	1813883a 	mov	r9,r3
 8009590:	2811883a 	mov	r8,r5
 8009594:	500f883a 	mov	r7,r10
 8009598:	41000017 	ldw	r4,0(r8)
 800959c:	4a400104 	addi	r9,r9,4
 80095a0:	39ffff04 	addi	r7,r7,-4
 80095a4:	493fff15 	stw	r4,-4(r9)
 80095a8:	42000104 	addi	r8,r8,4
 80095ac:	59fffa36 	bltu	r11,r7,8009598 <__alt_data_end+0xfc009598>
 80095b0:	513fff04 	addi	r4,r10,-4
 80095b4:	2008d0ba 	srli	r4,r4,2
 80095b8:	318000cc 	andi	r6,r6,3
 80095bc:	21000044 	addi	r4,r4,1
 80095c0:	2109883a 	add	r4,r4,r4
 80095c4:	2109883a 	add	r4,r4,r4
 80095c8:	1907883a 	add	r3,r3,r4
 80095cc:	290b883a 	add	r5,r5,r4
 80095d0:	30000b26 	beq	r6,zero,8009600 <memmove+0x150>
 80095d4:	198d883a 	add	r6,r3,r6
 80095d8:	29c00003 	ldbu	r7,0(r5)
 80095dc:	18c00044 	addi	r3,r3,1
 80095e0:	29400044 	addi	r5,r5,1
 80095e4:	19ffffc5 	stb	r7,-1(r3)
 80095e8:	19bffb1e 	bne	r3,r6,80095d8 <__alt_data_end+0xfc0095d8>
 80095ec:	f800283a 	ret
 80095f0:	1007883a 	mov	r3,r2
 80095f4:	003ff606 	br	80095d0 <__alt_data_end+0xfc0095d0>
 80095f8:	1007883a 	mov	r3,r2
 80095fc:	003ff506 	br	80095d4 <__alt_data_end+0xfc0095d4>
 8009600:	f800283a 	ret
 8009604:	500d883a 	mov	r6,r10
 8009608:	003ff106 	br	80095d0 <__alt_data_end+0xfc0095d0>

0800960c <memset>:
 800960c:	20c000cc 	andi	r3,r4,3
 8009610:	2005883a 	mov	r2,r4
 8009614:	18004426 	beq	r3,zero,8009728 <memset+0x11c>
 8009618:	31ffffc4 	addi	r7,r6,-1
 800961c:	30004026 	beq	r6,zero,8009720 <memset+0x114>
 8009620:	2813883a 	mov	r9,r5
 8009624:	200d883a 	mov	r6,r4
 8009628:	2007883a 	mov	r3,r4
 800962c:	00000406 	br	8009640 <memset+0x34>
 8009630:	3a3fffc4 	addi	r8,r7,-1
 8009634:	31800044 	addi	r6,r6,1
 8009638:	38003926 	beq	r7,zero,8009720 <memset+0x114>
 800963c:	400f883a 	mov	r7,r8
 8009640:	18c00044 	addi	r3,r3,1
 8009644:	32400005 	stb	r9,0(r6)
 8009648:	1a0000cc 	andi	r8,r3,3
 800964c:	403ff81e 	bne	r8,zero,8009630 <__alt_data_end+0xfc009630>
 8009650:	010000c4 	movi	r4,3
 8009654:	21c02d2e 	bgeu	r4,r7,800970c <memset+0x100>
 8009658:	29003fcc 	andi	r4,r5,255
 800965c:	200c923a 	slli	r6,r4,8
 8009660:	3108b03a 	or	r4,r6,r4
 8009664:	200c943a 	slli	r6,r4,16
 8009668:	218cb03a 	or	r6,r4,r6
 800966c:	010003c4 	movi	r4,15
 8009670:	21c0182e 	bgeu	r4,r7,80096d4 <memset+0xc8>
 8009674:	3b3ffc04 	addi	r12,r7,-16
 8009678:	6018d13a 	srli	r12,r12,4
 800967c:	1a000104 	addi	r8,r3,4
 8009680:	1ac00204 	addi	r11,r3,8
 8009684:	6008913a 	slli	r4,r12,4
 8009688:	1a800304 	addi	r10,r3,12
 800968c:	1813883a 	mov	r9,r3
 8009690:	21000504 	addi	r4,r4,20
 8009694:	1909883a 	add	r4,r3,r4
 8009698:	49800015 	stw	r6,0(r9)
 800969c:	41800015 	stw	r6,0(r8)
 80096a0:	59800015 	stw	r6,0(r11)
 80096a4:	51800015 	stw	r6,0(r10)
 80096a8:	42000404 	addi	r8,r8,16
 80096ac:	4a400404 	addi	r9,r9,16
 80096b0:	5ac00404 	addi	r11,r11,16
 80096b4:	52800404 	addi	r10,r10,16
 80096b8:	413ff71e 	bne	r8,r4,8009698 <__alt_data_end+0xfc009698>
 80096bc:	63000044 	addi	r12,r12,1
 80096c0:	6018913a 	slli	r12,r12,4
 80096c4:	39c003cc 	andi	r7,r7,15
 80096c8:	010000c4 	movi	r4,3
 80096cc:	1b07883a 	add	r3,r3,r12
 80096d0:	21c00e2e 	bgeu	r4,r7,800970c <memset+0x100>
 80096d4:	1813883a 	mov	r9,r3
 80096d8:	3811883a 	mov	r8,r7
 80096dc:	010000c4 	movi	r4,3
 80096e0:	49800015 	stw	r6,0(r9)
 80096e4:	423fff04 	addi	r8,r8,-4
 80096e8:	4a400104 	addi	r9,r9,4
 80096ec:	223ffc36 	bltu	r4,r8,80096e0 <__alt_data_end+0xfc0096e0>
 80096f0:	393fff04 	addi	r4,r7,-4
 80096f4:	2008d0ba 	srli	r4,r4,2
 80096f8:	39c000cc 	andi	r7,r7,3
 80096fc:	21000044 	addi	r4,r4,1
 8009700:	2109883a 	add	r4,r4,r4
 8009704:	2109883a 	add	r4,r4,r4
 8009708:	1907883a 	add	r3,r3,r4
 800970c:	38000526 	beq	r7,zero,8009724 <memset+0x118>
 8009710:	19cf883a 	add	r7,r3,r7
 8009714:	19400005 	stb	r5,0(r3)
 8009718:	18c00044 	addi	r3,r3,1
 800971c:	38fffd1e 	bne	r7,r3,8009714 <__alt_data_end+0xfc009714>
 8009720:	f800283a 	ret
 8009724:	f800283a 	ret
 8009728:	2007883a 	mov	r3,r4
 800972c:	300f883a 	mov	r7,r6
 8009730:	003fc706 	br	8009650 <__alt_data_end+0xfc009650>

08009734 <_Balloc>:
 8009734:	20801317 	ldw	r2,76(r4)
 8009738:	defffc04 	addi	sp,sp,-16
 800973c:	dc400115 	stw	r17,4(sp)
 8009740:	dc000015 	stw	r16,0(sp)
 8009744:	dfc00315 	stw	ra,12(sp)
 8009748:	dc800215 	stw	r18,8(sp)
 800974c:	2023883a 	mov	r17,r4
 8009750:	2821883a 	mov	r16,r5
 8009754:	10000f26 	beq	r2,zero,8009794 <_Balloc+0x60>
 8009758:	8407883a 	add	r3,r16,r16
 800975c:	18c7883a 	add	r3,r3,r3
 8009760:	10c7883a 	add	r3,r2,r3
 8009764:	18800017 	ldw	r2,0(r3)
 8009768:	10001126 	beq	r2,zero,80097b0 <_Balloc+0x7c>
 800976c:	11000017 	ldw	r4,0(r2)
 8009770:	19000015 	stw	r4,0(r3)
 8009774:	10000415 	stw	zero,16(r2)
 8009778:	10000315 	stw	zero,12(r2)
 800977c:	dfc00317 	ldw	ra,12(sp)
 8009780:	dc800217 	ldw	r18,8(sp)
 8009784:	dc400117 	ldw	r17,4(sp)
 8009788:	dc000017 	ldw	r16,0(sp)
 800978c:	dec00404 	addi	sp,sp,16
 8009790:	f800283a 	ret
 8009794:	01800844 	movi	r6,33
 8009798:	01400104 	movi	r5,4
 800979c:	800c7dc0 	call	800c7dc <_calloc_r>
 80097a0:	88801315 	stw	r2,76(r17)
 80097a4:	103fec1e 	bne	r2,zero,8009758 <__alt_data_end+0xfc009758>
 80097a8:	0005883a 	mov	r2,zero
 80097ac:	003ff306 	br	800977c <__alt_data_end+0xfc00977c>
 80097b0:	01400044 	movi	r5,1
 80097b4:	2c24983a 	sll	r18,r5,r16
 80097b8:	8809883a 	mov	r4,r17
 80097bc:	91800144 	addi	r6,r18,5
 80097c0:	318d883a 	add	r6,r6,r6
 80097c4:	318d883a 	add	r6,r6,r6
 80097c8:	800c7dc0 	call	800c7dc <_calloc_r>
 80097cc:	103ff626 	beq	r2,zero,80097a8 <__alt_data_end+0xfc0097a8>
 80097d0:	14000115 	stw	r16,4(r2)
 80097d4:	14800215 	stw	r18,8(r2)
 80097d8:	003fe606 	br	8009774 <__alt_data_end+0xfc009774>

080097dc <_Bfree>:
 80097dc:	28000826 	beq	r5,zero,8009800 <_Bfree+0x24>
 80097e0:	28c00117 	ldw	r3,4(r5)
 80097e4:	20801317 	ldw	r2,76(r4)
 80097e8:	18c7883a 	add	r3,r3,r3
 80097ec:	18c7883a 	add	r3,r3,r3
 80097f0:	10c5883a 	add	r2,r2,r3
 80097f4:	10c00017 	ldw	r3,0(r2)
 80097f8:	28c00015 	stw	r3,0(r5)
 80097fc:	11400015 	stw	r5,0(r2)
 8009800:	f800283a 	ret

08009804 <__multadd>:
 8009804:	defff704 	addi	sp,sp,-36
 8009808:	dc800215 	stw	r18,8(sp)
 800980c:	2c800417 	ldw	r18,16(r5)
 8009810:	dd800615 	stw	r22,24(sp)
 8009814:	dd400515 	stw	r21,20(sp)
 8009818:	dd000415 	stw	r20,16(sp)
 800981c:	dcc00315 	stw	r19,12(sp)
 8009820:	dc400115 	stw	r17,4(sp)
 8009824:	dc000015 	stw	r16,0(sp)
 8009828:	dfc00815 	stw	ra,32(sp)
 800982c:	ddc00715 	stw	r23,28(sp)
 8009830:	2827883a 	mov	r19,r5
 8009834:	2029883a 	mov	r20,r4
 8009838:	3023883a 	mov	r17,r6
 800983c:	3821883a 	mov	r16,r7
 8009840:	2d400504 	addi	r21,r5,20
 8009844:	002d883a 	mov	r22,zero
 8009848:	adc00017 	ldw	r23,0(r21)
 800984c:	880b883a 	mov	r5,r17
 8009850:	ad400104 	addi	r21,r21,4
 8009854:	b93fffcc 	andi	r4,r23,65535
 8009858:	800374c0 	call	800374c <__mulsi3>
 800985c:	b808d43a 	srli	r4,r23,16
 8009860:	880b883a 	mov	r5,r17
 8009864:	1421883a 	add	r16,r2,r16
 8009868:	800374c0 	call	800374c <__mulsi3>
 800986c:	800ed43a 	srli	r7,r16,16
 8009870:	80ffffcc 	andi	r3,r16,65535
 8009874:	b5800044 	addi	r22,r22,1
 8009878:	11c5883a 	add	r2,r2,r7
 800987c:	100e943a 	slli	r7,r2,16
 8009880:	1020d43a 	srli	r16,r2,16
 8009884:	38c7883a 	add	r3,r7,r3
 8009888:	a8ffff15 	stw	r3,-4(r21)
 800988c:	b4bfee16 	blt	r22,r18,8009848 <__alt_data_end+0xfc009848>
 8009890:	80000926 	beq	r16,zero,80098b8 <__multadd+0xb4>
 8009894:	98800217 	ldw	r2,8(r19)
 8009898:	9080130e 	bge	r18,r2,80098e8 <__multadd+0xe4>
 800989c:	90800144 	addi	r2,r18,5
 80098a0:	1085883a 	add	r2,r2,r2
 80098a4:	1085883a 	add	r2,r2,r2
 80098a8:	9885883a 	add	r2,r19,r2
 80098ac:	14000015 	stw	r16,0(r2)
 80098b0:	94800044 	addi	r18,r18,1
 80098b4:	9c800415 	stw	r18,16(r19)
 80098b8:	9805883a 	mov	r2,r19
 80098bc:	dfc00817 	ldw	ra,32(sp)
 80098c0:	ddc00717 	ldw	r23,28(sp)
 80098c4:	dd800617 	ldw	r22,24(sp)
 80098c8:	dd400517 	ldw	r21,20(sp)
 80098cc:	dd000417 	ldw	r20,16(sp)
 80098d0:	dcc00317 	ldw	r19,12(sp)
 80098d4:	dc800217 	ldw	r18,8(sp)
 80098d8:	dc400117 	ldw	r17,4(sp)
 80098dc:	dc000017 	ldw	r16,0(sp)
 80098e0:	dec00904 	addi	sp,sp,36
 80098e4:	f800283a 	ret
 80098e8:	99400117 	ldw	r5,4(r19)
 80098ec:	a009883a 	mov	r4,r20
 80098f0:	29400044 	addi	r5,r5,1
 80098f4:	80097340 	call	8009734 <_Balloc>
 80098f8:	99800417 	ldw	r6,16(r19)
 80098fc:	99400304 	addi	r5,r19,12
 8009900:	11000304 	addi	r4,r2,12
 8009904:	31800084 	addi	r6,r6,2
 8009908:	318d883a 	add	r6,r6,r6
 800990c:	318d883a 	add	r6,r6,r6
 8009910:	1023883a 	mov	r17,r2
 8009914:	80093680 	call	8009368 <memcpy>
 8009918:	98000a26 	beq	r19,zero,8009944 <__multadd+0x140>
 800991c:	98c00117 	ldw	r3,4(r19)
 8009920:	a0801317 	ldw	r2,76(r20)
 8009924:	18c7883a 	add	r3,r3,r3
 8009928:	18c7883a 	add	r3,r3,r3
 800992c:	10c5883a 	add	r2,r2,r3
 8009930:	10c00017 	ldw	r3,0(r2)
 8009934:	98c00015 	stw	r3,0(r19)
 8009938:	14c00015 	stw	r19,0(r2)
 800993c:	8827883a 	mov	r19,r17
 8009940:	003fd606 	br	800989c <__alt_data_end+0xfc00989c>
 8009944:	8827883a 	mov	r19,r17
 8009948:	003fd406 	br	800989c <__alt_data_end+0xfc00989c>

0800994c <__s2b>:
 800994c:	defff904 	addi	sp,sp,-28
 8009950:	dc400115 	stw	r17,4(sp)
 8009954:	dc000015 	stw	r16,0(sp)
 8009958:	2023883a 	mov	r17,r4
 800995c:	2821883a 	mov	r16,r5
 8009960:	39000204 	addi	r4,r7,8
 8009964:	01400244 	movi	r5,9
 8009968:	dcc00315 	stw	r19,12(sp)
 800996c:	dc800215 	stw	r18,8(sp)
 8009970:	dfc00615 	stw	ra,24(sp)
 8009974:	dd400515 	stw	r21,20(sp)
 8009978:	dd000415 	stw	r20,16(sp)
 800997c:	3825883a 	mov	r18,r7
 8009980:	3027883a 	mov	r19,r6
 8009984:	80035980 	call	8003598 <__divsi3>
 8009988:	00c00044 	movi	r3,1
 800998c:	000b883a 	mov	r5,zero
 8009990:	1880030e 	bge	r3,r2,80099a0 <__s2b+0x54>
 8009994:	18c7883a 	add	r3,r3,r3
 8009998:	29400044 	addi	r5,r5,1
 800999c:	18bffd16 	blt	r3,r2,8009994 <__alt_data_end+0xfc009994>
 80099a0:	8809883a 	mov	r4,r17
 80099a4:	80097340 	call	8009734 <_Balloc>
 80099a8:	d8c00717 	ldw	r3,28(sp)
 80099ac:	10c00515 	stw	r3,20(r2)
 80099b0:	00c00044 	movi	r3,1
 80099b4:	10c00415 	stw	r3,16(r2)
 80099b8:	00c00244 	movi	r3,9
 80099bc:	1cc0210e 	bge	r3,r19,8009a44 <__s2b+0xf8>
 80099c0:	80eb883a 	add	r21,r16,r3
 80099c4:	a829883a 	mov	r20,r21
 80099c8:	84e1883a 	add	r16,r16,r19
 80099cc:	a1c00007 	ldb	r7,0(r20)
 80099d0:	01800284 	movi	r6,10
 80099d4:	a5000044 	addi	r20,r20,1
 80099d8:	100b883a 	mov	r5,r2
 80099dc:	39fff404 	addi	r7,r7,-48
 80099e0:	8809883a 	mov	r4,r17
 80099e4:	80098040 	call	8009804 <__multadd>
 80099e8:	a43ff81e 	bne	r20,r16,80099cc <__alt_data_end+0xfc0099cc>
 80099ec:	ace1883a 	add	r16,r21,r19
 80099f0:	843ffe04 	addi	r16,r16,-8
 80099f4:	9c800a0e 	bge	r19,r18,8009a20 <__s2b+0xd4>
 80099f8:	94e5c83a 	sub	r18,r18,r19
 80099fc:	84a5883a 	add	r18,r16,r18
 8009a00:	81c00007 	ldb	r7,0(r16)
 8009a04:	01800284 	movi	r6,10
 8009a08:	84000044 	addi	r16,r16,1
 8009a0c:	100b883a 	mov	r5,r2
 8009a10:	39fff404 	addi	r7,r7,-48
 8009a14:	8809883a 	mov	r4,r17
 8009a18:	80098040 	call	8009804 <__multadd>
 8009a1c:	84bff81e 	bne	r16,r18,8009a00 <__alt_data_end+0xfc009a00>
 8009a20:	dfc00617 	ldw	ra,24(sp)
 8009a24:	dd400517 	ldw	r21,20(sp)
 8009a28:	dd000417 	ldw	r20,16(sp)
 8009a2c:	dcc00317 	ldw	r19,12(sp)
 8009a30:	dc800217 	ldw	r18,8(sp)
 8009a34:	dc400117 	ldw	r17,4(sp)
 8009a38:	dc000017 	ldw	r16,0(sp)
 8009a3c:	dec00704 	addi	sp,sp,28
 8009a40:	f800283a 	ret
 8009a44:	84000284 	addi	r16,r16,10
 8009a48:	1827883a 	mov	r19,r3
 8009a4c:	003fe906 	br	80099f4 <__alt_data_end+0xfc0099f4>

08009a50 <__hi0bits>:
 8009a50:	20bfffec 	andhi	r2,r4,65535
 8009a54:	1000141e 	bne	r2,zero,8009aa8 <__hi0bits+0x58>
 8009a58:	2008943a 	slli	r4,r4,16
 8009a5c:	00800404 	movi	r2,16
 8009a60:	20ffc02c 	andhi	r3,r4,65280
 8009a64:	1800021e 	bne	r3,zero,8009a70 <__hi0bits+0x20>
 8009a68:	2008923a 	slli	r4,r4,8
 8009a6c:	10800204 	addi	r2,r2,8
 8009a70:	20fc002c 	andhi	r3,r4,61440
 8009a74:	1800021e 	bne	r3,zero,8009a80 <__hi0bits+0x30>
 8009a78:	2008913a 	slli	r4,r4,4
 8009a7c:	10800104 	addi	r2,r2,4
 8009a80:	20f0002c 	andhi	r3,r4,49152
 8009a84:	1800031e 	bne	r3,zero,8009a94 <__hi0bits+0x44>
 8009a88:	2109883a 	add	r4,r4,r4
 8009a8c:	10800084 	addi	r2,r2,2
 8009a90:	2109883a 	add	r4,r4,r4
 8009a94:	20000316 	blt	r4,zero,8009aa4 <__hi0bits+0x54>
 8009a98:	2110002c 	andhi	r4,r4,16384
 8009a9c:	2000041e 	bne	r4,zero,8009ab0 <__hi0bits+0x60>
 8009aa0:	00800804 	movi	r2,32
 8009aa4:	f800283a 	ret
 8009aa8:	0005883a 	mov	r2,zero
 8009aac:	003fec06 	br	8009a60 <__alt_data_end+0xfc009a60>
 8009ab0:	10800044 	addi	r2,r2,1
 8009ab4:	f800283a 	ret

08009ab8 <__lo0bits>:
 8009ab8:	20c00017 	ldw	r3,0(r4)
 8009abc:	188001cc 	andi	r2,r3,7
 8009ac0:	10000826 	beq	r2,zero,8009ae4 <__lo0bits+0x2c>
 8009ac4:	1880004c 	andi	r2,r3,1
 8009ac8:	1000211e 	bne	r2,zero,8009b50 <__lo0bits+0x98>
 8009acc:	1880008c 	andi	r2,r3,2
 8009ad0:	1000211e 	bne	r2,zero,8009b58 <__lo0bits+0xa0>
 8009ad4:	1806d0ba 	srli	r3,r3,2
 8009ad8:	00800084 	movi	r2,2
 8009adc:	20c00015 	stw	r3,0(r4)
 8009ae0:	f800283a 	ret
 8009ae4:	18bfffcc 	andi	r2,r3,65535
 8009ae8:	10001326 	beq	r2,zero,8009b38 <__lo0bits+0x80>
 8009aec:	0005883a 	mov	r2,zero
 8009af0:	19403fcc 	andi	r5,r3,255
 8009af4:	2800021e 	bne	r5,zero,8009b00 <__lo0bits+0x48>
 8009af8:	1806d23a 	srli	r3,r3,8
 8009afc:	10800204 	addi	r2,r2,8
 8009b00:	194003cc 	andi	r5,r3,15
 8009b04:	2800021e 	bne	r5,zero,8009b10 <__lo0bits+0x58>
 8009b08:	1806d13a 	srli	r3,r3,4
 8009b0c:	10800104 	addi	r2,r2,4
 8009b10:	194000cc 	andi	r5,r3,3
 8009b14:	2800021e 	bne	r5,zero,8009b20 <__lo0bits+0x68>
 8009b18:	1806d0ba 	srli	r3,r3,2
 8009b1c:	10800084 	addi	r2,r2,2
 8009b20:	1940004c 	andi	r5,r3,1
 8009b24:	2800081e 	bne	r5,zero,8009b48 <__lo0bits+0x90>
 8009b28:	1806d07a 	srli	r3,r3,1
 8009b2c:	1800051e 	bne	r3,zero,8009b44 <__lo0bits+0x8c>
 8009b30:	00800804 	movi	r2,32
 8009b34:	f800283a 	ret
 8009b38:	1806d43a 	srli	r3,r3,16
 8009b3c:	00800404 	movi	r2,16
 8009b40:	003feb06 	br	8009af0 <__alt_data_end+0xfc009af0>
 8009b44:	10800044 	addi	r2,r2,1
 8009b48:	20c00015 	stw	r3,0(r4)
 8009b4c:	f800283a 	ret
 8009b50:	0005883a 	mov	r2,zero
 8009b54:	f800283a 	ret
 8009b58:	1806d07a 	srli	r3,r3,1
 8009b5c:	00800044 	movi	r2,1
 8009b60:	20c00015 	stw	r3,0(r4)
 8009b64:	f800283a 	ret

08009b68 <__i2b>:
 8009b68:	defffd04 	addi	sp,sp,-12
 8009b6c:	dc000015 	stw	r16,0(sp)
 8009b70:	04000044 	movi	r16,1
 8009b74:	dc400115 	stw	r17,4(sp)
 8009b78:	2823883a 	mov	r17,r5
 8009b7c:	800b883a 	mov	r5,r16
 8009b80:	dfc00215 	stw	ra,8(sp)
 8009b84:	80097340 	call	8009734 <_Balloc>
 8009b88:	14400515 	stw	r17,20(r2)
 8009b8c:	14000415 	stw	r16,16(r2)
 8009b90:	dfc00217 	ldw	ra,8(sp)
 8009b94:	dc400117 	ldw	r17,4(sp)
 8009b98:	dc000017 	ldw	r16,0(sp)
 8009b9c:	dec00304 	addi	sp,sp,12
 8009ba0:	f800283a 	ret

08009ba4 <__multiply>:
 8009ba4:	deffef04 	addi	sp,sp,-68
 8009ba8:	dc400815 	stw	r17,32(sp)
 8009bac:	dc000715 	stw	r16,28(sp)
 8009bb0:	34400417 	ldw	r17,16(r6)
 8009bb4:	2c000417 	ldw	r16,16(r5)
 8009bb8:	dd800d15 	stw	r22,52(sp)
 8009bbc:	dc800915 	stw	r18,36(sp)
 8009bc0:	dfc01015 	stw	ra,64(sp)
 8009bc4:	df000f15 	stw	fp,60(sp)
 8009bc8:	ddc00e15 	stw	r23,56(sp)
 8009bcc:	dd400c15 	stw	r21,48(sp)
 8009bd0:	dd000b15 	stw	r20,44(sp)
 8009bd4:	dcc00a15 	stw	r19,40(sp)
 8009bd8:	2825883a 	mov	r18,r5
 8009bdc:	302d883a 	mov	r22,r6
 8009be0:	8440050e 	bge	r16,r17,8009bf8 <__multiply+0x54>
 8009be4:	8007883a 	mov	r3,r16
 8009be8:	3025883a 	mov	r18,r6
 8009bec:	8821883a 	mov	r16,r17
 8009bf0:	282d883a 	mov	r22,r5
 8009bf4:	1823883a 	mov	r17,r3
 8009bf8:	90800217 	ldw	r2,8(r18)
 8009bfc:	8447883a 	add	r3,r16,r17
 8009c00:	d8c00215 	stw	r3,8(sp)
 8009c04:	91400117 	ldw	r5,4(r18)
 8009c08:	10c0010e 	bge	r2,r3,8009c10 <__multiply+0x6c>
 8009c0c:	29400044 	addi	r5,r5,1
 8009c10:	80097340 	call	8009734 <_Balloc>
 8009c14:	d8c00217 	ldw	r3,8(sp)
 8009c18:	d8800615 	stw	r2,24(sp)
 8009c1c:	18eb883a 	add	r21,r3,r3
 8009c20:	ad6b883a 	add	r21,r21,r21
 8009c24:	10c00504 	addi	r3,r2,20
 8009c28:	1d6b883a 	add	r21,r3,r21
 8009c2c:	d8c00115 	stw	r3,4(sp)
 8009c30:	dd400315 	stw	r21,12(sp)
 8009c34:	1805883a 	mov	r2,r3
 8009c38:	1d40042e 	bgeu	r3,r21,8009c4c <__multiply+0xa8>
 8009c3c:	d8c00317 	ldw	r3,12(sp)
 8009c40:	10000015 	stw	zero,0(r2)
 8009c44:	10800104 	addi	r2,r2,4
 8009c48:	10fffc36 	bltu	r2,r3,8009c3c <__alt_data_end+0xfc009c3c>
 8009c4c:	8c63883a 	add	r17,r17,r17
 8009c50:	b5800504 	addi	r22,r22,20
 8009c54:	8c63883a 	add	r17,r17,r17
 8009c58:	94800504 	addi	r18,r18,20
 8009c5c:	8421883a 	add	r16,r16,r16
 8009c60:	b463883a 	add	r17,r22,r17
 8009c64:	8421883a 	add	r16,r16,r16
 8009c68:	dd800015 	stw	r22,0(sp)
 8009c6c:	dc800415 	stw	r18,16(sp)
 8009c70:	dc400515 	stw	r17,20(sp)
 8009c74:	9429883a 	add	r20,r18,r16
 8009c78:	b4404f2e 	bgeu	r22,r17,8009db8 <__multiply+0x214>
 8009c7c:	d8c00017 	ldw	r3,0(sp)
 8009c80:	1c800017 	ldw	r18,0(r3)
 8009c84:	947fffcc 	andi	r17,r18,65535
 8009c88:	88001e26 	beq	r17,zero,8009d04 <__multiply+0x160>
 8009c8c:	dd800117 	ldw	r22,4(sp)
 8009c90:	dd400417 	ldw	r21,16(sp)
 8009c94:	0027883a 	mov	r19,zero
 8009c98:	ac800017 	ldw	r18,0(r21)
 8009c9c:	b4000017 	ldw	r16,0(r22)
 8009ca0:	880b883a 	mov	r5,r17
 8009ca4:	913fffcc 	andi	r4,r18,65535
 8009ca8:	800374c0 	call	800374c <__mulsi3>
 8009cac:	9008d43a 	srli	r4,r18,16
 8009cb0:	84bfffcc 	andi	r18,r16,65535
 8009cb4:	1485883a 	add	r2,r2,r18
 8009cb8:	14e5883a 	add	r18,r2,r19
 8009cbc:	8020d43a 	srli	r16,r16,16
 8009cc0:	9026d43a 	srli	r19,r18,16
 8009cc4:	880b883a 	mov	r5,r17
 8009cc8:	800374c0 	call	800374c <__mulsi3>
 8009ccc:	1405883a 	add	r2,r2,r16
 8009cd0:	14e1883a 	add	r16,r2,r19
 8009cd4:	90ffffcc 	andi	r3,r18,65535
 8009cd8:	8024943a 	slli	r18,r16,16
 8009cdc:	ad400104 	addi	r21,r21,4
 8009ce0:	b005883a 	mov	r2,r22
 8009ce4:	90c6b03a 	or	r3,r18,r3
 8009ce8:	b0c00015 	stw	r3,0(r22)
 8009cec:	8026d43a 	srli	r19,r16,16
 8009cf0:	b5800104 	addi	r22,r22,4
 8009cf4:	ad3fe836 	bltu	r21,r20,8009c98 <__alt_data_end+0xfc009c98>
 8009cf8:	d8c00017 	ldw	r3,0(sp)
 8009cfc:	14c00115 	stw	r19,4(r2)
 8009d00:	1c800017 	ldw	r18,0(r3)
 8009d04:	9024d43a 	srli	r18,r18,16
 8009d08:	90002226 	beq	r18,zero,8009d94 <__multiply+0x1f0>
 8009d0c:	d8c00117 	ldw	r3,4(sp)
 8009d10:	dd800417 	ldw	r22,16(sp)
 8009d14:	002f883a 	mov	r23,zero
 8009d18:	1f000017 	ldw	fp,0(r3)
 8009d1c:	1823883a 	mov	r17,r3
 8009d20:	182b883a 	mov	r21,r3
 8009d24:	e021883a 	mov	r16,fp
 8009d28:	00000106 	br	8009d30 <__multiply+0x18c>
 8009d2c:	982b883a 	mov	r21,r19
 8009d30:	b100000b 	ldhu	r4,0(r22)
 8009d34:	8020d43a 	srli	r16,r16,16
 8009d38:	900b883a 	mov	r5,r18
 8009d3c:	800374c0 	call	800374c <__mulsi3>
 8009d40:	1405883a 	add	r2,r2,r16
 8009d44:	15ef883a 	add	r23,r2,r23
 8009d48:	b804943a 	slli	r2,r23,16
 8009d4c:	e0ffffcc 	andi	r3,fp,65535
 8009d50:	8c400104 	addi	r17,r17,4
 8009d54:	10c6b03a 	or	r3,r2,r3
 8009d58:	88ffff15 	stw	r3,-4(r17)
 8009d5c:	b5800104 	addi	r22,r22,4
 8009d60:	b13fff17 	ldw	r4,-4(r22)
 8009d64:	acc00104 	addi	r19,r21,4
 8009d68:	900b883a 	mov	r5,r18
 8009d6c:	2008d43a 	srli	r4,r4,16
 8009d70:	9c000017 	ldw	r16,0(r19)
 8009d74:	800374c0 	call	800374c <__mulsi3>
 8009d78:	b806d43a 	srli	r3,r23,16
 8009d7c:	813fffcc 	andi	r4,r16,65535
 8009d80:	1105883a 	add	r2,r2,r4
 8009d84:	10f9883a 	add	fp,r2,r3
 8009d88:	e02ed43a 	srli	r23,fp,16
 8009d8c:	b53fe736 	bltu	r22,r20,8009d2c <__alt_data_end+0xfc009d2c>
 8009d90:	af000115 	stw	fp,4(r21)
 8009d94:	d8c00017 	ldw	r3,0(sp)
 8009d98:	d9000517 	ldw	r4,20(sp)
 8009d9c:	18c00104 	addi	r3,r3,4
 8009da0:	d8c00015 	stw	r3,0(sp)
 8009da4:	d8c00117 	ldw	r3,4(sp)
 8009da8:	18c00104 	addi	r3,r3,4
 8009dac:	d8c00115 	stw	r3,4(sp)
 8009db0:	d8c00017 	ldw	r3,0(sp)
 8009db4:	193fb136 	bltu	r3,r4,8009c7c <__alt_data_end+0xfc009c7c>
 8009db8:	d8c00217 	ldw	r3,8(sp)
 8009dbc:	00c00c0e 	bge	zero,r3,8009df0 <__multiply+0x24c>
 8009dc0:	d8c00317 	ldw	r3,12(sp)
 8009dc4:	18bfff17 	ldw	r2,-4(r3)
 8009dc8:	1d7fff04 	addi	r21,r3,-4
 8009dcc:	10000326 	beq	r2,zero,8009ddc <__multiply+0x238>
 8009dd0:	00000706 	br	8009df0 <__multiply+0x24c>
 8009dd4:	a8800017 	ldw	r2,0(r21)
 8009dd8:	1000051e 	bne	r2,zero,8009df0 <__multiply+0x24c>
 8009ddc:	d8c00217 	ldw	r3,8(sp)
 8009de0:	ad7fff04 	addi	r21,r21,-4
 8009de4:	18ffffc4 	addi	r3,r3,-1
 8009de8:	d8c00215 	stw	r3,8(sp)
 8009dec:	183ff91e 	bne	r3,zero,8009dd4 <__alt_data_end+0xfc009dd4>
 8009df0:	d8c00617 	ldw	r3,24(sp)
 8009df4:	d9000217 	ldw	r4,8(sp)
 8009df8:	1805883a 	mov	r2,r3
 8009dfc:	19000415 	stw	r4,16(r3)
 8009e00:	dfc01017 	ldw	ra,64(sp)
 8009e04:	df000f17 	ldw	fp,60(sp)
 8009e08:	ddc00e17 	ldw	r23,56(sp)
 8009e0c:	dd800d17 	ldw	r22,52(sp)
 8009e10:	dd400c17 	ldw	r21,48(sp)
 8009e14:	dd000b17 	ldw	r20,44(sp)
 8009e18:	dcc00a17 	ldw	r19,40(sp)
 8009e1c:	dc800917 	ldw	r18,36(sp)
 8009e20:	dc400817 	ldw	r17,32(sp)
 8009e24:	dc000717 	ldw	r16,28(sp)
 8009e28:	dec01104 	addi	sp,sp,68
 8009e2c:	f800283a 	ret

08009e30 <__pow5mult>:
 8009e30:	defffa04 	addi	sp,sp,-24
 8009e34:	dcc00315 	stw	r19,12(sp)
 8009e38:	dc000015 	stw	r16,0(sp)
 8009e3c:	dfc00515 	stw	ra,20(sp)
 8009e40:	dd000415 	stw	r20,16(sp)
 8009e44:	dc800215 	stw	r18,8(sp)
 8009e48:	dc400115 	stw	r17,4(sp)
 8009e4c:	308000cc 	andi	r2,r6,3
 8009e50:	3021883a 	mov	r16,r6
 8009e54:	2027883a 	mov	r19,r4
 8009e58:	10002f1e 	bne	r2,zero,8009f18 <__pow5mult+0xe8>
 8009e5c:	2825883a 	mov	r18,r5
 8009e60:	8021d0ba 	srai	r16,r16,2
 8009e64:	80001a26 	beq	r16,zero,8009ed0 <__pow5mult+0xa0>
 8009e68:	9c401217 	ldw	r17,72(r19)
 8009e6c:	8800061e 	bne	r17,zero,8009e88 <__pow5mult+0x58>
 8009e70:	00003406 	br	8009f44 <__pow5mult+0x114>
 8009e74:	8021d07a 	srai	r16,r16,1
 8009e78:	80001526 	beq	r16,zero,8009ed0 <__pow5mult+0xa0>
 8009e7c:	88800017 	ldw	r2,0(r17)
 8009e80:	10001c26 	beq	r2,zero,8009ef4 <__pow5mult+0xc4>
 8009e84:	1023883a 	mov	r17,r2
 8009e88:	8080004c 	andi	r2,r16,1
 8009e8c:	103ff926 	beq	r2,zero,8009e74 <__alt_data_end+0xfc009e74>
 8009e90:	880d883a 	mov	r6,r17
 8009e94:	900b883a 	mov	r5,r18
 8009e98:	9809883a 	mov	r4,r19
 8009e9c:	8009ba40 	call	8009ba4 <__multiply>
 8009ea0:	90001b26 	beq	r18,zero,8009f10 <__pow5mult+0xe0>
 8009ea4:	91000117 	ldw	r4,4(r18)
 8009ea8:	98c01317 	ldw	r3,76(r19)
 8009eac:	8021d07a 	srai	r16,r16,1
 8009eb0:	2109883a 	add	r4,r4,r4
 8009eb4:	2109883a 	add	r4,r4,r4
 8009eb8:	1907883a 	add	r3,r3,r4
 8009ebc:	19000017 	ldw	r4,0(r3)
 8009ec0:	91000015 	stw	r4,0(r18)
 8009ec4:	1c800015 	stw	r18,0(r3)
 8009ec8:	1025883a 	mov	r18,r2
 8009ecc:	803feb1e 	bne	r16,zero,8009e7c <__alt_data_end+0xfc009e7c>
 8009ed0:	9005883a 	mov	r2,r18
 8009ed4:	dfc00517 	ldw	ra,20(sp)
 8009ed8:	dd000417 	ldw	r20,16(sp)
 8009edc:	dcc00317 	ldw	r19,12(sp)
 8009ee0:	dc800217 	ldw	r18,8(sp)
 8009ee4:	dc400117 	ldw	r17,4(sp)
 8009ee8:	dc000017 	ldw	r16,0(sp)
 8009eec:	dec00604 	addi	sp,sp,24
 8009ef0:	f800283a 	ret
 8009ef4:	880d883a 	mov	r6,r17
 8009ef8:	880b883a 	mov	r5,r17
 8009efc:	9809883a 	mov	r4,r19
 8009f00:	8009ba40 	call	8009ba4 <__multiply>
 8009f04:	88800015 	stw	r2,0(r17)
 8009f08:	10000015 	stw	zero,0(r2)
 8009f0c:	003fdd06 	br	8009e84 <__alt_data_end+0xfc009e84>
 8009f10:	1025883a 	mov	r18,r2
 8009f14:	003fd706 	br	8009e74 <__alt_data_end+0xfc009e74>
 8009f18:	10bfffc4 	addi	r2,r2,-1
 8009f1c:	1085883a 	add	r2,r2,r2
 8009f20:	00c200f4 	movhi	r3,2051
 8009f24:	18c53c04 	addi	r3,r3,5360
 8009f28:	1085883a 	add	r2,r2,r2
 8009f2c:	1885883a 	add	r2,r3,r2
 8009f30:	11800017 	ldw	r6,0(r2)
 8009f34:	000f883a 	mov	r7,zero
 8009f38:	80098040 	call	8009804 <__multadd>
 8009f3c:	1025883a 	mov	r18,r2
 8009f40:	003fc706 	br	8009e60 <__alt_data_end+0xfc009e60>
 8009f44:	05000044 	movi	r20,1
 8009f48:	a00b883a 	mov	r5,r20
 8009f4c:	9809883a 	mov	r4,r19
 8009f50:	80097340 	call	8009734 <_Balloc>
 8009f54:	1023883a 	mov	r17,r2
 8009f58:	00809c44 	movi	r2,625
 8009f5c:	88800515 	stw	r2,20(r17)
 8009f60:	8d000415 	stw	r20,16(r17)
 8009f64:	9c401215 	stw	r17,72(r19)
 8009f68:	88000015 	stw	zero,0(r17)
 8009f6c:	003fc606 	br	8009e88 <__alt_data_end+0xfc009e88>

08009f70 <__lshift>:
 8009f70:	defff904 	addi	sp,sp,-28
 8009f74:	dd400515 	stw	r21,20(sp)
 8009f78:	dcc00315 	stw	r19,12(sp)
 8009f7c:	302bd17a 	srai	r21,r6,5
 8009f80:	2cc00417 	ldw	r19,16(r5)
 8009f84:	28800217 	ldw	r2,8(r5)
 8009f88:	dd000415 	stw	r20,16(sp)
 8009f8c:	ace7883a 	add	r19,r21,r19
 8009f90:	dc800215 	stw	r18,8(sp)
 8009f94:	dc400115 	stw	r17,4(sp)
 8009f98:	dc000015 	stw	r16,0(sp)
 8009f9c:	dfc00615 	stw	ra,24(sp)
 8009fa0:	9c000044 	addi	r16,r19,1
 8009fa4:	2823883a 	mov	r17,r5
 8009fa8:	3029883a 	mov	r20,r6
 8009fac:	2025883a 	mov	r18,r4
 8009fb0:	29400117 	ldw	r5,4(r5)
 8009fb4:	1400030e 	bge	r2,r16,8009fc4 <__lshift+0x54>
 8009fb8:	1085883a 	add	r2,r2,r2
 8009fbc:	29400044 	addi	r5,r5,1
 8009fc0:	143ffd16 	blt	r2,r16,8009fb8 <__alt_data_end+0xfc009fb8>
 8009fc4:	9009883a 	mov	r4,r18
 8009fc8:	80097340 	call	8009734 <_Balloc>
 8009fcc:	10c00504 	addi	r3,r2,20
 8009fd0:	0540070e 	bge	zero,r21,8009ff0 <__lshift+0x80>
 8009fd4:	ad6b883a 	add	r21,r21,r21
 8009fd8:	ad6b883a 	add	r21,r21,r21
 8009fdc:	1809883a 	mov	r4,r3
 8009fe0:	1d47883a 	add	r3,r3,r21
 8009fe4:	20000015 	stw	zero,0(r4)
 8009fe8:	21000104 	addi	r4,r4,4
 8009fec:	193ffd1e 	bne	r3,r4,8009fe4 <__alt_data_end+0xfc009fe4>
 8009ff0:	8a000417 	ldw	r8,16(r17)
 8009ff4:	89000504 	addi	r4,r17,20
 8009ff8:	a18007cc 	andi	r6,r20,31
 8009ffc:	4211883a 	add	r8,r8,r8
 800a000:	4211883a 	add	r8,r8,r8
 800a004:	2211883a 	add	r8,r4,r8
 800a008:	30002326 	beq	r6,zero,800a098 <__lshift+0x128>
 800a00c:	02400804 	movi	r9,32
 800a010:	4993c83a 	sub	r9,r9,r6
 800a014:	000b883a 	mov	r5,zero
 800a018:	21c00017 	ldw	r7,0(r4)
 800a01c:	1815883a 	mov	r10,r3
 800a020:	18c00104 	addi	r3,r3,4
 800a024:	398e983a 	sll	r7,r7,r6
 800a028:	21000104 	addi	r4,r4,4
 800a02c:	394ab03a 	or	r5,r7,r5
 800a030:	197fff15 	stw	r5,-4(r3)
 800a034:	217fff17 	ldw	r5,-4(r4)
 800a038:	2a4ad83a 	srl	r5,r5,r9
 800a03c:	223ff636 	bltu	r4,r8,800a018 <__alt_data_end+0xfc00a018>
 800a040:	51400115 	stw	r5,4(r10)
 800a044:	28001a1e 	bne	r5,zero,800a0b0 <__lshift+0x140>
 800a048:	843fffc4 	addi	r16,r16,-1
 800a04c:	14000415 	stw	r16,16(r2)
 800a050:	88000826 	beq	r17,zero,800a074 <__lshift+0x104>
 800a054:	89000117 	ldw	r4,4(r17)
 800a058:	90c01317 	ldw	r3,76(r18)
 800a05c:	2109883a 	add	r4,r4,r4
 800a060:	2109883a 	add	r4,r4,r4
 800a064:	1907883a 	add	r3,r3,r4
 800a068:	19000017 	ldw	r4,0(r3)
 800a06c:	89000015 	stw	r4,0(r17)
 800a070:	1c400015 	stw	r17,0(r3)
 800a074:	dfc00617 	ldw	ra,24(sp)
 800a078:	dd400517 	ldw	r21,20(sp)
 800a07c:	dd000417 	ldw	r20,16(sp)
 800a080:	dcc00317 	ldw	r19,12(sp)
 800a084:	dc800217 	ldw	r18,8(sp)
 800a088:	dc400117 	ldw	r17,4(sp)
 800a08c:	dc000017 	ldw	r16,0(sp)
 800a090:	dec00704 	addi	sp,sp,28
 800a094:	f800283a 	ret
 800a098:	21400017 	ldw	r5,0(r4)
 800a09c:	18c00104 	addi	r3,r3,4
 800a0a0:	21000104 	addi	r4,r4,4
 800a0a4:	197fff15 	stw	r5,-4(r3)
 800a0a8:	223ffb36 	bltu	r4,r8,800a098 <__alt_data_end+0xfc00a098>
 800a0ac:	003fe606 	br	800a048 <__alt_data_end+0xfc00a048>
 800a0b0:	9c000084 	addi	r16,r19,2
 800a0b4:	003fe406 	br	800a048 <__alt_data_end+0xfc00a048>

0800a0b8 <__mcmp>:
 800a0b8:	20800417 	ldw	r2,16(r4)
 800a0bc:	28c00417 	ldw	r3,16(r5)
 800a0c0:	10c5c83a 	sub	r2,r2,r3
 800a0c4:	1000111e 	bne	r2,zero,800a10c <__mcmp+0x54>
 800a0c8:	18c7883a 	add	r3,r3,r3
 800a0cc:	18c7883a 	add	r3,r3,r3
 800a0d0:	21000504 	addi	r4,r4,20
 800a0d4:	29400504 	addi	r5,r5,20
 800a0d8:	20c5883a 	add	r2,r4,r3
 800a0dc:	28cb883a 	add	r5,r5,r3
 800a0e0:	00000106 	br	800a0e8 <__mcmp+0x30>
 800a0e4:	20800a2e 	bgeu	r4,r2,800a110 <__mcmp+0x58>
 800a0e8:	10bfff04 	addi	r2,r2,-4
 800a0ec:	297fff04 	addi	r5,r5,-4
 800a0f0:	11800017 	ldw	r6,0(r2)
 800a0f4:	28c00017 	ldw	r3,0(r5)
 800a0f8:	30fffa26 	beq	r6,r3,800a0e4 <__alt_data_end+0xfc00a0e4>
 800a0fc:	30c00236 	bltu	r6,r3,800a108 <__mcmp+0x50>
 800a100:	00800044 	movi	r2,1
 800a104:	f800283a 	ret
 800a108:	00bfffc4 	movi	r2,-1
 800a10c:	f800283a 	ret
 800a110:	0005883a 	mov	r2,zero
 800a114:	f800283a 	ret

0800a118 <__mdiff>:
 800a118:	28c00417 	ldw	r3,16(r5)
 800a11c:	30800417 	ldw	r2,16(r6)
 800a120:	defffa04 	addi	sp,sp,-24
 800a124:	dcc00315 	stw	r19,12(sp)
 800a128:	dc800215 	stw	r18,8(sp)
 800a12c:	dfc00515 	stw	ra,20(sp)
 800a130:	dd000415 	stw	r20,16(sp)
 800a134:	dc400115 	stw	r17,4(sp)
 800a138:	dc000015 	stw	r16,0(sp)
 800a13c:	1887c83a 	sub	r3,r3,r2
 800a140:	2825883a 	mov	r18,r5
 800a144:	3027883a 	mov	r19,r6
 800a148:	1800141e 	bne	r3,zero,800a19c <__mdiff+0x84>
 800a14c:	1085883a 	add	r2,r2,r2
 800a150:	1085883a 	add	r2,r2,r2
 800a154:	2a000504 	addi	r8,r5,20
 800a158:	34000504 	addi	r16,r6,20
 800a15c:	4087883a 	add	r3,r8,r2
 800a160:	8085883a 	add	r2,r16,r2
 800a164:	00000106 	br	800a16c <__mdiff+0x54>
 800a168:	40c0592e 	bgeu	r8,r3,800a2d0 <__mdiff+0x1b8>
 800a16c:	18ffff04 	addi	r3,r3,-4
 800a170:	10bfff04 	addi	r2,r2,-4
 800a174:	19c00017 	ldw	r7,0(r3)
 800a178:	11400017 	ldw	r5,0(r2)
 800a17c:	397ffa26 	beq	r7,r5,800a168 <__alt_data_end+0xfc00a168>
 800a180:	3940592e 	bgeu	r7,r5,800a2e8 <__mdiff+0x1d0>
 800a184:	9005883a 	mov	r2,r18
 800a188:	4023883a 	mov	r17,r8
 800a18c:	9825883a 	mov	r18,r19
 800a190:	05000044 	movi	r20,1
 800a194:	1027883a 	mov	r19,r2
 800a198:	00000406 	br	800a1ac <__mdiff+0x94>
 800a19c:	18005616 	blt	r3,zero,800a2f8 <__mdiff+0x1e0>
 800a1a0:	34400504 	addi	r17,r6,20
 800a1a4:	2c000504 	addi	r16,r5,20
 800a1a8:	0029883a 	mov	r20,zero
 800a1ac:	91400117 	ldw	r5,4(r18)
 800a1b0:	80097340 	call	8009734 <_Balloc>
 800a1b4:	92400417 	ldw	r9,16(r18)
 800a1b8:	9b000417 	ldw	r12,16(r19)
 800a1bc:	12c00504 	addi	r11,r2,20
 800a1c0:	4a51883a 	add	r8,r9,r9
 800a1c4:	6319883a 	add	r12,r12,r12
 800a1c8:	4211883a 	add	r8,r8,r8
 800a1cc:	6319883a 	add	r12,r12,r12
 800a1d0:	15000315 	stw	r20,12(r2)
 800a1d4:	8211883a 	add	r8,r16,r8
 800a1d8:	8b19883a 	add	r12,r17,r12
 800a1dc:	0007883a 	mov	r3,zero
 800a1e0:	81400017 	ldw	r5,0(r16)
 800a1e4:	89c00017 	ldw	r7,0(r17)
 800a1e8:	59800104 	addi	r6,r11,4
 800a1ec:	293fffcc 	andi	r4,r5,65535
 800a1f0:	20c7883a 	add	r3,r4,r3
 800a1f4:	393fffcc 	andi	r4,r7,65535
 800a1f8:	1909c83a 	sub	r4,r3,r4
 800a1fc:	280ad43a 	srli	r5,r5,16
 800a200:	380ed43a 	srli	r7,r7,16
 800a204:	2007d43a 	srai	r3,r4,16
 800a208:	213fffcc 	andi	r4,r4,65535
 800a20c:	29cbc83a 	sub	r5,r5,r7
 800a210:	28c7883a 	add	r3,r5,r3
 800a214:	180a943a 	slli	r5,r3,16
 800a218:	8c400104 	addi	r17,r17,4
 800a21c:	84000104 	addi	r16,r16,4
 800a220:	2908b03a 	or	r4,r5,r4
 800a224:	59000015 	stw	r4,0(r11)
 800a228:	1807d43a 	srai	r3,r3,16
 800a22c:	3015883a 	mov	r10,r6
 800a230:	3017883a 	mov	r11,r6
 800a234:	8b3fea36 	bltu	r17,r12,800a1e0 <__alt_data_end+0xfc00a1e0>
 800a238:	8200162e 	bgeu	r16,r8,800a294 <__mdiff+0x17c>
 800a23c:	8017883a 	mov	r11,r16
 800a240:	59400017 	ldw	r5,0(r11)
 800a244:	31800104 	addi	r6,r6,4
 800a248:	5ac00104 	addi	r11,r11,4
 800a24c:	293fffcc 	andi	r4,r5,65535
 800a250:	20c7883a 	add	r3,r4,r3
 800a254:	280ed43a 	srli	r7,r5,16
 800a258:	180bd43a 	srai	r5,r3,16
 800a25c:	193fffcc 	andi	r4,r3,65535
 800a260:	3947883a 	add	r3,r7,r5
 800a264:	180a943a 	slli	r5,r3,16
 800a268:	1807d43a 	srai	r3,r3,16
 800a26c:	2908b03a 	or	r4,r5,r4
 800a270:	313fff15 	stw	r4,-4(r6)
 800a274:	5a3ff236 	bltu	r11,r8,800a240 <__alt_data_end+0xfc00a240>
 800a278:	0406303a 	nor	r3,zero,r16
 800a27c:	1a07883a 	add	r3,r3,r8
 800a280:	1806d0ba 	srli	r3,r3,2
 800a284:	18c00044 	addi	r3,r3,1
 800a288:	18c7883a 	add	r3,r3,r3
 800a28c:	18c7883a 	add	r3,r3,r3
 800a290:	50d5883a 	add	r10,r10,r3
 800a294:	50ffff04 	addi	r3,r10,-4
 800a298:	2000041e 	bne	r4,zero,800a2ac <__mdiff+0x194>
 800a29c:	18ffff04 	addi	r3,r3,-4
 800a2a0:	19000017 	ldw	r4,0(r3)
 800a2a4:	4a7fffc4 	addi	r9,r9,-1
 800a2a8:	203ffc26 	beq	r4,zero,800a29c <__alt_data_end+0xfc00a29c>
 800a2ac:	12400415 	stw	r9,16(r2)
 800a2b0:	dfc00517 	ldw	ra,20(sp)
 800a2b4:	dd000417 	ldw	r20,16(sp)
 800a2b8:	dcc00317 	ldw	r19,12(sp)
 800a2bc:	dc800217 	ldw	r18,8(sp)
 800a2c0:	dc400117 	ldw	r17,4(sp)
 800a2c4:	dc000017 	ldw	r16,0(sp)
 800a2c8:	dec00604 	addi	sp,sp,24
 800a2cc:	f800283a 	ret
 800a2d0:	000b883a 	mov	r5,zero
 800a2d4:	80097340 	call	8009734 <_Balloc>
 800a2d8:	00c00044 	movi	r3,1
 800a2dc:	10c00415 	stw	r3,16(r2)
 800a2e0:	10000515 	stw	zero,20(r2)
 800a2e4:	003ff206 	br	800a2b0 <__alt_data_end+0xfc00a2b0>
 800a2e8:	8023883a 	mov	r17,r16
 800a2ec:	0029883a 	mov	r20,zero
 800a2f0:	4021883a 	mov	r16,r8
 800a2f4:	003fad06 	br	800a1ac <__alt_data_end+0xfc00a1ac>
 800a2f8:	9005883a 	mov	r2,r18
 800a2fc:	94400504 	addi	r17,r18,20
 800a300:	9c000504 	addi	r16,r19,20
 800a304:	9825883a 	mov	r18,r19
 800a308:	05000044 	movi	r20,1
 800a30c:	1027883a 	mov	r19,r2
 800a310:	003fa606 	br	800a1ac <__alt_data_end+0xfc00a1ac>

0800a314 <__ulp>:
 800a314:	295ffc2c 	andhi	r5,r5,32752
 800a318:	00bf3034 	movhi	r2,64704
 800a31c:	2887883a 	add	r3,r5,r2
 800a320:	00c0020e 	bge	zero,r3,800a32c <__ulp+0x18>
 800a324:	0005883a 	mov	r2,zero
 800a328:	f800283a 	ret
 800a32c:	00c7c83a 	sub	r3,zero,r3
 800a330:	1807d53a 	srai	r3,r3,20
 800a334:	008004c4 	movi	r2,19
 800a338:	10c00b0e 	bge	r2,r3,800a368 <__ulp+0x54>
 800a33c:	18bffb04 	addi	r2,r3,-20
 800a340:	01000784 	movi	r4,30
 800a344:	0007883a 	mov	r3,zero
 800a348:	20800516 	blt	r4,r2,800a360 <__ulp+0x4c>
 800a34c:	010007c4 	movi	r4,31
 800a350:	2089c83a 	sub	r4,r4,r2
 800a354:	00800044 	movi	r2,1
 800a358:	1104983a 	sll	r2,r2,r4
 800a35c:	f800283a 	ret
 800a360:	00800044 	movi	r2,1
 800a364:	f800283a 	ret
 800a368:	01400234 	movhi	r5,8
 800a36c:	28c7d83a 	sra	r3,r5,r3
 800a370:	0005883a 	mov	r2,zero
 800a374:	f800283a 	ret

0800a378 <__b2d>:
 800a378:	defffa04 	addi	sp,sp,-24
 800a37c:	dc000015 	stw	r16,0(sp)
 800a380:	24000417 	ldw	r16,16(r4)
 800a384:	dc400115 	stw	r17,4(sp)
 800a388:	24400504 	addi	r17,r4,20
 800a38c:	8421883a 	add	r16,r16,r16
 800a390:	8421883a 	add	r16,r16,r16
 800a394:	8c21883a 	add	r16,r17,r16
 800a398:	dc800215 	stw	r18,8(sp)
 800a39c:	84bfff17 	ldw	r18,-4(r16)
 800a3a0:	dd000415 	stw	r20,16(sp)
 800a3a4:	dcc00315 	stw	r19,12(sp)
 800a3a8:	9009883a 	mov	r4,r18
 800a3ac:	2829883a 	mov	r20,r5
 800a3b0:	dfc00515 	stw	ra,20(sp)
 800a3b4:	8009a500 	call	8009a50 <__hi0bits>
 800a3b8:	00c00804 	movi	r3,32
 800a3bc:	1889c83a 	sub	r4,r3,r2
 800a3c0:	a1000015 	stw	r4,0(r20)
 800a3c4:	01000284 	movi	r4,10
 800a3c8:	84ffff04 	addi	r19,r16,-4
 800a3cc:	20801216 	blt	r4,r2,800a418 <__b2d+0xa0>
 800a3d0:	018002c4 	movi	r6,11
 800a3d4:	308dc83a 	sub	r6,r6,r2
 800a3d8:	9186d83a 	srl	r3,r18,r6
 800a3dc:	18cffc34 	orhi	r3,r3,16368
 800a3e0:	8cc0212e 	bgeu	r17,r19,800a468 <__b2d+0xf0>
 800a3e4:	813ffe17 	ldw	r4,-8(r16)
 800a3e8:	218cd83a 	srl	r6,r4,r6
 800a3ec:	10800544 	addi	r2,r2,21
 800a3f0:	9084983a 	sll	r2,r18,r2
 800a3f4:	1184b03a 	or	r2,r2,r6
 800a3f8:	dfc00517 	ldw	ra,20(sp)
 800a3fc:	dd000417 	ldw	r20,16(sp)
 800a400:	dcc00317 	ldw	r19,12(sp)
 800a404:	dc800217 	ldw	r18,8(sp)
 800a408:	dc400117 	ldw	r17,4(sp)
 800a40c:	dc000017 	ldw	r16,0(sp)
 800a410:	dec00604 	addi	sp,sp,24
 800a414:	f800283a 	ret
 800a418:	8cc00f2e 	bgeu	r17,r19,800a458 <__b2d+0xe0>
 800a41c:	117ffd44 	addi	r5,r2,-11
 800a420:	80bffe17 	ldw	r2,-8(r16)
 800a424:	28000e26 	beq	r5,zero,800a460 <__b2d+0xe8>
 800a428:	1949c83a 	sub	r4,r3,r5
 800a42c:	9164983a 	sll	r18,r18,r5
 800a430:	1106d83a 	srl	r3,r2,r4
 800a434:	81bffe04 	addi	r6,r16,-8
 800a438:	948ffc34 	orhi	r18,r18,16368
 800a43c:	90c6b03a 	or	r3,r18,r3
 800a440:	89800e2e 	bgeu	r17,r6,800a47c <__b2d+0x104>
 800a444:	81bffd17 	ldw	r6,-12(r16)
 800a448:	1144983a 	sll	r2,r2,r5
 800a44c:	310ad83a 	srl	r5,r6,r4
 800a450:	2884b03a 	or	r2,r5,r2
 800a454:	003fe806 	br	800a3f8 <__alt_data_end+0xfc00a3f8>
 800a458:	10bffd44 	addi	r2,r2,-11
 800a45c:	1000041e 	bne	r2,zero,800a470 <__b2d+0xf8>
 800a460:	90cffc34 	orhi	r3,r18,16368
 800a464:	003fe406 	br	800a3f8 <__alt_data_end+0xfc00a3f8>
 800a468:	000d883a 	mov	r6,zero
 800a46c:	003fdf06 	br	800a3ec <__alt_data_end+0xfc00a3ec>
 800a470:	90a4983a 	sll	r18,r18,r2
 800a474:	0005883a 	mov	r2,zero
 800a478:	003ff906 	br	800a460 <__alt_data_end+0xfc00a460>
 800a47c:	1144983a 	sll	r2,r2,r5
 800a480:	003fdd06 	br	800a3f8 <__alt_data_end+0xfc00a3f8>

0800a484 <__d2b>:
 800a484:	defff804 	addi	sp,sp,-32
 800a488:	dc000215 	stw	r16,8(sp)
 800a48c:	3021883a 	mov	r16,r6
 800a490:	dc400315 	stw	r17,12(sp)
 800a494:	8022907a 	slli	r17,r16,1
 800a498:	dd000615 	stw	r20,24(sp)
 800a49c:	2829883a 	mov	r20,r5
 800a4a0:	01400044 	movi	r5,1
 800a4a4:	dcc00515 	stw	r19,20(sp)
 800a4a8:	dc800415 	stw	r18,16(sp)
 800a4ac:	dfc00715 	stw	ra,28(sp)
 800a4b0:	3825883a 	mov	r18,r7
 800a4b4:	8822d57a 	srli	r17,r17,21
 800a4b8:	80097340 	call	8009734 <_Balloc>
 800a4bc:	1027883a 	mov	r19,r2
 800a4c0:	00800434 	movhi	r2,16
 800a4c4:	10bfffc4 	addi	r2,r2,-1
 800a4c8:	808c703a 	and	r6,r16,r2
 800a4cc:	88000126 	beq	r17,zero,800a4d4 <__d2b+0x50>
 800a4d0:	31800434 	orhi	r6,r6,16
 800a4d4:	d9800015 	stw	r6,0(sp)
 800a4d8:	a0002426 	beq	r20,zero,800a56c <__d2b+0xe8>
 800a4dc:	d9000104 	addi	r4,sp,4
 800a4e0:	dd000115 	stw	r20,4(sp)
 800a4e4:	8009ab80 	call	8009ab8 <__lo0bits>
 800a4e8:	d8c00017 	ldw	r3,0(sp)
 800a4ec:	10002f1e 	bne	r2,zero,800a5ac <__d2b+0x128>
 800a4f0:	d9000117 	ldw	r4,4(sp)
 800a4f4:	99000515 	stw	r4,20(r19)
 800a4f8:	1821003a 	cmpeq	r16,r3,zero
 800a4fc:	01000084 	movi	r4,2
 800a500:	2421c83a 	sub	r16,r4,r16
 800a504:	98c00615 	stw	r3,24(r19)
 800a508:	9c000415 	stw	r16,16(r19)
 800a50c:	88001f1e 	bne	r17,zero,800a58c <__d2b+0x108>
 800a510:	10bef384 	addi	r2,r2,-1074
 800a514:	90800015 	stw	r2,0(r18)
 800a518:	00900034 	movhi	r2,16384
 800a51c:	10bfffc4 	addi	r2,r2,-1
 800a520:	8085883a 	add	r2,r16,r2
 800a524:	1085883a 	add	r2,r2,r2
 800a528:	1085883a 	add	r2,r2,r2
 800a52c:	9885883a 	add	r2,r19,r2
 800a530:	11000517 	ldw	r4,20(r2)
 800a534:	8020917a 	slli	r16,r16,5
 800a538:	8009a500 	call	8009a50 <__hi0bits>
 800a53c:	d8c00817 	ldw	r3,32(sp)
 800a540:	8085c83a 	sub	r2,r16,r2
 800a544:	18800015 	stw	r2,0(r3)
 800a548:	9805883a 	mov	r2,r19
 800a54c:	dfc00717 	ldw	ra,28(sp)
 800a550:	dd000617 	ldw	r20,24(sp)
 800a554:	dcc00517 	ldw	r19,20(sp)
 800a558:	dc800417 	ldw	r18,16(sp)
 800a55c:	dc400317 	ldw	r17,12(sp)
 800a560:	dc000217 	ldw	r16,8(sp)
 800a564:	dec00804 	addi	sp,sp,32
 800a568:	f800283a 	ret
 800a56c:	d809883a 	mov	r4,sp
 800a570:	8009ab80 	call	8009ab8 <__lo0bits>
 800a574:	d8c00017 	ldw	r3,0(sp)
 800a578:	04000044 	movi	r16,1
 800a57c:	9c000415 	stw	r16,16(r19)
 800a580:	98c00515 	stw	r3,20(r19)
 800a584:	10800804 	addi	r2,r2,32
 800a588:	883fe126 	beq	r17,zero,800a510 <__alt_data_end+0xfc00a510>
 800a58c:	00c00d44 	movi	r3,53
 800a590:	8c7ef344 	addi	r17,r17,-1075
 800a594:	88a3883a 	add	r17,r17,r2
 800a598:	1885c83a 	sub	r2,r3,r2
 800a59c:	d8c00817 	ldw	r3,32(sp)
 800a5a0:	94400015 	stw	r17,0(r18)
 800a5a4:	18800015 	stw	r2,0(r3)
 800a5a8:	003fe706 	br	800a548 <__alt_data_end+0xfc00a548>
 800a5ac:	01000804 	movi	r4,32
 800a5b0:	2089c83a 	sub	r4,r4,r2
 800a5b4:	1908983a 	sll	r4,r3,r4
 800a5b8:	d9400117 	ldw	r5,4(sp)
 800a5bc:	1886d83a 	srl	r3,r3,r2
 800a5c0:	2148b03a 	or	r4,r4,r5
 800a5c4:	99000515 	stw	r4,20(r19)
 800a5c8:	d8c00015 	stw	r3,0(sp)
 800a5cc:	003fca06 	br	800a4f8 <__alt_data_end+0xfc00a4f8>

0800a5d0 <__ratio>:
 800a5d0:	defff904 	addi	sp,sp,-28
 800a5d4:	dc400315 	stw	r17,12(sp)
 800a5d8:	2823883a 	mov	r17,r5
 800a5dc:	d9400104 	addi	r5,sp,4
 800a5e0:	dfc00615 	stw	ra,24(sp)
 800a5e4:	dcc00515 	stw	r19,20(sp)
 800a5e8:	dc800415 	stw	r18,16(sp)
 800a5ec:	2027883a 	mov	r19,r4
 800a5f0:	dc000215 	stw	r16,8(sp)
 800a5f4:	800a3780 	call	800a378 <__b2d>
 800a5f8:	d80b883a 	mov	r5,sp
 800a5fc:	8809883a 	mov	r4,r17
 800a600:	1025883a 	mov	r18,r2
 800a604:	1821883a 	mov	r16,r3
 800a608:	800a3780 	call	800a378 <__b2d>
 800a60c:	8a000417 	ldw	r8,16(r17)
 800a610:	99000417 	ldw	r4,16(r19)
 800a614:	d9400117 	ldw	r5,4(sp)
 800a618:	2209c83a 	sub	r4,r4,r8
 800a61c:	2010917a 	slli	r8,r4,5
 800a620:	d9000017 	ldw	r4,0(sp)
 800a624:	2909c83a 	sub	r4,r5,r4
 800a628:	4109883a 	add	r4,r8,r4
 800a62c:	01000e0e 	bge	zero,r4,800a668 <__ratio+0x98>
 800a630:	2008953a 	slli	r4,r4,20
 800a634:	2421883a 	add	r16,r4,r16
 800a638:	100d883a 	mov	r6,r2
 800a63c:	180f883a 	mov	r7,r3
 800a640:	9009883a 	mov	r4,r18
 800a644:	800b883a 	mov	r5,r16
 800a648:	800e4e00 	call	800e4e0 <__divdf3>
 800a64c:	dfc00617 	ldw	ra,24(sp)
 800a650:	dcc00517 	ldw	r19,20(sp)
 800a654:	dc800417 	ldw	r18,16(sp)
 800a658:	dc400317 	ldw	r17,12(sp)
 800a65c:	dc000217 	ldw	r16,8(sp)
 800a660:	dec00704 	addi	sp,sp,28
 800a664:	f800283a 	ret
 800a668:	2008953a 	slli	r4,r4,20
 800a66c:	1907c83a 	sub	r3,r3,r4
 800a670:	003ff106 	br	800a638 <__alt_data_end+0xfc00a638>

0800a674 <_mprec_log10>:
 800a674:	defffe04 	addi	sp,sp,-8
 800a678:	dc000015 	stw	r16,0(sp)
 800a67c:	dfc00115 	stw	ra,4(sp)
 800a680:	008005c4 	movi	r2,23
 800a684:	2021883a 	mov	r16,r4
 800a688:	11000d0e 	bge	r2,r4,800a6c0 <_mprec_log10+0x4c>
 800a68c:	0005883a 	mov	r2,zero
 800a690:	00cffc34 	movhi	r3,16368
 800a694:	843fffc4 	addi	r16,r16,-1
 800a698:	000d883a 	mov	r6,zero
 800a69c:	01d00934 	movhi	r7,16420
 800a6a0:	1009883a 	mov	r4,r2
 800a6a4:	180b883a 	mov	r5,r3
 800a6a8:	800f1080 	call	800f108 <__muldf3>
 800a6ac:	803ff91e 	bne	r16,zero,800a694 <__alt_data_end+0xfc00a694>
 800a6b0:	dfc00117 	ldw	ra,4(sp)
 800a6b4:	dc000017 	ldw	r16,0(sp)
 800a6b8:	dec00204 	addi	sp,sp,8
 800a6bc:	f800283a 	ret
 800a6c0:	202090fa 	slli	r16,r4,3
 800a6c4:	008200f4 	movhi	r2,2051
 800a6c8:	10855304 	addi	r2,r2,5452
 800a6cc:	1421883a 	add	r16,r2,r16
 800a6d0:	80800017 	ldw	r2,0(r16)
 800a6d4:	80c00117 	ldw	r3,4(r16)
 800a6d8:	dfc00117 	ldw	ra,4(sp)
 800a6dc:	dc000017 	ldw	r16,0(sp)
 800a6e0:	dec00204 	addi	sp,sp,8
 800a6e4:	f800283a 	ret

0800a6e8 <__copybits>:
 800a6e8:	297fffc4 	addi	r5,r5,-1
 800a6ec:	280fd17a 	srai	r7,r5,5
 800a6f0:	30c00417 	ldw	r3,16(r6)
 800a6f4:	30800504 	addi	r2,r6,20
 800a6f8:	39c00044 	addi	r7,r7,1
 800a6fc:	18c7883a 	add	r3,r3,r3
 800a700:	39cf883a 	add	r7,r7,r7
 800a704:	18c7883a 	add	r3,r3,r3
 800a708:	39cf883a 	add	r7,r7,r7
 800a70c:	10c7883a 	add	r3,r2,r3
 800a710:	21cf883a 	add	r7,r4,r7
 800a714:	10c00d2e 	bgeu	r2,r3,800a74c <__copybits+0x64>
 800a718:	200b883a 	mov	r5,r4
 800a71c:	12000017 	ldw	r8,0(r2)
 800a720:	29400104 	addi	r5,r5,4
 800a724:	10800104 	addi	r2,r2,4
 800a728:	2a3fff15 	stw	r8,-4(r5)
 800a72c:	10fffb36 	bltu	r2,r3,800a71c <__alt_data_end+0xfc00a71c>
 800a730:	1985c83a 	sub	r2,r3,r6
 800a734:	10bffac4 	addi	r2,r2,-21
 800a738:	1004d0ba 	srli	r2,r2,2
 800a73c:	10800044 	addi	r2,r2,1
 800a740:	1085883a 	add	r2,r2,r2
 800a744:	1085883a 	add	r2,r2,r2
 800a748:	2089883a 	add	r4,r4,r2
 800a74c:	21c0032e 	bgeu	r4,r7,800a75c <__copybits+0x74>
 800a750:	20000015 	stw	zero,0(r4)
 800a754:	21000104 	addi	r4,r4,4
 800a758:	21fffd36 	bltu	r4,r7,800a750 <__alt_data_end+0xfc00a750>
 800a75c:	f800283a 	ret

0800a760 <__any_on>:
 800a760:	20c00417 	ldw	r3,16(r4)
 800a764:	2805d17a 	srai	r2,r5,5
 800a768:	21000504 	addi	r4,r4,20
 800a76c:	18800d0e 	bge	r3,r2,800a7a4 <__any_on+0x44>
 800a770:	18c7883a 	add	r3,r3,r3
 800a774:	18c7883a 	add	r3,r3,r3
 800a778:	20c7883a 	add	r3,r4,r3
 800a77c:	20c0192e 	bgeu	r4,r3,800a7e4 <__any_on+0x84>
 800a780:	18bfff17 	ldw	r2,-4(r3)
 800a784:	18ffff04 	addi	r3,r3,-4
 800a788:	1000041e 	bne	r2,zero,800a79c <__any_on+0x3c>
 800a78c:	20c0142e 	bgeu	r4,r3,800a7e0 <__any_on+0x80>
 800a790:	18ffff04 	addi	r3,r3,-4
 800a794:	19400017 	ldw	r5,0(r3)
 800a798:	283ffc26 	beq	r5,zero,800a78c <__alt_data_end+0xfc00a78c>
 800a79c:	00800044 	movi	r2,1
 800a7a0:	f800283a 	ret
 800a7a4:	10c00a0e 	bge	r2,r3,800a7d0 <__any_on+0x70>
 800a7a8:	1085883a 	add	r2,r2,r2
 800a7ac:	1085883a 	add	r2,r2,r2
 800a7b0:	294007cc 	andi	r5,r5,31
 800a7b4:	2087883a 	add	r3,r4,r2
 800a7b8:	283ff026 	beq	r5,zero,800a77c <__alt_data_end+0xfc00a77c>
 800a7bc:	19800017 	ldw	r6,0(r3)
 800a7c0:	3144d83a 	srl	r2,r6,r5
 800a7c4:	114a983a 	sll	r5,r2,r5
 800a7c8:	317ff41e 	bne	r6,r5,800a79c <__alt_data_end+0xfc00a79c>
 800a7cc:	003feb06 	br	800a77c <__alt_data_end+0xfc00a77c>
 800a7d0:	1085883a 	add	r2,r2,r2
 800a7d4:	1085883a 	add	r2,r2,r2
 800a7d8:	2087883a 	add	r3,r4,r2
 800a7dc:	003fe706 	br	800a77c <__alt_data_end+0xfc00a77c>
 800a7e0:	f800283a 	ret
 800a7e4:	0005883a 	mov	r2,zero
 800a7e8:	f800283a 	ret

0800a7ec <_realloc_r>:
 800a7ec:	defff604 	addi	sp,sp,-40
 800a7f0:	dc800215 	stw	r18,8(sp)
 800a7f4:	dfc00915 	stw	ra,36(sp)
 800a7f8:	df000815 	stw	fp,32(sp)
 800a7fc:	ddc00715 	stw	r23,28(sp)
 800a800:	dd800615 	stw	r22,24(sp)
 800a804:	dd400515 	stw	r21,20(sp)
 800a808:	dd000415 	stw	r20,16(sp)
 800a80c:	dcc00315 	stw	r19,12(sp)
 800a810:	dc400115 	stw	r17,4(sp)
 800a814:	dc000015 	stw	r16,0(sp)
 800a818:	3025883a 	mov	r18,r6
 800a81c:	2800b726 	beq	r5,zero,800aafc <_realloc_r+0x310>
 800a820:	282b883a 	mov	r21,r5
 800a824:	2029883a 	mov	r20,r4
 800a828:	8010a740 	call	8010a74 <__malloc_lock>
 800a82c:	a8bfff17 	ldw	r2,-4(r21)
 800a830:	043fff04 	movi	r16,-4
 800a834:	90c002c4 	addi	r3,r18,11
 800a838:	01000584 	movi	r4,22
 800a83c:	acfffe04 	addi	r19,r21,-8
 800a840:	1420703a 	and	r16,r2,r16
 800a844:	20c0332e 	bgeu	r4,r3,800a914 <_realloc_r+0x128>
 800a848:	047ffe04 	movi	r17,-8
 800a84c:	1c62703a 	and	r17,r3,r17
 800a850:	8807883a 	mov	r3,r17
 800a854:	88005816 	blt	r17,zero,800a9b8 <_realloc_r+0x1cc>
 800a858:	8c805736 	bltu	r17,r18,800a9b8 <_realloc_r+0x1cc>
 800a85c:	80c0300e 	bge	r16,r3,800a920 <_realloc_r+0x134>
 800a860:	070200f4 	movhi	fp,2051
 800a864:	e7078504 	addi	fp,fp,7700
 800a868:	e1c00217 	ldw	r7,8(fp)
 800a86c:	9c09883a 	add	r4,r19,r16
 800a870:	22000117 	ldw	r8,4(r4)
 800a874:	21c06326 	beq	r4,r7,800aa04 <_realloc_r+0x218>
 800a878:	017fff84 	movi	r5,-2
 800a87c:	414a703a 	and	r5,r8,r5
 800a880:	214b883a 	add	r5,r4,r5
 800a884:	29800117 	ldw	r6,4(r5)
 800a888:	3180004c 	andi	r6,r6,1
 800a88c:	30003f26 	beq	r6,zero,800a98c <_realloc_r+0x1a0>
 800a890:	1080004c 	andi	r2,r2,1
 800a894:	10008326 	beq	r2,zero,800aaa4 <_realloc_r+0x2b8>
 800a898:	900b883a 	mov	r5,r18
 800a89c:	a009883a 	mov	r4,r20
 800a8a0:	8008a780 	call	8008a78 <_malloc_r>
 800a8a4:	1025883a 	mov	r18,r2
 800a8a8:	10011e26 	beq	r2,zero,800ad24 <_realloc_r+0x538>
 800a8ac:	a93fff17 	ldw	r4,-4(r21)
 800a8b0:	10fffe04 	addi	r3,r2,-8
 800a8b4:	00bfff84 	movi	r2,-2
 800a8b8:	2084703a 	and	r2,r4,r2
 800a8bc:	9885883a 	add	r2,r19,r2
 800a8c0:	1880ee26 	beq	r3,r2,800ac7c <_realloc_r+0x490>
 800a8c4:	81bfff04 	addi	r6,r16,-4
 800a8c8:	00800904 	movi	r2,36
 800a8cc:	1180b836 	bltu	r2,r6,800abb0 <_realloc_r+0x3c4>
 800a8d0:	00c004c4 	movi	r3,19
 800a8d4:	19809636 	bltu	r3,r6,800ab30 <_realloc_r+0x344>
 800a8d8:	9005883a 	mov	r2,r18
 800a8dc:	a807883a 	mov	r3,r21
 800a8e0:	19000017 	ldw	r4,0(r3)
 800a8e4:	11000015 	stw	r4,0(r2)
 800a8e8:	19000117 	ldw	r4,4(r3)
 800a8ec:	11000115 	stw	r4,4(r2)
 800a8f0:	18c00217 	ldw	r3,8(r3)
 800a8f4:	10c00215 	stw	r3,8(r2)
 800a8f8:	a80b883a 	mov	r5,r21
 800a8fc:	a009883a 	mov	r4,r20
 800a900:	8007e800 	call	8007e80 <_free_r>
 800a904:	a009883a 	mov	r4,r20
 800a908:	8010a980 	call	8010a98 <__malloc_unlock>
 800a90c:	9005883a 	mov	r2,r18
 800a910:	00001206 	br	800a95c <_realloc_r+0x170>
 800a914:	00c00404 	movi	r3,16
 800a918:	1823883a 	mov	r17,r3
 800a91c:	003fce06 	br	800a858 <__alt_data_end+0xfc00a858>
 800a920:	a825883a 	mov	r18,r21
 800a924:	8445c83a 	sub	r2,r16,r17
 800a928:	00c003c4 	movi	r3,15
 800a92c:	18802636 	bltu	r3,r2,800a9c8 <_realloc_r+0x1dc>
 800a930:	99800117 	ldw	r6,4(r19)
 800a934:	9c07883a 	add	r3,r19,r16
 800a938:	3180004c 	andi	r6,r6,1
 800a93c:	3420b03a 	or	r16,r6,r16
 800a940:	9c000115 	stw	r16,4(r19)
 800a944:	18800117 	ldw	r2,4(r3)
 800a948:	10800054 	ori	r2,r2,1
 800a94c:	18800115 	stw	r2,4(r3)
 800a950:	a009883a 	mov	r4,r20
 800a954:	8010a980 	call	8010a98 <__malloc_unlock>
 800a958:	9005883a 	mov	r2,r18
 800a95c:	dfc00917 	ldw	ra,36(sp)
 800a960:	df000817 	ldw	fp,32(sp)
 800a964:	ddc00717 	ldw	r23,28(sp)
 800a968:	dd800617 	ldw	r22,24(sp)
 800a96c:	dd400517 	ldw	r21,20(sp)
 800a970:	dd000417 	ldw	r20,16(sp)
 800a974:	dcc00317 	ldw	r19,12(sp)
 800a978:	dc800217 	ldw	r18,8(sp)
 800a97c:	dc400117 	ldw	r17,4(sp)
 800a980:	dc000017 	ldw	r16,0(sp)
 800a984:	dec00a04 	addi	sp,sp,40
 800a988:	f800283a 	ret
 800a98c:	017fff04 	movi	r5,-4
 800a990:	414a703a 	and	r5,r8,r5
 800a994:	814d883a 	add	r6,r16,r5
 800a998:	30c01f16 	blt	r6,r3,800aa18 <_realloc_r+0x22c>
 800a99c:	20800317 	ldw	r2,12(r4)
 800a9a0:	20c00217 	ldw	r3,8(r4)
 800a9a4:	a825883a 	mov	r18,r21
 800a9a8:	3021883a 	mov	r16,r6
 800a9ac:	18800315 	stw	r2,12(r3)
 800a9b0:	10c00215 	stw	r3,8(r2)
 800a9b4:	003fdb06 	br	800a924 <__alt_data_end+0xfc00a924>
 800a9b8:	00800304 	movi	r2,12
 800a9bc:	a0800015 	stw	r2,0(r20)
 800a9c0:	0005883a 	mov	r2,zero
 800a9c4:	003fe506 	br	800a95c <__alt_data_end+0xfc00a95c>
 800a9c8:	98c00117 	ldw	r3,4(r19)
 800a9cc:	9c4b883a 	add	r5,r19,r17
 800a9d0:	11000054 	ori	r4,r2,1
 800a9d4:	18c0004c 	andi	r3,r3,1
 800a9d8:	1c62b03a 	or	r17,r3,r17
 800a9dc:	9c400115 	stw	r17,4(r19)
 800a9e0:	29000115 	stw	r4,4(r5)
 800a9e4:	2885883a 	add	r2,r5,r2
 800a9e8:	10c00117 	ldw	r3,4(r2)
 800a9ec:	29400204 	addi	r5,r5,8
 800a9f0:	a009883a 	mov	r4,r20
 800a9f4:	18c00054 	ori	r3,r3,1
 800a9f8:	10c00115 	stw	r3,4(r2)
 800a9fc:	8007e800 	call	8007e80 <_free_r>
 800aa00:	003fd306 	br	800a950 <__alt_data_end+0xfc00a950>
 800aa04:	017fff04 	movi	r5,-4
 800aa08:	414a703a 	and	r5,r8,r5
 800aa0c:	89800404 	addi	r6,r17,16
 800aa10:	8151883a 	add	r8,r16,r5
 800aa14:	4180590e 	bge	r8,r6,800ab7c <_realloc_r+0x390>
 800aa18:	1080004c 	andi	r2,r2,1
 800aa1c:	103f9e1e 	bne	r2,zero,800a898 <__alt_data_end+0xfc00a898>
 800aa20:	adbffe17 	ldw	r22,-8(r21)
 800aa24:	00bfff04 	movi	r2,-4
 800aa28:	9dadc83a 	sub	r22,r19,r22
 800aa2c:	b1800117 	ldw	r6,4(r22)
 800aa30:	3084703a 	and	r2,r6,r2
 800aa34:	20002026 	beq	r4,zero,800aab8 <_realloc_r+0x2cc>
 800aa38:	80af883a 	add	r23,r16,r2
 800aa3c:	b96f883a 	add	r23,r23,r5
 800aa40:	21c05f26 	beq	r4,r7,800abc0 <_realloc_r+0x3d4>
 800aa44:	b8c01c16 	blt	r23,r3,800aab8 <_realloc_r+0x2cc>
 800aa48:	20800317 	ldw	r2,12(r4)
 800aa4c:	20c00217 	ldw	r3,8(r4)
 800aa50:	81bfff04 	addi	r6,r16,-4
 800aa54:	01000904 	movi	r4,36
 800aa58:	18800315 	stw	r2,12(r3)
 800aa5c:	10c00215 	stw	r3,8(r2)
 800aa60:	b0c00217 	ldw	r3,8(r22)
 800aa64:	b0800317 	ldw	r2,12(r22)
 800aa68:	b4800204 	addi	r18,r22,8
 800aa6c:	18800315 	stw	r2,12(r3)
 800aa70:	10c00215 	stw	r3,8(r2)
 800aa74:	21801b36 	bltu	r4,r6,800aae4 <_realloc_r+0x2f8>
 800aa78:	008004c4 	movi	r2,19
 800aa7c:	1180352e 	bgeu	r2,r6,800ab54 <_realloc_r+0x368>
 800aa80:	a8800017 	ldw	r2,0(r21)
 800aa84:	b0800215 	stw	r2,8(r22)
 800aa88:	a8800117 	ldw	r2,4(r21)
 800aa8c:	b0800315 	stw	r2,12(r22)
 800aa90:	008006c4 	movi	r2,27
 800aa94:	11807f36 	bltu	r2,r6,800ac94 <_realloc_r+0x4a8>
 800aa98:	b0800404 	addi	r2,r22,16
 800aa9c:	ad400204 	addi	r21,r21,8
 800aaa0:	00002d06 	br	800ab58 <_realloc_r+0x36c>
 800aaa4:	adbffe17 	ldw	r22,-8(r21)
 800aaa8:	00bfff04 	movi	r2,-4
 800aaac:	9dadc83a 	sub	r22,r19,r22
 800aab0:	b1000117 	ldw	r4,4(r22)
 800aab4:	2084703a 	and	r2,r4,r2
 800aab8:	b03f7726 	beq	r22,zero,800a898 <__alt_data_end+0xfc00a898>
 800aabc:	80af883a 	add	r23,r16,r2
 800aac0:	b8ff7516 	blt	r23,r3,800a898 <__alt_data_end+0xfc00a898>
 800aac4:	b0800317 	ldw	r2,12(r22)
 800aac8:	b0c00217 	ldw	r3,8(r22)
 800aacc:	81bfff04 	addi	r6,r16,-4
 800aad0:	01000904 	movi	r4,36
 800aad4:	18800315 	stw	r2,12(r3)
 800aad8:	10c00215 	stw	r3,8(r2)
 800aadc:	b4800204 	addi	r18,r22,8
 800aae0:	21bfe52e 	bgeu	r4,r6,800aa78 <__alt_data_end+0xfc00aa78>
 800aae4:	a80b883a 	mov	r5,r21
 800aae8:	9009883a 	mov	r4,r18
 800aaec:	80094b00 	call	80094b0 <memmove>
 800aaf0:	b821883a 	mov	r16,r23
 800aaf4:	b027883a 	mov	r19,r22
 800aaf8:	003f8a06 	br	800a924 <__alt_data_end+0xfc00a924>
 800aafc:	300b883a 	mov	r5,r6
 800ab00:	dfc00917 	ldw	ra,36(sp)
 800ab04:	df000817 	ldw	fp,32(sp)
 800ab08:	ddc00717 	ldw	r23,28(sp)
 800ab0c:	dd800617 	ldw	r22,24(sp)
 800ab10:	dd400517 	ldw	r21,20(sp)
 800ab14:	dd000417 	ldw	r20,16(sp)
 800ab18:	dcc00317 	ldw	r19,12(sp)
 800ab1c:	dc800217 	ldw	r18,8(sp)
 800ab20:	dc400117 	ldw	r17,4(sp)
 800ab24:	dc000017 	ldw	r16,0(sp)
 800ab28:	dec00a04 	addi	sp,sp,40
 800ab2c:	8008a781 	jmpi	8008a78 <_malloc_r>
 800ab30:	a8c00017 	ldw	r3,0(r21)
 800ab34:	90c00015 	stw	r3,0(r18)
 800ab38:	a8c00117 	ldw	r3,4(r21)
 800ab3c:	90c00115 	stw	r3,4(r18)
 800ab40:	00c006c4 	movi	r3,27
 800ab44:	19804536 	bltu	r3,r6,800ac5c <_realloc_r+0x470>
 800ab48:	90800204 	addi	r2,r18,8
 800ab4c:	a8c00204 	addi	r3,r21,8
 800ab50:	003f6306 	br	800a8e0 <__alt_data_end+0xfc00a8e0>
 800ab54:	9005883a 	mov	r2,r18
 800ab58:	a8c00017 	ldw	r3,0(r21)
 800ab5c:	b821883a 	mov	r16,r23
 800ab60:	b027883a 	mov	r19,r22
 800ab64:	10c00015 	stw	r3,0(r2)
 800ab68:	a8c00117 	ldw	r3,4(r21)
 800ab6c:	10c00115 	stw	r3,4(r2)
 800ab70:	a8c00217 	ldw	r3,8(r21)
 800ab74:	10c00215 	stw	r3,8(r2)
 800ab78:	003f6a06 	br	800a924 <__alt_data_end+0xfc00a924>
 800ab7c:	9c67883a 	add	r19,r19,r17
 800ab80:	4445c83a 	sub	r2,r8,r17
 800ab84:	e4c00215 	stw	r19,8(fp)
 800ab88:	10800054 	ori	r2,r2,1
 800ab8c:	98800115 	stw	r2,4(r19)
 800ab90:	a8bfff17 	ldw	r2,-4(r21)
 800ab94:	a009883a 	mov	r4,r20
 800ab98:	1080004c 	andi	r2,r2,1
 800ab9c:	1462b03a 	or	r17,r2,r17
 800aba0:	ac7fff15 	stw	r17,-4(r21)
 800aba4:	8010a980 	call	8010a98 <__malloc_unlock>
 800aba8:	a805883a 	mov	r2,r21
 800abac:	003f6b06 	br	800a95c <__alt_data_end+0xfc00a95c>
 800abb0:	a80b883a 	mov	r5,r21
 800abb4:	9009883a 	mov	r4,r18
 800abb8:	80094b00 	call	80094b0 <memmove>
 800abbc:	003f4e06 	br	800a8f8 <__alt_data_end+0xfc00a8f8>
 800abc0:	89000404 	addi	r4,r17,16
 800abc4:	b93fbc16 	blt	r23,r4,800aab8 <__alt_data_end+0xfc00aab8>
 800abc8:	b0800317 	ldw	r2,12(r22)
 800abcc:	b0c00217 	ldw	r3,8(r22)
 800abd0:	81bfff04 	addi	r6,r16,-4
 800abd4:	01000904 	movi	r4,36
 800abd8:	18800315 	stw	r2,12(r3)
 800abdc:	10c00215 	stw	r3,8(r2)
 800abe0:	b4800204 	addi	r18,r22,8
 800abe4:	21804336 	bltu	r4,r6,800acf4 <_realloc_r+0x508>
 800abe8:	008004c4 	movi	r2,19
 800abec:	11803f2e 	bgeu	r2,r6,800acec <_realloc_r+0x500>
 800abf0:	a8800017 	ldw	r2,0(r21)
 800abf4:	b0800215 	stw	r2,8(r22)
 800abf8:	a8800117 	ldw	r2,4(r21)
 800abfc:	b0800315 	stw	r2,12(r22)
 800ac00:	008006c4 	movi	r2,27
 800ac04:	11803f36 	bltu	r2,r6,800ad04 <_realloc_r+0x518>
 800ac08:	b0800404 	addi	r2,r22,16
 800ac0c:	ad400204 	addi	r21,r21,8
 800ac10:	a8c00017 	ldw	r3,0(r21)
 800ac14:	10c00015 	stw	r3,0(r2)
 800ac18:	a8c00117 	ldw	r3,4(r21)
 800ac1c:	10c00115 	stw	r3,4(r2)
 800ac20:	a8c00217 	ldw	r3,8(r21)
 800ac24:	10c00215 	stw	r3,8(r2)
 800ac28:	b447883a 	add	r3,r22,r17
 800ac2c:	bc45c83a 	sub	r2,r23,r17
 800ac30:	e0c00215 	stw	r3,8(fp)
 800ac34:	10800054 	ori	r2,r2,1
 800ac38:	18800115 	stw	r2,4(r3)
 800ac3c:	b0800117 	ldw	r2,4(r22)
 800ac40:	a009883a 	mov	r4,r20
 800ac44:	1080004c 	andi	r2,r2,1
 800ac48:	1462b03a 	or	r17,r2,r17
 800ac4c:	b4400115 	stw	r17,4(r22)
 800ac50:	8010a980 	call	8010a98 <__malloc_unlock>
 800ac54:	9005883a 	mov	r2,r18
 800ac58:	003f4006 	br	800a95c <__alt_data_end+0xfc00a95c>
 800ac5c:	a8c00217 	ldw	r3,8(r21)
 800ac60:	90c00215 	stw	r3,8(r18)
 800ac64:	a8c00317 	ldw	r3,12(r21)
 800ac68:	90c00315 	stw	r3,12(r18)
 800ac6c:	30801126 	beq	r6,r2,800acb4 <_realloc_r+0x4c8>
 800ac70:	90800404 	addi	r2,r18,16
 800ac74:	a8c00404 	addi	r3,r21,16
 800ac78:	003f1906 	br	800a8e0 <__alt_data_end+0xfc00a8e0>
 800ac7c:	90ffff17 	ldw	r3,-4(r18)
 800ac80:	00bfff04 	movi	r2,-4
 800ac84:	a825883a 	mov	r18,r21
 800ac88:	1884703a 	and	r2,r3,r2
 800ac8c:	80a1883a 	add	r16,r16,r2
 800ac90:	003f2406 	br	800a924 <__alt_data_end+0xfc00a924>
 800ac94:	a8800217 	ldw	r2,8(r21)
 800ac98:	b0800415 	stw	r2,16(r22)
 800ac9c:	a8800317 	ldw	r2,12(r21)
 800aca0:	b0800515 	stw	r2,20(r22)
 800aca4:	31000a26 	beq	r6,r4,800acd0 <_realloc_r+0x4e4>
 800aca8:	b0800604 	addi	r2,r22,24
 800acac:	ad400404 	addi	r21,r21,16
 800acb0:	003fa906 	br	800ab58 <__alt_data_end+0xfc00ab58>
 800acb4:	a9000417 	ldw	r4,16(r21)
 800acb8:	90800604 	addi	r2,r18,24
 800acbc:	a8c00604 	addi	r3,r21,24
 800acc0:	91000415 	stw	r4,16(r18)
 800acc4:	a9000517 	ldw	r4,20(r21)
 800acc8:	91000515 	stw	r4,20(r18)
 800accc:	003f0406 	br	800a8e0 <__alt_data_end+0xfc00a8e0>
 800acd0:	a8c00417 	ldw	r3,16(r21)
 800acd4:	ad400604 	addi	r21,r21,24
 800acd8:	b0800804 	addi	r2,r22,32
 800acdc:	b0c00615 	stw	r3,24(r22)
 800ace0:	a8ffff17 	ldw	r3,-4(r21)
 800ace4:	b0c00715 	stw	r3,28(r22)
 800ace8:	003f9b06 	br	800ab58 <__alt_data_end+0xfc00ab58>
 800acec:	9005883a 	mov	r2,r18
 800acf0:	003fc706 	br	800ac10 <__alt_data_end+0xfc00ac10>
 800acf4:	a80b883a 	mov	r5,r21
 800acf8:	9009883a 	mov	r4,r18
 800acfc:	80094b00 	call	80094b0 <memmove>
 800ad00:	003fc906 	br	800ac28 <__alt_data_end+0xfc00ac28>
 800ad04:	a8800217 	ldw	r2,8(r21)
 800ad08:	b0800415 	stw	r2,16(r22)
 800ad0c:	a8800317 	ldw	r2,12(r21)
 800ad10:	b0800515 	stw	r2,20(r22)
 800ad14:	31000726 	beq	r6,r4,800ad34 <_realloc_r+0x548>
 800ad18:	b0800604 	addi	r2,r22,24
 800ad1c:	ad400404 	addi	r21,r21,16
 800ad20:	003fbb06 	br	800ac10 <__alt_data_end+0xfc00ac10>
 800ad24:	a009883a 	mov	r4,r20
 800ad28:	8010a980 	call	8010a98 <__malloc_unlock>
 800ad2c:	0005883a 	mov	r2,zero
 800ad30:	003f0a06 	br	800a95c <__alt_data_end+0xfc00a95c>
 800ad34:	a8c00417 	ldw	r3,16(r21)
 800ad38:	ad400604 	addi	r21,r21,24
 800ad3c:	b0800804 	addi	r2,r22,32
 800ad40:	b0c00615 	stw	r3,24(r22)
 800ad44:	a8ffff17 	ldw	r3,-4(r21)
 800ad48:	b0c00715 	stw	r3,28(r22)
 800ad4c:	003fb006 	br	800ac10 <__alt_data_end+0xfc00ac10>

0800ad50 <__fpclassifyd>:
 800ad50:	00a00034 	movhi	r2,32768
 800ad54:	10bfffc4 	addi	r2,r2,-1
 800ad58:	2884703a 	and	r2,r5,r2
 800ad5c:	10000726 	beq	r2,zero,800ad7c <__fpclassifyd+0x2c>
 800ad60:	00fffc34 	movhi	r3,65520
 800ad64:	019ff834 	movhi	r6,32736
 800ad68:	28c7883a 	add	r3,r5,r3
 800ad6c:	31bfffc4 	addi	r6,r6,-1
 800ad70:	30c00536 	bltu	r6,r3,800ad88 <__fpclassifyd+0x38>
 800ad74:	00800104 	movi	r2,4
 800ad78:	f800283a 	ret
 800ad7c:	2000021e 	bne	r4,zero,800ad88 <__fpclassifyd+0x38>
 800ad80:	00800084 	movi	r2,2
 800ad84:	f800283a 	ret
 800ad88:	00dffc34 	movhi	r3,32752
 800ad8c:	019ff834 	movhi	r6,32736
 800ad90:	28cb883a 	add	r5,r5,r3
 800ad94:	31bfffc4 	addi	r6,r6,-1
 800ad98:	317ff62e 	bgeu	r6,r5,800ad74 <__alt_data_end+0xfc00ad74>
 800ad9c:	01400434 	movhi	r5,16
 800ada0:	297fffc4 	addi	r5,r5,-1
 800ada4:	28800236 	bltu	r5,r2,800adb0 <__fpclassifyd+0x60>
 800ada8:	008000c4 	movi	r2,3
 800adac:	f800283a 	ret
 800adb0:	10c00226 	beq	r2,r3,800adbc <__fpclassifyd+0x6c>
 800adb4:	0005883a 	mov	r2,zero
 800adb8:	f800283a 	ret
 800adbc:	2005003a 	cmpeq	r2,r4,zero
 800adc0:	f800283a 	ret

0800adc4 <_sbrk_r>:
 800adc4:	defffd04 	addi	sp,sp,-12
 800adc8:	dc000015 	stw	r16,0(sp)
 800adcc:	040200f4 	movhi	r16,2051
 800add0:	dc400115 	stw	r17,4(sp)
 800add4:	84146e04 	addi	r16,r16,20920
 800add8:	2023883a 	mov	r17,r4
 800addc:	2809883a 	mov	r4,r5
 800ade0:	dfc00215 	stw	ra,8(sp)
 800ade4:	80000015 	stw	zero,0(r16)
 800ade8:	8010c800 	call	8010c80 <sbrk>
 800adec:	00ffffc4 	movi	r3,-1
 800adf0:	10c00526 	beq	r2,r3,800ae08 <_sbrk_r+0x44>
 800adf4:	dfc00217 	ldw	ra,8(sp)
 800adf8:	dc400117 	ldw	r17,4(sp)
 800adfc:	dc000017 	ldw	r16,0(sp)
 800ae00:	dec00304 	addi	sp,sp,12
 800ae04:	f800283a 	ret
 800ae08:	80c00017 	ldw	r3,0(r16)
 800ae0c:	183ff926 	beq	r3,zero,800adf4 <__alt_data_end+0xfc00adf4>
 800ae10:	88c00015 	stw	r3,0(r17)
 800ae14:	003ff706 	br	800adf4 <__alt_data_end+0xfc00adf4>

0800ae18 <__sread>:
 800ae18:	defffe04 	addi	sp,sp,-8
 800ae1c:	dc000015 	stw	r16,0(sp)
 800ae20:	2821883a 	mov	r16,r5
 800ae24:	2940038f 	ldh	r5,14(r5)
 800ae28:	dfc00115 	stw	ra,4(sp)
 800ae2c:	800ccd40 	call	800ccd4 <_read_r>
 800ae30:	10000716 	blt	r2,zero,800ae50 <__sread+0x38>
 800ae34:	80c01417 	ldw	r3,80(r16)
 800ae38:	1887883a 	add	r3,r3,r2
 800ae3c:	80c01415 	stw	r3,80(r16)
 800ae40:	dfc00117 	ldw	ra,4(sp)
 800ae44:	dc000017 	ldw	r16,0(sp)
 800ae48:	dec00204 	addi	sp,sp,8
 800ae4c:	f800283a 	ret
 800ae50:	80c0030b 	ldhu	r3,12(r16)
 800ae54:	18fbffcc 	andi	r3,r3,61439
 800ae58:	80c0030d 	sth	r3,12(r16)
 800ae5c:	dfc00117 	ldw	ra,4(sp)
 800ae60:	dc000017 	ldw	r16,0(sp)
 800ae64:	dec00204 	addi	sp,sp,8
 800ae68:	f800283a 	ret

0800ae6c <__seofread>:
 800ae6c:	0005883a 	mov	r2,zero
 800ae70:	f800283a 	ret

0800ae74 <__swrite>:
 800ae74:	2880030b 	ldhu	r2,12(r5)
 800ae78:	defffb04 	addi	sp,sp,-20
 800ae7c:	dcc00315 	stw	r19,12(sp)
 800ae80:	dc800215 	stw	r18,8(sp)
 800ae84:	dc400115 	stw	r17,4(sp)
 800ae88:	dc000015 	stw	r16,0(sp)
 800ae8c:	dfc00415 	stw	ra,16(sp)
 800ae90:	10c0400c 	andi	r3,r2,256
 800ae94:	2821883a 	mov	r16,r5
 800ae98:	2023883a 	mov	r17,r4
 800ae9c:	3025883a 	mov	r18,r6
 800aea0:	3827883a 	mov	r19,r7
 800aea4:	18000526 	beq	r3,zero,800aebc <__swrite+0x48>
 800aea8:	2940038f 	ldh	r5,14(r5)
 800aeac:	01c00084 	movi	r7,2
 800aeb0:	000d883a 	mov	r6,zero
 800aeb4:	800cc740 	call	800cc74 <_lseek_r>
 800aeb8:	8080030b 	ldhu	r2,12(r16)
 800aebc:	8140038f 	ldh	r5,14(r16)
 800aec0:	10bbffcc 	andi	r2,r2,61439
 800aec4:	980f883a 	mov	r7,r19
 800aec8:	900d883a 	mov	r6,r18
 800aecc:	8809883a 	mov	r4,r17
 800aed0:	8080030d 	sth	r2,12(r16)
 800aed4:	dfc00417 	ldw	ra,16(sp)
 800aed8:	dcc00317 	ldw	r19,12(sp)
 800aedc:	dc800217 	ldw	r18,8(sp)
 800aee0:	dc400117 	ldw	r17,4(sp)
 800aee4:	dc000017 	ldw	r16,0(sp)
 800aee8:	dec00504 	addi	sp,sp,20
 800aeec:	800c7281 	jmpi	800c728 <_write_r>

0800aef0 <__sseek>:
 800aef0:	defffe04 	addi	sp,sp,-8
 800aef4:	dc000015 	stw	r16,0(sp)
 800aef8:	2821883a 	mov	r16,r5
 800aefc:	2940038f 	ldh	r5,14(r5)
 800af00:	dfc00115 	stw	ra,4(sp)
 800af04:	800cc740 	call	800cc74 <_lseek_r>
 800af08:	00ffffc4 	movi	r3,-1
 800af0c:	10c00826 	beq	r2,r3,800af30 <__sseek+0x40>
 800af10:	80c0030b 	ldhu	r3,12(r16)
 800af14:	80801415 	stw	r2,80(r16)
 800af18:	18c40014 	ori	r3,r3,4096
 800af1c:	80c0030d 	sth	r3,12(r16)
 800af20:	dfc00117 	ldw	ra,4(sp)
 800af24:	dc000017 	ldw	r16,0(sp)
 800af28:	dec00204 	addi	sp,sp,8
 800af2c:	f800283a 	ret
 800af30:	80c0030b 	ldhu	r3,12(r16)
 800af34:	18fbffcc 	andi	r3,r3,61439
 800af38:	80c0030d 	sth	r3,12(r16)
 800af3c:	dfc00117 	ldw	ra,4(sp)
 800af40:	dc000017 	ldw	r16,0(sp)
 800af44:	dec00204 	addi	sp,sp,8
 800af48:	f800283a 	ret

0800af4c <__sclose>:
 800af4c:	2940038f 	ldh	r5,14(r5)
 800af50:	800c7881 	jmpi	800c788 <_close_r>

0800af54 <strcmp>:
 800af54:	2144b03a 	or	r2,r4,r5
 800af58:	108000cc 	andi	r2,r2,3
 800af5c:	1000171e 	bne	r2,zero,800afbc <strcmp+0x68>
 800af60:	20800017 	ldw	r2,0(r4)
 800af64:	28c00017 	ldw	r3,0(r5)
 800af68:	10c0141e 	bne	r2,r3,800afbc <strcmp+0x68>
 800af6c:	027fbff4 	movhi	r9,65279
 800af70:	4a7fbfc4 	addi	r9,r9,-257
 800af74:	0086303a 	nor	r3,zero,r2
 800af78:	02202074 	movhi	r8,32897
 800af7c:	1245883a 	add	r2,r2,r9
 800af80:	42202004 	addi	r8,r8,-32640
 800af84:	10c4703a 	and	r2,r2,r3
 800af88:	1204703a 	and	r2,r2,r8
 800af8c:	10000226 	beq	r2,zero,800af98 <strcmp+0x44>
 800af90:	00002306 	br	800b020 <strcmp+0xcc>
 800af94:	1000221e 	bne	r2,zero,800b020 <strcmp+0xcc>
 800af98:	21000104 	addi	r4,r4,4
 800af9c:	20c00017 	ldw	r3,0(r4)
 800afa0:	29400104 	addi	r5,r5,4
 800afa4:	29800017 	ldw	r6,0(r5)
 800afa8:	1a4f883a 	add	r7,r3,r9
 800afac:	00c4303a 	nor	r2,zero,r3
 800afb0:	3884703a 	and	r2,r7,r2
 800afb4:	1204703a 	and	r2,r2,r8
 800afb8:	19bff626 	beq	r3,r6,800af94 <__alt_data_end+0xfc00af94>
 800afbc:	20800003 	ldbu	r2,0(r4)
 800afc0:	10c03fcc 	andi	r3,r2,255
 800afc4:	18c0201c 	xori	r3,r3,128
 800afc8:	18ffe004 	addi	r3,r3,-128
 800afcc:	18000c26 	beq	r3,zero,800b000 <strcmp+0xac>
 800afd0:	29800007 	ldb	r6,0(r5)
 800afd4:	19800326 	beq	r3,r6,800afe4 <strcmp+0x90>
 800afd8:	00001306 	br	800b028 <strcmp+0xd4>
 800afdc:	29800007 	ldb	r6,0(r5)
 800afe0:	11800b1e 	bne	r2,r6,800b010 <strcmp+0xbc>
 800afe4:	21000044 	addi	r4,r4,1
 800afe8:	20c00003 	ldbu	r3,0(r4)
 800afec:	29400044 	addi	r5,r5,1
 800aff0:	18803fcc 	andi	r2,r3,255
 800aff4:	1080201c 	xori	r2,r2,128
 800aff8:	10bfe004 	addi	r2,r2,-128
 800affc:	103ff71e 	bne	r2,zero,800afdc <__alt_data_end+0xfc00afdc>
 800b000:	0007883a 	mov	r3,zero
 800b004:	28800003 	ldbu	r2,0(r5)
 800b008:	1885c83a 	sub	r2,r3,r2
 800b00c:	f800283a 	ret
 800b010:	28800003 	ldbu	r2,0(r5)
 800b014:	18c03fcc 	andi	r3,r3,255
 800b018:	1885c83a 	sub	r2,r3,r2
 800b01c:	f800283a 	ret
 800b020:	0005883a 	mov	r2,zero
 800b024:	f800283a 	ret
 800b028:	10c03fcc 	andi	r3,r2,255
 800b02c:	003ff506 	br	800b004 <__alt_data_end+0xfc00b004>

0800b030 <__sprint_r.part.0>:
 800b030:	28801917 	ldw	r2,100(r5)
 800b034:	defff604 	addi	sp,sp,-40
 800b038:	dd400515 	stw	r21,20(sp)
 800b03c:	dfc00915 	stw	ra,36(sp)
 800b040:	df000815 	stw	fp,32(sp)
 800b044:	ddc00715 	stw	r23,28(sp)
 800b048:	dd800615 	stw	r22,24(sp)
 800b04c:	dd000415 	stw	r20,16(sp)
 800b050:	dcc00315 	stw	r19,12(sp)
 800b054:	dc800215 	stw	r18,8(sp)
 800b058:	dc400115 	stw	r17,4(sp)
 800b05c:	dc000015 	stw	r16,0(sp)
 800b060:	1088000c 	andi	r2,r2,8192
 800b064:	302b883a 	mov	r21,r6
 800b068:	10002e26 	beq	r2,zero,800b124 <__sprint_r.part.0+0xf4>
 800b06c:	30800217 	ldw	r2,8(r6)
 800b070:	35800017 	ldw	r22,0(r6)
 800b074:	10002926 	beq	r2,zero,800b11c <__sprint_r.part.0+0xec>
 800b078:	2827883a 	mov	r19,r5
 800b07c:	2029883a 	mov	r20,r4
 800b080:	b5c00104 	addi	r23,r22,4
 800b084:	04bfffc4 	movi	r18,-1
 800b088:	bc400017 	ldw	r17,0(r23)
 800b08c:	b4000017 	ldw	r16,0(r22)
 800b090:	0039883a 	mov	fp,zero
 800b094:	8822d0ba 	srli	r17,r17,2
 800b098:	8800031e 	bne	r17,zero,800b0a8 <__sprint_r.part.0+0x78>
 800b09c:	00001806 	br	800b100 <__sprint_r.part.0+0xd0>
 800b0a0:	84000104 	addi	r16,r16,4
 800b0a4:	8f001526 	beq	r17,fp,800b0fc <__sprint_r.part.0+0xcc>
 800b0a8:	81400017 	ldw	r5,0(r16)
 800b0ac:	980d883a 	mov	r6,r19
 800b0b0:	a009883a 	mov	r4,r20
 800b0b4:	800cb200 	call	800cb20 <_fputwc_r>
 800b0b8:	e7000044 	addi	fp,fp,1
 800b0bc:	14bff81e 	bne	r2,r18,800b0a0 <__alt_data_end+0xfc00b0a0>
 800b0c0:	9005883a 	mov	r2,r18
 800b0c4:	a8000215 	stw	zero,8(r21)
 800b0c8:	a8000115 	stw	zero,4(r21)
 800b0cc:	dfc00917 	ldw	ra,36(sp)
 800b0d0:	df000817 	ldw	fp,32(sp)
 800b0d4:	ddc00717 	ldw	r23,28(sp)
 800b0d8:	dd800617 	ldw	r22,24(sp)
 800b0dc:	dd400517 	ldw	r21,20(sp)
 800b0e0:	dd000417 	ldw	r20,16(sp)
 800b0e4:	dcc00317 	ldw	r19,12(sp)
 800b0e8:	dc800217 	ldw	r18,8(sp)
 800b0ec:	dc400117 	ldw	r17,4(sp)
 800b0f0:	dc000017 	ldw	r16,0(sp)
 800b0f4:	dec00a04 	addi	sp,sp,40
 800b0f8:	f800283a 	ret
 800b0fc:	a8800217 	ldw	r2,8(r21)
 800b100:	8c63883a 	add	r17,r17,r17
 800b104:	8c63883a 	add	r17,r17,r17
 800b108:	1445c83a 	sub	r2,r2,r17
 800b10c:	a8800215 	stw	r2,8(r21)
 800b110:	b5800204 	addi	r22,r22,8
 800b114:	bdc00204 	addi	r23,r23,8
 800b118:	103fdb1e 	bne	r2,zero,800b088 <__alt_data_end+0xfc00b088>
 800b11c:	0005883a 	mov	r2,zero
 800b120:	003fe806 	br	800b0c4 <__alt_data_end+0xfc00b0c4>
 800b124:	80081900 	call	8008190 <__sfvwrite_r>
 800b128:	003fe606 	br	800b0c4 <__alt_data_end+0xfc00b0c4>

0800b12c <__sprint_r>:
 800b12c:	30c00217 	ldw	r3,8(r6)
 800b130:	18000126 	beq	r3,zero,800b138 <__sprint_r+0xc>
 800b134:	800b0301 	jmpi	800b030 <__sprint_r.part.0>
 800b138:	30000115 	stw	zero,4(r6)
 800b13c:	0005883a 	mov	r2,zero
 800b140:	f800283a 	ret

0800b144 <___vfiprintf_internal_r>:
 800b144:	deffca04 	addi	sp,sp,-216
 800b148:	dd403115 	stw	r21,196(sp)
 800b14c:	dfc03515 	stw	ra,212(sp)
 800b150:	df003415 	stw	fp,208(sp)
 800b154:	ddc03315 	stw	r23,204(sp)
 800b158:	dd803215 	stw	r22,200(sp)
 800b15c:	dd003015 	stw	r20,192(sp)
 800b160:	dcc02f15 	stw	r19,188(sp)
 800b164:	dc802e15 	stw	r18,184(sp)
 800b168:	dc402d15 	stw	r17,180(sp)
 800b16c:	dc002c15 	stw	r16,176(sp)
 800b170:	d9002115 	stw	r4,132(sp)
 800b174:	d9402015 	stw	r5,128(sp)
 800b178:	d9c02215 	stw	r7,136(sp)
 800b17c:	302b883a 	mov	r21,r6
 800b180:	20000226 	beq	r4,zero,800b18c <___vfiprintf_internal_r+0x48>
 800b184:	20800e17 	ldw	r2,56(r4)
 800b188:	1000cf26 	beq	r2,zero,800b4c8 <___vfiprintf_internal_r+0x384>
 800b18c:	d8c02017 	ldw	r3,128(sp)
 800b190:	1880030b 	ldhu	r2,12(r3)
 800b194:	10c8000c 	andi	r3,r2,8192
 800b198:	1800071e 	bne	r3,zero,800b1b8 <___vfiprintf_internal_r+0x74>
 800b19c:	d9402017 	ldw	r5,128(sp)
 800b1a0:	00f7ffc4 	movi	r3,-8193
 800b1a4:	10880014 	ori	r2,r2,8192
 800b1a8:	29001917 	ldw	r4,100(r5)
 800b1ac:	2880030d 	sth	r2,12(r5)
 800b1b0:	20c6703a 	and	r3,r4,r3
 800b1b4:	28c01915 	stw	r3,100(r5)
 800b1b8:	10c0020c 	andi	r3,r2,8
 800b1bc:	1800a526 	beq	r3,zero,800b454 <___vfiprintf_internal_r+0x310>
 800b1c0:	d9002017 	ldw	r4,128(sp)
 800b1c4:	20c00417 	ldw	r3,16(r4)
 800b1c8:	1800a226 	beq	r3,zero,800b454 <___vfiprintf_internal_r+0x310>
 800b1cc:	1080068c 	andi	r2,r2,26
 800b1d0:	00c00284 	movi	r3,10
 800b1d4:	10c0a826 	beq	r2,r3,800b478 <___vfiprintf_internal_r+0x334>
 800b1d8:	d9001a04 	addi	r4,sp,104
 800b1dc:	d94019c4 	addi	r5,sp,103
 800b1e0:	048200f4 	movhi	r18,2051
 800b1e4:	2145c83a 	sub	r2,r4,r5
 800b1e8:	94858504 	addi	r18,r18,5652
 800b1ec:	d9001e15 	stw	r4,120(sp)
 800b1f0:	d9401f15 	stw	r5,124(sp)
 800b1f4:	dec01a15 	stw	sp,104(sp)
 800b1f8:	d8001c15 	stw	zero,112(sp)
 800b1fc:	d8001b15 	stw	zero,108(sp)
 800b200:	d811883a 	mov	r8,sp
 800b204:	d8002615 	stw	zero,152(sp)
 800b208:	d8002415 	stw	zero,144(sp)
 800b20c:	d8802815 	stw	r2,160(sp)
 800b210:	a82d883a 	mov	r22,r21
 800b214:	b0800007 	ldb	r2,0(r22)
 800b218:	10040d26 	beq	r2,zero,800c250 <___vfiprintf_internal_r+0x110c>
 800b21c:	00c00944 	movi	r3,37
 800b220:	b029883a 	mov	r20,r22
 800b224:	10c0021e 	bne	r2,r3,800b230 <___vfiprintf_internal_r+0xec>
 800b228:	00001606 	br	800b284 <___vfiprintf_internal_r+0x140>
 800b22c:	10c00326 	beq	r2,r3,800b23c <___vfiprintf_internal_r+0xf8>
 800b230:	a5000044 	addi	r20,r20,1
 800b234:	a0800007 	ldb	r2,0(r20)
 800b238:	103ffc1e 	bne	r2,zero,800b22c <__alt_data_end+0xfc00b22c>
 800b23c:	a5a1c83a 	sub	r16,r20,r22
 800b240:	80001026 	beq	r16,zero,800b284 <___vfiprintf_internal_r+0x140>
 800b244:	d8c01c17 	ldw	r3,112(sp)
 800b248:	d8801b17 	ldw	r2,108(sp)
 800b24c:	45800015 	stw	r22,0(r8)
 800b250:	80c7883a 	add	r3,r16,r3
 800b254:	10800044 	addi	r2,r2,1
 800b258:	44000115 	stw	r16,4(r8)
 800b25c:	d8c01c15 	stw	r3,112(sp)
 800b260:	d8801b15 	stw	r2,108(sp)
 800b264:	010001c4 	movi	r4,7
 800b268:	2080750e 	bge	r4,r2,800b440 <___vfiprintf_internal_r+0x2fc>
 800b26c:	1803951e 	bne	r3,zero,800c0c4 <___vfiprintf_internal_r+0xf80>
 800b270:	d8c02417 	ldw	r3,144(sp)
 800b274:	d8001b15 	stw	zero,108(sp)
 800b278:	d811883a 	mov	r8,sp
 800b27c:	1c07883a 	add	r3,r3,r16
 800b280:	d8c02415 	stw	r3,144(sp)
 800b284:	a0800007 	ldb	r2,0(r20)
 800b288:	1002e026 	beq	r2,zero,800be0c <___vfiprintf_internal_r+0xcc8>
 800b28c:	a5800044 	addi	r22,r20,1
 800b290:	a0c00047 	ldb	r3,1(r20)
 800b294:	d8001d85 	stb	zero,118(sp)
 800b298:	0027883a 	mov	r19,zero
 800b29c:	d8002305 	stb	zero,140(sp)
 800b2a0:	043fffc4 	movi	r16,-1
 800b2a4:	d8002515 	stw	zero,148(sp)
 800b2a8:	0023883a 	mov	r17,zero
 800b2ac:	05001604 	movi	r20,88
 800b2b0:	05400244 	movi	r21,9
 800b2b4:	402f883a 	mov	r23,r8
 800b2b8:	b5800044 	addi	r22,r22,1
 800b2bc:	18bff804 	addi	r2,r3,-32
 800b2c0:	a0827736 	bltu	r20,r2,800bca0 <___vfiprintf_internal_r+0xb5c>
 800b2c4:	100490ba 	slli	r2,r2,2
 800b2c8:	01020074 	movhi	r4,2049
 800b2cc:	212cb704 	addi	r4,r4,-19748
 800b2d0:	1105883a 	add	r2,r2,r4
 800b2d4:	10800017 	ldw	r2,0(r2)
 800b2d8:	1000683a 	jmp	r2
 800b2dc:	0800b9a0 	cmpeqi	zero,at,742
 800b2e0:	0800bca0 	cmpeqi	zero,at,754
 800b2e4:	0800bca0 	cmpeqi	zero,at,754
 800b2e8:	0800b9bc 	xorhi	zero,at,742
 800b2ec:	0800bca0 	cmpeqi	zero,at,754
 800b2f0:	0800bca0 	cmpeqi	zero,at,754
 800b2f4:	0800bca0 	cmpeqi	zero,at,754
 800b2f8:	0800bca0 	cmpeqi	zero,at,754
 800b2fc:	0800bca0 	cmpeqi	zero,at,754
 800b300:	0800bca0 	cmpeqi	zero,at,754
 800b304:	0800bbc4 	addi	zero,at,751
 800b308:	0800bbe8 	cmpgeui	zero,at,751
 800b30c:	0800bca0 	cmpeqi	zero,at,754
 800b310:	0800b4e0 	cmpeqi	zero,at,723
 800b314:	0800bbfc 	xorhi	zero,at,751
 800b318:	0800bca0 	cmpeqi	zero,at,754
 800b31c:	0800b9c8 	cmpgei	zero,at,743
 800b320:	0800b9d4 	ori	zero,at,743
 800b324:	0800b9d4 	ori	zero,at,743
 800b328:	0800b9d4 	ori	zero,at,743
 800b32c:	0800b9d4 	ori	zero,at,743
 800b330:	0800b9d4 	ori	zero,at,743
 800b334:	0800b9d4 	ori	zero,at,743
 800b338:	0800b9d4 	ori	zero,at,743
 800b33c:	0800b9d4 	ori	zero,at,743
 800b340:	0800b9d4 	ori	zero,at,743
 800b344:	0800bca0 	cmpeqi	zero,at,754
 800b348:	0800bca0 	cmpeqi	zero,at,754
 800b34c:	0800bca0 	cmpeqi	zero,at,754
 800b350:	0800bca0 	cmpeqi	zero,at,754
 800b354:	0800bca0 	cmpeqi	zero,at,754
 800b358:	0800bca0 	cmpeqi	zero,at,754
 800b35c:	0800bca0 	cmpeqi	zero,at,754
 800b360:	0800bca0 	cmpeqi	zero,at,754
 800b364:	0800bca0 	cmpeqi	zero,at,754
 800b368:	0800bca0 	cmpeqi	zero,at,754
 800b36c:	0800ba14 	ori	zero,at,744
 800b370:	0800bca0 	cmpeqi	zero,at,754
 800b374:	0800bca0 	cmpeqi	zero,at,754
 800b378:	0800bca0 	cmpeqi	zero,at,754
 800b37c:	0800bca0 	cmpeqi	zero,at,754
 800b380:	0800bca0 	cmpeqi	zero,at,754
 800b384:	0800bca0 	cmpeqi	zero,at,754
 800b388:	0800bca0 	cmpeqi	zero,at,754
 800b38c:	0800bca0 	cmpeqi	zero,at,754
 800b390:	0800bca0 	cmpeqi	zero,at,754
 800b394:	0800bca0 	cmpeqi	zero,at,754
 800b398:	0800ba50 	cmplti	zero,at,745
 800b39c:	0800bca0 	cmpeqi	zero,at,754
 800b3a0:	0800bca0 	cmpeqi	zero,at,754
 800b3a4:	0800bca0 	cmpeqi	zero,at,754
 800b3a8:	0800bca0 	cmpeqi	zero,at,754
 800b3ac:	0800bca0 	cmpeqi	zero,at,754
 800b3b0:	0800baac 	andhi	zero,at,746
 800b3b4:	0800bca0 	cmpeqi	zero,at,754
 800b3b8:	0800bca0 	cmpeqi	zero,at,754
 800b3bc:	0800bb20 	cmpeqi	zero,at,748
 800b3c0:	0800bca0 	cmpeqi	zero,at,754
 800b3c4:	0800bca0 	cmpeqi	zero,at,754
 800b3c8:	0800bca0 	cmpeqi	zero,at,754
 800b3cc:	0800bca0 	cmpeqi	zero,at,754
 800b3d0:	0800bca0 	cmpeqi	zero,at,754
 800b3d4:	0800bca0 	cmpeqi	zero,at,754
 800b3d8:	0800bca0 	cmpeqi	zero,at,754
 800b3dc:	0800bca0 	cmpeqi	zero,at,754
 800b3e0:	0800bca0 	cmpeqi	zero,at,754
 800b3e4:	0800bca0 	cmpeqi	zero,at,754
 800b3e8:	0800b8c8 	cmpgei	zero,at,739
 800b3ec:	0800b8f8 	rdprs	zero,at,739
 800b3f0:	0800bca0 	cmpeqi	zero,at,754
 800b3f4:	0800bca0 	cmpeqi	zero,at,754
 800b3f8:	0800bca0 	cmpeqi	zero,at,754
 800b3fc:	0800bc48 	cmpgei	zero,at,753
 800b400:	0800b8f8 	rdprs	zero,at,739
 800b404:	0800bca0 	cmpeqi	zero,at,754
 800b408:	0800bca0 	cmpeqi	zero,at,754
 800b40c:	0800b7a0 	cmpeqi	zero,at,734
 800b410:	0800bca0 	cmpeqi	zero,at,754
 800b414:	0800b7b4 	orhi	zero,at,734
 800b418:	0800b7ec 	andhi	zero,at,735
 800b41c:	0800b4ec 	andhi	zero,at,723
 800b420:	0800b794 	ori	zero,at,734
 800b424:	0800bca0 	cmpeqi	zero,at,754
 800b428:	0800bb60 	cmpeqi	zero,at,749
 800b42c:	0800bca0 	cmpeqi	zero,at,754
 800b430:	0800bbac 	andhi	zero,at,750
 800b434:	0800bca0 	cmpeqi	zero,at,754
 800b438:	0800bca0 	cmpeqi	zero,at,754
 800b43c:	0800b870 	cmpltui	zero,at,737
 800b440:	42000204 	addi	r8,r8,8
 800b444:	d8c02417 	ldw	r3,144(sp)
 800b448:	1c07883a 	add	r3,r3,r16
 800b44c:	d8c02415 	stw	r3,144(sp)
 800b450:	003f8c06 	br	800b284 <__alt_data_end+0xfc00b284>
 800b454:	d9402017 	ldw	r5,128(sp)
 800b458:	d9002117 	ldw	r4,132(sp)
 800b45c:	8005d000 	call	8005d00 <__swsetup_r>
 800b460:	1003c11e 	bne	r2,zero,800c368 <___vfiprintf_internal_r+0x1224>
 800b464:	d9402017 	ldw	r5,128(sp)
 800b468:	00c00284 	movi	r3,10
 800b46c:	2880030b 	ldhu	r2,12(r5)
 800b470:	1080068c 	andi	r2,r2,26
 800b474:	10ff581e 	bne	r2,r3,800b1d8 <__alt_data_end+0xfc00b1d8>
 800b478:	d8c02017 	ldw	r3,128(sp)
 800b47c:	1880038f 	ldh	r2,14(r3)
 800b480:	103f5516 	blt	r2,zero,800b1d8 <__alt_data_end+0xfc00b1d8>
 800b484:	d9c02217 	ldw	r7,136(sp)
 800b488:	d9002117 	ldw	r4,132(sp)
 800b48c:	a80d883a 	mov	r6,r21
 800b490:	180b883a 	mov	r5,r3
 800b494:	800c66c0 	call	800c66c <__sbprintf>
 800b498:	dfc03517 	ldw	ra,212(sp)
 800b49c:	df003417 	ldw	fp,208(sp)
 800b4a0:	ddc03317 	ldw	r23,204(sp)
 800b4a4:	dd803217 	ldw	r22,200(sp)
 800b4a8:	dd403117 	ldw	r21,196(sp)
 800b4ac:	dd003017 	ldw	r20,192(sp)
 800b4b0:	dcc02f17 	ldw	r19,188(sp)
 800b4b4:	dc802e17 	ldw	r18,184(sp)
 800b4b8:	dc402d17 	ldw	r17,180(sp)
 800b4bc:	dc002c17 	ldw	r16,176(sp)
 800b4c0:	dec03604 	addi	sp,sp,216
 800b4c4:	f800283a 	ret
 800b4c8:	8007d0c0 	call	8007d0c <__sinit>
 800b4cc:	003f2f06 	br	800b18c <__alt_data_end+0xfc00b18c>
 800b4d0:	d8c02517 	ldw	r3,148(sp)
 800b4d4:	d8802215 	stw	r2,136(sp)
 800b4d8:	00c7c83a 	sub	r3,zero,r3
 800b4dc:	d8c02515 	stw	r3,148(sp)
 800b4e0:	8c400114 	ori	r17,r17,4
 800b4e4:	b0c00007 	ldb	r3,0(r22)
 800b4e8:	003f7306 	br	800b2b8 <__alt_data_end+0xfc00b2b8>
 800b4ec:	00800c04 	movi	r2,48
 800b4f0:	d9402217 	ldw	r5,136(sp)
 800b4f4:	d8801d05 	stb	r2,116(sp)
 800b4f8:	00801e04 	movi	r2,120
 800b4fc:	d8801d45 	stb	r2,117(sp)
 800b500:	d8001d85 	stb	zero,118(sp)
 800b504:	b811883a 	mov	r8,r23
 800b508:	28c00104 	addi	r3,r5,4
 800b50c:	2cc00017 	ldw	r19,0(r5)
 800b510:	0029883a 	mov	r20,zero
 800b514:	88800094 	ori	r2,r17,2
 800b518:	80032516 	blt	r16,zero,800c1b0 <___vfiprintf_internal_r+0x106c>
 800b51c:	00bfdfc4 	movi	r2,-129
 800b520:	88a2703a 	and	r17,r17,r2
 800b524:	d8c02215 	stw	r3,136(sp)
 800b528:	8c400094 	ori	r17,r17,2
 800b52c:	98032a1e 	bne	r19,zero,800c1d8 <___vfiprintf_internal_r+0x1094>
 800b530:	008200f4 	movhi	r2,2051
 800b534:	10852404 	addi	r2,r2,5264
 800b538:	d8802615 	stw	r2,152(sp)
 800b53c:	002b883a 	mov	r21,zero
 800b540:	8001741e 	bne	r16,zero,800bb14 <___vfiprintf_internal_r+0x9d0>
 800b544:	0021883a 	mov	r16,zero
 800b548:	0029883a 	mov	r20,zero
 800b54c:	ddc01a04 	addi	r23,sp,104
 800b550:	8027883a 	mov	r19,r16
 800b554:	8500010e 	bge	r16,r20,800b55c <___vfiprintf_internal_r+0x418>
 800b558:	a027883a 	mov	r19,r20
 800b55c:	ad403fcc 	andi	r21,r21,255
 800b560:	ad40201c 	xori	r21,r21,128
 800b564:	ad7fe004 	addi	r21,r21,-128
 800b568:	a8000126 	beq	r21,zero,800b570 <___vfiprintf_internal_r+0x42c>
 800b56c:	9cc00044 	addi	r19,r19,1
 800b570:	89c0008c 	andi	r7,r17,2
 800b574:	38000126 	beq	r7,zero,800b57c <___vfiprintf_internal_r+0x438>
 800b578:	9cc00084 	addi	r19,r19,2
 800b57c:	88c0210c 	andi	r3,r17,132
 800b580:	1801dd1e 	bne	r3,zero,800bcf8 <___vfiprintf_internal_r+0xbb4>
 800b584:	d9402517 	ldw	r5,148(sp)
 800b588:	2cebc83a 	sub	r21,r5,r19
 800b58c:	0541da0e 	bge	zero,r21,800bcf8 <___vfiprintf_internal_r+0xbb4>
 800b590:	07000404 	movi	fp,16
 800b594:	d8801c17 	ldw	r2,112(sp)
 800b598:	e543be0e 	bge	fp,r21,800c494 <___vfiprintf_internal_r+0x1350>
 800b59c:	014200f4 	movhi	r5,2051
 800b5a0:	29458904 	addi	r5,r5,5668
 800b5a4:	dc002715 	stw	r16,156(sp)
 800b5a8:	d9801b17 	ldw	r6,108(sp)
 800b5ac:	a821883a 	mov	r16,r21
 800b5b0:	d9402315 	stw	r5,140(sp)
 800b5b4:	028001c4 	movi	r10,7
 800b5b8:	d9c02915 	stw	r7,164(sp)
 800b5bc:	182b883a 	mov	r21,r3
 800b5c0:	00000506 	br	800b5d8 <___vfiprintf_internal_r+0x494>
 800b5c4:	31000084 	addi	r4,r6,2
 800b5c8:	42000204 	addi	r8,r8,8
 800b5cc:	180d883a 	mov	r6,r3
 800b5d0:	843ffc04 	addi	r16,r16,-16
 800b5d4:	e4000f0e 	bge	fp,r16,800b614 <___vfiprintf_internal_r+0x4d0>
 800b5d8:	010200f4 	movhi	r4,2051
 800b5dc:	10800404 	addi	r2,r2,16
 800b5e0:	30c00044 	addi	r3,r6,1
 800b5e4:	21058904 	addi	r4,r4,5668
 800b5e8:	41000015 	stw	r4,0(r8)
 800b5ec:	47000115 	stw	fp,4(r8)
 800b5f0:	d8801c15 	stw	r2,112(sp)
 800b5f4:	d8c01b15 	stw	r3,108(sp)
 800b5f8:	50fff20e 	bge	r10,r3,800b5c4 <__alt_data_end+0xfc00b5c4>
 800b5fc:	1001b21e 	bne	r2,zero,800bcc8 <___vfiprintf_internal_r+0xb84>
 800b600:	843ffc04 	addi	r16,r16,-16
 800b604:	000d883a 	mov	r6,zero
 800b608:	01000044 	movi	r4,1
 800b60c:	d811883a 	mov	r8,sp
 800b610:	e43ff116 	blt	fp,r16,800b5d8 <__alt_data_end+0xfc00b5d8>
 800b614:	a807883a 	mov	r3,r21
 800b618:	d9c02917 	ldw	r7,164(sp)
 800b61c:	802b883a 	mov	r21,r16
 800b620:	dc002717 	ldw	r16,156(sp)
 800b624:	d9402317 	ldw	r5,140(sp)
 800b628:	a885883a 	add	r2,r21,r2
 800b62c:	45400115 	stw	r21,4(r8)
 800b630:	41400015 	stw	r5,0(r8)
 800b634:	d8801c15 	stw	r2,112(sp)
 800b638:	d9001b15 	stw	r4,108(sp)
 800b63c:	014001c4 	movi	r5,7
 800b640:	29026216 	blt	r5,r4,800bfcc <___vfiprintf_internal_r+0xe88>
 800b644:	d9801d87 	ldb	r6,118(sp)
 800b648:	42000204 	addi	r8,r8,8
 800b64c:	21400044 	addi	r5,r4,1
 800b650:	3001ae1e 	bne	r6,zero,800bd0c <___vfiprintf_internal_r+0xbc8>
 800b654:	3801bb26 	beq	r7,zero,800bd44 <___vfiprintf_internal_r+0xc00>
 800b658:	d9001d04 	addi	r4,sp,116
 800b65c:	10800084 	addi	r2,r2,2
 800b660:	41000015 	stw	r4,0(r8)
 800b664:	01000084 	movi	r4,2
 800b668:	41000115 	stw	r4,4(r8)
 800b66c:	d8801c15 	stw	r2,112(sp)
 800b670:	d9401b15 	stw	r5,108(sp)
 800b674:	010001c4 	movi	r4,7
 800b678:	2142680e 	bge	r4,r5,800c01c <___vfiprintf_internal_r+0xed8>
 800b67c:	1002b11e 	bne	r2,zero,800c144 <___vfiprintf_internal_r+0x1000>
 800b680:	01802004 	movi	r6,128
 800b684:	01400044 	movi	r5,1
 800b688:	0009883a 	mov	r4,zero
 800b68c:	d811883a 	mov	r8,sp
 800b690:	1981ae1e 	bne	r3,r6,800bd4c <___vfiprintf_internal_r+0xc08>
 800b694:	d8c02517 	ldw	r3,148(sp)
 800b698:	1cf9c83a 	sub	fp,r3,r19
 800b69c:	0701ab0e 	bge	zero,fp,800bd4c <___vfiprintf_internal_r+0xc08>
 800b6a0:	05400404 	movi	r21,16
 800b6a4:	af03a90e 	bge	r21,fp,800c54c <___vfiprintf_internal_r+0x1408>
 800b6a8:	014200f4 	movhi	r5,2051
 800b6ac:	29458504 	addi	r5,r5,5652
 800b6b0:	d9402315 	stw	r5,140(sp)
 800b6b4:	01c001c4 	movi	r7,7
 800b6b8:	00000506 	br	800b6d0 <___vfiprintf_internal_r+0x58c>
 800b6bc:	21800084 	addi	r6,r4,2
 800b6c0:	42000204 	addi	r8,r8,8
 800b6c4:	1809883a 	mov	r4,r3
 800b6c8:	e73ffc04 	addi	fp,fp,-16
 800b6cc:	af000d0e 	bge	r21,fp,800b704 <___vfiprintf_internal_r+0x5c0>
 800b6d0:	10800404 	addi	r2,r2,16
 800b6d4:	20c00044 	addi	r3,r4,1
 800b6d8:	44800015 	stw	r18,0(r8)
 800b6dc:	45400115 	stw	r21,4(r8)
 800b6e0:	d8801c15 	stw	r2,112(sp)
 800b6e4:	d8c01b15 	stw	r3,108(sp)
 800b6e8:	38fff40e 	bge	r7,r3,800b6bc <__alt_data_end+0xfc00b6bc>
 800b6ec:	10022b1e 	bne	r2,zero,800bf9c <___vfiprintf_internal_r+0xe58>
 800b6f0:	e73ffc04 	addi	fp,fp,-16
 800b6f4:	01800044 	movi	r6,1
 800b6f8:	0009883a 	mov	r4,zero
 800b6fc:	d811883a 	mov	r8,sp
 800b700:	af3ff316 	blt	r21,fp,800b6d0 <__alt_data_end+0xfc00b6d0>
 800b704:	d8c02317 	ldw	r3,140(sp)
 800b708:	1705883a 	add	r2,r2,fp
 800b70c:	47000115 	stw	fp,4(r8)
 800b710:	40c00015 	stw	r3,0(r8)
 800b714:	d8801c15 	stw	r2,112(sp)
 800b718:	d9801b15 	stw	r6,108(sp)
 800b71c:	00c001c4 	movi	r3,7
 800b720:	19829416 	blt	r3,r6,800c174 <___vfiprintf_internal_r+0x1030>
 800b724:	8521c83a 	sub	r16,r16,r20
 800b728:	42000204 	addi	r8,r8,8
 800b72c:	31400044 	addi	r5,r6,1
 800b730:	3009883a 	mov	r4,r6
 800b734:	04018716 	blt	zero,r16,800bd54 <___vfiprintf_internal_r+0xc10>
 800b738:	a085883a 	add	r2,r20,r2
 800b73c:	45c00015 	stw	r23,0(r8)
 800b740:	45000115 	stw	r20,4(r8)
 800b744:	d8801c15 	stw	r2,112(sp)
 800b748:	d9401b15 	stw	r5,108(sp)
 800b74c:	00c001c4 	movi	r3,7
 800b750:	1941c20e 	bge	r3,r5,800be5c <___vfiprintf_internal_r+0xd18>
 800b754:	1002531e 	bne	r2,zero,800c0a4 <___vfiprintf_internal_r+0xf60>
 800b758:	d8001b15 	stw	zero,108(sp)
 800b75c:	8c40010c 	andi	r17,r17,4
 800b760:	88023226 	beq	r17,zero,800c02c <___vfiprintf_internal_r+0xee8>
 800b764:	d9002517 	ldw	r4,148(sp)
 800b768:	24e3c83a 	sub	r17,r4,r19
 800b76c:	04432916 	blt	zero,r17,800c414 <___vfiprintf_internal_r+0x12d0>
 800b770:	d8802517 	ldw	r2,148(sp)
 800b774:	14c0010e 	bge	r2,r19,800b77c <___vfiprintf_internal_r+0x638>
 800b778:	9805883a 	mov	r2,r19
 800b77c:	d8c02417 	ldw	r3,144(sp)
 800b780:	1887883a 	add	r3,r3,r2
 800b784:	d8c02415 	stw	r3,144(sp)
 800b788:	d8001b15 	stw	zero,108(sp)
 800b78c:	d811883a 	mov	r8,sp
 800b790:	003ea006 	br	800b214 <__alt_data_end+0xfc00b214>
 800b794:	8c400814 	ori	r17,r17,32
 800b798:	b0c00007 	ldb	r3,0(r22)
 800b79c:	003ec606 	br	800b2b8 <__alt_data_end+0xfc00b2b8>
 800b7a0:	b0c00007 	ldb	r3,0(r22)
 800b7a4:	00801b04 	movi	r2,108
 800b7a8:	18832026 	beq	r3,r2,800c42c <___vfiprintf_internal_r+0x12e8>
 800b7ac:	8c400414 	ori	r17,r17,16
 800b7b0:	003ec106 	br	800b2b8 <__alt_data_end+0xfc00b2b8>
 800b7b4:	9cc03fcc 	andi	r19,r19,255
 800b7b8:	b811883a 	mov	r8,r23
 800b7bc:	9803981e 	bne	r19,zero,800c620 <___vfiprintf_internal_r+0x14dc>
 800b7c0:	8880080c 	andi	r2,r17,32
 800b7c4:	1002be26 	beq	r2,zero,800c2c0 <___vfiprintf_internal_r+0x117c>
 800b7c8:	d9002217 	ldw	r4,136(sp)
 800b7cc:	d9402417 	ldw	r5,144(sp)
 800b7d0:	20800017 	ldw	r2,0(r4)
 800b7d4:	2807d7fa 	srai	r3,r5,31
 800b7d8:	21000104 	addi	r4,r4,4
 800b7dc:	d9002215 	stw	r4,136(sp)
 800b7e0:	11400015 	stw	r5,0(r2)
 800b7e4:	10c00115 	stw	r3,4(r2)
 800b7e8:	003e8a06 	br	800b214 <__alt_data_end+0xfc00b214>
 800b7ec:	9cc03fcc 	andi	r19,r19,255
 800b7f0:	b811883a 	mov	r8,r23
 800b7f4:	9803871e 	bne	r19,zero,800c614 <___vfiprintf_internal_r+0x14d0>
 800b7f8:	8880080c 	andi	r2,r17,32
 800b7fc:	10009a26 	beq	r2,zero,800ba68 <___vfiprintf_internal_r+0x924>
 800b800:	d9002217 	ldw	r4,136(sp)
 800b804:	d8001d85 	stb	zero,118(sp)
 800b808:	20800204 	addi	r2,r4,8
 800b80c:	24c00017 	ldw	r19,0(r4)
 800b810:	25000117 	ldw	r20,4(r4)
 800b814:	8002a416 	blt	r16,zero,800c2a8 <___vfiprintf_internal_r+0x1164>
 800b818:	013fdfc4 	movi	r4,-129
 800b81c:	9d06b03a 	or	r3,r19,r20
 800b820:	d8802215 	stw	r2,136(sp)
 800b824:	8922703a 	and	r17,r17,r4
 800b828:	18009b26 	beq	r3,zero,800ba98 <___vfiprintf_internal_r+0x954>
 800b82c:	002b883a 	mov	r21,zero
 800b830:	ddc01a04 	addi	r23,sp,104
 800b834:	9806d0fa 	srli	r3,r19,3
 800b838:	a008977a 	slli	r4,r20,29
 800b83c:	a028d0fa 	srli	r20,r20,3
 800b840:	9cc001cc 	andi	r19,r19,7
 800b844:	98800c04 	addi	r2,r19,48
 800b848:	bdffffc4 	addi	r23,r23,-1
 800b84c:	20e6b03a 	or	r19,r4,r3
 800b850:	b8800005 	stb	r2,0(r23)
 800b854:	9d06b03a 	or	r3,r19,r20
 800b858:	183ff61e 	bne	r3,zero,800b834 <__alt_data_end+0xfc00b834>
 800b85c:	88c0004c 	andi	r3,r17,1
 800b860:	18021f1e 	bne	r3,zero,800c0e0 <___vfiprintf_internal_r+0xf9c>
 800b864:	d9401e17 	ldw	r5,120(sp)
 800b868:	2de9c83a 	sub	r20,r5,r23
 800b86c:	003f3806 	br	800b550 <__alt_data_end+0xfc00b550>
 800b870:	9cc03fcc 	andi	r19,r19,255
 800b874:	b811883a 	mov	r8,r23
 800b878:	98034f1e 	bne	r19,zero,800c5b8 <___vfiprintf_internal_r+0x1474>
 800b87c:	008200f4 	movhi	r2,2051
 800b880:	10852404 	addi	r2,r2,5264
 800b884:	d8802615 	stw	r2,152(sp)
 800b888:	8880080c 	andi	r2,r17,32
 800b88c:	1000ac26 	beq	r2,zero,800bb40 <___vfiprintf_internal_r+0x9fc>
 800b890:	d9002217 	ldw	r4,136(sp)
 800b894:	24c00017 	ldw	r19,0(r4)
 800b898:	25000117 	ldw	r20,4(r4)
 800b89c:	21000204 	addi	r4,r4,8
 800b8a0:	d9002215 	stw	r4,136(sp)
 800b8a4:	8880004c 	andi	r2,r17,1
 800b8a8:	1001e726 	beq	r2,zero,800c048 <___vfiprintf_internal_r+0xf04>
 800b8ac:	9d04b03a 	or	r2,r19,r20
 800b8b0:	10025c1e 	bne	r2,zero,800c224 <___vfiprintf_internal_r+0x10e0>
 800b8b4:	d8001d85 	stb	zero,118(sp)
 800b8b8:	80024416 	blt	r16,zero,800c1cc <___vfiprintf_internal_r+0x1088>
 800b8bc:	00bfdfc4 	movi	r2,-129
 800b8c0:	88a2703a 	and	r17,r17,r2
 800b8c4:	003f1d06 	br	800b53c <__alt_data_end+0xfc00b53c>
 800b8c8:	d8c02217 	ldw	r3,136(sp)
 800b8cc:	04c00044 	movi	r19,1
 800b8d0:	b811883a 	mov	r8,r23
 800b8d4:	18800017 	ldw	r2,0(r3)
 800b8d8:	18c00104 	addi	r3,r3,4
 800b8dc:	d8001d85 	stb	zero,118(sp)
 800b8e0:	d8801005 	stb	r2,64(sp)
 800b8e4:	d8c02215 	stw	r3,136(sp)
 800b8e8:	9829883a 	mov	r20,r19
 800b8ec:	ddc01004 	addi	r23,sp,64
 800b8f0:	0021883a 	mov	r16,zero
 800b8f4:	003f1e06 	br	800b570 <__alt_data_end+0xfc00b570>
 800b8f8:	9cc03fcc 	andi	r19,r19,255
 800b8fc:	b811883a 	mov	r8,r23
 800b900:	9803331e 	bne	r19,zero,800c5d0 <___vfiprintf_internal_r+0x148c>
 800b904:	8880080c 	andi	r2,r17,32
 800b908:	10004826 	beq	r2,zero,800ba2c <___vfiprintf_internal_r+0x8e8>
 800b90c:	d9002217 	ldw	r4,136(sp)
 800b910:	20800117 	ldw	r2,4(r4)
 800b914:	24c00017 	ldw	r19,0(r4)
 800b918:	21000204 	addi	r4,r4,8
 800b91c:	d9002215 	stw	r4,136(sp)
 800b920:	1029883a 	mov	r20,r2
 800b924:	10024c16 	blt	r2,zero,800c258 <___vfiprintf_internal_r+0x1114>
 800b928:	dd401d83 	ldbu	r21,118(sp)
 800b92c:	80007116 	blt	r16,zero,800baf4 <___vfiprintf_internal_r+0x9b0>
 800b930:	00ffdfc4 	movi	r3,-129
 800b934:	9d04b03a 	or	r2,r19,r20
 800b938:	88e2703a 	and	r17,r17,r3
 800b93c:	1000d126 	beq	r2,zero,800bc84 <___vfiprintf_internal_r+0xb40>
 800b940:	a0023526 	beq	r20,zero,800c218 <___vfiprintf_internal_r+0x10d4>
 800b944:	ddc01a04 	addi	r23,sp,104
 800b948:	4039883a 	mov	fp,r8
 800b94c:	9809883a 	mov	r4,r19
 800b950:	a00b883a 	mov	r5,r20
 800b954:	01800284 	movi	r6,10
 800b958:	000f883a 	mov	r7,zero
 800b95c:	800d6700 	call	800d670 <__umoddi3>
 800b960:	10800c04 	addi	r2,r2,48
 800b964:	bdffffc4 	addi	r23,r23,-1
 800b968:	9809883a 	mov	r4,r19
 800b96c:	a00b883a 	mov	r5,r20
 800b970:	b8800005 	stb	r2,0(r23)
 800b974:	01800284 	movi	r6,10
 800b978:	000f883a 	mov	r7,zero
 800b97c:	800d0740 	call	800d074 <__udivdi3>
 800b980:	1027883a 	mov	r19,r2
 800b984:	10c4b03a 	or	r2,r2,r3
 800b988:	1829883a 	mov	r20,r3
 800b98c:	103fef1e 	bne	r2,zero,800b94c <__alt_data_end+0xfc00b94c>
 800b990:	d9001e17 	ldw	r4,120(sp)
 800b994:	e011883a 	mov	r8,fp
 800b998:	25e9c83a 	sub	r20,r4,r23
 800b99c:	003eec06 	br	800b550 <__alt_data_end+0xfc00b550>
 800b9a0:	d8802307 	ldb	r2,140(sp)
 800b9a4:	1002361e 	bne	r2,zero,800c280 <___vfiprintf_internal_r+0x113c>
 800b9a8:	00c00804 	movi	r3,32
 800b9ac:	d8c02305 	stb	r3,140(sp)
 800b9b0:	04c00044 	movi	r19,1
 800b9b4:	b0c00007 	ldb	r3,0(r22)
 800b9b8:	003e3f06 	br	800b2b8 <__alt_data_end+0xfc00b2b8>
 800b9bc:	8c400054 	ori	r17,r17,1
 800b9c0:	b0c00007 	ldb	r3,0(r22)
 800b9c4:	003e3c06 	br	800b2b8 <__alt_data_end+0xfc00b2b8>
 800b9c8:	8c402014 	ori	r17,r17,128
 800b9cc:	b0c00007 	ldb	r3,0(r22)
 800b9d0:	003e3906 	br	800b2b8 <__alt_data_end+0xfc00b2b8>
 800b9d4:	dc002715 	stw	r16,156(sp)
 800b9d8:	d8002515 	stw	zero,148(sp)
 800b9dc:	1f3ff404 	addi	fp,r3,-48
 800b9e0:	0009883a 	mov	r4,zero
 800b9e4:	b021883a 	mov	r16,r22
 800b9e8:	01400284 	movi	r5,10
 800b9ec:	800374c0 	call	800374c <__mulsi3>
 800b9f0:	80c00007 	ldb	r3,0(r16)
 800b9f4:	e089883a 	add	r4,fp,r2
 800b9f8:	b5800044 	addi	r22,r22,1
 800b9fc:	1f3ff404 	addi	fp,r3,-48
 800ba00:	b021883a 	mov	r16,r22
 800ba04:	af3ff82e 	bgeu	r21,fp,800b9e8 <__alt_data_end+0xfc00b9e8>
 800ba08:	d9002515 	stw	r4,148(sp)
 800ba0c:	dc002717 	ldw	r16,156(sp)
 800ba10:	003e2a06 	br	800b2bc <__alt_data_end+0xfc00b2bc>
 800ba14:	9cc03fcc 	andi	r19,r19,255
 800ba18:	b811883a 	mov	r8,r23
 800ba1c:	9802e91e 	bne	r19,zero,800c5c4 <___vfiprintf_internal_r+0x1480>
 800ba20:	8c400414 	ori	r17,r17,16
 800ba24:	8880080c 	andi	r2,r17,32
 800ba28:	103fb81e 	bne	r2,zero,800b90c <__alt_data_end+0xfc00b90c>
 800ba2c:	8880040c 	andi	r2,r17,16
 800ba30:	10022e26 	beq	r2,zero,800c2ec <___vfiprintf_internal_r+0x11a8>
 800ba34:	d9402217 	ldw	r5,136(sp)
 800ba38:	2cc00017 	ldw	r19,0(r5)
 800ba3c:	29400104 	addi	r5,r5,4
 800ba40:	d9402215 	stw	r5,136(sp)
 800ba44:	9829d7fa 	srai	r20,r19,31
 800ba48:	a005883a 	mov	r2,r20
 800ba4c:	003fb506 	br	800b924 <__alt_data_end+0xfc00b924>
 800ba50:	9cc03fcc 	andi	r19,r19,255
 800ba54:	b811883a 	mov	r8,r23
 800ba58:	9802fa1e 	bne	r19,zero,800c644 <___vfiprintf_internal_r+0x1500>
 800ba5c:	8c400414 	ori	r17,r17,16
 800ba60:	8880080c 	andi	r2,r17,32
 800ba64:	103f661e 	bne	r2,zero,800b800 <__alt_data_end+0xfc00b800>
 800ba68:	8880040c 	andi	r2,r17,16
 800ba6c:	10020626 	beq	r2,zero,800c288 <___vfiprintf_internal_r+0x1144>
 800ba70:	d9402217 	ldw	r5,136(sp)
 800ba74:	d8001d85 	stb	zero,118(sp)
 800ba78:	0029883a 	mov	r20,zero
 800ba7c:	28800104 	addi	r2,r5,4
 800ba80:	2cc00017 	ldw	r19,0(r5)
 800ba84:	80020816 	blt	r16,zero,800c2a8 <___vfiprintf_internal_r+0x1164>
 800ba88:	00ffdfc4 	movi	r3,-129
 800ba8c:	d8802215 	stw	r2,136(sp)
 800ba90:	88e2703a 	and	r17,r17,r3
 800ba94:	983f651e 	bne	r19,zero,800b82c <__alt_data_end+0xfc00b82c>
 800ba98:	002b883a 	mov	r21,zero
 800ba9c:	8002cf26 	beq	r16,zero,800c5dc <___vfiprintf_internal_r+0x1498>
 800baa0:	0027883a 	mov	r19,zero
 800baa4:	0029883a 	mov	r20,zero
 800baa8:	003f6106 	br	800b830 <__alt_data_end+0xfc00b830>
 800baac:	9cc03fcc 	andi	r19,r19,255
 800bab0:	b811883a 	mov	r8,r23
 800bab4:	9802e01e 	bne	r19,zero,800c638 <___vfiprintf_internal_r+0x14f4>
 800bab8:	8c400414 	ori	r17,r17,16
 800babc:	8880080c 	andi	r2,r17,32
 800bac0:	1000641e 	bne	r2,zero,800bc54 <___vfiprintf_internal_r+0xb10>
 800bac4:	8880040c 	andi	r2,r17,16
 800bac8:	1001c81e 	bne	r2,zero,800c1ec <___vfiprintf_internal_r+0x10a8>
 800bacc:	8880100c 	andi	r2,r17,64
 800bad0:	d8001d85 	stb	zero,118(sp)
 800bad4:	1002281e 	bne	r2,zero,800c378 <___vfiprintf_internal_r+0x1234>
 800bad8:	d9002217 	ldw	r4,136(sp)
 800badc:	0029883a 	mov	r20,zero
 800bae0:	20800104 	addi	r2,r4,4
 800bae4:	24c00017 	ldw	r19,0(r4)
 800bae8:	8001c60e 	bge	r16,zero,800c204 <___vfiprintf_internal_r+0x10c0>
 800baec:	d8802215 	stw	r2,136(sp)
 800baf0:	002b883a 	mov	r21,zero
 800baf4:	9d04b03a 	or	r2,r19,r20
 800baf8:	103f911e 	bne	r2,zero,800b940 <__alt_data_end+0xfc00b940>
 800bafc:	00800044 	movi	r2,1
 800bb00:	10803fcc 	andi	r2,r2,255
 800bb04:	00c00044 	movi	r3,1
 800bb08:	10c05f26 	beq	r2,r3,800bc88 <___vfiprintf_internal_r+0xb44>
 800bb0c:	00c00084 	movi	r3,2
 800bb10:	10ffe31e 	bne	r2,r3,800baa0 <__alt_data_end+0xfc00baa0>
 800bb14:	0027883a 	mov	r19,zero
 800bb18:	0029883a 	mov	r20,zero
 800bb1c:	00015106 	br	800c064 <___vfiprintf_internal_r+0xf20>
 800bb20:	9cc03fcc 	andi	r19,r19,255
 800bb24:	b811883a 	mov	r8,r23
 800bb28:	9802c01e 	bne	r19,zero,800c62c <___vfiprintf_internal_r+0x14e8>
 800bb2c:	014200f4 	movhi	r5,2051
 800bb30:	29451f04 	addi	r5,r5,5244
 800bb34:	d9402615 	stw	r5,152(sp)
 800bb38:	8880080c 	andi	r2,r17,32
 800bb3c:	103f541e 	bne	r2,zero,800b890 <__alt_data_end+0xfc00b890>
 800bb40:	8880040c 	andi	r2,r17,16
 800bb44:	1001f226 	beq	r2,zero,800c310 <___vfiprintf_internal_r+0x11cc>
 800bb48:	d9402217 	ldw	r5,136(sp)
 800bb4c:	0029883a 	mov	r20,zero
 800bb50:	2cc00017 	ldw	r19,0(r5)
 800bb54:	29400104 	addi	r5,r5,4
 800bb58:	d9402215 	stw	r5,136(sp)
 800bb5c:	003f5106 	br	800b8a4 <__alt_data_end+0xfc00b8a4>
 800bb60:	d8c02217 	ldw	r3,136(sp)
 800bb64:	b811883a 	mov	r8,r23
 800bb68:	d8001d85 	stb	zero,118(sp)
 800bb6c:	1dc00017 	ldw	r23,0(r3)
 800bb70:	1f000104 	addi	fp,r3,4
 800bb74:	b8025926 	beq	r23,zero,800c4dc <___vfiprintf_internal_r+0x1398>
 800bb78:	80023316 	blt	r16,zero,800c448 <___vfiprintf_internal_r+0x1304>
 800bb7c:	800d883a 	mov	r6,r16
 800bb80:	000b883a 	mov	r5,zero
 800bb84:	b809883a 	mov	r4,r23
 800bb88:	da002a15 	stw	r8,168(sp)
 800bb8c:	80092840 	call	8009284 <memchr>
 800bb90:	da002a17 	ldw	r8,168(sp)
 800bb94:	10026826 	beq	r2,zero,800c538 <___vfiprintf_internal_r+0x13f4>
 800bb98:	15e9c83a 	sub	r20,r2,r23
 800bb9c:	dd401d83 	ldbu	r21,118(sp)
 800bba0:	df002215 	stw	fp,136(sp)
 800bba4:	0021883a 	mov	r16,zero
 800bba8:	003e6906 	br	800b550 <__alt_data_end+0xfc00b550>
 800bbac:	9cc03fcc 	andi	r19,r19,255
 800bbb0:	b811883a 	mov	r8,r23
 800bbb4:	983fc126 	beq	r19,zero,800babc <__alt_data_end+0xfc00babc>
 800bbb8:	d8c02303 	ldbu	r3,140(sp)
 800bbbc:	d8c01d85 	stb	r3,118(sp)
 800bbc0:	003fbe06 	br	800babc <__alt_data_end+0xfc00babc>
 800bbc4:	d9002217 	ldw	r4,136(sp)
 800bbc8:	d9402217 	ldw	r5,136(sp)
 800bbcc:	21000017 	ldw	r4,0(r4)
 800bbd0:	28800104 	addi	r2,r5,4
 800bbd4:	d9002515 	stw	r4,148(sp)
 800bbd8:	203e3d16 	blt	r4,zero,800b4d0 <__alt_data_end+0xfc00b4d0>
 800bbdc:	d8802215 	stw	r2,136(sp)
 800bbe0:	b0c00007 	ldb	r3,0(r22)
 800bbe4:	003db406 	br	800b2b8 <__alt_data_end+0xfc00b2b8>
 800bbe8:	00c00ac4 	movi	r3,43
 800bbec:	d8c02305 	stb	r3,140(sp)
 800bbf0:	04c00044 	movi	r19,1
 800bbf4:	b0c00007 	ldb	r3,0(r22)
 800bbf8:	003daf06 	br	800b2b8 <__alt_data_end+0xfc00b2b8>
 800bbfc:	b0c00007 	ldb	r3,0(r22)
 800bc00:	01000a84 	movi	r4,42
 800bc04:	b4000044 	addi	r16,r22,1
 800bc08:	19025e26 	beq	r3,r4,800c584 <___vfiprintf_internal_r+0x1440>
 800bc0c:	1f3ff404 	addi	fp,r3,-48
 800bc10:	0009883a 	mov	r4,zero
 800bc14:	af025236 	bltu	r21,fp,800c560 <___vfiprintf_internal_r+0x141c>
 800bc18:	01400284 	movi	r5,10
 800bc1c:	800374c0 	call	800374c <__mulsi3>
 800bc20:	80c00007 	ldb	r3,0(r16)
 800bc24:	1709883a 	add	r4,r2,fp
 800bc28:	85800044 	addi	r22,r16,1
 800bc2c:	1f3ff404 	addi	fp,r3,-48
 800bc30:	b021883a 	mov	r16,r22
 800bc34:	af3ff82e 	bgeu	r21,fp,800bc18 <__alt_data_end+0xfc00bc18>
 800bc38:	2021883a 	mov	r16,r4
 800bc3c:	203d9f0e 	bge	r4,zero,800b2bc <__alt_data_end+0xfc00b2bc>
 800bc40:	043fffc4 	movi	r16,-1
 800bc44:	003d9d06 	br	800b2bc <__alt_data_end+0xfc00b2bc>
 800bc48:	8c401014 	ori	r17,r17,64
 800bc4c:	b0c00007 	ldb	r3,0(r22)
 800bc50:	003d9906 	br	800b2b8 <__alt_data_end+0xfc00b2b8>
 800bc54:	d9002217 	ldw	r4,136(sp)
 800bc58:	d8001d85 	stb	zero,118(sp)
 800bc5c:	20c00204 	addi	r3,r4,8
 800bc60:	24c00017 	ldw	r19,0(r4)
 800bc64:	25000117 	ldw	r20,4(r4)
 800bc68:	8001e716 	blt	r16,zero,800c408 <___vfiprintf_internal_r+0x12c4>
 800bc6c:	013fdfc4 	movi	r4,-129
 800bc70:	9d04b03a 	or	r2,r19,r20
 800bc74:	d8c02215 	stw	r3,136(sp)
 800bc78:	8922703a 	and	r17,r17,r4
 800bc7c:	002b883a 	mov	r21,zero
 800bc80:	103f2f1e 	bne	r2,zero,800b940 <__alt_data_end+0xfc00b940>
 800bc84:	803e2f26 	beq	r16,zero,800b544 <__alt_data_end+0xfc00b544>
 800bc88:	0027883a 	mov	r19,zero
 800bc8c:	9cc00c04 	addi	r19,r19,48
 800bc90:	dcc019c5 	stb	r19,103(sp)
 800bc94:	dd002817 	ldw	r20,160(sp)
 800bc98:	ddc019c4 	addi	r23,sp,103
 800bc9c:	003e2c06 	br	800b550 <__alt_data_end+0xfc00b550>
 800bca0:	9cc03fcc 	andi	r19,r19,255
 800bca4:	b811883a 	mov	r8,r23
 800bca8:	9802571e 	bne	r19,zero,800c608 <___vfiprintf_internal_r+0x14c4>
 800bcac:	18005726 	beq	r3,zero,800be0c <___vfiprintf_internal_r+0xcc8>
 800bcb0:	04c00044 	movi	r19,1
 800bcb4:	d8c01005 	stb	r3,64(sp)
 800bcb8:	d8001d85 	stb	zero,118(sp)
 800bcbc:	9829883a 	mov	r20,r19
 800bcc0:	ddc01004 	addi	r23,sp,64
 800bcc4:	003f0a06 	br	800b8f0 <__alt_data_end+0xfc00b8f0>
 800bcc8:	d9402017 	ldw	r5,128(sp)
 800bccc:	d9002117 	ldw	r4,132(sp)
 800bcd0:	d9801a04 	addi	r6,sp,104
 800bcd4:	da802a15 	stw	r10,168(sp)
 800bcd8:	800b0300 	call	800b030 <__sprint_r.part.0>
 800bcdc:	da802a17 	ldw	r10,168(sp)
 800bce0:	1000501e 	bne	r2,zero,800be24 <___vfiprintf_internal_r+0xce0>
 800bce4:	d9801b17 	ldw	r6,108(sp)
 800bce8:	d8801c17 	ldw	r2,112(sp)
 800bcec:	d811883a 	mov	r8,sp
 800bcf0:	31000044 	addi	r4,r6,1
 800bcf4:	003e3606 	br	800b5d0 <__alt_data_end+0xfc00b5d0>
 800bcf8:	d9001b17 	ldw	r4,108(sp)
 800bcfc:	d8801c17 	ldw	r2,112(sp)
 800bd00:	21400044 	addi	r5,r4,1
 800bd04:	d9801d87 	ldb	r6,118(sp)
 800bd08:	303e5226 	beq	r6,zero,800b654 <__alt_data_end+0xfc00b654>
 800bd0c:	01800044 	movi	r6,1
 800bd10:	d9001d84 	addi	r4,sp,118
 800bd14:	1185883a 	add	r2,r2,r6
 800bd18:	41000015 	stw	r4,0(r8)
 800bd1c:	41800115 	stw	r6,4(r8)
 800bd20:	d8801c15 	stw	r2,112(sp)
 800bd24:	d9401b15 	stw	r5,108(sp)
 800bd28:	010001c4 	movi	r4,7
 800bd2c:	2140b00e 	bge	r4,r5,800bff0 <___vfiprintf_internal_r+0xeac>
 800bd30:	1000f61e 	bne	r2,zero,800c10c <___vfiprintf_internal_r+0xfc8>
 800bd34:	3800b31e 	bne	r7,zero,800c004 <___vfiprintf_internal_r+0xec0>
 800bd38:	0009883a 	mov	r4,zero
 800bd3c:	300b883a 	mov	r5,r6
 800bd40:	d811883a 	mov	r8,sp
 800bd44:	01802004 	movi	r6,128
 800bd48:	19be5226 	beq	r3,r6,800b694 <__alt_data_end+0xfc00b694>
 800bd4c:	8521c83a 	sub	r16,r16,r20
 800bd50:	043e790e 	bge	zero,r16,800b738 <__alt_data_end+0xfc00b738>
 800bd54:	05400404 	movi	r21,16
 800bd58:	ac01b00e 	bge	r21,r16,800c41c <___vfiprintf_internal_r+0x12d8>
 800bd5c:	014200f4 	movhi	r5,2051
 800bd60:	29458504 	addi	r5,r5,5652
 800bd64:	d9402315 	stw	r5,140(sp)
 800bd68:	070001c4 	movi	fp,7
 800bd6c:	00000506 	br	800bd84 <___vfiprintf_internal_r+0xc40>
 800bd70:	21400084 	addi	r5,r4,2
 800bd74:	42000204 	addi	r8,r8,8
 800bd78:	1809883a 	mov	r4,r3
 800bd7c:	843ffc04 	addi	r16,r16,-16
 800bd80:	ac000d0e 	bge	r21,r16,800bdb8 <___vfiprintf_internal_r+0xc74>
 800bd84:	10800404 	addi	r2,r2,16
 800bd88:	20c00044 	addi	r3,r4,1
 800bd8c:	44800015 	stw	r18,0(r8)
 800bd90:	45400115 	stw	r21,4(r8)
 800bd94:	d8801c15 	stw	r2,112(sp)
 800bd98:	d8c01b15 	stw	r3,108(sp)
 800bd9c:	e0fff40e 	bge	fp,r3,800bd70 <__alt_data_end+0xfc00bd70>
 800bda0:	1000101e 	bne	r2,zero,800bde4 <___vfiprintf_internal_r+0xca0>
 800bda4:	843ffc04 	addi	r16,r16,-16
 800bda8:	01400044 	movi	r5,1
 800bdac:	0009883a 	mov	r4,zero
 800bdb0:	d811883a 	mov	r8,sp
 800bdb4:	ac3ff316 	blt	r21,r16,800bd84 <__alt_data_end+0xfc00bd84>
 800bdb8:	d8c02317 	ldw	r3,140(sp)
 800bdbc:	1405883a 	add	r2,r2,r16
 800bdc0:	44000115 	stw	r16,4(r8)
 800bdc4:	40c00015 	stw	r3,0(r8)
 800bdc8:	d8801c15 	stw	r2,112(sp)
 800bdcc:	d9401b15 	stw	r5,108(sp)
 800bdd0:	00c001c4 	movi	r3,7
 800bdd4:	19401916 	blt	r3,r5,800be3c <___vfiprintf_internal_r+0xcf8>
 800bdd8:	42000204 	addi	r8,r8,8
 800bddc:	29400044 	addi	r5,r5,1
 800bde0:	003e5506 	br	800b738 <__alt_data_end+0xfc00b738>
 800bde4:	d9402017 	ldw	r5,128(sp)
 800bde8:	d9002117 	ldw	r4,132(sp)
 800bdec:	d9801a04 	addi	r6,sp,104
 800bdf0:	800b0300 	call	800b030 <__sprint_r.part.0>
 800bdf4:	10000b1e 	bne	r2,zero,800be24 <___vfiprintf_internal_r+0xce0>
 800bdf8:	d9001b17 	ldw	r4,108(sp)
 800bdfc:	d8801c17 	ldw	r2,112(sp)
 800be00:	d811883a 	mov	r8,sp
 800be04:	21400044 	addi	r5,r4,1
 800be08:	003fdc06 	br	800bd7c <__alt_data_end+0xfc00bd7c>
 800be0c:	d8801c17 	ldw	r2,112(sp)
 800be10:	10000426 	beq	r2,zero,800be24 <___vfiprintf_internal_r+0xce0>
 800be14:	d9402017 	ldw	r5,128(sp)
 800be18:	d9002117 	ldw	r4,132(sp)
 800be1c:	d9801a04 	addi	r6,sp,104
 800be20:	800b0300 	call	800b030 <__sprint_r.part.0>
 800be24:	d9402017 	ldw	r5,128(sp)
 800be28:	2880030b 	ldhu	r2,12(r5)
 800be2c:	1080100c 	andi	r2,r2,64
 800be30:	10014d1e 	bne	r2,zero,800c368 <___vfiprintf_internal_r+0x1224>
 800be34:	d8802417 	ldw	r2,144(sp)
 800be38:	003d9706 	br	800b498 <__alt_data_end+0xfc00b498>
 800be3c:	1000d21e 	bne	r2,zero,800c188 <___vfiprintf_internal_r+0x1044>
 800be40:	00c00044 	movi	r3,1
 800be44:	a005883a 	mov	r2,r20
 800be48:	ddc00015 	stw	r23,0(sp)
 800be4c:	dd000115 	stw	r20,4(sp)
 800be50:	dd001c15 	stw	r20,112(sp)
 800be54:	d8c01b15 	stw	r3,108(sp)
 800be58:	d811883a 	mov	r8,sp
 800be5c:	42000204 	addi	r8,r8,8
 800be60:	8c40010c 	andi	r17,r17,4
 800be64:	88004026 	beq	r17,zero,800bf68 <___vfiprintf_internal_r+0xe24>
 800be68:	d9002517 	ldw	r4,148(sp)
 800be6c:	24e3c83a 	sub	r17,r4,r19
 800be70:	04403d0e 	bge	zero,r17,800bf68 <___vfiprintf_internal_r+0xe24>
 800be74:	04000404 	movi	r16,16
 800be78:	8441a90e 	bge	r16,r17,800c520 <___vfiprintf_internal_r+0x13dc>
 800be7c:	00c200f4 	movhi	r3,2051
 800be80:	18c58904 	addi	r3,r3,5668
 800be84:	d9001b17 	ldw	r4,108(sp)
 800be88:	d8c02315 	stw	r3,140(sp)
 800be8c:	050001c4 	movi	r20,7
 800be90:	dd402117 	ldw	r21,132(sp)
 800be94:	ddc02017 	ldw	r23,128(sp)
 800be98:	00000506 	br	800beb0 <___vfiprintf_internal_r+0xd6c>
 800be9c:	21400084 	addi	r5,r4,2
 800bea0:	42000204 	addi	r8,r8,8
 800bea4:	1809883a 	mov	r4,r3
 800bea8:	8c7ffc04 	addi	r17,r17,-16
 800beac:	84400f0e 	bge	r16,r17,800beec <___vfiprintf_internal_r+0xda8>
 800beb0:	014200f4 	movhi	r5,2051
 800beb4:	10800404 	addi	r2,r2,16
 800beb8:	20c00044 	addi	r3,r4,1
 800bebc:	29458904 	addi	r5,r5,5668
 800bec0:	41400015 	stw	r5,0(r8)
 800bec4:	44000115 	stw	r16,4(r8)
 800bec8:	d8801c15 	stw	r2,112(sp)
 800becc:	d8c01b15 	stw	r3,108(sp)
 800bed0:	a0fff20e 	bge	r20,r3,800be9c <__alt_data_end+0xfc00be9c>
 800bed4:	1000141e 	bne	r2,zero,800bf28 <___vfiprintf_internal_r+0xde4>
 800bed8:	8c7ffc04 	addi	r17,r17,-16
 800bedc:	01400044 	movi	r5,1
 800bee0:	0009883a 	mov	r4,zero
 800bee4:	d811883a 	mov	r8,sp
 800bee8:	847ff116 	blt	r16,r17,800beb0 <__alt_data_end+0xfc00beb0>
 800beec:	d8c02317 	ldw	r3,140(sp)
 800bef0:	1445883a 	add	r2,r2,r17
 800bef4:	44400115 	stw	r17,4(r8)
 800bef8:	40c00015 	stw	r3,0(r8)
 800befc:	d8801c15 	stw	r2,112(sp)
 800bf00:	d9401b15 	stw	r5,108(sp)
 800bf04:	00c001c4 	movi	r3,7
 800bf08:	1940170e 	bge	r3,r5,800bf68 <___vfiprintf_internal_r+0xe24>
 800bf0c:	1000101e 	bne	r2,zero,800bf50 <___vfiprintf_internal_r+0xe0c>
 800bf10:	d8802517 	ldw	r2,148(sp)
 800bf14:	14c11616 	blt	r2,r19,800c370 <___vfiprintf_internal_r+0x122c>
 800bf18:	d9002417 	ldw	r4,144(sp)
 800bf1c:	2089883a 	add	r4,r4,r2
 800bf20:	d9002415 	stw	r4,144(sp)
 800bf24:	003e1806 	br	800b788 <__alt_data_end+0xfc00b788>
 800bf28:	d9801a04 	addi	r6,sp,104
 800bf2c:	b80b883a 	mov	r5,r23
 800bf30:	a809883a 	mov	r4,r21
 800bf34:	800b0300 	call	800b030 <__sprint_r.part.0>
 800bf38:	103fba1e 	bne	r2,zero,800be24 <__alt_data_end+0xfc00be24>
 800bf3c:	d9001b17 	ldw	r4,108(sp)
 800bf40:	d8801c17 	ldw	r2,112(sp)
 800bf44:	d811883a 	mov	r8,sp
 800bf48:	21400044 	addi	r5,r4,1
 800bf4c:	003fd606 	br	800bea8 <__alt_data_end+0xfc00bea8>
 800bf50:	d9402017 	ldw	r5,128(sp)
 800bf54:	d9002117 	ldw	r4,132(sp)
 800bf58:	d9801a04 	addi	r6,sp,104
 800bf5c:	800b0300 	call	800b030 <__sprint_r.part.0>
 800bf60:	103fb01e 	bne	r2,zero,800be24 <__alt_data_end+0xfc00be24>
 800bf64:	d8801c17 	ldw	r2,112(sp)
 800bf68:	d8c02517 	ldw	r3,148(sp)
 800bf6c:	1cc0010e 	bge	r3,r19,800bf74 <___vfiprintf_internal_r+0xe30>
 800bf70:	9807883a 	mov	r3,r19
 800bf74:	d9002417 	ldw	r4,144(sp)
 800bf78:	20c9883a 	add	r4,r4,r3
 800bf7c:	d9002415 	stw	r4,144(sp)
 800bf80:	103e0126 	beq	r2,zero,800b788 <__alt_data_end+0xfc00b788>
 800bf84:	d9402017 	ldw	r5,128(sp)
 800bf88:	d9002117 	ldw	r4,132(sp)
 800bf8c:	d9801a04 	addi	r6,sp,104
 800bf90:	800b0300 	call	800b030 <__sprint_r.part.0>
 800bf94:	103dfc26 	beq	r2,zero,800b788 <__alt_data_end+0xfc00b788>
 800bf98:	003fa206 	br	800be24 <__alt_data_end+0xfc00be24>
 800bf9c:	d9402017 	ldw	r5,128(sp)
 800bfa0:	d9002117 	ldw	r4,132(sp)
 800bfa4:	d9801a04 	addi	r6,sp,104
 800bfa8:	d9c02b15 	stw	r7,172(sp)
 800bfac:	800b0300 	call	800b030 <__sprint_r.part.0>
 800bfb0:	d9c02b17 	ldw	r7,172(sp)
 800bfb4:	103f9b1e 	bne	r2,zero,800be24 <__alt_data_end+0xfc00be24>
 800bfb8:	d9001b17 	ldw	r4,108(sp)
 800bfbc:	d8801c17 	ldw	r2,112(sp)
 800bfc0:	d811883a 	mov	r8,sp
 800bfc4:	21800044 	addi	r6,r4,1
 800bfc8:	003dbf06 	br	800b6c8 <__alt_data_end+0xfc00b6c8>
 800bfcc:	1000d81e 	bne	r2,zero,800c330 <___vfiprintf_internal_r+0x11ec>
 800bfd0:	d9001d87 	ldb	r4,118(sp)
 800bfd4:	20000a26 	beq	r4,zero,800c000 <___vfiprintf_internal_r+0xebc>
 800bfd8:	00800044 	movi	r2,1
 800bfdc:	d9001d84 	addi	r4,sp,118
 800bfe0:	100b883a 	mov	r5,r2
 800bfe4:	d9000015 	stw	r4,0(sp)
 800bfe8:	d8800115 	stw	r2,4(sp)
 800bfec:	d811883a 	mov	r8,sp
 800bff0:	2809883a 	mov	r4,r5
 800bff4:	42000204 	addi	r8,r8,8
 800bff8:	29400044 	addi	r5,r5,1
 800bffc:	003d9506 	br	800b654 <__alt_data_end+0xfc00b654>
 800c000:	3800fd26 	beq	r7,zero,800c3f8 <___vfiprintf_internal_r+0x12b4>
 800c004:	00800084 	movi	r2,2
 800c008:	d9001d04 	addi	r4,sp,116
 800c00c:	d9000015 	stw	r4,0(sp)
 800c010:	d8800115 	stw	r2,4(sp)
 800c014:	01400044 	movi	r5,1
 800c018:	d811883a 	mov	r8,sp
 800c01c:	2809883a 	mov	r4,r5
 800c020:	42000204 	addi	r8,r8,8
 800c024:	29400044 	addi	r5,r5,1
 800c028:	003f4606 	br	800bd44 <__alt_data_end+0xfc00bd44>
 800c02c:	d8802517 	ldw	r2,148(sp)
 800c030:	14c0010e 	bge	r2,r19,800c038 <___vfiprintf_internal_r+0xef4>
 800c034:	9805883a 	mov	r2,r19
 800c038:	d9402417 	ldw	r5,144(sp)
 800c03c:	288b883a 	add	r5,r5,r2
 800c040:	d9402415 	stw	r5,144(sp)
 800c044:	003dd006 	br	800b788 <__alt_data_end+0xfc00b788>
 800c048:	d8001d85 	stb	zero,118(sp)
 800c04c:	80005d16 	blt	r16,zero,800c1c4 <___vfiprintf_internal_r+0x1080>
 800c050:	00ffdfc4 	movi	r3,-129
 800c054:	9d04b03a 	or	r2,r19,r20
 800c058:	88e2703a 	and	r17,r17,r3
 800c05c:	103d3726 	beq	r2,zero,800b53c <__alt_data_end+0xfc00b53c>
 800c060:	002b883a 	mov	r21,zero
 800c064:	d9002617 	ldw	r4,152(sp)
 800c068:	ddc01a04 	addi	r23,sp,104
 800c06c:	988003cc 	andi	r2,r19,15
 800c070:	a006973a 	slli	r3,r20,28
 800c074:	2085883a 	add	r2,r4,r2
 800c078:	9826d13a 	srli	r19,r19,4
 800c07c:	10800003 	ldbu	r2,0(r2)
 800c080:	a028d13a 	srli	r20,r20,4
 800c084:	bdffffc4 	addi	r23,r23,-1
 800c088:	1ce6b03a 	or	r19,r3,r19
 800c08c:	b8800005 	stb	r2,0(r23)
 800c090:	9d04b03a 	or	r2,r19,r20
 800c094:	103ff51e 	bne	r2,zero,800c06c <__alt_data_end+0xfc00c06c>
 800c098:	d8801e17 	ldw	r2,120(sp)
 800c09c:	15e9c83a 	sub	r20,r2,r23
 800c0a0:	003d2b06 	br	800b550 <__alt_data_end+0xfc00b550>
 800c0a4:	d9402017 	ldw	r5,128(sp)
 800c0a8:	d9002117 	ldw	r4,132(sp)
 800c0ac:	d9801a04 	addi	r6,sp,104
 800c0b0:	800b0300 	call	800b030 <__sprint_r.part.0>
 800c0b4:	103f5b1e 	bne	r2,zero,800be24 <__alt_data_end+0xfc00be24>
 800c0b8:	d8801c17 	ldw	r2,112(sp)
 800c0bc:	d811883a 	mov	r8,sp
 800c0c0:	003f6706 	br	800be60 <__alt_data_end+0xfc00be60>
 800c0c4:	d9402017 	ldw	r5,128(sp)
 800c0c8:	d9002117 	ldw	r4,132(sp)
 800c0cc:	d9801a04 	addi	r6,sp,104
 800c0d0:	800b0300 	call	800b030 <__sprint_r.part.0>
 800c0d4:	103f531e 	bne	r2,zero,800be24 <__alt_data_end+0xfc00be24>
 800c0d8:	d811883a 	mov	r8,sp
 800c0dc:	003cd906 	br	800b444 <__alt_data_end+0xfc00b444>
 800c0e0:	10803fcc 	andi	r2,r2,255
 800c0e4:	1080201c 	xori	r2,r2,128
 800c0e8:	10bfe004 	addi	r2,r2,-128
 800c0ec:	00c00c04 	movi	r3,48
 800c0f0:	10ffe926 	beq	r2,r3,800c098 <__alt_data_end+0xfc00c098>
 800c0f4:	b8ffffc5 	stb	r3,-1(r23)
 800c0f8:	d8c01e17 	ldw	r3,120(sp)
 800c0fc:	b8bfffc4 	addi	r2,r23,-1
 800c100:	102f883a 	mov	r23,r2
 800c104:	18a9c83a 	sub	r20,r3,r2
 800c108:	003d1106 	br	800b550 <__alt_data_end+0xfc00b550>
 800c10c:	d9402017 	ldw	r5,128(sp)
 800c110:	d9002117 	ldw	r4,132(sp)
 800c114:	d9801a04 	addi	r6,sp,104
 800c118:	d8c02a15 	stw	r3,168(sp)
 800c11c:	d9c02b15 	stw	r7,172(sp)
 800c120:	800b0300 	call	800b030 <__sprint_r.part.0>
 800c124:	d8c02a17 	ldw	r3,168(sp)
 800c128:	d9c02b17 	ldw	r7,172(sp)
 800c12c:	103f3d1e 	bne	r2,zero,800be24 <__alt_data_end+0xfc00be24>
 800c130:	d9001b17 	ldw	r4,108(sp)
 800c134:	d8801c17 	ldw	r2,112(sp)
 800c138:	d811883a 	mov	r8,sp
 800c13c:	21400044 	addi	r5,r4,1
 800c140:	003d4406 	br	800b654 <__alt_data_end+0xfc00b654>
 800c144:	d9402017 	ldw	r5,128(sp)
 800c148:	d9002117 	ldw	r4,132(sp)
 800c14c:	d9801a04 	addi	r6,sp,104
 800c150:	d8c02a15 	stw	r3,168(sp)
 800c154:	800b0300 	call	800b030 <__sprint_r.part.0>
 800c158:	d8c02a17 	ldw	r3,168(sp)
 800c15c:	103f311e 	bne	r2,zero,800be24 <__alt_data_end+0xfc00be24>
 800c160:	d9001b17 	ldw	r4,108(sp)
 800c164:	d8801c17 	ldw	r2,112(sp)
 800c168:	d811883a 	mov	r8,sp
 800c16c:	21400044 	addi	r5,r4,1
 800c170:	003ef406 	br	800bd44 <__alt_data_end+0xfc00bd44>
 800c174:	1000bd1e 	bne	r2,zero,800c46c <___vfiprintf_internal_r+0x1328>
 800c178:	01400044 	movi	r5,1
 800c17c:	0009883a 	mov	r4,zero
 800c180:	d811883a 	mov	r8,sp
 800c184:	003ef106 	br	800bd4c <__alt_data_end+0xfc00bd4c>
 800c188:	d9402017 	ldw	r5,128(sp)
 800c18c:	d9002117 	ldw	r4,132(sp)
 800c190:	d9801a04 	addi	r6,sp,104
 800c194:	800b0300 	call	800b030 <__sprint_r.part.0>
 800c198:	103f221e 	bne	r2,zero,800be24 <__alt_data_end+0xfc00be24>
 800c19c:	d9401b17 	ldw	r5,108(sp)
 800c1a0:	d8801c17 	ldw	r2,112(sp)
 800c1a4:	d811883a 	mov	r8,sp
 800c1a8:	29400044 	addi	r5,r5,1
 800c1ac:	003d6206 	br	800b738 <__alt_data_end+0xfc00b738>
 800c1b0:	014200f4 	movhi	r5,2051
 800c1b4:	29452404 	addi	r5,r5,5264
 800c1b8:	d9402615 	stw	r5,152(sp)
 800c1bc:	d8c02215 	stw	r3,136(sp)
 800c1c0:	1023883a 	mov	r17,r2
 800c1c4:	9d04b03a 	or	r2,r19,r20
 800c1c8:	103fa51e 	bne	r2,zero,800c060 <__alt_data_end+0xfc00c060>
 800c1cc:	002b883a 	mov	r21,zero
 800c1d0:	00800084 	movi	r2,2
 800c1d4:	003e4a06 	br	800bb00 <__alt_data_end+0xfc00bb00>
 800c1d8:	014200f4 	movhi	r5,2051
 800c1dc:	29452404 	addi	r5,r5,5264
 800c1e0:	002b883a 	mov	r21,zero
 800c1e4:	d9402615 	stw	r5,152(sp)
 800c1e8:	003f9e06 	br	800c064 <__alt_data_end+0xfc00c064>
 800c1ec:	d9402217 	ldw	r5,136(sp)
 800c1f0:	d8001d85 	stb	zero,118(sp)
 800c1f4:	0029883a 	mov	r20,zero
 800c1f8:	28800104 	addi	r2,r5,4
 800c1fc:	2cc00017 	ldw	r19,0(r5)
 800c200:	803e3a16 	blt	r16,zero,800baec <__alt_data_end+0xfc00baec>
 800c204:	00ffdfc4 	movi	r3,-129
 800c208:	d8802215 	stw	r2,136(sp)
 800c20c:	88e2703a 	and	r17,r17,r3
 800c210:	002b883a 	mov	r21,zero
 800c214:	983e9b26 	beq	r19,zero,800bc84 <__alt_data_end+0xfc00bc84>
 800c218:	00800244 	movi	r2,9
 800c21c:	14fdc936 	bltu	r2,r19,800b944 <__alt_data_end+0xfc00b944>
 800c220:	003e9a06 	br	800bc8c <__alt_data_end+0xfc00bc8c>
 800c224:	00800c04 	movi	r2,48
 800c228:	d8c01d45 	stb	r3,117(sp)
 800c22c:	d8801d05 	stb	r2,116(sp)
 800c230:	d8001d85 	stb	zero,118(sp)
 800c234:	88c00094 	ori	r3,r17,2
 800c238:	80009c16 	blt	r16,zero,800c4ac <___vfiprintf_internal_r+0x1368>
 800c23c:	00bfdfc4 	movi	r2,-129
 800c240:	88a2703a 	and	r17,r17,r2
 800c244:	8c400094 	ori	r17,r17,2
 800c248:	002b883a 	mov	r21,zero
 800c24c:	003f8506 	br	800c064 <__alt_data_end+0xfc00c064>
 800c250:	b029883a 	mov	r20,r22
 800c254:	003c0b06 	br	800b284 <__alt_data_end+0xfc00b284>
 800c258:	04e7c83a 	sub	r19,zero,r19
 800c25c:	05400b44 	movi	r21,45
 800c260:	9804c03a 	cmpne	r2,r19,zero
 800c264:	0529c83a 	sub	r20,zero,r20
 800c268:	dd401d85 	stb	r21,118(sp)
 800c26c:	a0a9c83a 	sub	r20,r20,r2
 800c270:	80009716 	blt	r16,zero,800c4d0 <___vfiprintf_internal_r+0x138c>
 800c274:	00bfdfc4 	movi	r2,-129
 800c278:	88a2703a 	and	r17,r17,r2
 800c27c:	003db006 	br	800b940 <__alt_data_end+0xfc00b940>
 800c280:	b0c00007 	ldb	r3,0(r22)
 800c284:	003c0c06 	br	800b2b8 <__alt_data_end+0xfc00b2b8>
 800c288:	8880100c 	andi	r2,r17,64
 800c28c:	d8001d85 	stb	zero,118(sp)
 800c290:	1000461e 	bne	r2,zero,800c3ac <___vfiprintf_internal_r+0x1268>
 800c294:	d9002217 	ldw	r4,136(sp)
 800c298:	0029883a 	mov	r20,zero
 800c29c:	20800104 	addi	r2,r4,4
 800c2a0:	24c00017 	ldw	r19,0(r4)
 800c2a4:	803df80e 	bge	r16,zero,800ba88 <__alt_data_end+0xfc00ba88>
 800c2a8:	9d06b03a 	or	r3,r19,r20
 800c2ac:	d8802215 	stw	r2,136(sp)
 800c2b0:	183d5e1e 	bne	r3,zero,800b82c <__alt_data_end+0xfc00b82c>
 800c2b4:	002b883a 	mov	r21,zero
 800c2b8:	0005883a 	mov	r2,zero
 800c2bc:	003e1006 	br	800bb00 <__alt_data_end+0xfc00bb00>
 800c2c0:	8880040c 	andi	r2,r17,16
 800c2c4:	1000321e 	bne	r2,zero,800c390 <___vfiprintf_internal_r+0x124c>
 800c2c8:	8c40100c 	andi	r17,r17,64
 800c2cc:	88008d26 	beq	r17,zero,800c504 <___vfiprintf_internal_r+0x13c0>
 800c2d0:	d9402217 	ldw	r5,136(sp)
 800c2d4:	d8c02417 	ldw	r3,144(sp)
 800c2d8:	28800017 	ldw	r2,0(r5)
 800c2dc:	29400104 	addi	r5,r5,4
 800c2e0:	d9402215 	stw	r5,136(sp)
 800c2e4:	10c0000d 	sth	r3,0(r2)
 800c2e8:	003bca06 	br	800b214 <__alt_data_end+0xfc00b214>
 800c2ec:	8880100c 	andi	r2,r17,64
 800c2f0:	10003a26 	beq	r2,zero,800c3dc <___vfiprintf_internal_r+0x1298>
 800c2f4:	d8802217 	ldw	r2,136(sp)
 800c2f8:	14c0000f 	ldh	r19,0(r2)
 800c2fc:	10800104 	addi	r2,r2,4
 800c300:	d8802215 	stw	r2,136(sp)
 800c304:	9829d7fa 	srai	r20,r19,31
 800c308:	a005883a 	mov	r2,r20
 800c30c:	003d8506 	br	800b924 <__alt_data_end+0xfc00b924>
 800c310:	8880100c 	andi	r2,r17,64
 800c314:	10002b26 	beq	r2,zero,800c3c4 <___vfiprintf_internal_r+0x1280>
 800c318:	d8802217 	ldw	r2,136(sp)
 800c31c:	0029883a 	mov	r20,zero
 800c320:	14c0000b 	ldhu	r19,0(r2)
 800c324:	10800104 	addi	r2,r2,4
 800c328:	d8802215 	stw	r2,136(sp)
 800c32c:	003d5d06 	br	800b8a4 <__alt_data_end+0xfc00b8a4>
 800c330:	d9402017 	ldw	r5,128(sp)
 800c334:	d9002117 	ldw	r4,132(sp)
 800c338:	d9801a04 	addi	r6,sp,104
 800c33c:	d8c02a15 	stw	r3,168(sp)
 800c340:	d9c02b15 	stw	r7,172(sp)
 800c344:	800b0300 	call	800b030 <__sprint_r.part.0>
 800c348:	d8c02a17 	ldw	r3,168(sp)
 800c34c:	d9c02b17 	ldw	r7,172(sp)
 800c350:	103eb41e 	bne	r2,zero,800be24 <__alt_data_end+0xfc00be24>
 800c354:	d9001b17 	ldw	r4,108(sp)
 800c358:	d8801c17 	ldw	r2,112(sp)
 800c35c:	d811883a 	mov	r8,sp
 800c360:	21400044 	addi	r5,r4,1
 800c364:	003e6706 	br	800bd04 <__alt_data_end+0xfc00bd04>
 800c368:	00bfffc4 	movi	r2,-1
 800c36c:	003c4a06 	br	800b498 <__alt_data_end+0xfc00b498>
 800c370:	9805883a 	mov	r2,r19
 800c374:	003ee806 	br	800bf18 <__alt_data_end+0xfc00bf18>
 800c378:	d8c02217 	ldw	r3,136(sp)
 800c37c:	0029883a 	mov	r20,zero
 800c380:	18800104 	addi	r2,r3,4
 800c384:	1cc0000b 	ldhu	r19,0(r3)
 800c388:	803f9e0e 	bge	r16,zero,800c204 <__alt_data_end+0xfc00c204>
 800c38c:	003dd706 	br	800baec <__alt_data_end+0xfc00baec>
 800c390:	d8c02217 	ldw	r3,136(sp)
 800c394:	d9002417 	ldw	r4,144(sp)
 800c398:	18800017 	ldw	r2,0(r3)
 800c39c:	18c00104 	addi	r3,r3,4
 800c3a0:	d8c02215 	stw	r3,136(sp)
 800c3a4:	11000015 	stw	r4,0(r2)
 800c3a8:	003b9a06 	br	800b214 <__alt_data_end+0xfc00b214>
 800c3ac:	d8c02217 	ldw	r3,136(sp)
 800c3b0:	0029883a 	mov	r20,zero
 800c3b4:	18800104 	addi	r2,r3,4
 800c3b8:	1cc0000b 	ldhu	r19,0(r3)
 800c3bc:	803db20e 	bge	r16,zero,800ba88 <__alt_data_end+0xfc00ba88>
 800c3c0:	003fb906 	br	800c2a8 <__alt_data_end+0xfc00c2a8>
 800c3c4:	d9002217 	ldw	r4,136(sp)
 800c3c8:	0029883a 	mov	r20,zero
 800c3cc:	24c00017 	ldw	r19,0(r4)
 800c3d0:	21000104 	addi	r4,r4,4
 800c3d4:	d9002215 	stw	r4,136(sp)
 800c3d8:	003d3206 	br	800b8a4 <__alt_data_end+0xfc00b8a4>
 800c3dc:	d8c02217 	ldw	r3,136(sp)
 800c3e0:	1cc00017 	ldw	r19,0(r3)
 800c3e4:	18c00104 	addi	r3,r3,4
 800c3e8:	d8c02215 	stw	r3,136(sp)
 800c3ec:	9829d7fa 	srai	r20,r19,31
 800c3f0:	a005883a 	mov	r2,r20
 800c3f4:	003d4b06 	br	800b924 <__alt_data_end+0xfc00b924>
 800c3f8:	0009883a 	mov	r4,zero
 800c3fc:	01400044 	movi	r5,1
 800c400:	d811883a 	mov	r8,sp
 800c404:	003e4f06 	br	800bd44 <__alt_data_end+0xfc00bd44>
 800c408:	d8c02215 	stw	r3,136(sp)
 800c40c:	002b883a 	mov	r21,zero
 800c410:	003db806 	br	800baf4 <__alt_data_end+0xfc00baf4>
 800c414:	d811883a 	mov	r8,sp
 800c418:	003e9606 	br	800be74 <__alt_data_end+0xfc00be74>
 800c41c:	010200f4 	movhi	r4,2051
 800c420:	21058504 	addi	r4,r4,5652
 800c424:	d9002315 	stw	r4,140(sp)
 800c428:	003e6306 	br	800bdb8 <__alt_data_end+0xfc00bdb8>
 800c42c:	b0c00043 	ldbu	r3,1(r22)
 800c430:	8c400814 	ori	r17,r17,32
 800c434:	b5800044 	addi	r22,r22,1
 800c438:	18c03fcc 	andi	r3,r3,255
 800c43c:	18c0201c 	xori	r3,r3,128
 800c440:	18ffe004 	addi	r3,r3,-128
 800c444:	003b9c06 	br	800b2b8 <__alt_data_end+0xfc00b2b8>
 800c448:	b809883a 	mov	r4,r23
 800c44c:	da002a15 	stw	r8,168(sp)
 800c450:	80038b40 	call	80038b4 <strlen>
 800c454:	1029883a 	mov	r20,r2
 800c458:	dd401d83 	ldbu	r21,118(sp)
 800c45c:	df002215 	stw	fp,136(sp)
 800c460:	0021883a 	mov	r16,zero
 800c464:	da002a17 	ldw	r8,168(sp)
 800c468:	003c3906 	br	800b550 <__alt_data_end+0xfc00b550>
 800c46c:	d9402017 	ldw	r5,128(sp)
 800c470:	d9002117 	ldw	r4,132(sp)
 800c474:	d9801a04 	addi	r6,sp,104
 800c478:	800b0300 	call	800b030 <__sprint_r.part.0>
 800c47c:	103e691e 	bne	r2,zero,800be24 <__alt_data_end+0xfc00be24>
 800c480:	d9001b17 	ldw	r4,108(sp)
 800c484:	d8801c17 	ldw	r2,112(sp)
 800c488:	d811883a 	mov	r8,sp
 800c48c:	21400044 	addi	r5,r4,1
 800c490:	003e2e06 	br	800bd4c <__alt_data_end+0xfc00bd4c>
 800c494:	010200f4 	movhi	r4,2051
 800c498:	21058904 	addi	r4,r4,5668
 800c49c:	d9002315 	stw	r4,140(sp)
 800c4a0:	d9001b17 	ldw	r4,108(sp)
 800c4a4:	21000044 	addi	r4,r4,1
 800c4a8:	003c5e06 	br	800b624 <__alt_data_end+0xfc00b624>
 800c4ac:	002b883a 	mov	r21,zero
 800c4b0:	00800084 	movi	r2,2
 800c4b4:	10803fcc 	andi	r2,r2,255
 800c4b8:	01000044 	movi	r4,1
 800c4bc:	11002b26 	beq	r2,r4,800c56c <___vfiprintf_internal_r+0x1428>
 800c4c0:	01000084 	movi	r4,2
 800c4c4:	11002b1e 	bne	r2,r4,800c574 <___vfiprintf_internal_r+0x1430>
 800c4c8:	1823883a 	mov	r17,r3
 800c4cc:	003ee506 	br	800c064 <__alt_data_end+0xfc00c064>
 800c4d0:	8807883a 	mov	r3,r17
 800c4d4:	00800044 	movi	r2,1
 800c4d8:	003ff606 	br	800c4b4 <__alt_data_end+0xfc00c4b4>
 800c4dc:	00800184 	movi	r2,6
 800c4e0:	1400012e 	bgeu	r2,r16,800c4e8 <___vfiprintf_internal_r+0x13a4>
 800c4e4:	1021883a 	mov	r16,r2
 800c4e8:	8029883a 	mov	r20,r16
 800c4ec:	8027883a 	mov	r19,r16
 800c4f0:	80002216 	blt	r16,zero,800c57c <___vfiprintf_internal_r+0x1438>
 800c4f4:	05c200f4 	movhi	r23,2051
 800c4f8:	df002215 	stw	fp,136(sp)
 800c4fc:	bdc52904 	addi	r23,r23,5284
 800c500:	003cfb06 	br	800b8f0 <__alt_data_end+0xfc00b8f0>
 800c504:	d9002217 	ldw	r4,136(sp)
 800c508:	d9402417 	ldw	r5,144(sp)
 800c50c:	20800017 	ldw	r2,0(r4)
 800c510:	21000104 	addi	r4,r4,4
 800c514:	d9002215 	stw	r4,136(sp)
 800c518:	11400015 	stw	r5,0(r2)
 800c51c:	003b3d06 	br	800b214 <__alt_data_end+0xfc00b214>
 800c520:	014200f4 	movhi	r5,2051
 800c524:	29458904 	addi	r5,r5,5668
 800c528:	d9402315 	stw	r5,140(sp)
 800c52c:	d9401b17 	ldw	r5,108(sp)
 800c530:	29400044 	addi	r5,r5,1
 800c534:	003e6d06 	br	800beec <__alt_data_end+0xfc00beec>
 800c538:	8029883a 	mov	r20,r16
 800c53c:	dd401d83 	ldbu	r21,118(sp)
 800c540:	df002215 	stw	fp,136(sp)
 800c544:	0021883a 	mov	r16,zero
 800c548:	003c0106 	br	800b550 <__alt_data_end+0xfc00b550>
 800c54c:	00c200f4 	movhi	r3,2051
 800c550:	18c58504 	addi	r3,r3,5652
 800c554:	d8c02315 	stw	r3,140(sp)
 800c558:	280d883a 	mov	r6,r5
 800c55c:	003c6906 	br	800b704 <__alt_data_end+0xfc00b704>
 800c560:	802d883a 	mov	r22,r16
 800c564:	0021883a 	mov	r16,zero
 800c568:	003b5406 	br	800b2bc <__alt_data_end+0xfc00b2bc>
 800c56c:	1823883a 	mov	r17,r3
 800c570:	003cf306 	br	800b940 <__alt_data_end+0xfc00b940>
 800c574:	1823883a 	mov	r17,r3
 800c578:	003cad06 	br	800b830 <__alt_data_end+0xfc00b830>
 800c57c:	0027883a 	mov	r19,zero
 800c580:	003fdc06 	br	800c4f4 <__alt_data_end+0xfc00c4f4>
 800c584:	d9402217 	ldw	r5,136(sp)
 800c588:	8005883a 	mov	r2,r16
 800c58c:	b0c00043 	ldbu	r3,1(r22)
 800c590:	2c000017 	ldw	r16,0(r5)
 800c594:	29000104 	addi	r4,r5,4
 800c598:	d9002215 	stw	r4,136(sp)
 800c59c:	102d883a 	mov	r22,r2
 800c5a0:	803fa50e 	bge	r16,zero,800c438 <__alt_data_end+0xfc00c438>
 800c5a4:	18c03fcc 	andi	r3,r3,255
 800c5a8:	18c0201c 	xori	r3,r3,128
 800c5ac:	043fffc4 	movi	r16,-1
 800c5b0:	18ffe004 	addi	r3,r3,-128
 800c5b4:	003b4006 	br	800b2b8 <__alt_data_end+0xfc00b2b8>
 800c5b8:	d9402303 	ldbu	r5,140(sp)
 800c5bc:	d9401d85 	stb	r5,118(sp)
 800c5c0:	003cae06 	br	800b87c <__alt_data_end+0xfc00b87c>
 800c5c4:	d8c02303 	ldbu	r3,140(sp)
 800c5c8:	d8c01d85 	stb	r3,118(sp)
 800c5cc:	003d1406 	br	800ba20 <__alt_data_end+0xfc00ba20>
 800c5d0:	d8c02303 	ldbu	r3,140(sp)
 800c5d4:	d8c01d85 	stb	r3,118(sp)
 800c5d8:	003cca06 	br	800b904 <__alt_data_end+0xfc00b904>
 800c5dc:	8880004c 	andi	r2,r17,1
 800c5e0:	002b883a 	mov	r21,zero
 800c5e4:	10000526 	beq	r2,zero,800c5fc <___vfiprintf_internal_r+0x14b8>
 800c5e8:	00800c04 	movi	r2,48
 800c5ec:	d88019c5 	stb	r2,103(sp)
 800c5f0:	dd002817 	ldw	r20,160(sp)
 800c5f4:	ddc019c4 	addi	r23,sp,103
 800c5f8:	003bd506 	br	800b550 <__alt_data_end+0xfc00b550>
 800c5fc:	0029883a 	mov	r20,zero
 800c600:	ddc01a04 	addi	r23,sp,104
 800c604:	003bd206 	br	800b550 <__alt_data_end+0xfc00b550>
 800c608:	d9002303 	ldbu	r4,140(sp)
 800c60c:	d9001d85 	stb	r4,118(sp)
 800c610:	003da606 	br	800bcac <__alt_data_end+0xfc00bcac>
 800c614:	d8c02303 	ldbu	r3,140(sp)
 800c618:	d8c01d85 	stb	r3,118(sp)
 800c61c:	003c7606 	br	800b7f8 <__alt_data_end+0xfc00b7f8>
 800c620:	d8c02303 	ldbu	r3,140(sp)
 800c624:	d8c01d85 	stb	r3,118(sp)
 800c628:	003c6506 	br	800b7c0 <__alt_data_end+0xfc00b7c0>
 800c62c:	d9002303 	ldbu	r4,140(sp)
 800c630:	d9001d85 	stb	r4,118(sp)
 800c634:	003d3d06 	br	800bb2c <__alt_data_end+0xfc00bb2c>
 800c638:	d8c02303 	ldbu	r3,140(sp)
 800c63c:	d8c01d85 	stb	r3,118(sp)
 800c640:	003d1d06 	br	800bab8 <__alt_data_end+0xfc00bab8>
 800c644:	d8c02303 	ldbu	r3,140(sp)
 800c648:	d8c01d85 	stb	r3,118(sp)
 800c64c:	003d0306 	br	800ba5c <__alt_data_end+0xfc00ba5c>

0800c650 <__vfiprintf_internal>:
 800c650:	008200f4 	movhi	r2,2051
 800c654:	108d0f04 	addi	r2,r2,13372
 800c658:	300f883a 	mov	r7,r6
 800c65c:	280d883a 	mov	r6,r5
 800c660:	200b883a 	mov	r5,r4
 800c664:	11000017 	ldw	r4,0(r2)
 800c668:	800b1441 	jmpi	800b144 <___vfiprintf_internal_r>

0800c66c <__sbprintf>:
 800c66c:	2880030b 	ldhu	r2,12(r5)
 800c670:	2ac01917 	ldw	r11,100(r5)
 800c674:	2a80038b 	ldhu	r10,14(r5)
 800c678:	2a400717 	ldw	r9,28(r5)
 800c67c:	2a000917 	ldw	r8,36(r5)
 800c680:	defee204 	addi	sp,sp,-1144
 800c684:	00c10004 	movi	r3,1024
 800c688:	dc011a15 	stw	r16,1128(sp)
 800c68c:	10bfff4c 	andi	r2,r2,65533
 800c690:	2821883a 	mov	r16,r5
 800c694:	d8cb883a 	add	r5,sp,r3
 800c698:	dc811c15 	stw	r18,1136(sp)
 800c69c:	dc411b15 	stw	r17,1132(sp)
 800c6a0:	dfc11d15 	stw	ra,1140(sp)
 800c6a4:	2025883a 	mov	r18,r4
 800c6a8:	d881030d 	sth	r2,1036(sp)
 800c6ac:	dac11915 	stw	r11,1124(sp)
 800c6b0:	da81038d 	sth	r10,1038(sp)
 800c6b4:	da410715 	stw	r9,1052(sp)
 800c6b8:	da010915 	stw	r8,1060(sp)
 800c6bc:	dec10015 	stw	sp,1024(sp)
 800c6c0:	dec10415 	stw	sp,1040(sp)
 800c6c4:	d8c10215 	stw	r3,1032(sp)
 800c6c8:	d8c10515 	stw	r3,1044(sp)
 800c6cc:	d8010615 	stw	zero,1048(sp)
 800c6d0:	800b1440 	call	800b144 <___vfiprintf_internal_r>
 800c6d4:	1023883a 	mov	r17,r2
 800c6d8:	10000416 	blt	r2,zero,800c6ec <__sbprintf+0x80>
 800c6dc:	d9410004 	addi	r5,sp,1024
 800c6e0:	9009883a 	mov	r4,r18
 800c6e4:	80079200 	call	8007920 <_fflush_r>
 800c6e8:	10000d1e 	bne	r2,zero,800c720 <__sbprintf+0xb4>
 800c6ec:	d881030b 	ldhu	r2,1036(sp)
 800c6f0:	1080100c 	andi	r2,r2,64
 800c6f4:	10000326 	beq	r2,zero,800c704 <__sbprintf+0x98>
 800c6f8:	8080030b 	ldhu	r2,12(r16)
 800c6fc:	10801014 	ori	r2,r2,64
 800c700:	8080030d 	sth	r2,12(r16)
 800c704:	8805883a 	mov	r2,r17
 800c708:	dfc11d17 	ldw	ra,1140(sp)
 800c70c:	dc811c17 	ldw	r18,1136(sp)
 800c710:	dc411b17 	ldw	r17,1132(sp)
 800c714:	dc011a17 	ldw	r16,1128(sp)
 800c718:	dec11e04 	addi	sp,sp,1144
 800c71c:	f800283a 	ret
 800c720:	047fffc4 	movi	r17,-1
 800c724:	003ff106 	br	800c6ec <__alt_data_end+0xfc00c6ec>

0800c728 <_write_r>:
 800c728:	defffd04 	addi	sp,sp,-12
 800c72c:	2805883a 	mov	r2,r5
 800c730:	dc000015 	stw	r16,0(sp)
 800c734:	040200f4 	movhi	r16,2051
 800c738:	dc400115 	stw	r17,4(sp)
 800c73c:	300b883a 	mov	r5,r6
 800c740:	84146e04 	addi	r16,r16,20920
 800c744:	2023883a 	mov	r17,r4
 800c748:	380d883a 	mov	r6,r7
 800c74c:	1009883a 	mov	r4,r2
 800c750:	dfc00215 	stw	ra,8(sp)
 800c754:	80000015 	stw	zero,0(r16)
 800c758:	8010f400 	call	8010f40 <write>
 800c75c:	00ffffc4 	movi	r3,-1
 800c760:	10c00526 	beq	r2,r3,800c778 <_write_r+0x50>
 800c764:	dfc00217 	ldw	ra,8(sp)
 800c768:	dc400117 	ldw	r17,4(sp)
 800c76c:	dc000017 	ldw	r16,0(sp)
 800c770:	dec00304 	addi	sp,sp,12
 800c774:	f800283a 	ret
 800c778:	80c00017 	ldw	r3,0(r16)
 800c77c:	183ff926 	beq	r3,zero,800c764 <__alt_data_end+0xfc00c764>
 800c780:	88c00015 	stw	r3,0(r17)
 800c784:	003ff706 	br	800c764 <__alt_data_end+0xfc00c764>

0800c788 <_close_r>:
 800c788:	defffd04 	addi	sp,sp,-12
 800c78c:	dc000015 	stw	r16,0(sp)
 800c790:	040200f4 	movhi	r16,2051
 800c794:	dc400115 	stw	r17,4(sp)
 800c798:	84146e04 	addi	r16,r16,20920
 800c79c:	2023883a 	mov	r17,r4
 800c7a0:	2809883a 	mov	r4,r5
 800c7a4:	dfc00215 	stw	ra,8(sp)
 800c7a8:	80000015 	stw	zero,0(r16)
 800c7ac:	80105140 	call	8010514 <close>
 800c7b0:	00ffffc4 	movi	r3,-1
 800c7b4:	10c00526 	beq	r2,r3,800c7cc <_close_r+0x44>
 800c7b8:	dfc00217 	ldw	ra,8(sp)
 800c7bc:	dc400117 	ldw	r17,4(sp)
 800c7c0:	dc000017 	ldw	r16,0(sp)
 800c7c4:	dec00304 	addi	sp,sp,12
 800c7c8:	f800283a 	ret
 800c7cc:	80c00017 	ldw	r3,0(r16)
 800c7d0:	183ff926 	beq	r3,zero,800c7b8 <__alt_data_end+0xfc00c7b8>
 800c7d4:	88c00015 	stw	r3,0(r17)
 800c7d8:	003ff706 	br	800c7b8 <__alt_data_end+0xfc00c7b8>

0800c7dc <_calloc_r>:
 800c7dc:	defffe04 	addi	sp,sp,-8
 800c7e0:	2805883a 	mov	r2,r5
 800c7e4:	dc000015 	stw	r16,0(sp)
 800c7e8:	300b883a 	mov	r5,r6
 800c7ec:	2021883a 	mov	r16,r4
 800c7f0:	1009883a 	mov	r4,r2
 800c7f4:	dfc00115 	stw	ra,4(sp)
 800c7f8:	800374c0 	call	800374c <__mulsi3>
 800c7fc:	100b883a 	mov	r5,r2
 800c800:	8009883a 	mov	r4,r16
 800c804:	8008a780 	call	8008a78 <_malloc_r>
 800c808:	10002926 	beq	r2,zero,800c8b0 <_calloc_r+0xd4>
 800c80c:	11bfff17 	ldw	r6,-4(r2)
 800c810:	1021883a 	mov	r16,r2
 800c814:	00bfff04 	movi	r2,-4
 800c818:	308c703a 	and	r6,r6,r2
 800c81c:	00c00904 	movi	r3,36
 800c820:	308d883a 	add	r6,r6,r2
 800c824:	19801636 	bltu	r3,r6,800c880 <_calloc_r+0xa4>
 800c828:	008004c4 	movi	r2,19
 800c82c:	11800b2e 	bgeu	r2,r6,800c85c <_calloc_r+0x80>
 800c830:	80000015 	stw	zero,0(r16)
 800c834:	80000115 	stw	zero,4(r16)
 800c838:	008006c4 	movi	r2,27
 800c83c:	11801a2e 	bgeu	r2,r6,800c8a8 <_calloc_r+0xcc>
 800c840:	80000215 	stw	zero,8(r16)
 800c844:	80000315 	stw	zero,12(r16)
 800c848:	30c0151e 	bne	r6,r3,800c8a0 <_calloc_r+0xc4>
 800c84c:	80000415 	stw	zero,16(r16)
 800c850:	80800604 	addi	r2,r16,24
 800c854:	80000515 	stw	zero,20(r16)
 800c858:	00000106 	br	800c860 <_calloc_r+0x84>
 800c85c:	8005883a 	mov	r2,r16
 800c860:	10000015 	stw	zero,0(r2)
 800c864:	10000115 	stw	zero,4(r2)
 800c868:	10000215 	stw	zero,8(r2)
 800c86c:	8005883a 	mov	r2,r16
 800c870:	dfc00117 	ldw	ra,4(sp)
 800c874:	dc000017 	ldw	r16,0(sp)
 800c878:	dec00204 	addi	sp,sp,8
 800c87c:	f800283a 	ret
 800c880:	000b883a 	mov	r5,zero
 800c884:	8009883a 	mov	r4,r16
 800c888:	800960c0 	call	800960c <memset>
 800c88c:	8005883a 	mov	r2,r16
 800c890:	dfc00117 	ldw	ra,4(sp)
 800c894:	dc000017 	ldw	r16,0(sp)
 800c898:	dec00204 	addi	sp,sp,8
 800c89c:	f800283a 	ret
 800c8a0:	80800404 	addi	r2,r16,16
 800c8a4:	003fee06 	br	800c860 <__alt_data_end+0xfc00c860>
 800c8a8:	80800204 	addi	r2,r16,8
 800c8ac:	003fec06 	br	800c860 <__alt_data_end+0xfc00c860>
 800c8b0:	0005883a 	mov	r2,zero
 800c8b4:	003fee06 	br	800c870 <__alt_data_end+0xfc00c870>

0800c8b8 <_fclose_r>:
 800c8b8:	28003926 	beq	r5,zero,800c9a0 <_fclose_r+0xe8>
 800c8bc:	defffc04 	addi	sp,sp,-16
 800c8c0:	dc400115 	stw	r17,4(sp)
 800c8c4:	dc000015 	stw	r16,0(sp)
 800c8c8:	dfc00315 	stw	ra,12(sp)
 800c8cc:	dc800215 	stw	r18,8(sp)
 800c8d0:	2023883a 	mov	r17,r4
 800c8d4:	2821883a 	mov	r16,r5
 800c8d8:	20000226 	beq	r4,zero,800c8e4 <_fclose_r+0x2c>
 800c8dc:	20800e17 	ldw	r2,56(r4)
 800c8e0:	10002726 	beq	r2,zero,800c980 <_fclose_r+0xc8>
 800c8e4:	8080030f 	ldh	r2,12(r16)
 800c8e8:	1000071e 	bne	r2,zero,800c908 <_fclose_r+0x50>
 800c8ec:	0005883a 	mov	r2,zero
 800c8f0:	dfc00317 	ldw	ra,12(sp)
 800c8f4:	dc800217 	ldw	r18,8(sp)
 800c8f8:	dc400117 	ldw	r17,4(sp)
 800c8fc:	dc000017 	ldw	r16,0(sp)
 800c900:	dec00404 	addi	sp,sp,16
 800c904:	f800283a 	ret
 800c908:	800b883a 	mov	r5,r16
 800c90c:	8809883a 	mov	r4,r17
 800c910:	80077040 	call	8007704 <__sflush_r>
 800c914:	1025883a 	mov	r18,r2
 800c918:	80800b17 	ldw	r2,44(r16)
 800c91c:	10000426 	beq	r2,zero,800c930 <_fclose_r+0x78>
 800c920:	81400717 	ldw	r5,28(r16)
 800c924:	8809883a 	mov	r4,r17
 800c928:	103ee83a 	callr	r2
 800c92c:	10001616 	blt	r2,zero,800c988 <_fclose_r+0xd0>
 800c930:	8080030b 	ldhu	r2,12(r16)
 800c934:	1080200c 	andi	r2,r2,128
 800c938:	1000151e 	bne	r2,zero,800c990 <_fclose_r+0xd8>
 800c93c:	81400c17 	ldw	r5,48(r16)
 800c940:	28000526 	beq	r5,zero,800c958 <_fclose_r+0xa0>
 800c944:	80801004 	addi	r2,r16,64
 800c948:	28800226 	beq	r5,r2,800c954 <_fclose_r+0x9c>
 800c94c:	8809883a 	mov	r4,r17
 800c950:	8007e800 	call	8007e80 <_free_r>
 800c954:	80000c15 	stw	zero,48(r16)
 800c958:	81401117 	ldw	r5,68(r16)
 800c95c:	28000326 	beq	r5,zero,800c96c <_fclose_r+0xb4>
 800c960:	8809883a 	mov	r4,r17
 800c964:	8007e800 	call	8007e80 <_free_r>
 800c968:	80001115 	stw	zero,68(r16)
 800c96c:	8007d1c0 	call	8007d1c <__sfp_lock_acquire>
 800c970:	8000030d 	sth	zero,12(r16)
 800c974:	8007d200 	call	8007d20 <__sfp_lock_release>
 800c978:	9005883a 	mov	r2,r18
 800c97c:	003fdc06 	br	800c8f0 <__alt_data_end+0xfc00c8f0>
 800c980:	8007d0c0 	call	8007d0c <__sinit>
 800c984:	003fd706 	br	800c8e4 <__alt_data_end+0xfc00c8e4>
 800c988:	04bfffc4 	movi	r18,-1
 800c98c:	003fe806 	br	800c930 <__alt_data_end+0xfc00c930>
 800c990:	81400417 	ldw	r5,16(r16)
 800c994:	8809883a 	mov	r4,r17
 800c998:	8007e800 	call	8007e80 <_free_r>
 800c99c:	003fe706 	br	800c93c <__alt_data_end+0xfc00c93c>
 800c9a0:	0005883a 	mov	r2,zero
 800c9a4:	f800283a 	ret

0800c9a8 <fclose>:
 800c9a8:	008200f4 	movhi	r2,2051
 800c9ac:	108d0f04 	addi	r2,r2,13372
 800c9b0:	200b883a 	mov	r5,r4
 800c9b4:	11000017 	ldw	r4,0(r2)
 800c9b8:	800c8b81 	jmpi	800c8b8 <_fclose_r>

0800c9bc <__fputwc>:
 800c9bc:	defff804 	addi	sp,sp,-32
 800c9c0:	dcc00415 	stw	r19,16(sp)
 800c9c4:	dc800315 	stw	r18,12(sp)
 800c9c8:	dc000115 	stw	r16,4(sp)
 800c9cc:	dfc00715 	stw	ra,28(sp)
 800c9d0:	dd400615 	stw	r21,24(sp)
 800c9d4:	dd000515 	stw	r20,20(sp)
 800c9d8:	dc400215 	stw	r17,8(sp)
 800c9dc:	2027883a 	mov	r19,r4
 800c9e0:	2825883a 	mov	r18,r5
 800c9e4:	3021883a 	mov	r16,r6
 800c9e8:	80088680 	call	8008868 <__locale_mb_cur_max>
 800c9ec:	00c00044 	movi	r3,1
 800c9f0:	10c03e26 	beq	r2,r3,800caec <__fputwc+0x130>
 800c9f4:	81c01704 	addi	r7,r16,92
 800c9f8:	900d883a 	mov	r6,r18
 800c9fc:	d80b883a 	mov	r5,sp
 800ca00:	9809883a 	mov	r4,r19
 800ca04:	800ce8c0 	call	800ce8c <_wcrtomb_r>
 800ca08:	1029883a 	mov	r20,r2
 800ca0c:	00bfffc4 	movi	r2,-1
 800ca10:	a0802026 	beq	r20,r2,800ca94 <__fputwc+0xd8>
 800ca14:	d9400003 	ldbu	r5,0(sp)
 800ca18:	a0001c26 	beq	r20,zero,800ca8c <__fputwc+0xd0>
 800ca1c:	0023883a 	mov	r17,zero
 800ca20:	05400284 	movi	r21,10
 800ca24:	00000906 	br	800ca4c <__fputwc+0x90>
 800ca28:	80800017 	ldw	r2,0(r16)
 800ca2c:	11400005 	stb	r5,0(r2)
 800ca30:	80c00017 	ldw	r3,0(r16)
 800ca34:	18c00044 	addi	r3,r3,1
 800ca38:	80c00015 	stw	r3,0(r16)
 800ca3c:	8c400044 	addi	r17,r17,1
 800ca40:	dc45883a 	add	r2,sp,r17
 800ca44:	8d00112e 	bgeu	r17,r20,800ca8c <__fputwc+0xd0>
 800ca48:	11400003 	ldbu	r5,0(r2)
 800ca4c:	80c00217 	ldw	r3,8(r16)
 800ca50:	18ffffc4 	addi	r3,r3,-1
 800ca54:	80c00215 	stw	r3,8(r16)
 800ca58:	183ff30e 	bge	r3,zero,800ca28 <__alt_data_end+0xfc00ca28>
 800ca5c:	80800617 	ldw	r2,24(r16)
 800ca60:	18801916 	blt	r3,r2,800cac8 <__fputwc+0x10c>
 800ca64:	80800017 	ldw	r2,0(r16)
 800ca68:	11400005 	stb	r5,0(r2)
 800ca6c:	80800017 	ldw	r2,0(r16)
 800ca70:	10c00003 	ldbu	r3,0(r2)
 800ca74:	10800044 	addi	r2,r2,1
 800ca78:	1d402326 	beq	r3,r21,800cb08 <__fputwc+0x14c>
 800ca7c:	80800015 	stw	r2,0(r16)
 800ca80:	8c400044 	addi	r17,r17,1
 800ca84:	dc45883a 	add	r2,sp,r17
 800ca88:	8d3fef36 	bltu	r17,r20,800ca48 <__alt_data_end+0xfc00ca48>
 800ca8c:	9005883a 	mov	r2,r18
 800ca90:	00000406 	br	800caa4 <__fputwc+0xe8>
 800ca94:	80c0030b 	ldhu	r3,12(r16)
 800ca98:	a005883a 	mov	r2,r20
 800ca9c:	18c01014 	ori	r3,r3,64
 800caa0:	80c0030d 	sth	r3,12(r16)
 800caa4:	dfc00717 	ldw	ra,28(sp)
 800caa8:	dd400617 	ldw	r21,24(sp)
 800caac:	dd000517 	ldw	r20,20(sp)
 800cab0:	dcc00417 	ldw	r19,16(sp)
 800cab4:	dc800317 	ldw	r18,12(sp)
 800cab8:	dc400217 	ldw	r17,8(sp)
 800cabc:	dc000117 	ldw	r16,4(sp)
 800cac0:	dec00804 	addi	sp,sp,32
 800cac4:	f800283a 	ret
 800cac8:	800d883a 	mov	r6,r16
 800cacc:	29403fcc 	andi	r5,r5,255
 800cad0:	9809883a 	mov	r4,r19
 800cad4:	800cd340 	call	800cd34 <__swbuf_r>
 800cad8:	10bfffe0 	cmpeqi	r2,r2,-1
 800cadc:	10803fcc 	andi	r2,r2,255
 800cae0:	103fd626 	beq	r2,zero,800ca3c <__alt_data_end+0xfc00ca3c>
 800cae4:	00bfffc4 	movi	r2,-1
 800cae8:	003fee06 	br	800caa4 <__alt_data_end+0xfc00caa4>
 800caec:	90ffffc4 	addi	r3,r18,-1
 800caf0:	01003f84 	movi	r4,254
 800caf4:	20ffbf36 	bltu	r4,r3,800c9f4 <__alt_data_end+0xfc00c9f4>
 800caf8:	900b883a 	mov	r5,r18
 800cafc:	dc800005 	stb	r18,0(sp)
 800cb00:	1029883a 	mov	r20,r2
 800cb04:	003fc506 	br	800ca1c <__alt_data_end+0xfc00ca1c>
 800cb08:	800d883a 	mov	r6,r16
 800cb0c:	a80b883a 	mov	r5,r21
 800cb10:	9809883a 	mov	r4,r19
 800cb14:	800cd340 	call	800cd34 <__swbuf_r>
 800cb18:	10bfffe0 	cmpeqi	r2,r2,-1
 800cb1c:	003fef06 	br	800cadc <__alt_data_end+0xfc00cadc>

0800cb20 <_fputwc_r>:
 800cb20:	3080030b 	ldhu	r2,12(r6)
 800cb24:	10c8000c 	andi	r3,r2,8192
 800cb28:	1800051e 	bne	r3,zero,800cb40 <_fputwc_r+0x20>
 800cb2c:	30c01917 	ldw	r3,100(r6)
 800cb30:	10880014 	ori	r2,r2,8192
 800cb34:	3080030d 	sth	r2,12(r6)
 800cb38:	18880014 	ori	r2,r3,8192
 800cb3c:	30801915 	stw	r2,100(r6)
 800cb40:	800c9bc1 	jmpi	800c9bc <__fputwc>

0800cb44 <fputwc>:
 800cb44:	008200f4 	movhi	r2,2051
 800cb48:	defffc04 	addi	sp,sp,-16
 800cb4c:	108d0f04 	addi	r2,r2,13372
 800cb50:	dc000115 	stw	r16,4(sp)
 800cb54:	14000017 	ldw	r16,0(r2)
 800cb58:	dc400215 	stw	r17,8(sp)
 800cb5c:	dfc00315 	stw	ra,12(sp)
 800cb60:	2023883a 	mov	r17,r4
 800cb64:	80000226 	beq	r16,zero,800cb70 <fputwc+0x2c>
 800cb68:	80800e17 	ldw	r2,56(r16)
 800cb6c:	10001026 	beq	r2,zero,800cbb0 <fputwc+0x6c>
 800cb70:	2880030b 	ldhu	r2,12(r5)
 800cb74:	10c8000c 	andi	r3,r2,8192
 800cb78:	1800051e 	bne	r3,zero,800cb90 <fputwc+0x4c>
 800cb7c:	28c01917 	ldw	r3,100(r5)
 800cb80:	10880014 	ori	r2,r2,8192
 800cb84:	2880030d 	sth	r2,12(r5)
 800cb88:	18880014 	ori	r2,r3,8192
 800cb8c:	28801915 	stw	r2,100(r5)
 800cb90:	280d883a 	mov	r6,r5
 800cb94:	8009883a 	mov	r4,r16
 800cb98:	880b883a 	mov	r5,r17
 800cb9c:	dfc00317 	ldw	ra,12(sp)
 800cba0:	dc400217 	ldw	r17,8(sp)
 800cba4:	dc000117 	ldw	r16,4(sp)
 800cba8:	dec00404 	addi	sp,sp,16
 800cbac:	800c9bc1 	jmpi	800c9bc <__fputwc>
 800cbb0:	8009883a 	mov	r4,r16
 800cbb4:	d9400015 	stw	r5,0(sp)
 800cbb8:	8007d0c0 	call	8007d0c <__sinit>
 800cbbc:	d9400017 	ldw	r5,0(sp)
 800cbc0:	003feb06 	br	800cb70 <__alt_data_end+0xfc00cb70>

0800cbc4 <_fstat_r>:
 800cbc4:	defffd04 	addi	sp,sp,-12
 800cbc8:	2805883a 	mov	r2,r5
 800cbcc:	dc000015 	stw	r16,0(sp)
 800cbd0:	040200f4 	movhi	r16,2051
 800cbd4:	dc400115 	stw	r17,4(sp)
 800cbd8:	84146e04 	addi	r16,r16,20920
 800cbdc:	2023883a 	mov	r17,r4
 800cbe0:	300b883a 	mov	r5,r6
 800cbe4:	1009883a 	mov	r4,r2
 800cbe8:	dfc00215 	stw	ra,8(sp)
 800cbec:	80000015 	stw	zero,0(r16)
 800cbf0:	80106540 	call	8010654 <fstat>
 800cbf4:	00ffffc4 	movi	r3,-1
 800cbf8:	10c00526 	beq	r2,r3,800cc10 <_fstat_r+0x4c>
 800cbfc:	dfc00217 	ldw	ra,8(sp)
 800cc00:	dc400117 	ldw	r17,4(sp)
 800cc04:	dc000017 	ldw	r16,0(sp)
 800cc08:	dec00304 	addi	sp,sp,12
 800cc0c:	f800283a 	ret
 800cc10:	80c00017 	ldw	r3,0(r16)
 800cc14:	183ff926 	beq	r3,zero,800cbfc <__alt_data_end+0xfc00cbfc>
 800cc18:	88c00015 	stw	r3,0(r17)
 800cc1c:	003ff706 	br	800cbfc <__alt_data_end+0xfc00cbfc>

0800cc20 <_isatty_r>:
 800cc20:	defffd04 	addi	sp,sp,-12
 800cc24:	dc000015 	stw	r16,0(sp)
 800cc28:	040200f4 	movhi	r16,2051
 800cc2c:	dc400115 	stw	r17,4(sp)
 800cc30:	84146e04 	addi	r16,r16,20920
 800cc34:	2023883a 	mov	r17,r4
 800cc38:	2809883a 	mov	r4,r5
 800cc3c:	dfc00215 	stw	ra,8(sp)
 800cc40:	80000015 	stw	zero,0(r16)
 800cc44:	80107480 	call	8010748 <isatty>
 800cc48:	00ffffc4 	movi	r3,-1
 800cc4c:	10c00526 	beq	r2,r3,800cc64 <_isatty_r+0x44>
 800cc50:	dfc00217 	ldw	ra,8(sp)
 800cc54:	dc400117 	ldw	r17,4(sp)
 800cc58:	dc000017 	ldw	r16,0(sp)
 800cc5c:	dec00304 	addi	sp,sp,12
 800cc60:	f800283a 	ret
 800cc64:	80c00017 	ldw	r3,0(r16)
 800cc68:	183ff926 	beq	r3,zero,800cc50 <__alt_data_end+0xfc00cc50>
 800cc6c:	88c00015 	stw	r3,0(r17)
 800cc70:	003ff706 	br	800cc50 <__alt_data_end+0xfc00cc50>

0800cc74 <_lseek_r>:
 800cc74:	defffd04 	addi	sp,sp,-12
 800cc78:	2805883a 	mov	r2,r5
 800cc7c:	dc000015 	stw	r16,0(sp)
 800cc80:	040200f4 	movhi	r16,2051
 800cc84:	dc400115 	stw	r17,4(sp)
 800cc88:	300b883a 	mov	r5,r6
 800cc8c:	84146e04 	addi	r16,r16,20920
 800cc90:	2023883a 	mov	r17,r4
 800cc94:	380d883a 	mov	r6,r7
 800cc98:	1009883a 	mov	r4,r2
 800cc9c:	dfc00215 	stw	ra,8(sp)
 800cca0:	80000015 	stw	zero,0(r16)
 800cca4:	801091c0 	call	801091c <lseek>
 800cca8:	00ffffc4 	movi	r3,-1
 800ccac:	10c00526 	beq	r2,r3,800ccc4 <_lseek_r+0x50>
 800ccb0:	dfc00217 	ldw	ra,8(sp)
 800ccb4:	dc400117 	ldw	r17,4(sp)
 800ccb8:	dc000017 	ldw	r16,0(sp)
 800ccbc:	dec00304 	addi	sp,sp,12
 800ccc0:	f800283a 	ret
 800ccc4:	80c00017 	ldw	r3,0(r16)
 800ccc8:	183ff926 	beq	r3,zero,800ccb0 <__alt_data_end+0xfc00ccb0>
 800cccc:	88c00015 	stw	r3,0(r17)
 800ccd0:	003ff706 	br	800ccb0 <__alt_data_end+0xfc00ccb0>

0800ccd4 <_read_r>:
 800ccd4:	defffd04 	addi	sp,sp,-12
 800ccd8:	2805883a 	mov	r2,r5
 800ccdc:	dc000015 	stw	r16,0(sp)
 800cce0:	040200f4 	movhi	r16,2051
 800cce4:	dc400115 	stw	r17,4(sp)
 800cce8:	300b883a 	mov	r5,r6
 800ccec:	84146e04 	addi	r16,r16,20920
 800ccf0:	2023883a 	mov	r17,r4
 800ccf4:	380d883a 	mov	r6,r7
 800ccf8:	1009883a 	mov	r4,r2
 800ccfc:	dfc00215 	stw	ra,8(sp)
 800cd00:	80000015 	stw	zero,0(r16)
 800cd04:	8010af80 	call	8010af8 <read>
 800cd08:	00ffffc4 	movi	r3,-1
 800cd0c:	10c00526 	beq	r2,r3,800cd24 <_read_r+0x50>
 800cd10:	dfc00217 	ldw	ra,8(sp)
 800cd14:	dc400117 	ldw	r17,4(sp)
 800cd18:	dc000017 	ldw	r16,0(sp)
 800cd1c:	dec00304 	addi	sp,sp,12
 800cd20:	f800283a 	ret
 800cd24:	80c00017 	ldw	r3,0(r16)
 800cd28:	183ff926 	beq	r3,zero,800cd10 <__alt_data_end+0xfc00cd10>
 800cd2c:	88c00015 	stw	r3,0(r17)
 800cd30:	003ff706 	br	800cd10 <__alt_data_end+0xfc00cd10>

0800cd34 <__swbuf_r>:
 800cd34:	defffb04 	addi	sp,sp,-20
 800cd38:	dcc00315 	stw	r19,12(sp)
 800cd3c:	dc800215 	stw	r18,8(sp)
 800cd40:	dc000015 	stw	r16,0(sp)
 800cd44:	dfc00415 	stw	ra,16(sp)
 800cd48:	dc400115 	stw	r17,4(sp)
 800cd4c:	2025883a 	mov	r18,r4
 800cd50:	2827883a 	mov	r19,r5
 800cd54:	3021883a 	mov	r16,r6
 800cd58:	20000226 	beq	r4,zero,800cd64 <__swbuf_r+0x30>
 800cd5c:	20800e17 	ldw	r2,56(r4)
 800cd60:	10004226 	beq	r2,zero,800ce6c <__swbuf_r+0x138>
 800cd64:	80800617 	ldw	r2,24(r16)
 800cd68:	8100030b 	ldhu	r4,12(r16)
 800cd6c:	80800215 	stw	r2,8(r16)
 800cd70:	2080020c 	andi	r2,r4,8
 800cd74:	10003626 	beq	r2,zero,800ce50 <__swbuf_r+0x11c>
 800cd78:	80c00417 	ldw	r3,16(r16)
 800cd7c:	18003426 	beq	r3,zero,800ce50 <__swbuf_r+0x11c>
 800cd80:	2088000c 	andi	r2,r4,8192
 800cd84:	9c403fcc 	andi	r17,r19,255
 800cd88:	10001a26 	beq	r2,zero,800cdf4 <__swbuf_r+0xc0>
 800cd8c:	80800017 	ldw	r2,0(r16)
 800cd90:	81000517 	ldw	r4,20(r16)
 800cd94:	10c7c83a 	sub	r3,r2,r3
 800cd98:	1900200e 	bge	r3,r4,800ce1c <__swbuf_r+0xe8>
 800cd9c:	18c00044 	addi	r3,r3,1
 800cda0:	81000217 	ldw	r4,8(r16)
 800cda4:	11400044 	addi	r5,r2,1
 800cda8:	81400015 	stw	r5,0(r16)
 800cdac:	213fffc4 	addi	r4,r4,-1
 800cdb0:	81000215 	stw	r4,8(r16)
 800cdb4:	14c00005 	stb	r19,0(r2)
 800cdb8:	80800517 	ldw	r2,20(r16)
 800cdbc:	10c01e26 	beq	r2,r3,800ce38 <__swbuf_r+0x104>
 800cdc0:	8080030b 	ldhu	r2,12(r16)
 800cdc4:	1080004c 	andi	r2,r2,1
 800cdc8:	10000226 	beq	r2,zero,800cdd4 <__swbuf_r+0xa0>
 800cdcc:	00800284 	movi	r2,10
 800cdd0:	88801926 	beq	r17,r2,800ce38 <__swbuf_r+0x104>
 800cdd4:	8805883a 	mov	r2,r17
 800cdd8:	dfc00417 	ldw	ra,16(sp)
 800cddc:	dcc00317 	ldw	r19,12(sp)
 800cde0:	dc800217 	ldw	r18,8(sp)
 800cde4:	dc400117 	ldw	r17,4(sp)
 800cde8:	dc000017 	ldw	r16,0(sp)
 800cdec:	dec00504 	addi	sp,sp,20
 800cdf0:	f800283a 	ret
 800cdf4:	81401917 	ldw	r5,100(r16)
 800cdf8:	00b7ffc4 	movi	r2,-8193
 800cdfc:	21080014 	ori	r4,r4,8192
 800ce00:	2884703a 	and	r2,r5,r2
 800ce04:	80801915 	stw	r2,100(r16)
 800ce08:	80800017 	ldw	r2,0(r16)
 800ce0c:	8100030d 	sth	r4,12(r16)
 800ce10:	81000517 	ldw	r4,20(r16)
 800ce14:	10c7c83a 	sub	r3,r2,r3
 800ce18:	193fe016 	blt	r3,r4,800cd9c <__alt_data_end+0xfc00cd9c>
 800ce1c:	800b883a 	mov	r5,r16
 800ce20:	9009883a 	mov	r4,r18
 800ce24:	80079200 	call	8007920 <_fflush_r>
 800ce28:	1000071e 	bne	r2,zero,800ce48 <__swbuf_r+0x114>
 800ce2c:	80800017 	ldw	r2,0(r16)
 800ce30:	00c00044 	movi	r3,1
 800ce34:	003fda06 	br	800cda0 <__alt_data_end+0xfc00cda0>
 800ce38:	800b883a 	mov	r5,r16
 800ce3c:	9009883a 	mov	r4,r18
 800ce40:	80079200 	call	8007920 <_fflush_r>
 800ce44:	103fe326 	beq	r2,zero,800cdd4 <__alt_data_end+0xfc00cdd4>
 800ce48:	00bfffc4 	movi	r2,-1
 800ce4c:	003fe206 	br	800cdd8 <__alt_data_end+0xfc00cdd8>
 800ce50:	800b883a 	mov	r5,r16
 800ce54:	9009883a 	mov	r4,r18
 800ce58:	8005d000 	call	8005d00 <__swsetup_r>
 800ce5c:	103ffa1e 	bne	r2,zero,800ce48 <__alt_data_end+0xfc00ce48>
 800ce60:	8100030b 	ldhu	r4,12(r16)
 800ce64:	80c00417 	ldw	r3,16(r16)
 800ce68:	003fc506 	br	800cd80 <__alt_data_end+0xfc00cd80>
 800ce6c:	8007d0c0 	call	8007d0c <__sinit>
 800ce70:	003fbc06 	br	800cd64 <__alt_data_end+0xfc00cd64>

0800ce74 <__swbuf>:
 800ce74:	008200f4 	movhi	r2,2051
 800ce78:	108d0f04 	addi	r2,r2,13372
 800ce7c:	280d883a 	mov	r6,r5
 800ce80:	200b883a 	mov	r5,r4
 800ce84:	11000017 	ldw	r4,0(r2)
 800ce88:	800cd341 	jmpi	800cd34 <__swbuf_r>

0800ce8c <_wcrtomb_r>:
 800ce8c:	defff604 	addi	sp,sp,-40
 800ce90:	008200f4 	movhi	r2,2051
 800ce94:	dc800815 	stw	r18,32(sp)
 800ce98:	dc400715 	stw	r17,28(sp)
 800ce9c:	dc000615 	stw	r16,24(sp)
 800cea0:	108d1304 	addi	r2,r2,13388
 800cea4:	dfc00915 	stw	ra,36(sp)
 800cea8:	2021883a 	mov	r16,r4
 800ceac:	3823883a 	mov	r17,r7
 800ceb0:	14800017 	ldw	r18,0(r2)
 800ceb4:	28001426 	beq	r5,zero,800cf08 <_wcrtomb_r+0x7c>
 800ceb8:	d9400415 	stw	r5,16(sp)
 800cebc:	d9800515 	stw	r6,20(sp)
 800cec0:	800885c0 	call	800885c <__locale_charset>
 800cec4:	d9800517 	ldw	r6,20(sp)
 800cec8:	d9400417 	ldw	r5,16(sp)
 800cecc:	100f883a 	mov	r7,r2
 800ced0:	dc400015 	stw	r17,0(sp)
 800ced4:	8009883a 	mov	r4,r16
 800ced8:	903ee83a 	callr	r18
 800cedc:	00ffffc4 	movi	r3,-1
 800cee0:	10c0031e 	bne	r2,r3,800cef0 <_wcrtomb_r+0x64>
 800cee4:	88000015 	stw	zero,0(r17)
 800cee8:	00c02284 	movi	r3,138
 800ceec:	80c00015 	stw	r3,0(r16)
 800cef0:	dfc00917 	ldw	ra,36(sp)
 800cef4:	dc800817 	ldw	r18,32(sp)
 800cef8:	dc400717 	ldw	r17,28(sp)
 800cefc:	dc000617 	ldw	r16,24(sp)
 800cf00:	dec00a04 	addi	sp,sp,40
 800cf04:	f800283a 	ret
 800cf08:	800885c0 	call	800885c <__locale_charset>
 800cf0c:	100f883a 	mov	r7,r2
 800cf10:	dc400015 	stw	r17,0(sp)
 800cf14:	000d883a 	mov	r6,zero
 800cf18:	d9400104 	addi	r5,sp,4
 800cf1c:	8009883a 	mov	r4,r16
 800cf20:	903ee83a 	callr	r18
 800cf24:	003fed06 	br	800cedc <__alt_data_end+0xfc00cedc>

0800cf28 <wcrtomb>:
 800cf28:	defff604 	addi	sp,sp,-40
 800cf2c:	008200f4 	movhi	r2,2051
 800cf30:	dc800615 	stw	r18,24(sp)
 800cf34:	dc400515 	stw	r17,20(sp)
 800cf38:	108d0f04 	addi	r2,r2,13372
 800cf3c:	dfc00915 	stw	ra,36(sp)
 800cf40:	dd000815 	stw	r20,32(sp)
 800cf44:	dcc00715 	stw	r19,28(sp)
 800cf48:	dc000415 	stw	r16,16(sp)
 800cf4c:	3025883a 	mov	r18,r6
 800cf50:	14400017 	ldw	r17,0(r2)
 800cf54:	20001926 	beq	r4,zero,800cfbc <wcrtomb+0x94>
 800cf58:	008200f4 	movhi	r2,2051
 800cf5c:	108d1304 	addi	r2,r2,13388
 800cf60:	15000017 	ldw	r20,0(r2)
 800cf64:	2021883a 	mov	r16,r4
 800cf68:	2827883a 	mov	r19,r5
 800cf6c:	800885c0 	call	800885c <__locale_charset>
 800cf70:	100f883a 	mov	r7,r2
 800cf74:	dc800015 	stw	r18,0(sp)
 800cf78:	980d883a 	mov	r6,r19
 800cf7c:	800b883a 	mov	r5,r16
 800cf80:	8809883a 	mov	r4,r17
 800cf84:	a03ee83a 	callr	r20
 800cf88:	00ffffc4 	movi	r3,-1
 800cf8c:	10c0031e 	bne	r2,r3,800cf9c <wcrtomb+0x74>
 800cf90:	90000015 	stw	zero,0(r18)
 800cf94:	00c02284 	movi	r3,138
 800cf98:	88c00015 	stw	r3,0(r17)
 800cf9c:	dfc00917 	ldw	ra,36(sp)
 800cfa0:	dd000817 	ldw	r20,32(sp)
 800cfa4:	dcc00717 	ldw	r19,28(sp)
 800cfa8:	dc800617 	ldw	r18,24(sp)
 800cfac:	dc400517 	ldw	r17,20(sp)
 800cfb0:	dc000417 	ldw	r16,16(sp)
 800cfb4:	dec00a04 	addi	sp,sp,40
 800cfb8:	f800283a 	ret
 800cfbc:	008200f4 	movhi	r2,2051
 800cfc0:	108d1304 	addi	r2,r2,13388
 800cfc4:	14000017 	ldw	r16,0(r2)
 800cfc8:	800885c0 	call	800885c <__locale_charset>
 800cfcc:	100f883a 	mov	r7,r2
 800cfd0:	dc800015 	stw	r18,0(sp)
 800cfd4:	000d883a 	mov	r6,zero
 800cfd8:	d9400104 	addi	r5,sp,4
 800cfdc:	8809883a 	mov	r4,r17
 800cfe0:	803ee83a 	callr	r16
 800cfe4:	003fe806 	br	800cf88 <__alt_data_end+0xfc00cf88>

0800cfe8 <__ascii_wctomb>:
 800cfe8:	28000526 	beq	r5,zero,800d000 <__ascii_wctomb+0x18>
 800cfec:	00803fc4 	movi	r2,255
 800cff0:	11800536 	bltu	r2,r6,800d008 <__ascii_wctomb+0x20>
 800cff4:	29800005 	stb	r6,0(r5)
 800cff8:	00800044 	movi	r2,1
 800cffc:	f800283a 	ret
 800d000:	0005883a 	mov	r2,zero
 800d004:	f800283a 	ret
 800d008:	00802284 	movi	r2,138
 800d00c:	20800015 	stw	r2,0(r4)
 800d010:	00bfffc4 	movi	r2,-1
 800d014:	f800283a 	ret

0800d018 <_wctomb_r>:
 800d018:	008200f4 	movhi	r2,2051
 800d01c:	defff904 	addi	sp,sp,-28
 800d020:	108d1304 	addi	r2,r2,13388
 800d024:	dfc00615 	stw	ra,24(sp)
 800d028:	dc400515 	stw	r17,20(sp)
 800d02c:	dc000415 	stw	r16,16(sp)
 800d030:	3823883a 	mov	r17,r7
 800d034:	14000017 	ldw	r16,0(r2)
 800d038:	d9000115 	stw	r4,4(sp)
 800d03c:	d9400215 	stw	r5,8(sp)
 800d040:	d9800315 	stw	r6,12(sp)
 800d044:	800885c0 	call	800885c <__locale_charset>
 800d048:	d9800317 	ldw	r6,12(sp)
 800d04c:	d9400217 	ldw	r5,8(sp)
 800d050:	d9000117 	ldw	r4,4(sp)
 800d054:	100f883a 	mov	r7,r2
 800d058:	dc400015 	stw	r17,0(sp)
 800d05c:	803ee83a 	callr	r16
 800d060:	dfc00617 	ldw	ra,24(sp)
 800d064:	dc400517 	ldw	r17,20(sp)
 800d068:	dc000417 	ldw	r16,16(sp)
 800d06c:	dec00704 	addi	sp,sp,28
 800d070:	f800283a 	ret

0800d074 <__udivdi3>:
 800d074:	defff404 	addi	sp,sp,-48
 800d078:	dcc00515 	stw	r19,20(sp)
 800d07c:	dc000215 	stw	r16,8(sp)
 800d080:	dfc00b15 	stw	ra,44(sp)
 800d084:	df000a15 	stw	fp,40(sp)
 800d088:	ddc00915 	stw	r23,36(sp)
 800d08c:	dd800815 	stw	r22,32(sp)
 800d090:	dd400715 	stw	r21,28(sp)
 800d094:	dd000615 	stw	r20,24(sp)
 800d098:	dc800415 	stw	r18,16(sp)
 800d09c:	dc400315 	stw	r17,12(sp)
 800d0a0:	2027883a 	mov	r19,r4
 800d0a4:	2821883a 	mov	r16,r5
 800d0a8:	3800461e 	bne	r7,zero,800d1c4 <__udivdi3+0x150>
 800d0ac:	3023883a 	mov	r17,r6
 800d0b0:	2025883a 	mov	r18,r4
 800d0b4:	2980572e 	bgeu	r5,r6,800d214 <__udivdi3+0x1a0>
 800d0b8:	00bfffd4 	movui	r2,65535
 800d0bc:	282d883a 	mov	r22,r5
 800d0c0:	1180b236 	bltu	r2,r6,800d38c <__udivdi3+0x318>
 800d0c4:	00803fc4 	movi	r2,255
 800d0c8:	1185803a 	cmpltu	r2,r2,r6
 800d0cc:	100490fa 	slli	r2,r2,3
 800d0d0:	3086d83a 	srl	r3,r6,r2
 800d0d4:	010200f4 	movhi	r4,2051
 800d0d8:	21058d04 	addi	r4,r4,5684
 800d0dc:	20c7883a 	add	r3,r4,r3
 800d0e0:	18c00003 	ldbu	r3,0(r3)
 800d0e4:	1885883a 	add	r2,r3,r2
 800d0e8:	00c00804 	movi	r3,32
 800d0ec:	1887c83a 	sub	r3,r3,r2
 800d0f0:	18000526 	beq	r3,zero,800d108 <__udivdi3+0x94>
 800d0f4:	80e0983a 	sll	r16,r16,r3
 800d0f8:	9884d83a 	srl	r2,r19,r2
 800d0fc:	30e2983a 	sll	r17,r6,r3
 800d100:	98e4983a 	sll	r18,r19,r3
 800d104:	142cb03a 	or	r22,r2,r16
 800d108:	882ad43a 	srli	r21,r17,16
 800d10c:	b009883a 	mov	r4,r22
 800d110:	8d3fffcc 	andi	r20,r17,65535
 800d114:	a80b883a 	mov	r5,r21
 800d118:	80036f40 	call	80036f4 <__umodsi3>
 800d11c:	b009883a 	mov	r4,r22
 800d120:	a80b883a 	mov	r5,r21
 800d124:	1027883a 	mov	r19,r2
 800d128:	80036900 	call	8003690 <__udivsi3>
 800d12c:	100b883a 	mov	r5,r2
 800d130:	a009883a 	mov	r4,r20
 800d134:	102d883a 	mov	r22,r2
 800d138:	800374c0 	call	800374c <__mulsi3>
 800d13c:	9826943a 	slli	r19,r19,16
 800d140:	9006d43a 	srli	r3,r18,16
 800d144:	1cc6b03a 	or	r3,r3,r19
 800d148:	1880052e 	bgeu	r3,r2,800d160 <__udivdi3+0xec>
 800d14c:	1c47883a 	add	r3,r3,r17
 800d150:	b13fffc4 	addi	r4,r22,-1
 800d154:	1c400136 	bltu	r3,r17,800d15c <__udivdi3+0xe8>
 800d158:	18814236 	bltu	r3,r2,800d664 <__udivdi3+0x5f0>
 800d15c:	202d883a 	mov	r22,r4
 800d160:	18a1c83a 	sub	r16,r3,r2
 800d164:	8009883a 	mov	r4,r16
 800d168:	a80b883a 	mov	r5,r21
 800d16c:	80036f40 	call	80036f4 <__umodsi3>
 800d170:	1027883a 	mov	r19,r2
 800d174:	8009883a 	mov	r4,r16
 800d178:	a80b883a 	mov	r5,r21
 800d17c:	9826943a 	slli	r19,r19,16
 800d180:	80036900 	call	8003690 <__udivsi3>
 800d184:	100b883a 	mov	r5,r2
 800d188:	a009883a 	mov	r4,r20
 800d18c:	94bfffcc 	andi	r18,r18,65535
 800d190:	1021883a 	mov	r16,r2
 800d194:	94e4b03a 	or	r18,r18,r19
 800d198:	800374c0 	call	800374c <__mulsi3>
 800d19c:	9080052e 	bgeu	r18,r2,800d1b4 <__udivdi3+0x140>
 800d1a0:	8ca5883a 	add	r18,r17,r18
 800d1a4:	80ffffc4 	addi	r3,r16,-1
 800d1a8:	94410c36 	bltu	r18,r17,800d5dc <__udivdi3+0x568>
 800d1ac:	90810b2e 	bgeu	r18,r2,800d5dc <__udivdi3+0x568>
 800d1b0:	843fff84 	addi	r16,r16,-2
 800d1b4:	b004943a 	slli	r2,r22,16
 800d1b8:	0007883a 	mov	r3,zero
 800d1bc:	1404b03a 	or	r2,r2,r16
 800d1c0:	00005e06 	br	800d33c <__udivdi3+0x2c8>
 800d1c4:	29c05b36 	bltu	r5,r7,800d334 <__udivdi3+0x2c0>
 800d1c8:	00bfffd4 	movui	r2,65535
 800d1cc:	11c0672e 	bgeu	r2,r7,800d36c <__udivdi3+0x2f8>
 800d1d0:	00804034 	movhi	r2,256
 800d1d4:	10bfffc4 	addi	r2,r2,-1
 800d1d8:	11c10a36 	bltu	r2,r7,800d604 <__udivdi3+0x590>
 800d1dc:	00800404 	movi	r2,16
 800d1e0:	3886d83a 	srl	r3,r7,r2
 800d1e4:	010200f4 	movhi	r4,2051
 800d1e8:	21058d04 	addi	r4,r4,5684
 800d1ec:	20c7883a 	add	r3,r4,r3
 800d1f0:	18c00003 	ldbu	r3,0(r3)
 800d1f4:	05c00804 	movi	r23,32
 800d1f8:	1885883a 	add	r2,r3,r2
 800d1fc:	b8afc83a 	sub	r23,r23,r2
 800d200:	b800671e 	bne	r23,zero,800d3a0 <__udivdi3+0x32c>
 800d204:	3c010536 	bltu	r7,r16,800d61c <__udivdi3+0x5a8>
 800d208:	9985403a 	cmpgeu	r2,r19,r6
 800d20c:	0007883a 	mov	r3,zero
 800d210:	00004a06 	br	800d33c <__udivdi3+0x2c8>
 800d214:	3000041e 	bne	r6,zero,800d228 <__udivdi3+0x1b4>
 800d218:	000b883a 	mov	r5,zero
 800d21c:	01000044 	movi	r4,1
 800d220:	80036900 	call	8003690 <__udivsi3>
 800d224:	1023883a 	mov	r17,r2
 800d228:	00bfffd4 	movui	r2,65535
 800d22c:	1440532e 	bgeu	r2,r17,800d37c <__udivdi3+0x308>
 800d230:	00804034 	movhi	r2,256
 800d234:	10bfffc4 	addi	r2,r2,-1
 800d238:	1440f436 	bltu	r2,r17,800d60c <__udivdi3+0x598>
 800d23c:	00800404 	movi	r2,16
 800d240:	8886d83a 	srl	r3,r17,r2
 800d244:	010200f4 	movhi	r4,2051
 800d248:	21058d04 	addi	r4,r4,5684
 800d24c:	20c7883a 	add	r3,r4,r3
 800d250:	18c00003 	ldbu	r3,0(r3)
 800d254:	1885883a 	add	r2,r3,r2
 800d258:	00c00804 	movi	r3,32
 800d25c:	1887c83a 	sub	r3,r3,r2
 800d260:	1800a51e 	bne	r3,zero,800d4f8 <__udivdi3+0x484>
 800d264:	882ad43a 	srli	r21,r17,16
 800d268:	8461c83a 	sub	r16,r16,r17
 800d26c:	8d3fffcc 	andi	r20,r17,65535
 800d270:	00c00044 	movi	r3,1
 800d274:	a80b883a 	mov	r5,r21
 800d278:	8009883a 	mov	r4,r16
 800d27c:	d8c00115 	stw	r3,4(sp)
 800d280:	80036f40 	call	80036f4 <__umodsi3>
 800d284:	a80b883a 	mov	r5,r21
 800d288:	8009883a 	mov	r4,r16
 800d28c:	1027883a 	mov	r19,r2
 800d290:	80036900 	call	8003690 <__udivsi3>
 800d294:	a00b883a 	mov	r5,r20
 800d298:	1009883a 	mov	r4,r2
 800d29c:	102d883a 	mov	r22,r2
 800d2a0:	800374c0 	call	800374c <__mulsi3>
 800d2a4:	9826943a 	slli	r19,r19,16
 800d2a8:	900ed43a 	srli	r7,r18,16
 800d2ac:	d8c00117 	ldw	r3,4(sp)
 800d2b0:	3cceb03a 	or	r7,r7,r19
 800d2b4:	3880052e 	bgeu	r7,r2,800d2cc <__udivdi3+0x258>
 800d2b8:	3c4f883a 	add	r7,r7,r17
 800d2bc:	b13fffc4 	addi	r4,r22,-1
 800d2c0:	3c400136 	bltu	r7,r17,800d2c8 <__udivdi3+0x254>
 800d2c4:	3880e436 	bltu	r7,r2,800d658 <__udivdi3+0x5e4>
 800d2c8:	202d883a 	mov	r22,r4
 800d2cc:	38a1c83a 	sub	r16,r7,r2
 800d2d0:	8009883a 	mov	r4,r16
 800d2d4:	a80b883a 	mov	r5,r21
 800d2d8:	d8c00115 	stw	r3,4(sp)
 800d2dc:	80036f40 	call	80036f4 <__umodsi3>
 800d2e0:	1027883a 	mov	r19,r2
 800d2e4:	8009883a 	mov	r4,r16
 800d2e8:	a80b883a 	mov	r5,r21
 800d2ec:	9826943a 	slli	r19,r19,16
 800d2f0:	80036900 	call	8003690 <__udivsi3>
 800d2f4:	a00b883a 	mov	r5,r20
 800d2f8:	1009883a 	mov	r4,r2
 800d2fc:	94bfffcc 	andi	r18,r18,65535
 800d300:	1021883a 	mov	r16,r2
 800d304:	94e4b03a 	or	r18,r18,r19
 800d308:	800374c0 	call	800374c <__mulsi3>
 800d30c:	d8c00117 	ldw	r3,4(sp)
 800d310:	9080052e 	bgeu	r18,r2,800d328 <__udivdi3+0x2b4>
 800d314:	8ca5883a 	add	r18,r17,r18
 800d318:	813fffc4 	addi	r4,r16,-1
 800d31c:	9440ad36 	bltu	r18,r17,800d5d4 <__udivdi3+0x560>
 800d320:	9080ac2e 	bgeu	r18,r2,800d5d4 <__udivdi3+0x560>
 800d324:	843fff84 	addi	r16,r16,-2
 800d328:	b004943a 	slli	r2,r22,16
 800d32c:	1404b03a 	or	r2,r2,r16
 800d330:	00000206 	br	800d33c <__udivdi3+0x2c8>
 800d334:	0007883a 	mov	r3,zero
 800d338:	0005883a 	mov	r2,zero
 800d33c:	dfc00b17 	ldw	ra,44(sp)
 800d340:	df000a17 	ldw	fp,40(sp)
 800d344:	ddc00917 	ldw	r23,36(sp)
 800d348:	dd800817 	ldw	r22,32(sp)
 800d34c:	dd400717 	ldw	r21,28(sp)
 800d350:	dd000617 	ldw	r20,24(sp)
 800d354:	dcc00517 	ldw	r19,20(sp)
 800d358:	dc800417 	ldw	r18,16(sp)
 800d35c:	dc400317 	ldw	r17,12(sp)
 800d360:	dc000217 	ldw	r16,8(sp)
 800d364:	dec00c04 	addi	sp,sp,48
 800d368:	f800283a 	ret
 800d36c:	00803fc4 	movi	r2,255
 800d370:	11c5803a 	cmpltu	r2,r2,r7
 800d374:	100490fa 	slli	r2,r2,3
 800d378:	003f9906 	br	800d1e0 <__alt_data_end+0xfc00d1e0>
 800d37c:	00803fc4 	movi	r2,255
 800d380:	1445803a 	cmpltu	r2,r2,r17
 800d384:	100490fa 	slli	r2,r2,3
 800d388:	003fad06 	br	800d240 <__alt_data_end+0xfc00d240>
 800d38c:	00804034 	movhi	r2,256
 800d390:	10bfffc4 	addi	r2,r2,-1
 800d394:	11809f36 	bltu	r2,r6,800d614 <__udivdi3+0x5a0>
 800d398:	00800404 	movi	r2,16
 800d39c:	003f4c06 	br	800d0d0 <__alt_data_end+0xfc00d0d0>
 800d3a0:	3dce983a 	sll	r7,r7,r23
 800d3a4:	30b8d83a 	srl	fp,r6,r2
 800d3a8:	80a2d83a 	srl	r17,r16,r2
 800d3ac:	35cc983a 	sll	r6,r6,r23
 800d3b0:	3f38b03a 	or	fp,r7,fp
 800d3b4:	e024d43a 	srli	r18,fp,16
 800d3b8:	9884d83a 	srl	r2,r19,r2
 800d3bc:	85e0983a 	sll	r16,r16,r23
 800d3c0:	8809883a 	mov	r4,r17
 800d3c4:	900b883a 	mov	r5,r18
 800d3c8:	d9800015 	stw	r6,0(sp)
 800d3cc:	1420b03a 	or	r16,r2,r16
 800d3d0:	80036f40 	call	80036f4 <__umodsi3>
 800d3d4:	900b883a 	mov	r5,r18
 800d3d8:	8809883a 	mov	r4,r17
 800d3dc:	1029883a 	mov	r20,r2
 800d3e0:	e5bfffcc 	andi	r22,fp,65535
 800d3e4:	80036900 	call	8003690 <__udivsi3>
 800d3e8:	100b883a 	mov	r5,r2
 800d3ec:	b009883a 	mov	r4,r22
 800d3f0:	102b883a 	mov	r21,r2
 800d3f4:	800374c0 	call	800374c <__mulsi3>
 800d3f8:	a028943a 	slli	r20,r20,16
 800d3fc:	8006d43a 	srli	r3,r16,16
 800d400:	1d06b03a 	or	r3,r3,r20
 800d404:	1880042e 	bgeu	r3,r2,800d418 <__udivdi3+0x3a4>
 800d408:	1f07883a 	add	r3,r3,fp
 800d40c:	a93fffc4 	addi	r4,r21,-1
 800d410:	1f00892e 	bgeu	r3,fp,800d638 <__udivdi3+0x5c4>
 800d414:	202b883a 	mov	r21,r4
 800d418:	18a3c83a 	sub	r17,r3,r2
 800d41c:	8809883a 	mov	r4,r17
 800d420:	900b883a 	mov	r5,r18
 800d424:	80036f40 	call	80036f4 <__umodsi3>
 800d428:	1029883a 	mov	r20,r2
 800d42c:	8809883a 	mov	r4,r17
 800d430:	900b883a 	mov	r5,r18
 800d434:	a028943a 	slli	r20,r20,16
 800d438:	80036900 	call	8003690 <__udivsi3>
 800d43c:	100b883a 	mov	r5,r2
 800d440:	b009883a 	mov	r4,r22
 800d444:	843fffcc 	andi	r16,r16,65535
 800d448:	1023883a 	mov	r17,r2
 800d44c:	8520b03a 	or	r16,r16,r20
 800d450:	800374c0 	call	800374c <__mulsi3>
 800d454:	8080042e 	bgeu	r16,r2,800d468 <__udivdi3+0x3f4>
 800d458:	8721883a 	add	r16,r16,fp
 800d45c:	88ffffc4 	addi	r3,r17,-1
 800d460:	8700712e 	bgeu	r16,fp,800d628 <__udivdi3+0x5b4>
 800d464:	1823883a 	mov	r17,r3
 800d468:	a80e943a 	slli	r7,r21,16
 800d46c:	d8c00017 	ldw	r3,0(sp)
 800d470:	80a1c83a 	sub	r16,r16,r2
 800d474:	3c64b03a 	or	r18,r7,r17
 800d478:	1d3fffcc 	andi	r20,r3,65535
 800d47c:	9022d43a 	srli	r17,r18,16
 800d480:	95bfffcc 	andi	r22,r18,65535
 800d484:	a00b883a 	mov	r5,r20
 800d488:	b009883a 	mov	r4,r22
 800d48c:	182ad43a 	srli	r21,r3,16
 800d490:	800374c0 	call	800374c <__mulsi3>
 800d494:	a00b883a 	mov	r5,r20
 800d498:	8809883a 	mov	r4,r17
 800d49c:	1039883a 	mov	fp,r2
 800d4a0:	800374c0 	call	800374c <__mulsi3>
 800d4a4:	8809883a 	mov	r4,r17
 800d4a8:	a80b883a 	mov	r5,r21
 800d4ac:	1029883a 	mov	r20,r2
 800d4b0:	800374c0 	call	800374c <__mulsi3>
 800d4b4:	a80b883a 	mov	r5,r21
 800d4b8:	b009883a 	mov	r4,r22
 800d4bc:	1023883a 	mov	r17,r2
 800d4c0:	800374c0 	call	800374c <__mulsi3>
 800d4c4:	e006d43a 	srli	r3,fp,16
 800d4c8:	1505883a 	add	r2,r2,r20
 800d4cc:	1887883a 	add	r3,r3,r2
 800d4d0:	1d00022e 	bgeu	r3,r20,800d4dc <__udivdi3+0x468>
 800d4d4:	00800074 	movhi	r2,1
 800d4d8:	88a3883a 	add	r17,r17,r2
 800d4dc:	1804d43a 	srli	r2,r3,16
 800d4e0:	1463883a 	add	r17,r2,r17
 800d4e4:	84404436 	bltu	r16,r17,800d5f8 <__udivdi3+0x584>
 800d4e8:	84403e26 	beq	r16,r17,800d5e4 <__udivdi3+0x570>
 800d4ec:	9005883a 	mov	r2,r18
 800d4f0:	0007883a 	mov	r3,zero
 800d4f4:	003f9106 	br	800d33c <__alt_data_end+0xfc00d33c>
 800d4f8:	88e2983a 	sll	r17,r17,r3
 800d4fc:	80aed83a 	srl	r23,r16,r2
 800d500:	80e0983a 	sll	r16,r16,r3
 800d504:	882ad43a 	srli	r21,r17,16
 800d508:	9884d83a 	srl	r2,r19,r2
 800d50c:	b809883a 	mov	r4,r23
 800d510:	a80b883a 	mov	r5,r21
 800d514:	98e4983a 	sll	r18,r19,r3
 800d518:	142cb03a 	or	r22,r2,r16
 800d51c:	80036f40 	call	80036f4 <__umodsi3>
 800d520:	b809883a 	mov	r4,r23
 800d524:	a80b883a 	mov	r5,r21
 800d528:	1027883a 	mov	r19,r2
 800d52c:	8d3fffcc 	andi	r20,r17,65535
 800d530:	80036900 	call	8003690 <__udivsi3>
 800d534:	a009883a 	mov	r4,r20
 800d538:	100b883a 	mov	r5,r2
 800d53c:	102f883a 	mov	r23,r2
 800d540:	800374c0 	call	800374c <__mulsi3>
 800d544:	9826943a 	slli	r19,r19,16
 800d548:	b008d43a 	srli	r4,r22,16
 800d54c:	24c8b03a 	or	r4,r4,r19
 800d550:	2080062e 	bgeu	r4,r2,800d56c <__udivdi3+0x4f8>
 800d554:	2449883a 	add	r4,r4,r17
 800d558:	b8ffffc4 	addi	r3,r23,-1
 800d55c:	24403c36 	bltu	r4,r17,800d650 <__udivdi3+0x5dc>
 800d560:	20803b2e 	bgeu	r4,r2,800d650 <__udivdi3+0x5dc>
 800d564:	bdffff84 	addi	r23,r23,-2
 800d568:	2449883a 	add	r4,r4,r17
 800d56c:	20a1c83a 	sub	r16,r4,r2
 800d570:	a80b883a 	mov	r5,r21
 800d574:	8009883a 	mov	r4,r16
 800d578:	80036f40 	call	80036f4 <__umodsi3>
 800d57c:	a80b883a 	mov	r5,r21
 800d580:	8009883a 	mov	r4,r16
 800d584:	1027883a 	mov	r19,r2
 800d588:	80036900 	call	8003690 <__udivsi3>
 800d58c:	a009883a 	mov	r4,r20
 800d590:	100b883a 	mov	r5,r2
 800d594:	9826943a 	slli	r19,r19,16
 800d598:	1039883a 	mov	fp,r2
 800d59c:	800374c0 	call	800374c <__mulsi3>
 800d5a0:	b13fffcc 	andi	r4,r22,65535
 800d5a4:	24c8b03a 	or	r4,r4,r19
 800d5a8:	2080062e 	bgeu	r4,r2,800d5c4 <__udivdi3+0x550>
 800d5ac:	2449883a 	add	r4,r4,r17
 800d5b0:	e0ffffc4 	addi	r3,fp,-1
 800d5b4:	24402436 	bltu	r4,r17,800d648 <__udivdi3+0x5d4>
 800d5b8:	2080232e 	bgeu	r4,r2,800d648 <__udivdi3+0x5d4>
 800d5bc:	e73fff84 	addi	fp,fp,-2
 800d5c0:	2449883a 	add	r4,r4,r17
 800d5c4:	b82e943a 	slli	r23,r23,16
 800d5c8:	20a1c83a 	sub	r16,r4,r2
 800d5cc:	bf06b03a 	or	r3,r23,fp
 800d5d0:	003f2806 	br	800d274 <__alt_data_end+0xfc00d274>
 800d5d4:	2021883a 	mov	r16,r4
 800d5d8:	003f5306 	br	800d328 <__alt_data_end+0xfc00d328>
 800d5dc:	1821883a 	mov	r16,r3
 800d5e0:	003ef406 	br	800d1b4 <__alt_data_end+0xfc00d1b4>
 800d5e4:	1806943a 	slli	r3,r3,16
 800d5e8:	9de6983a 	sll	r19,r19,r23
 800d5ec:	e73fffcc 	andi	fp,fp,65535
 800d5f0:	1f07883a 	add	r3,r3,fp
 800d5f4:	98ffbd2e 	bgeu	r19,r3,800d4ec <__alt_data_end+0xfc00d4ec>
 800d5f8:	90bfffc4 	addi	r2,r18,-1
 800d5fc:	0007883a 	mov	r3,zero
 800d600:	003f4e06 	br	800d33c <__alt_data_end+0xfc00d33c>
 800d604:	00800604 	movi	r2,24
 800d608:	003ef506 	br	800d1e0 <__alt_data_end+0xfc00d1e0>
 800d60c:	00800604 	movi	r2,24
 800d610:	003f0b06 	br	800d240 <__alt_data_end+0xfc00d240>
 800d614:	00800604 	movi	r2,24
 800d618:	003ead06 	br	800d0d0 <__alt_data_end+0xfc00d0d0>
 800d61c:	0007883a 	mov	r3,zero
 800d620:	00800044 	movi	r2,1
 800d624:	003f4506 	br	800d33c <__alt_data_end+0xfc00d33c>
 800d628:	80bf8e2e 	bgeu	r16,r2,800d464 <__alt_data_end+0xfc00d464>
 800d62c:	8c7fff84 	addi	r17,r17,-2
 800d630:	8721883a 	add	r16,r16,fp
 800d634:	003f8c06 	br	800d468 <__alt_data_end+0xfc00d468>
 800d638:	18bf762e 	bgeu	r3,r2,800d414 <__alt_data_end+0xfc00d414>
 800d63c:	ad7fff84 	addi	r21,r21,-2
 800d640:	1f07883a 	add	r3,r3,fp
 800d644:	003f7406 	br	800d418 <__alt_data_end+0xfc00d418>
 800d648:	1839883a 	mov	fp,r3
 800d64c:	003fdd06 	br	800d5c4 <__alt_data_end+0xfc00d5c4>
 800d650:	182f883a 	mov	r23,r3
 800d654:	003fc506 	br	800d56c <__alt_data_end+0xfc00d56c>
 800d658:	b5bfff84 	addi	r22,r22,-2
 800d65c:	3c4f883a 	add	r7,r7,r17
 800d660:	003f1a06 	br	800d2cc <__alt_data_end+0xfc00d2cc>
 800d664:	b5bfff84 	addi	r22,r22,-2
 800d668:	1c47883a 	add	r3,r3,r17
 800d66c:	003ebc06 	br	800d160 <__alt_data_end+0xfc00d160>

0800d670 <__umoddi3>:
 800d670:	defff304 	addi	sp,sp,-52
 800d674:	df000b15 	stw	fp,44(sp)
 800d678:	dc400415 	stw	r17,16(sp)
 800d67c:	dc000315 	stw	r16,12(sp)
 800d680:	dfc00c15 	stw	ra,48(sp)
 800d684:	ddc00a15 	stw	r23,40(sp)
 800d688:	dd800915 	stw	r22,36(sp)
 800d68c:	dd400815 	stw	r21,32(sp)
 800d690:	dd000715 	stw	r20,28(sp)
 800d694:	dcc00615 	stw	r19,24(sp)
 800d698:	dc800515 	stw	r18,20(sp)
 800d69c:	2021883a 	mov	r16,r4
 800d6a0:	2823883a 	mov	r17,r5
 800d6a4:	2839883a 	mov	fp,r5
 800d6a8:	3800401e 	bne	r7,zero,800d7ac <__umoddi3+0x13c>
 800d6ac:	3027883a 	mov	r19,r6
 800d6b0:	2029883a 	mov	r20,r4
 800d6b4:	2980552e 	bgeu	r5,r6,800d80c <__umoddi3+0x19c>
 800d6b8:	00bfffd4 	movui	r2,65535
 800d6bc:	1180a236 	bltu	r2,r6,800d948 <__umoddi3+0x2d8>
 800d6c0:	01003fc4 	movi	r4,255
 800d6c4:	2189803a 	cmpltu	r4,r4,r6
 800d6c8:	200890fa 	slli	r4,r4,3
 800d6cc:	3104d83a 	srl	r2,r6,r4
 800d6d0:	00c200f4 	movhi	r3,2051
 800d6d4:	18c58d04 	addi	r3,r3,5684
 800d6d8:	1885883a 	add	r2,r3,r2
 800d6dc:	10c00003 	ldbu	r3,0(r2)
 800d6e0:	00800804 	movi	r2,32
 800d6e4:	1909883a 	add	r4,r3,r4
 800d6e8:	1125c83a 	sub	r18,r2,r4
 800d6ec:	90000526 	beq	r18,zero,800d704 <__umoddi3+0x94>
 800d6f0:	8ca2983a 	sll	r17,r17,r18
 800d6f4:	8108d83a 	srl	r4,r16,r4
 800d6f8:	34a6983a 	sll	r19,r6,r18
 800d6fc:	84a8983a 	sll	r20,r16,r18
 800d700:	2478b03a 	or	fp,r4,r17
 800d704:	982cd43a 	srli	r22,r19,16
 800d708:	e009883a 	mov	r4,fp
 800d70c:	9dffffcc 	andi	r23,r19,65535
 800d710:	b00b883a 	mov	r5,r22
 800d714:	80036f40 	call	80036f4 <__umodsi3>
 800d718:	b00b883a 	mov	r5,r22
 800d71c:	e009883a 	mov	r4,fp
 800d720:	102b883a 	mov	r21,r2
 800d724:	80036900 	call	8003690 <__udivsi3>
 800d728:	100b883a 	mov	r5,r2
 800d72c:	b809883a 	mov	r4,r23
 800d730:	800374c0 	call	800374c <__mulsi3>
 800d734:	a82a943a 	slli	r21,r21,16
 800d738:	a006d43a 	srli	r3,r20,16
 800d73c:	1d46b03a 	or	r3,r3,r21
 800d740:	1880032e 	bgeu	r3,r2,800d750 <__umoddi3+0xe0>
 800d744:	1cc7883a 	add	r3,r3,r19
 800d748:	1cc00136 	bltu	r3,r19,800d750 <__umoddi3+0xe0>
 800d74c:	18813136 	bltu	r3,r2,800dc14 <__umoddi3+0x5a4>
 800d750:	18a1c83a 	sub	r16,r3,r2
 800d754:	b00b883a 	mov	r5,r22
 800d758:	8009883a 	mov	r4,r16
 800d75c:	80036f40 	call	80036f4 <__umodsi3>
 800d760:	b00b883a 	mov	r5,r22
 800d764:	8009883a 	mov	r4,r16
 800d768:	1023883a 	mov	r17,r2
 800d76c:	80036900 	call	8003690 <__udivsi3>
 800d770:	100b883a 	mov	r5,r2
 800d774:	b809883a 	mov	r4,r23
 800d778:	8822943a 	slli	r17,r17,16
 800d77c:	800374c0 	call	800374c <__mulsi3>
 800d780:	a0ffffcc 	andi	r3,r20,65535
 800d784:	1c46b03a 	or	r3,r3,r17
 800d788:	1880042e 	bgeu	r3,r2,800d79c <__umoddi3+0x12c>
 800d78c:	1cc7883a 	add	r3,r3,r19
 800d790:	1cc00236 	bltu	r3,r19,800d79c <__umoddi3+0x12c>
 800d794:	1880012e 	bgeu	r3,r2,800d79c <__umoddi3+0x12c>
 800d798:	1cc7883a 	add	r3,r3,r19
 800d79c:	1885c83a 	sub	r2,r3,r2
 800d7a0:	1484d83a 	srl	r2,r2,r18
 800d7a4:	0007883a 	mov	r3,zero
 800d7a8:	00005306 	br	800d8f8 <__umoddi3+0x288>
 800d7ac:	29c05036 	bltu	r5,r7,800d8f0 <__umoddi3+0x280>
 800d7b0:	00bfffd4 	movui	r2,65535
 800d7b4:	11c05c2e 	bgeu	r2,r7,800d928 <__umoddi3+0x2b8>
 800d7b8:	00804034 	movhi	r2,256
 800d7bc:	10bfffc4 	addi	r2,r2,-1
 800d7c0:	11c10636 	bltu	r2,r7,800dbdc <__umoddi3+0x56c>
 800d7c4:	01000404 	movi	r4,16
 800d7c8:	3904d83a 	srl	r2,r7,r4
 800d7cc:	00c200f4 	movhi	r3,2051
 800d7d0:	18c58d04 	addi	r3,r3,5684
 800d7d4:	1885883a 	add	r2,r3,r2
 800d7d8:	14c00003 	ldbu	r19,0(r2)
 800d7dc:	00c00804 	movi	r3,32
 800d7e0:	9927883a 	add	r19,r19,r4
 800d7e4:	1ce9c83a 	sub	r20,r3,r19
 800d7e8:	a0005c1e 	bne	r20,zero,800d95c <__umoddi3+0x2ec>
 800d7ec:	3c400136 	bltu	r7,r17,800d7f4 <__umoddi3+0x184>
 800d7f0:	81810a36 	bltu	r16,r6,800dc1c <__umoddi3+0x5ac>
 800d7f4:	8185c83a 	sub	r2,r16,r6
 800d7f8:	89e3c83a 	sub	r17,r17,r7
 800d7fc:	8089803a 	cmpltu	r4,r16,r2
 800d800:	8939c83a 	sub	fp,r17,r4
 800d804:	e007883a 	mov	r3,fp
 800d808:	00003b06 	br	800d8f8 <__umoddi3+0x288>
 800d80c:	3000041e 	bne	r6,zero,800d820 <__umoddi3+0x1b0>
 800d810:	000b883a 	mov	r5,zero
 800d814:	01000044 	movi	r4,1
 800d818:	80036900 	call	8003690 <__udivsi3>
 800d81c:	1027883a 	mov	r19,r2
 800d820:	00bfffd4 	movui	r2,65535
 800d824:	14c0442e 	bgeu	r2,r19,800d938 <__umoddi3+0x2c8>
 800d828:	00804034 	movhi	r2,256
 800d82c:	10bfffc4 	addi	r2,r2,-1
 800d830:	14c0ec36 	bltu	r2,r19,800dbe4 <__umoddi3+0x574>
 800d834:	00800404 	movi	r2,16
 800d838:	9886d83a 	srl	r3,r19,r2
 800d83c:	010200f4 	movhi	r4,2051
 800d840:	21058d04 	addi	r4,r4,5684
 800d844:	20c7883a 	add	r3,r4,r3
 800d848:	18c00003 	ldbu	r3,0(r3)
 800d84c:	1887883a 	add	r3,r3,r2
 800d850:	00800804 	movi	r2,32
 800d854:	10e5c83a 	sub	r18,r2,r3
 800d858:	9000ab1e 	bne	r18,zero,800db08 <__umoddi3+0x498>
 800d85c:	982cd43a 	srli	r22,r19,16
 800d860:	8ce3c83a 	sub	r17,r17,r19
 800d864:	9dffffcc 	andi	r23,r19,65535
 800d868:	b00b883a 	mov	r5,r22
 800d86c:	8809883a 	mov	r4,r17
 800d870:	80036f40 	call	80036f4 <__umodsi3>
 800d874:	b00b883a 	mov	r5,r22
 800d878:	8809883a 	mov	r4,r17
 800d87c:	102b883a 	mov	r21,r2
 800d880:	80036900 	call	8003690 <__udivsi3>
 800d884:	b80b883a 	mov	r5,r23
 800d888:	1009883a 	mov	r4,r2
 800d88c:	800374c0 	call	800374c <__mulsi3>
 800d890:	a82a943a 	slli	r21,r21,16
 800d894:	a006d43a 	srli	r3,r20,16
 800d898:	1d46b03a 	or	r3,r3,r21
 800d89c:	1880042e 	bgeu	r3,r2,800d8b0 <__umoddi3+0x240>
 800d8a0:	1cc7883a 	add	r3,r3,r19
 800d8a4:	1cc00236 	bltu	r3,r19,800d8b0 <__umoddi3+0x240>
 800d8a8:	1880012e 	bgeu	r3,r2,800d8b0 <__umoddi3+0x240>
 800d8ac:	1cc7883a 	add	r3,r3,r19
 800d8b0:	18a1c83a 	sub	r16,r3,r2
 800d8b4:	b00b883a 	mov	r5,r22
 800d8b8:	8009883a 	mov	r4,r16
 800d8bc:	80036f40 	call	80036f4 <__umodsi3>
 800d8c0:	1023883a 	mov	r17,r2
 800d8c4:	b00b883a 	mov	r5,r22
 800d8c8:	8009883a 	mov	r4,r16
 800d8cc:	80036900 	call	8003690 <__udivsi3>
 800d8d0:	8822943a 	slli	r17,r17,16
 800d8d4:	b80b883a 	mov	r5,r23
 800d8d8:	1009883a 	mov	r4,r2
 800d8dc:	800374c0 	call	800374c <__mulsi3>
 800d8e0:	a53fffcc 	andi	r20,r20,65535
 800d8e4:	a446b03a 	or	r3,r20,r17
 800d8e8:	18bfac2e 	bgeu	r3,r2,800d79c <__alt_data_end+0xfc00d79c>
 800d8ec:	003fa706 	br	800d78c <__alt_data_end+0xfc00d78c>
 800d8f0:	2005883a 	mov	r2,r4
 800d8f4:	2807883a 	mov	r3,r5
 800d8f8:	dfc00c17 	ldw	ra,48(sp)
 800d8fc:	df000b17 	ldw	fp,44(sp)
 800d900:	ddc00a17 	ldw	r23,40(sp)
 800d904:	dd800917 	ldw	r22,36(sp)
 800d908:	dd400817 	ldw	r21,32(sp)
 800d90c:	dd000717 	ldw	r20,28(sp)
 800d910:	dcc00617 	ldw	r19,24(sp)
 800d914:	dc800517 	ldw	r18,20(sp)
 800d918:	dc400417 	ldw	r17,16(sp)
 800d91c:	dc000317 	ldw	r16,12(sp)
 800d920:	dec00d04 	addi	sp,sp,52
 800d924:	f800283a 	ret
 800d928:	04c03fc4 	movi	r19,255
 800d92c:	99c9803a 	cmpltu	r4,r19,r7
 800d930:	200890fa 	slli	r4,r4,3
 800d934:	003fa406 	br	800d7c8 <__alt_data_end+0xfc00d7c8>
 800d938:	00803fc4 	movi	r2,255
 800d93c:	14c5803a 	cmpltu	r2,r2,r19
 800d940:	100490fa 	slli	r2,r2,3
 800d944:	003fbc06 	br	800d838 <__alt_data_end+0xfc00d838>
 800d948:	00804034 	movhi	r2,256
 800d94c:	10bfffc4 	addi	r2,r2,-1
 800d950:	1180a636 	bltu	r2,r6,800dbec <__umoddi3+0x57c>
 800d954:	01000404 	movi	r4,16
 800d958:	003f5c06 	br	800d6cc <__alt_data_end+0xfc00d6cc>
 800d95c:	3d0e983a 	sll	r7,r7,r20
 800d960:	34ead83a 	srl	r21,r6,r19
 800d964:	8cc6d83a 	srl	r3,r17,r19
 800d968:	8d10983a 	sll	r8,r17,r20
 800d96c:	3d6ab03a 	or	r21,r7,r21
 800d970:	a82cd43a 	srli	r22,r21,16
 800d974:	84e2d83a 	srl	r17,r16,r19
 800d978:	1809883a 	mov	r4,r3
 800d97c:	b00b883a 	mov	r5,r22
 800d980:	8a22b03a 	or	r17,r17,r8
 800d984:	3524983a 	sll	r18,r6,r20
 800d988:	dc400015 	stw	r17,0(sp)
 800d98c:	d8c00115 	stw	r3,4(sp)
 800d990:	80036f40 	call	80036f4 <__umodsi3>
 800d994:	d8c00117 	ldw	r3,4(sp)
 800d998:	b00b883a 	mov	r5,r22
 800d99c:	1039883a 	mov	fp,r2
 800d9a0:	1809883a 	mov	r4,r3
 800d9a4:	80036900 	call	8003690 <__udivsi3>
 800d9a8:	adffffcc 	andi	r23,r21,65535
 800d9ac:	100b883a 	mov	r5,r2
 800d9b0:	b809883a 	mov	r4,r23
 800d9b4:	1023883a 	mov	r17,r2
 800d9b8:	800374c0 	call	800374c <__mulsi3>
 800d9bc:	d9400017 	ldw	r5,0(sp)
 800d9c0:	e008943a 	slli	r4,fp,16
 800d9c4:	8520983a 	sll	r16,r16,r20
 800d9c8:	2806d43a 	srli	r3,r5,16
 800d9cc:	1906b03a 	or	r3,r3,r4
 800d9d0:	1880042e 	bgeu	r3,r2,800d9e4 <__umoddi3+0x374>
 800d9d4:	1d47883a 	add	r3,r3,r21
 800d9d8:	893fffc4 	addi	r4,r17,-1
 800d9dc:	1d40892e 	bgeu	r3,r21,800dc04 <__umoddi3+0x594>
 800d9e0:	2023883a 	mov	r17,r4
 800d9e4:	18b9c83a 	sub	fp,r3,r2
 800d9e8:	b00b883a 	mov	r5,r22
 800d9ec:	e009883a 	mov	r4,fp
 800d9f0:	80036f40 	call	80036f4 <__umodsi3>
 800d9f4:	b00b883a 	mov	r5,r22
 800d9f8:	e009883a 	mov	r4,fp
 800d9fc:	d8800215 	stw	r2,8(sp)
 800da00:	80036900 	call	8003690 <__udivsi3>
 800da04:	100b883a 	mov	r5,r2
 800da08:	b809883a 	mov	r4,r23
 800da0c:	102d883a 	mov	r22,r2
 800da10:	800374c0 	call	800374c <__mulsi3>
 800da14:	d9800217 	ldw	r6,8(sp)
 800da18:	d8c00017 	ldw	r3,0(sp)
 800da1c:	300c943a 	slli	r6,r6,16
 800da20:	1a3fffcc 	andi	r8,r3,65535
 800da24:	4190b03a 	or	r8,r8,r6
 800da28:	4080042e 	bgeu	r8,r2,800da3c <__umoddi3+0x3cc>
 800da2c:	4551883a 	add	r8,r8,r21
 800da30:	b0ffffc4 	addi	r3,r22,-1
 800da34:	45406f2e 	bgeu	r8,r21,800dbf4 <__umoddi3+0x584>
 800da38:	182d883a 	mov	r22,r3
 800da3c:	880e943a 	slli	r7,r17,16
 800da40:	9006d43a 	srli	r3,r18,16
 800da44:	91bfffcc 	andi	r6,r18,65535
 800da48:	3dacb03a 	or	r22,r7,r22
 800da4c:	b02ed43a 	srli	r23,r22,16
 800da50:	b5bfffcc 	andi	r22,r22,65535
 800da54:	300b883a 	mov	r5,r6
 800da58:	b009883a 	mov	r4,r22
 800da5c:	40a3c83a 	sub	r17,r8,r2
 800da60:	d8c00115 	stw	r3,4(sp)
 800da64:	d9800215 	stw	r6,8(sp)
 800da68:	800374c0 	call	800374c <__mulsi3>
 800da6c:	d9800217 	ldw	r6,8(sp)
 800da70:	b809883a 	mov	r4,r23
 800da74:	1039883a 	mov	fp,r2
 800da78:	300b883a 	mov	r5,r6
 800da7c:	800374c0 	call	800374c <__mulsi3>
 800da80:	d8c00117 	ldw	r3,4(sp)
 800da84:	b809883a 	mov	r4,r23
 800da88:	d8800215 	stw	r2,8(sp)
 800da8c:	180b883a 	mov	r5,r3
 800da90:	800374c0 	call	800374c <__mulsi3>
 800da94:	d8c00117 	ldw	r3,4(sp)
 800da98:	b009883a 	mov	r4,r22
 800da9c:	102f883a 	mov	r23,r2
 800daa0:	180b883a 	mov	r5,r3
 800daa4:	800374c0 	call	800374c <__mulsi3>
 800daa8:	d9800217 	ldw	r6,8(sp)
 800daac:	e006d43a 	srli	r3,fp,16
 800dab0:	1185883a 	add	r2,r2,r6
 800dab4:	1885883a 	add	r2,r3,r2
 800dab8:	1180022e 	bgeu	r2,r6,800dac4 <__umoddi3+0x454>
 800dabc:	00c00074 	movhi	r3,1
 800dac0:	b8ef883a 	add	r23,r23,r3
 800dac4:	1006d43a 	srli	r3,r2,16
 800dac8:	1004943a 	slli	r2,r2,16
 800dacc:	e73fffcc 	andi	fp,fp,65535
 800dad0:	1dc7883a 	add	r3,r3,r23
 800dad4:	1739883a 	add	fp,r2,fp
 800dad8:	88c03a36 	bltu	r17,r3,800dbc4 <__umoddi3+0x554>
 800dadc:	88c05126 	beq	r17,r3,800dc24 <__umoddi3+0x5b4>
 800dae0:	88c9c83a 	sub	r4,r17,r3
 800dae4:	e00f883a 	mov	r7,fp
 800dae8:	81cfc83a 	sub	r7,r16,r7
 800daec:	81c7803a 	cmpltu	r3,r16,r7
 800daf0:	20c7c83a 	sub	r3,r4,r3
 800daf4:	1cc4983a 	sll	r2,r3,r19
 800daf8:	3d0ed83a 	srl	r7,r7,r20
 800dafc:	1d06d83a 	srl	r3,r3,r20
 800db00:	11c4b03a 	or	r2,r2,r7
 800db04:	003f7c06 	br	800d8f8 <__alt_data_end+0xfc00d8f8>
 800db08:	9ca6983a 	sll	r19,r19,r18
 800db0c:	88f8d83a 	srl	fp,r17,r3
 800db10:	80c4d83a 	srl	r2,r16,r3
 800db14:	982cd43a 	srli	r22,r19,16
 800db18:	8ca2983a 	sll	r17,r17,r18
 800db1c:	e009883a 	mov	r4,fp
 800db20:	b00b883a 	mov	r5,r22
 800db24:	146ab03a 	or	r21,r2,r17
 800db28:	80036f40 	call	80036f4 <__umodsi3>
 800db2c:	b00b883a 	mov	r5,r22
 800db30:	e009883a 	mov	r4,fp
 800db34:	1029883a 	mov	r20,r2
 800db38:	9dffffcc 	andi	r23,r19,65535
 800db3c:	80036900 	call	8003690 <__udivsi3>
 800db40:	b809883a 	mov	r4,r23
 800db44:	100b883a 	mov	r5,r2
 800db48:	800374c0 	call	800374c <__mulsi3>
 800db4c:	a008943a 	slli	r4,r20,16
 800db50:	a806d43a 	srli	r3,r21,16
 800db54:	84a8983a 	sll	r20,r16,r18
 800db58:	1906b03a 	or	r3,r3,r4
 800db5c:	1880042e 	bgeu	r3,r2,800db70 <__umoddi3+0x500>
 800db60:	1cc7883a 	add	r3,r3,r19
 800db64:	1cc00236 	bltu	r3,r19,800db70 <__umoddi3+0x500>
 800db68:	1880012e 	bgeu	r3,r2,800db70 <__umoddi3+0x500>
 800db6c:	1cc7883a 	add	r3,r3,r19
 800db70:	18a3c83a 	sub	r17,r3,r2
 800db74:	b00b883a 	mov	r5,r22
 800db78:	8809883a 	mov	r4,r17
 800db7c:	80036f40 	call	80036f4 <__umodsi3>
 800db80:	b00b883a 	mov	r5,r22
 800db84:	8809883a 	mov	r4,r17
 800db88:	1021883a 	mov	r16,r2
 800db8c:	80036900 	call	8003690 <__udivsi3>
 800db90:	100b883a 	mov	r5,r2
 800db94:	b809883a 	mov	r4,r23
 800db98:	8020943a 	slli	r16,r16,16
 800db9c:	800374c0 	call	800374c <__mulsi3>
 800dba0:	a8ffffcc 	andi	r3,r21,65535
 800dba4:	1c06b03a 	or	r3,r3,r16
 800dba8:	1880042e 	bgeu	r3,r2,800dbbc <__umoddi3+0x54c>
 800dbac:	1cc7883a 	add	r3,r3,r19
 800dbb0:	1cc00236 	bltu	r3,r19,800dbbc <__umoddi3+0x54c>
 800dbb4:	1880012e 	bgeu	r3,r2,800dbbc <__umoddi3+0x54c>
 800dbb8:	1cc7883a 	add	r3,r3,r19
 800dbbc:	18a3c83a 	sub	r17,r3,r2
 800dbc0:	003f2906 	br	800d868 <__alt_data_end+0xfc00d868>
 800dbc4:	e48fc83a 	sub	r7,fp,r18
 800dbc8:	1d49c83a 	sub	r4,r3,r21
 800dbcc:	e1f9803a 	cmpltu	fp,fp,r7
 800dbd0:	2739c83a 	sub	fp,r4,fp
 800dbd4:	8f09c83a 	sub	r4,r17,fp
 800dbd8:	003fc306 	br	800dae8 <__alt_data_end+0xfc00dae8>
 800dbdc:	01000604 	movi	r4,24
 800dbe0:	003ef906 	br	800d7c8 <__alt_data_end+0xfc00d7c8>
 800dbe4:	00800604 	movi	r2,24
 800dbe8:	003f1306 	br	800d838 <__alt_data_end+0xfc00d838>
 800dbec:	01000604 	movi	r4,24
 800dbf0:	003eb606 	br	800d6cc <__alt_data_end+0xfc00d6cc>
 800dbf4:	40bf902e 	bgeu	r8,r2,800da38 <__alt_data_end+0xfc00da38>
 800dbf8:	b5bfff84 	addi	r22,r22,-2
 800dbfc:	4551883a 	add	r8,r8,r21
 800dc00:	003f8e06 	br	800da3c <__alt_data_end+0xfc00da3c>
 800dc04:	18bf762e 	bgeu	r3,r2,800d9e0 <__alt_data_end+0xfc00d9e0>
 800dc08:	8c7fff84 	addi	r17,r17,-2
 800dc0c:	1d47883a 	add	r3,r3,r21
 800dc10:	003f7406 	br	800d9e4 <__alt_data_end+0xfc00d9e4>
 800dc14:	1cc7883a 	add	r3,r3,r19
 800dc18:	003ecd06 	br	800d750 <__alt_data_end+0xfc00d750>
 800dc1c:	8005883a 	mov	r2,r16
 800dc20:	003ef806 	br	800d804 <__alt_data_end+0xfc00d804>
 800dc24:	873fe736 	bltu	r16,fp,800dbc4 <__alt_data_end+0xfc00dbc4>
 800dc28:	e00f883a 	mov	r7,fp
 800dc2c:	0009883a 	mov	r4,zero
 800dc30:	003fad06 	br	800dae8 <__alt_data_end+0xfc00dae8>

0800dc34 <__adddf3>:
 800dc34:	02c00434 	movhi	r11,16
 800dc38:	5affffc4 	addi	r11,r11,-1
 800dc3c:	2806d7fa 	srli	r3,r5,31
 800dc40:	2ad4703a 	and	r10,r5,r11
 800dc44:	3ad2703a 	and	r9,r7,r11
 800dc48:	3804d53a 	srli	r2,r7,20
 800dc4c:	3018d77a 	srli	r12,r6,29
 800dc50:	280ad53a 	srli	r5,r5,20
 800dc54:	501490fa 	slli	r10,r10,3
 800dc58:	2010d77a 	srli	r8,r4,29
 800dc5c:	481290fa 	slli	r9,r9,3
 800dc60:	380ed7fa 	srli	r7,r7,31
 800dc64:	defffb04 	addi	sp,sp,-20
 800dc68:	dc800215 	stw	r18,8(sp)
 800dc6c:	dc400115 	stw	r17,4(sp)
 800dc70:	dc000015 	stw	r16,0(sp)
 800dc74:	dfc00415 	stw	ra,16(sp)
 800dc78:	dcc00315 	stw	r19,12(sp)
 800dc7c:	1c803fcc 	andi	r18,r3,255
 800dc80:	2c01ffcc 	andi	r16,r5,2047
 800dc84:	5210b03a 	or	r8,r10,r8
 800dc88:	202290fa 	slli	r17,r4,3
 800dc8c:	1081ffcc 	andi	r2,r2,2047
 800dc90:	4b12b03a 	or	r9,r9,r12
 800dc94:	300c90fa 	slli	r6,r6,3
 800dc98:	91c07526 	beq	r18,r7,800de70 <__adddf3+0x23c>
 800dc9c:	8087c83a 	sub	r3,r16,r2
 800dca0:	00c0ab0e 	bge	zero,r3,800df50 <__adddf3+0x31c>
 800dca4:	10002a1e 	bne	r2,zero,800dd50 <__adddf3+0x11c>
 800dca8:	4984b03a 	or	r2,r9,r6
 800dcac:	1000961e 	bne	r2,zero,800df08 <__adddf3+0x2d4>
 800dcb0:	888001cc 	andi	r2,r17,7
 800dcb4:	10000726 	beq	r2,zero,800dcd4 <__adddf3+0xa0>
 800dcb8:	888003cc 	andi	r2,r17,15
 800dcbc:	00c00104 	movi	r3,4
 800dcc0:	10c00426 	beq	r2,r3,800dcd4 <__adddf3+0xa0>
 800dcc4:	88c7883a 	add	r3,r17,r3
 800dcc8:	1c63803a 	cmpltu	r17,r3,r17
 800dccc:	4451883a 	add	r8,r8,r17
 800dcd0:	1823883a 	mov	r17,r3
 800dcd4:	4080202c 	andhi	r2,r8,128
 800dcd8:	10005926 	beq	r2,zero,800de40 <__adddf3+0x20c>
 800dcdc:	84000044 	addi	r16,r16,1
 800dce0:	0081ffc4 	movi	r2,2047
 800dce4:	8080ba26 	beq	r16,r2,800dfd0 <__adddf3+0x39c>
 800dce8:	00bfe034 	movhi	r2,65408
 800dcec:	10bfffc4 	addi	r2,r2,-1
 800dcf0:	4090703a 	and	r8,r8,r2
 800dcf4:	4004977a 	slli	r2,r8,29
 800dcf8:	4010927a 	slli	r8,r8,9
 800dcfc:	8822d0fa 	srli	r17,r17,3
 800dd00:	8401ffcc 	andi	r16,r16,2047
 800dd04:	4010d33a 	srli	r8,r8,12
 800dd08:	9007883a 	mov	r3,r18
 800dd0c:	1444b03a 	or	r2,r2,r17
 800dd10:	8401ffcc 	andi	r16,r16,2047
 800dd14:	8020953a 	slli	r16,r16,20
 800dd18:	18c03fcc 	andi	r3,r3,255
 800dd1c:	01000434 	movhi	r4,16
 800dd20:	213fffc4 	addi	r4,r4,-1
 800dd24:	180697fa 	slli	r3,r3,31
 800dd28:	4110703a 	and	r8,r8,r4
 800dd2c:	4410b03a 	or	r8,r8,r16
 800dd30:	40c6b03a 	or	r3,r8,r3
 800dd34:	dfc00417 	ldw	ra,16(sp)
 800dd38:	dcc00317 	ldw	r19,12(sp)
 800dd3c:	dc800217 	ldw	r18,8(sp)
 800dd40:	dc400117 	ldw	r17,4(sp)
 800dd44:	dc000017 	ldw	r16,0(sp)
 800dd48:	dec00504 	addi	sp,sp,20
 800dd4c:	f800283a 	ret
 800dd50:	0081ffc4 	movi	r2,2047
 800dd54:	80bfd626 	beq	r16,r2,800dcb0 <__alt_data_end+0xfc00dcb0>
 800dd58:	4a402034 	orhi	r9,r9,128
 800dd5c:	00800e04 	movi	r2,56
 800dd60:	10c09f16 	blt	r2,r3,800dfe0 <__adddf3+0x3ac>
 800dd64:	008007c4 	movi	r2,31
 800dd68:	10c0c216 	blt	r2,r3,800e074 <__adddf3+0x440>
 800dd6c:	00800804 	movi	r2,32
 800dd70:	10c5c83a 	sub	r2,r2,r3
 800dd74:	488a983a 	sll	r5,r9,r2
 800dd78:	30c8d83a 	srl	r4,r6,r3
 800dd7c:	3084983a 	sll	r2,r6,r2
 800dd80:	48c6d83a 	srl	r3,r9,r3
 800dd84:	290cb03a 	or	r6,r5,r4
 800dd88:	1004c03a 	cmpne	r2,r2,zero
 800dd8c:	308cb03a 	or	r6,r6,r2
 800dd90:	898dc83a 	sub	r6,r17,r6
 800dd94:	89a3803a 	cmpltu	r17,r17,r6
 800dd98:	40d1c83a 	sub	r8,r8,r3
 800dd9c:	4451c83a 	sub	r8,r8,r17
 800dda0:	3023883a 	mov	r17,r6
 800dda4:	4080202c 	andhi	r2,r8,128
 800dda8:	10002326 	beq	r2,zero,800de38 <__adddf3+0x204>
 800ddac:	04c02034 	movhi	r19,128
 800ddb0:	9cffffc4 	addi	r19,r19,-1
 800ddb4:	44e6703a 	and	r19,r8,r19
 800ddb8:	98007626 	beq	r19,zero,800df94 <__adddf3+0x360>
 800ddbc:	9809883a 	mov	r4,r19
 800ddc0:	80104740 	call	8010474 <__clzsi2>
 800ddc4:	10fffe04 	addi	r3,r2,-8
 800ddc8:	010007c4 	movi	r4,31
 800ddcc:	20c07716 	blt	r4,r3,800dfac <__adddf3+0x378>
 800ddd0:	00800804 	movi	r2,32
 800ddd4:	10c5c83a 	sub	r2,r2,r3
 800ddd8:	8884d83a 	srl	r2,r17,r2
 800dddc:	98d0983a 	sll	r8,r19,r3
 800dde0:	88e2983a 	sll	r17,r17,r3
 800dde4:	1204b03a 	or	r2,r2,r8
 800dde8:	1c007416 	blt	r3,r16,800dfbc <__adddf3+0x388>
 800ddec:	1c21c83a 	sub	r16,r3,r16
 800ddf0:	82000044 	addi	r8,r16,1
 800ddf4:	00c007c4 	movi	r3,31
 800ddf8:	1a009116 	blt	r3,r8,800e040 <__adddf3+0x40c>
 800ddfc:	00c00804 	movi	r3,32
 800de00:	1a07c83a 	sub	r3,r3,r8
 800de04:	8a08d83a 	srl	r4,r17,r8
 800de08:	88e2983a 	sll	r17,r17,r3
 800de0c:	10c6983a 	sll	r3,r2,r3
 800de10:	1210d83a 	srl	r8,r2,r8
 800de14:	8804c03a 	cmpne	r2,r17,zero
 800de18:	1906b03a 	or	r3,r3,r4
 800de1c:	18a2b03a 	or	r17,r3,r2
 800de20:	0021883a 	mov	r16,zero
 800de24:	003fa206 	br	800dcb0 <__alt_data_end+0xfc00dcb0>
 800de28:	1890b03a 	or	r8,r3,r2
 800de2c:	40017d26 	beq	r8,zero,800e424 <__adddf3+0x7f0>
 800de30:	1011883a 	mov	r8,r2
 800de34:	1823883a 	mov	r17,r3
 800de38:	888001cc 	andi	r2,r17,7
 800de3c:	103f9e1e 	bne	r2,zero,800dcb8 <__alt_data_end+0xfc00dcb8>
 800de40:	4004977a 	slli	r2,r8,29
 800de44:	8822d0fa 	srli	r17,r17,3
 800de48:	4010d0fa 	srli	r8,r8,3
 800de4c:	9007883a 	mov	r3,r18
 800de50:	1444b03a 	or	r2,r2,r17
 800de54:	0101ffc4 	movi	r4,2047
 800de58:	81002426 	beq	r16,r4,800deec <__adddf3+0x2b8>
 800de5c:	8120703a 	and	r16,r16,r4
 800de60:	01000434 	movhi	r4,16
 800de64:	213fffc4 	addi	r4,r4,-1
 800de68:	4110703a 	and	r8,r8,r4
 800de6c:	003fa806 	br	800dd10 <__alt_data_end+0xfc00dd10>
 800de70:	8089c83a 	sub	r4,r16,r2
 800de74:	01005e0e 	bge	zero,r4,800dff0 <__adddf3+0x3bc>
 800de78:	10002b26 	beq	r2,zero,800df28 <__adddf3+0x2f4>
 800de7c:	0081ffc4 	movi	r2,2047
 800de80:	80bf8b26 	beq	r16,r2,800dcb0 <__alt_data_end+0xfc00dcb0>
 800de84:	4a402034 	orhi	r9,r9,128
 800de88:	00800e04 	movi	r2,56
 800de8c:	1100a40e 	bge	r2,r4,800e120 <__adddf3+0x4ec>
 800de90:	498cb03a 	or	r6,r9,r6
 800de94:	300ac03a 	cmpne	r5,r6,zero
 800de98:	0013883a 	mov	r9,zero
 800de9c:	2c4b883a 	add	r5,r5,r17
 800dea0:	2c63803a 	cmpltu	r17,r5,r17
 800dea4:	4a11883a 	add	r8,r9,r8
 800dea8:	8a11883a 	add	r8,r17,r8
 800deac:	2823883a 	mov	r17,r5
 800deb0:	4080202c 	andhi	r2,r8,128
 800deb4:	103fe026 	beq	r2,zero,800de38 <__alt_data_end+0xfc00de38>
 800deb8:	84000044 	addi	r16,r16,1
 800debc:	0081ffc4 	movi	r2,2047
 800dec0:	8080d226 	beq	r16,r2,800e20c <__adddf3+0x5d8>
 800dec4:	00bfe034 	movhi	r2,65408
 800dec8:	10bfffc4 	addi	r2,r2,-1
 800decc:	4090703a 	and	r8,r8,r2
 800ded0:	880ad07a 	srli	r5,r17,1
 800ded4:	400897fa 	slli	r4,r8,31
 800ded8:	88c0004c 	andi	r3,r17,1
 800dedc:	28e2b03a 	or	r17,r5,r3
 800dee0:	4010d07a 	srli	r8,r8,1
 800dee4:	2462b03a 	or	r17,r4,r17
 800dee8:	003f7106 	br	800dcb0 <__alt_data_end+0xfc00dcb0>
 800deec:	4088b03a 	or	r4,r8,r2
 800def0:	20014526 	beq	r4,zero,800e408 <__adddf3+0x7d4>
 800def4:	01000434 	movhi	r4,16
 800def8:	42000234 	orhi	r8,r8,8
 800defc:	213fffc4 	addi	r4,r4,-1
 800df00:	4110703a 	and	r8,r8,r4
 800df04:	003f8206 	br	800dd10 <__alt_data_end+0xfc00dd10>
 800df08:	18ffffc4 	addi	r3,r3,-1
 800df0c:	1800491e 	bne	r3,zero,800e034 <__adddf3+0x400>
 800df10:	898bc83a 	sub	r5,r17,r6
 800df14:	8963803a 	cmpltu	r17,r17,r5
 800df18:	4251c83a 	sub	r8,r8,r9
 800df1c:	4451c83a 	sub	r8,r8,r17
 800df20:	2823883a 	mov	r17,r5
 800df24:	003f9f06 	br	800dda4 <__alt_data_end+0xfc00dda4>
 800df28:	4984b03a 	or	r2,r9,r6
 800df2c:	103f6026 	beq	r2,zero,800dcb0 <__alt_data_end+0xfc00dcb0>
 800df30:	213fffc4 	addi	r4,r4,-1
 800df34:	2000931e 	bne	r4,zero,800e184 <__adddf3+0x550>
 800df38:	898d883a 	add	r6,r17,r6
 800df3c:	3463803a 	cmpltu	r17,r6,r17
 800df40:	4251883a 	add	r8,r8,r9
 800df44:	8a11883a 	add	r8,r17,r8
 800df48:	3023883a 	mov	r17,r6
 800df4c:	003fd806 	br	800deb0 <__alt_data_end+0xfc00deb0>
 800df50:	1800541e 	bne	r3,zero,800e0a4 <__adddf3+0x470>
 800df54:	80800044 	addi	r2,r16,1
 800df58:	1081ffcc 	andi	r2,r2,2047
 800df5c:	00c00044 	movi	r3,1
 800df60:	1880a00e 	bge	r3,r2,800e1e4 <__adddf3+0x5b0>
 800df64:	8989c83a 	sub	r4,r17,r6
 800df68:	8905803a 	cmpltu	r2,r17,r4
 800df6c:	4267c83a 	sub	r19,r8,r9
 800df70:	98a7c83a 	sub	r19,r19,r2
 800df74:	9880202c 	andhi	r2,r19,128
 800df78:	10006326 	beq	r2,zero,800e108 <__adddf3+0x4d4>
 800df7c:	3463c83a 	sub	r17,r6,r17
 800df80:	4a07c83a 	sub	r3,r9,r8
 800df84:	344d803a 	cmpltu	r6,r6,r17
 800df88:	19a7c83a 	sub	r19,r3,r6
 800df8c:	3825883a 	mov	r18,r7
 800df90:	983f8a1e 	bne	r19,zero,800ddbc <__alt_data_end+0xfc00ddbc>
 800df94:	8809883a 	mov	r4,r17
 800df98:	80104740 	call	8010474 <__clzsi2>
 800df9c:	10800804 	addi	r2,r2,32
 800dfa0:	10fffe04 	addi	r3,r2,-8
 800dfa4:	010007c4 	movi	r4,31
 800dfa8:	20ff890e 	bge	r4,r3,800ddd0 <__alt_data_end+0xfc00ddd0>
 800dfac:	10bff604 	addi	r2,r2,-40
 800dfb0:	8884983a 	sll	r2,r17,r2
 800dfb4:	0023883a 	mov	r17,zero
 800dfb8:	1c3f8c0e 	bge	r3,r16,800ddec <__alt_data_end+0xfc00ddec>
 800dfbc:	023fe034 	movhi	r8,65408
 800dfc0:	423fffc4 	addi	r8,r8,-1
 800dfc4:	80e1c83a 	sub	r16,r16,r3
 800dfc8:	1210703a 	and	r8,r2,r8
 800dfcc:	003f3806 	br	800dcb0 <__alt_data_end+0xfc00dcb0>
 800dfd0:	9007883a 	mov	r3,r18
 800dfd4:	0011883a 	mov	r8,zero
 800dfd8:	0005883a 	mov	r2,zero
 800dfdc:	003f4c06 	br	800dd10 <__alt_data_end+0xfc00dd10>
 800dfe0:	498cb03a 	or	r6,r9,r6
 800dfe4:	300cc03a 	cmpne	r6,r6,zero
 800dfe8:	0007883a 	mov	r3,zero
 800dfec:	003f6806 	br	800dd90 <__alt_data_end+0xfc00dd90>
 800dff0:	20009c1e 	bne	r4,zero,800e264 <__adddf3+0x630>
 800dff4:	80800044 	addi	r2,r16,1
 800dff8:	1141ffcc 	andi	r5,r2,2047
 800dffc:	01000044 	movi	r4,1
 800e000:	2140670e 	bge	r4,r5,800e1a0 <__adddf3+0x56c>
 800e004:	0101ffc4 	movi	r4,2047
 800e008:	11007f26 	beq	r2,r4,800e208 <__adddf3+0x5d4>
 800e00c:	898d883a 	add	r6,r17,r6
 800e010:	4247883a 	add	r3,r8,r9
 800e014:	3451803a 	cmpltu	r8,r6,r17
 800e018:	40d1883a 	add	r8,r8,r3
 800e01c:	402297fa 	slli	r17,r8,31
 800e020:	300cd07a 	srli	r6,r6,1
 800e024:	4010d07a 	srli	r8,r8,1
 800e028:	1021883a 	mov	r16,r2
 800e02c:	89a2b03a 	or	r17,r17,r6
 800e030:	003f1f06 	br	800dcb0 <__alt_data_end+0xfc00dcb0>
 800e034:	0081ffc4 	movi	r2,2047
 800e038:	80bf481e 	bne	r16,r2,800dd5c <__alt_data_end+0xfc00dd5c>
 800e03c:	003f1c06 	br	800dcb0 <__alt_data_end+0xfc00dcb0>
 800e040:	843ff844 	addi	r16,r16,-31
 800e044:	01000804 	movi	r4,32
 800e048:	1406d83a 	srl	r3,r2,r16
 800e04c:	41005026 	beq	r8,r4,800e190 <__adddf3+0x55c>
 800e050:	01001004 	movi	r4,64
 800e054:	2211c83a 	sub	r8,r4,r8
 800e058:	1204983a 	sll	r2,r2,r8
 800e05c:	88a2b03a 	or	r17,r17,r2
 800e060:	8822c03a 	cmpne	r17,r17,zero
 800e064:	1c62b03a 	or	r17,r3,r17
 800e068:	0011883a 	mov	r8,zero
 800e06c:	0021883a 	mov	r16,zero
 800e070:	003f7106 	br	800de38 <__alt_data_end+0xfc00de38>
 800e074:	193ff804 	addi	r4,r3,-32
 800e078:	00800804 	movi	r2,32
 800e07c:	4908d83a 	srl	r4,r9,r4
 800e080:	18804526 	beq	r3,r2,800e198 <__adddf3+0x564>
 800e084:	00801004 	movi	r2,64
 800e088:	10c5c83a 	sub	r2,r2,r3
 800e08c:	4886983a 	sll	r3,r9,r2
 800e090:	198cb03a 	or	r6,r3,r6
 800e094:	300cc03a 	cmpne	r6,r6,zero
 800e098:	218cb03a 	or	r6,r4,r6
 800e09c:	0007883a 	mov	r3,zero
 800e0a0:	003f3b06 	br	800dd90 <__alt_data_end+0xfc00dd90>
 800e0a4:	80002a26 	beq	r16,zero,800e150 <__adddf3+0x51c>
 800e0a8:	0101ffc4 	movi	r4,2047
 800e0ac:	11006826 	beq	r2,r4,800e250 <__adddf3+0x61c>
 800e0b0:	00c7c83a 	sub	r3,zero,r3
 800e0b4:	42002034 	orhi	r8,r8,128
 800e0b8:	01000e04 	movi	r4,56
 800e0bc:	20c07c16 	blt	r4,r3,800e2b0 <__adddf3+0x67c>
 800e0c0:	010007c4 	movi	r4,31
 800e0c4:	20c0da16 	blt	r4,r3,800e430 <__adddf3+0x7fc>
 800e0c8:	01000804 	movi	r4,32
 800e0cc:	20c9c83a 	sub	r4,r4,r3
 800e0d0:	4114983a 	sll	r10,r8,r4
 800e0d4:	88cad83a 	srl	r5,r17,r3
 800e0d8:	8908983a 	sll	r4,r17,r4
 800e0dc:	40c6d83a 	srl	r3,r8,r3
 800e0e0:	5162b03a 	or	r17,r10,r5
 800e0e4:	2008c03a 	cmpne	r4,r4,zero
 800e0e8:	8922b03a 	or	r17,r17,r4
 800e0ec:	3463c83a 	sub	r17,r6,r17
 800e0f0:	48c7c83a 	sub	r3,r9,r3
 800e0f4:	344d803a 	cmpltu	r6,r6,r17
 800e0f8:	1991c83a 	sub	r8,r3,r6
 800e0fc:	1021883a 	mov	r16,r2
 800e100:	3825883a 	mov	r18,r7
 800e104:	003f2706 	br	800dda4 <__alt_data_end+0xfc00dda4>
 800e108:	24d0b03a 	or	r8,r4,r19
 800e10c:	40001b1e 	bne	r8,zero,800e17c <__adddf3+0x548>
 800e110:	0005883a 	mov	r2,zero
 800e114:	0007883a 	mov	r3,zero
 800e118:	0021883a 	mov	r16,zero
 800e11c:	003f4d06 	br	800de54 <__alt_data_end+0xfc00de54>
 800e120:	008007c4 	movi	r2,31
 800e124:	11003c16 	blt	r2,r4,800e218 <__adddf3+0x5e4>
 800e128:	00800804 	movi	r2,32
 800e12c:	1105c83a 	sub	r2,r2,r4
 800e130:	488e983a 	sll	r7,r9,r2
 800e134:	310ad83a 	srl	r5,r6,r4
 800e138:	3084983a 	sll	r2,r6,r2
 800e13c:	4912d83a 	srl	r9,r9,r4
 800e140:	394ab03a 	or	r5,r7,r5
 800e144:	1004c03a 	cmpne	r2,r2,zero
 800e148:	288ab03a 	or	r5,r5,r2
 800e14c:	003f5306 	br	800de9c <__alt_data_end+0xfc00de9c>
 800e150:	4448b03a 	or	r4,r8,r17
 800e154:	20003e26 	beq	r4,zero,800e250 <__adddf3+0x61c>
 800e158:	00c6303a 	nor	r3,zero,r3
 800e15c:	18003a1e 	bne	r3,zero,800e248 <__adddf3+0x614>
 800e160:	3463c83a 	sub	r17,r6,r17
 800e164:	4a07c83a 	sub	r3,r9,r8
 800e168:	344d803a 	cmpltu	r6,r6,r17
 800e16c:	1991c83a 	sub	r8,r3,r6
 800e170:	1021883a 	mov	r16,r2
 800e174:	3825883a 	mov	r18,r7
 800e178:	003f0a06 	br	800dda4 <__alt_data_end+0xfc00dda4>
 800e17c:	2023883a 	mov	r17,r4
 800e180:	003f0d06 	br	800ddb8 <__alt_data_end+0xfc00ddb8>
 800e184:	0081ffc4 	movi	r2,2047
 800e188:	80bf3f1e 	bne	r16,r2,800de88 <__alt_data_end+0xfc00de88>
 800e18c:	003ec806 	br	800dcb0 <__alt_data_end+0xfc00dcb0>
 800e190:	0005883a 	mov	r2,zero
 800e194:	003fb106 	br	800e05c <__alt_data_end+0xfc00e05c>
 800e198:	0007883a 	mov	r3,zero
 800e19c:	003fbc06 	br	800e090 <__alt_data_end+0xfc00e090>
 800e1a0:	4444b03a 	or	r2,r8,r17
 800e1a4:	8000871e 	bne	r16,zero,800e3c4 <__adddf3+0x790>
 800e1a8:	1000ba26 	beq	r2,zero,800e494 <__adddf3+0x860>
 800e1ac:	4984b03a 	or	r2,r9,r6
 800e1b0:	103ebf26 	beq	r2,zero,800dcb0 <__alt_data_end+0xfc00dcb0>
 800e1b4:	8985883a 	add	r2,r17,r6
 800e1b8:	4247883a 	add	r3,r8,r9
 800e1bc:	1451803a 	cmpltu	r8,r2,r17
 800e1c0:	40d1883a 	add	r8,r8,r3
 800e1c4:	40c0202c 	andhi	r3,r8,128
 800e1c8:	1023883a 	mov	r17,r2
 800e1cc:	183f1a26 	beq	r3,zero,800de38 <__alt_data_end+0xfc00de38>
 800e1d0:	00bfe034 	movhi	r2,65408
 800e1d4:	10bfffc4 	addi	r2,r2,-1
 800e1d8:	2021883a 	mov	r16,r4
 800e1dc:	4090703a 	and	r8,r8,r2
 800e1e0:	003eb306 	br	800dcb0 <__alt_data_end+0xfc00dcb0>
 800e1e4:	4444b03a 	or	r2,r8,r17
 800e1e8:	8000291e 	bne	r16,zero,800e290 <__adddf3+0x65c>
 800e1ec:	10004b1e 	bne	r2,zero,800e31c <__adddf3+0x6e8>
 800e1f0:	4990b03a 	or	r8,r9,r6
 800e1f4:	40008b26 	beq	r8,zero,800e424 <__adddf3+0x7f0>
 800e1f8:	4811883a 	mov	r8,r9
 800e1fc:	3023883a 	mov	r17,r6
 800e200:	3825883a 	mov	r18,r7
 800e204:	003eaa06 	br	800dcb0 <__alt_data_end+0xfc00dcb0>
 800e208:	1021883a 	mov	r16,r2
 800e20c:	0011883a 	mov	r8,zero
 800e210:	0005883a 	mov	r2,zero
 800e214:	003f0f06 	br	800de54 <__alt_data_end+0xfc00de54>
 800e218:	217ff804 	addi	r5,r4,-32
 800e21c:	00800804 	movi	r2,32
 800e220:	494ad83a 	srl	r5,r9,r5
 800e224:	20807d26 	beq	r4,r2,800e41c <__adddf3+0x7e8>
 800e228:	00801004 	movi	r2,64
 800e22c:	1109c83a 	sub	r4,r2,r4
 800e230:	4912983a 	sll	r9,r9,r4
 800e234:	498cb03a 	or	r6,r9,r6
 800e238:	300cc03a 	cmpne	r6,r6,zero
 800e23c:	298ab03a 	or	r5,r5,r6
 800e240:	0013883a 	mov	r9,zero
 800e244:	003f1506 	br	800de9c <__alt_data_end+0xfc00de9c>
 800e248:	0101ffc4 	movi	r4,2047
 800e24c:	113f9a1e 	bne	r2,r4,800e0b8 <__alt_data_end+0xfc00e0b8>
 800e250:	4811883a 	mov	r8,r9
 800e254:	3023883a 	mov	r17,r6
 800e258:	1021883a 	mov	r16,r2
 800e25c:	3825883a 	mov	r18,r7
 800e260:	003e9306 	br	800dcb0 <__alt_data_end+0xfc00dcb0>
 800e264:	8000161e 	bne	r16,zero,800e2c0 <__adddf3+0x68c>
 800e268:	444ab03a 	or	r5,r8,r17
 800e26c:	28005126 	beq	r5,zero,800e3b4 <__adddf3+0x780>
 800e270:	0108303a 	nor	r4,zero,r4
 800e274:	20004d1e 	bne	r4,zero,800e3ac <__adddf3+0x778>
 800e278:	89a3883a 	add	r17,r17,r6
 800e27c:	4253883a 	add	r9,r8,r9
 800e280:	898d803a 	cmpltu	r6,r17,r6
 800e284:	3251883a 	add	r8,r6,r9
 800e288:	1021883a 	mov	r16,r2
 800e28c:	003f0806 	br	800deb0 <__alt_data_end+0xfc00deb0>
 800e290:	1000301e 	bne	r2,zero,800e354 <__adddf3+0x720>
 800e294:	4984b03a 	or	r2,r9,r6
 800e298:	10007126 	beq	r2,zero,800e460 <__adddf3+0x82c>
 800e29c:	4811883a 	mov	r8,r9
 800e2a0:	3023883a 	mov	r17,r6
 800e2a4:	3825883a 	mov	r18,r7
 800e2a8:	0401ffc4 	movi	r16,2047
 800e2ac:	003e8006 	br	800dcb0 <__alt_data_end+0xfc00dcb0>
 800e2b0:	4462b03a 	or	r17,r8,r17
 800e2b4:	8822c03a 	cmpne	r17,r17,zero
 800e2b8:	0007883a 	mov	r3,zero
 800e2bc:	003f8b06 	br	800e0ec <__alt_data_end+0xfc00e0ec>
 800e2c0:	0141ffc4 	movi	r5,2047
 800e2c4:	11403b26 	beq	r2,r5,800e3b4 <__adddf3+0x780>
 800e2c8:	0109c83a 	sub	r4,zero,r4
 800e2cc:	42002034 	orhi	r8,r8,128
 800e2d0:	01400e04 	movi	r5,56
 800e2d4:	29006716 	blt	r5,r4,800e474 <__adddf3+0x840>
 800e2d8:	014007c4 	movi	r5,31
 800e2dc:	29007016 	blt	r5,r4,800e4a0 <__adddf3+0x86c>
 800e2e0:	01400804 	movi	r5,32
 800e2e4:	290bc83a 	sub	r5,r5,r4
 800e2e8:	4154983a 	sll	r10,r8,r5
 800e2ec:	890ed83a 	srl	r7,r17,r4
 800e2f0:	894a983a 	sll	r5,r17,r5
 800e2f4:	4108d83a 	srl	r4,r8,r4
 800e2f8:	51e2b03a 	or	r17,r10,r7
 800e2fc:	280ac03a 	cmpne	r5,r5,zero
 800e300:	8962b03a 	or	r17,r17,r5
 800e304:	89a3883a 	add	r17,r17,r6
 800e308:	2253883a 	add	r9,r4,r9
 800e30c:	898d803a 	cmpltu	r6,r17,r6
 800e310:	3251883a 	add	r8,r6,r9
 800e314:	1021883a 	mov	r16,r2
 800e318:	003ee506 	br	800deb0 <__alt_data_end+0xfc00deb0>
 800e31c:	4984b03a 	or	r2,r9,r6
 800e320:	103e6326 	beq	r2,zero,800dcb0 <__alt_data_end+0xfc00dcb0>
 800e324:	8987c83a 	sub	r3,r17,r6
 800e328:	88c9803a 	cmpltu	r4,r17,r3
 800e32c:	4245c83a 	sub	r2,r8,r9
 800e330:	1105c83a 	sub	r2,r2,r4
 800e334:	1100202c 	andhi	r4,r2,128
 800e338:	203ebb26 	beq	r4,zero,800de28 <__alt_data_end+0xfc00de28>
 800e33c:	3463c83a 	sub	r17,r6,r17
 800e340:	4a07c83a 	sub	r3,r9,r8
 800e344:	344d803a 	cmpltu	r6,r6,r17
 800e348:	1991c83a 	sub	r8,r3,r6
 800e34c:	3825883a 	mov	r18,r7
 800e350:	003e5706 	br	800dcb0 <__alt_data_end+0xfc00dcb0>
 800e354:	4984b03a 	or	r2,r9,r6
 800e358:	10002e26 	beq	r2,zero,800e414 <__adddf3+0x7e0>
 800e35c:	4004d0fa 	srli	r2,r8,3
 800e360:	8822d0fa 	srli	r17,r17,3
 800e364:	4010977a 	slli	r8,r8,29
 800e368:	10c0022c 	andhi	r3,r2,8
 800e36c:	4462b03a 	or	r17,r8,r17
 800e370:	18000826 	beq	r3,zero,800e394 <__adddf3+0x760>
 800e374:	4808d0fa 	srli	r4,r9,3
 800e378:	20c0022c 	andhi	r3,r4,8
 800e37c:	1800051e 	bne	r3,zero,800e394 <__adddf3+0x760>
 800e380:	300cd0fa 	srli	r6,r6,3
 800e384:	4806977a 	slli	r3,r9,29
 800e388:	2005883a 	mov	r2,r4
 800e38c:	3825883a 	mov	r18,r7
 800e390:	19a2b03a 	or	r17,r3,r6
 800e394:	8810d77a 	srli	r8,r17,29
 800e398:	100490fa 	slli	r2,r2,3
 800e39c:	882290fa 	slli	r17,r17,3
 800e3a0:	0401ffc4 	movi	r16,2047
 800e3a4:	4090b03a 	or	r8,r8,r2
 800e3a8:	003e4106 	br	800dcb0 <__alt_data_end+0xfc00dcb0>
 800e3ac:	0141ffc4 	movi	r5,2047
 800e3b0:	117fc71e 	bne	r2,r5,800e2d0 <__alt_data_end+0xfc00e2d0>
 800e3b4:	4811883a 	mov	r8,r9
 800e3b8:	3023883a 	mov	r17,r6
 800e3bc:	1021883a 	mov	r16,r2
 800e3c0:	003e3b06 	br	800dcb0 <__alt_data_end+0xfc00dcb0>
 800e3c4:	10002f26 	beq	r2,zero,800e484 <__adddf3+0x850>
 800e3c8:	4984b03a 	or	r2,r9,r6
 800e3cc:	10001126 	beq	r2,zero,800e414 <__adddf3+0x7e0>
 800e3d0:	4004d0fa 	srli	r2,r8,3
 800e3d4:	8822d0fa 	srli	r17,r17,3
 800e3d8:	4010977a 	slli	r8,r8,29
 800e3dc:	10c0022c 	andhi	r3,r2,8
 800e3e0:	4462b03a 	or	r17,r8,r17
 800e3e4:	183feb26 	beq	r3,zero,800e394 <__alt_data_end+0xfc00e394>
 800e3e8:	4808d0fa 	srli	r4,r9,3
 800e3ec:	20c0022c 	andhi	r3,r4,8
 800e3f0:	183fe81e 	bne	r3,zero,800e394 <__alt_data_end+0xfc00e394>
 800e3f4:	300cd0fa 	srli	r6,r6,3
 800e3f8:	4806977a 	slli	r3,r9,29
 800e3fc:	2005883a 	mov	r2,r4
 800e400:	19a2b03a 	or	r17,r3,r6
 800e404:	003fe306 	br	800e394 <__alt_data_end+0xfc00e394>
 800e408:	0011883a 	mov	r8,zero
 800e40c:	0005883a 	mov	r2,zero
 800e410:	003e3f06 	br	800dd10 <__alt_data_end+0xfc00dd10>
 800e414:	0401ffc4 	movi	r16,2047
 800e418:	003e2506 	br	800dcb0 <__alt_data_end+0xfc00dcb0>
 800e41c:	0013883a 	mov	r9,zero
 800e420:	003f8406 	br	800e234 <__alt_data_end+0xfc00e234>
 800e424:	0005883a 	mov	r2,zero
 800e428:	0007883a 	mov	r3,zero
 800e42c:	003e8906 	br	800de54 <__alt_data_end+0xfc00de54>
 800e430:	197ff804 	addi	r5,r3,-32
 800e434:	01000804 	movi	r4,32
 800e438:	414ad83a 	srl	r5,r8,r5
 800e43c:	19002426 	beq	r3,r4,800e4d0 <__adddf3+0x89c>
 800e440:	01001004 	movi	r4,64
 800e444:	20c7c83a 	sub	r3,r4,r3
 800e448:	40c6983a 	sll	r3,r8,r3
 800e44c:	1c46b03a 	or	r3,r3,r17
 800e450:	1806c03a 	cmpne	r3,r3,zero
 800e454:	28e2b03a 	or	r17,r5,r3
 800e458:	0007883a 	mov	r3,zero
 800e45c:	003f2306 	br	800e0ec <__alt_data_end+0xfc00e0ec>
 800e460:	0007883a 	mov	r3,zero
 800e464:	5811883a 	mov	r8,r11
 800e468:	00bfffc4 	movi	r2,-1
 800e46c:	0401ffc4 	movi	r16,2047
 800e470:	003e7806 	br	800de54 <__alt_data_end+0xfc00de54>
 800e474:	4462b03a 	or	r17,r8,r17
 800e478:	8822c03a 	cmpne	r17,r17,zero
 800e47c:	0009883a 	mov	r4,zero
 800e480:	003fa006 	br	800e304 <__alt_data_end+0xfc00e304>
 800e484:	4811883a 	mov	r8,r9
 800e488:	3023883a 	mov	r17,r6
 800e48c:	0401ffc4 	movi	r16,2047
 800e490:	003e0706 	br	800dcb0 <__alt_data_end+0xfc00dcb0>
 800e494:	4811883a 	mov	r8,r9
 800e498:	3023883a 	mov	r17,r6
 800e49c:	003e0406 	br	800dcb0 <__alt_data_end+0xfc00dcb0>
 800e4a0:	21fff804 	addi	r7,r4,-32
 800e4a4:	01400804 	movi	r5,32
 800e4a8:	41ced83a 	srl	r7,r8,r7
 800e4ac:	21400a26 	beq	r4,r5,800e4d8 <__adddf3+0x8a4>
 800e4b0:	01401004 	movi	r5,64
 800e4b4:	2909c83a 	sub	r4,r5,r4
 800e4b8:	4108983a 	sll	r4,r8,r4
 800e4bc:	2448b03a 	or	r4,r4,r17
 800e4c0:	2008c03a 	cmpne	r4,r4,zero
 800e4c4:	3922b03a 	or	r17,r7,r4
 800e4c8:	0009883a 	mov	r4,zero
 800e4cc:	003f8d06 	br	800e304 <__alt_data_end+0xfc00e304>
 800e4d0:	0007883a 	mov	r3,zero
 800e4d4:	003fdd06 	br	800e44c <__alt_data_end+0xfc00e44c>
 800e4d8:	0009883a 	mov	r4,zero
 800e4dc:	003ff706 	br	800e4bc <__alt_data_end+0xfc00e4bc>

0800e4e0 <__divdf3>:
 800e4e0:	defff004 	addi	sp,sp,-64
 800e4e4:	dc800815 	stw	r18,32(sp)
 800e4e8:	2824d53a 	srli	r18,r5,20
 800e4ec:	dd800c15 	stw	r22,48(sp)
 800e4f0:	282cd7fa 	srli	r22,r5,31
 800e4f4:	dc000615 	stw	r16,24(sp)
 800e4f8:	04000434 	movhi	r16,16
 800e4fc:	843fffc4 	addi	r16,r16,-1
 800e500:	dfc00f15 	stw	ra,60(sp)
 800e504:	df000e15 	stw	fp,56(sp)
 800e508:	ddc00d15 	stw	r23,52(sp)
 800e50c:	dd400b15 	stw	r21,44(sp)
 800e510:	dd000a15 	stw	r20,40(sp)
 800e514:	dcc00915 	stw	r19,36(sp)
 800e518:	dc400715 	stw	r17,28(sp)
 800e51c:	9481ffcc 	andi	r18,r18,2047
 800e520:	2c20703a 	and	r16,r5,r16
 800e524:	b2003fcc 	andi	r8,r22,255
 800e528:	90006126 	beq	r18,zero,800e6b0 <__divdf3+0x1d0>
 800e52c:	0081ffc4 	movi	r2,2047
 800e530:	202b883a 	mov	r21,r4
 800e534:	90803726 	beq	r18,r2,800e614 <__divdf3+0x134>
 800e538:	80800434 	orhi	r2,r16,16
 800e53c:	100490fa 	slli	r2,r2,3
 800e540:	2020d77a 	srli	r16,r4,29
 800e544:	202a90fa 	slli	r21,r4,3
 800e548:	94bf0044 	addi	r18,r18,-1023
 800e54c:	80a0b03a 	or	r16,r16,r2
 800e550:	0013883a 	mov	r9,zero
 800e554:	000b883a 	mov	r5,zero
 800e558:	3806d53a 	srli	r3,r7,20
 800e55c:	382ed7fa 	srli	r23,r7,31
 800e560:	04400434 	movhi	r17,16
 800e564:	8c7fffc4 	addi	r17,r17,-1
 800e568:	18c1ffcc 	andi	r3,r3,2047
 800e56c:	3029883a 	mov	r20,r6
 800e570:	3c62703a 	and	r17,r7,r17
 800e574:	bf003fcc 	andi	fp,r23,255
 800e578:	18006e26 	beq	r3,zero,800e734 <__divdf3+0x254>
 800e57c:	0081ffc4 	movi	r2,2047
 800e580:	18806626 	beq	r3,r2,800e71c <__divdf3+0x23c>
 800e584:	88800434 	orhi	r2,r17,16
 800e588:	100490fa 	slli	r2,r2,3
 800e58c:	3022d77a 	srli	r17,r6,29
 800e590:	302890fa 	slli	r20,r6,3
 800e594:	18ff0044 	addi	r3,r3,-1023
 800e598:	88a2b03a 	or	r17,r17,r2
 800e59c:	000f883a 	mov	r7,zero
 800e5a0:	b5e6f03a 	xor	r19,r22,r23
 800e5a4:	3a4cb03a 	or	r6,r7,r9
 800e5a8:	008003c4 	movi	r2,15
 800e5ac:	9809883a 	mov	r4,r19
 800e5b0:	90c7c83a 	sub	r3,r18,r3
 800e5b4:	9cc03fcc 	andi	r19,r19,255
 800e5b8:	11809636 	bltu	r2,r6,800e814 <__divdf3+0x334>
 800e5bc:	300c90ba 	slli	r6,r6,2
 800e5c0:	00820074 	movhi	r2,2049
 800e5c4:	10b97504 	addi	r2,r2,-6700
 800e5c8:	308d883a 	add	r6,r6,r2
 800e5cc:	30800017 	ldw	r2,0(r6)
 800e5d0:	1000683a 	jmp	r2
 800e5d4:	0800e814 	ori	zero,at,928
 800e5d8:	0800e64c 	andi	zero,at,921
 800e5dc:	0800e804 	addi	zero,at,928
 800e5e0:	0800e640 	call	800e64 <__alt_mem_onchip_memory2_0+0x800e64>
 800e5e4:	0800e804 	addi	zero,at,928
 800e5e8:	0800e7d8 	cmpnei	zero,at,927
 800e5ec:	0800e804 	addi	zero,at,928
 800e5f0:	0800e640 	call	800e64 <__alt_mem_onchip_memory2_0+0x800e64>
 800e5f4:	0800e64c 	andi	zero,at,921
 800e5f8:	0800e64c 	andi	zero,at,921
 800e5fc:	0800e7d8 	cmpnei	zero,at,927
 800e600:	0800e640 	call	800e64 <__alt_mem_onchip_memory2_0+0x800e64>
 800e604:	0800e630 	cmpltui	zero,at,920
 800e608:	0800e630 	cmpltui	zero,at,920
 800e60c:	0800e630 	cmpltui	zero,at,920
 800e610:	0800eb9c 	xori	zero,at,942
 800e614:	2404b03a 	or	r2,r4,r16
 800e618:	10006c1e 	bne	r2,zero,800e7cc <__divdf3+0x2ec>
 800e61c:	02400204 	movi	r9,8
 800e620:	0021883a 	mov	r16,zero
 800e624:	002b883a 	mov	r21,zero
 800e628:	01400084 	movi	r5,2
 800e62c:	003fca06 	br	800e558 <__alt_data_end+0xfc00e558>
 800e630:	8023883a 	mov	r17,r16
 800e634:	a829883a 	mov	r20,r21
 800e638:	4039883a 	mov	fp,r8
 800e63c:	280f883a 	mov	r7,r5
 800e640:	00800084 	movi	r2,2
 800e644:	3881601e 	bne	r7,r2,800ebc8 <__divdf3+0x6e8>
 800e648:	e027883a 	mov	r19,fp
 800e64c:	9900004c 	andi	r4,r19,1
 800e650:	0081ffc4 	movi	r2,2047
 800e654:	0021883a 	mov	r16,zero
 800e658:	002b883a 	mov	r21,zero
 800e65c:	1004953a 	slli	r2,r2,20
 800e660:	20c03fcc 	andi	r3,r4,255
 800e664:	01400434 	movhi	r5,16
 800e668:	297fffc4 	addi	r5,r5,-1
 800e66c:	180697fa 	slli	r3,r3,31
 800e670:	8160703a 	and	r16,r16,r5
 800e674:	80a0b03a 	or	r16,r16,r2
 800e678:	80c6b03a 	or	r3,r16,r3
 800e67c:	a805883a 	mov	r2,r21
 800e680:	dfc00f17 	ldw	ra,60(sp)
 800e684:	df000e17 	ldw	fp,56(sp)
 800e688:	ddc00d17 	ldw	r23,52(sp)
 800e68c:	dd800c17 	ldw	r22,48(sp)
 800e690:	dd400b17 	ldw	r21,44(sp)
 800e694:	dd000a17 	ldw	r20,40(sp)
 800e698:	dcc00917 	ldw	r19,36(sp)
 800e69c:	dc800817 	ldw	r18,32(sp)
 800e6a0:	dc400717 	ldw	r17,28(sp)
 800e6a4:	dc000617 	ldw	r16,24(sp)
 800e6a8:	dec01004 	addi	sp,sp,64
 800e6ac:	f800283a 	ret
 800e6b0:	2404b03a 	or	r2,r4,r16
 800e6b4:	2023883a 	mov	r17,r4
 800e6b8:	10003f26 	beq	r2,zero,800e7b8 <__divdf3+0x2d8>
 800e6bc:	80015e26 	beq	r16,zero,800ec38 <__divdf3+0x758>
 800e6c0:	8009883a 	mov	r4,r16
 800e6c4:	d9800215 	stw	r6,8(sp)
 800e6c8:	d9c00515 	stw	r7,20(sp)
 800e6cc:	da000415 	stw	r8,16(sp)
 800e6d0:	80104740 	call	8010474 <__clzsi2>
 800e6d4:	d9800217 	ldw	r6,8(sp)
 800e6d8:	d9c00517 	ldw	r7,20(sp)
 800e6dc:	da000417 	ldw	r8,16(sp)
 800e6e0:	113ffd44 	addi	r4,r2,-11
 800e6e4:	00c00704 	movi	r3,28
 800e6e8:	19014f16 	blt	r3,r4,800ec28 <__divdf3+0x748>
 800e6ec:	00c00744 	movi	r3,29
 800e6f0:	157ffe04 	addi	r21,r2,-8
 800e6f4:	1907c83a 	sub	r3,r3,r4
 800e6f8:	8560983a 	sll	r16,r16,r21
 800e6fc:	88c6d83a 	srl	r3,r17,r3
 800e700:	8d6a983a 	sll	r21,r17,r21
 800e704:	1c20b03a 	or	r16,r3,r16
 800e708:	1080fcc4 	addi	r2,r2,1011
 800e70c:	00a5c83a 	sub	r18,zero,r2
 800e710:	0013883a 	mov	r9,zero
 800e714:	000b883a 	mov	r5,zero
 800e718:	003f8f06 	br	800e558 <__alt_data_end+0xfc00e558>
 800e71c:	3444b03a 	or	r2,r6,r17
 800e720:	1000231e 	bne	r2,zero,800e7b0 <__divdf3+0x2d0>
 800e724:	0023883a 	mov	r17,zero
 800e728:	0029883a 	mov	r20,zero
 800e72c:	01c00084 	movi	r7,2
 800e730:	003f9b06 	br	800e5a0 <__alt_data_end+0xfc00e5a0>
 800e734:	3444b03a 	or	r2,r6,r17
 800e738:	10001926 	beq	r2,zero,800e7a0 <__divdf3+0x2c0>
 800e73c:	88014b26 	beq	r17,zero,800ec6c <__divdf3+0x78c>
 800e740:	8809883a 	mov	r4,r17
 800e744:	d9400115 	stw	r5,4(sp)
 800e748:	d9800215 	stw	r6,8(sp)
 800e74c:	da000415 	stw	r8,16(sp)
 800e750:	da400315 	stw	r9,12(sp)
 800e754:	80104740 	call	8010474 <__clzsi2>
 800e758:	d9400117 	ldw	r5,4(sp)
 800e75c:	d9800217 	ldw	r6,8(sp)
 800e760:	da000417 	ldw	r8,16(sp)
 800e764:	da400317 	ldw	r9,12(sp)
 800e768:	113ffd44 	addi	r4,r2,-11
 800e76c:	00c00704 	movi	r3,28
 800e770:	19013a16 	blt	r3,r4,800ec5c <__divdf3+0x77c>
 800e774:	00c00744 	movi	r3,29
 800e778:	153ffe04 	addi	r20,r2,-8
 800e77c:	1907c83a 	sub	r3,r3,r4
 800e780:	8d22983a 	sll	r17,r17,r20
 800e784:	30c6d83a 	srl	r3,r6,r3
 800e788:	3528983a 	sll	r20,r6,r20
 800e78c:	1c62b03a 	or	r17,r3,r17
 800e790:	1080fcc4 	addi	r2,r2,1011
 800e794:	0087c83a 	sub	r3,zero,r2
 800e798:	000f883a 	mov	r7,zero
 800e79c:	003f8006 	br	800e5a0 <__alt_data_end+0xfc00e5a0>
 800e7a0:	0023883a 	mov	r17,zero
 800e7a4:	0029883a 	mov	r20,zero
 800e7a8:	01c00044 	movi	r7,1
 800e7ac:	003f7c06 	br	800e5a0 <__alt_data_end+0xfc00e5a0>
 800e7b0:	01c000c4 	movi	r7,3
 800e7b4:	003f7a06 	br	800e5a0 <__alt_data_end+0xfc00e5a0>
 800e7b8:	02400104 	movi	r9,4
 800e7bc:	0021883a 	mov	r16,zero
 800e7c0:	002b883a 	mov	r21,zero
 800e7c4:	01400044 	movi	r5,1
 800e7c8:	003f6306 	br	800e558 <__alt_data_end+0xfc00e558>
 800e7cc:	02400304 	movi	r9,12
 800e7d0:	014000c4 	movi	r5,3
 800e7d4:	003f6006 	br	800e558 <__alt_data_end+0xfc00e558>
 800e7d8:	04000434 	movhi	r16,16
 800e7dc:	0009883a 	mov	r4,zero
 800e7e0:	843fffc4 	addi	r16,r16,-1
 800e7e4:	057fffc4 	movi	r21,-1
 800e7e8:	0081ffc4 	movi	r2,2047
 800e7ec:	003f9b06 	br	800e65c <__alt_data_end+0xfc00e65c>
 800e7f0:	00c00044 	movi	r3,1
 800e7f4:	1887c83a 	sub	r3,r3,r2
 800e7f8:	01000e04 	movi	r4,56
 800e7fc:	20c1530e 	bge	r4,r3,800ed4c <__divdf3+0x86c>
 800e800:	9900004c 	andi	r4,r19,1
 800e804:	0005883a 	mov	r2,zero
 800e808:	0021883a 	mov	r16,zero
 800e80c:	002b883a 	mov	r21,zero
 800e810:	003f9206 	br	800e65c <__alt_data_end+0xfc00e65c>
 800e814:	8c012e36 	bltu	r17,r16,800ecd0 <__divdf3+0x7f0>
 800e818:	84412c26 	beq	r16,r17,800eccc <__divdf3+0x7ec>
 800e81c:	a82f883a 	mov	r23,r21
 800e820:	18ffffc4 	addi	r3,r3,-1
 800e824:	002b883a 	mov	r21,zero
 800e828:	a004d63a 	srli	r2,r20,24
 800e82c:	8822923a 	slli	r17,r17,8
 800e830:	a028923a 	slli	r20,r20,8
 800e834:	8009883a 	mov	r4,r16
 800e838:	88acb03a 	or	r22,r17,r2
 800e83c:	dd000015 	stw	r20,0(sp)
 800e840:	b028d43a 	srli	r20,r22,16
 800e844:	d8c00215 	stw	r3,8(sp)
 800e848:	b4bfffcc 	andi	r18,r22,65535
 800e84c:	a00b883a 	mov	r5,r20
 800e850:	80036900 	call	8003690 <__udivsi3>
 800e854:	100b883a 	mov	r5,r2
 800e858:	9009883a 	mov	r4,r18
 800e85c:	1023883a 	mov	r17,r2
 800e860:	800374c0 	call	800374c <__mulsi3>
 800e864:	8009883a 	mov	r4,r16
 800e868:	a00b883a 	mov	r5,r20
 800e86c:	1039883a 	mov	fp,r2
 800e870:	80036f40 	call	80036f4 <__umodsi3>
 800e874:	1004943a 	slli	r2,r2,16
 800e878:	b808d43a 	srli	r4,r23,16
 800e87c:	d8c00217 	ldw	r3,8(sp)
 800e880:	2084b03a 	or	r2,r4,r2
 800e884:	1700062e 	bgeu	r2,fp,800e8a0 <__divdf3+0x3c0>
 800e888:	1585883a 	add	r2,r2,r22
 800e88c:	893fffc4 	addi	r4,r17,-1
 800e890:	15811d36 	bltu	r2,r22,800ed08 <__divdf3+0x828>
 800e894:	17011c2e 	bgeu	r2,fp,800ed08 <__divdf3+0x828>
 800e898:	8c7fff84 	addi	r17,r17,-2
 800e89c:	1585883a 	add	r2,r2,r22
 800e8a0:	1739c83a 	sub	fp,r2,fp
 800e8a4:	a00b883a 	mov	r5,r20
 800e8a8:	e009883a 	mov	r4,fp
 800e8ac:	d8c00215 	stw	r3,8(sp)
 800e8b0:	80036900 	call	8003690 <__udivsi3>
 800e8b4:	100b883a 	mov	r5,r2
 800e8b8:	9009883a 	mov	r4,r18
 800e8bc:	1021883a 	mov	r16,r2
 800e8c0:	800374c0 	call	800374c <__mulsi3>
 800e8c4:	a00b883a 	mov	r5,r20
 800e8c8:	e009883a 	mov	r4,fp
 800e8cc:	d8800415 	stw	r2,16(sp)
 800e8d0:	80036f40 	call	80036f4 <__umodsi3>
 800e8d4:	1004943a 	slli	r2,r2,16
 800e8d8:	da000417 	ldw	r8,16(sp)
 800e8dc:	bdffffcc 	andi	r23,r23,65535
 800e8e0:	b884b03a 	or	r2,r23,r2
 800e8e4:	d8c00217 	ldw	r3,8(sp)
 800e8e8:	1200062e 	bgeu	r2,r8,800e904 <__divdf3+0x424>
 800e8ec:	1585883a 	add	r2,r2,r22
 800e8f0:	813fffc4 	addi	r4,r16,-1
 800e8f4:	15810236 	bltu	r2,r22,800ed00 <__divdf3+0x820>
 800e8f8:	1201012e 	bgeu	r2,r8,800ed00 <__divdf3+0x820>
 800e8fc:	843fff84 	addi	r16,r16,-2
 800e900:	1585883a 	add	r2,r2,r22
 800e904:	8822943a 	slli	r17,r17,16
 800e908:	d9800017 	ldw	r6,0(sp)
 800e90c:	1211c83a 	sub	r8,r2,r8
 800e910:	8c22b03a 	or	r17,r17,r16
 800e914:	373fffcc 	andi	fp,r6,65535
 800e918:	8abfffcc 	andi	r10,r17,65535
 800e91c:	8820d43a 	srli	r16,r17,16
 800e920:	5009883a 	mov	r4,r10
 800e924:	e00b883a 	mov	r5,fp
 800e928:	302ed43a 	srli	r23,r6,16
 800e92c:	d8c00215 	stw	r3,8(sp)
 800e930:	da000415 	stw	r8,16(sp)
 800e934:	da800115 	stw	r10,4(sp)
 800e938:	800374c0 	call	800374c <__mulsi3>
 800e93c:	800b883a 	mov	r5,r16
 800e940:	e009883a 	mov	r4,fp
 800e944:	d8800515 	stw	r2,20(sp)
 800e948:	800374c0 	call	800374c <__mulsi3>
 800e94c:	8009883a 	mov	r4,r16
 800e950:	b80b883a 	mov	r5,r23
 800e954:	d8800315 	stw	r2,12(sp)
 800e958:	800374c0 	call	800374c <__mulsi3>
 800e95c:	da800117 	ldw	r10,4(sp)
 800e960:	b80b883a 	mov	r5,r23
 800e964:	1021883a 	mov	r16,r2
 800e968:	5009883a 	mov	r4,r10
 800e96c:	800374c0 	call	800374c <__mulsi3>
 800e970:	d9c00517 	ldw	r7,20(sp)
 800e974:	da400317 	ldw	r9,12(sp)
 800e978:	d8c00217 	ldw	r3,8(sp)
 800e97c:	3808d43a 	srli	r4,r7,16
 800e980:	1245883a 	add	r2,r2,r9
 800e984:	da000417 	ldw	r8,16(sp)
 800e988:	2085883a 	add	r2,r4,r2
 800e98c:	1240022e 	bgeu	r2,r9,800e998 <__divdf3+0x4b8>
 800e990:	01000074 	movhi	r4,1
 800e994:	8121883a 	add	r16,r16,r4
 800e998:	1008d43a 	srli	r4,r2,16
 800e99c:	1004943a 	slli	r2,r2,16
 800e9a0:	39ffffcc 	andi	r7,r7,65535
 800e9a4:	2409883a 	add	r4,r4,r16
 800e9a8:	11c5883a 	add	r2,r2,r7
 800e9ac:	4100bb36 	bltu	r8,r4,800ec9c <__divdf3+0x7bc>
 800e9b0:	4100d726 	beq	r8,r4,800ed10 <__divdf3+0x830>
 800e9b4:	4109c83a 	sub	r4,r8,r4
 800e9b8:	a8a1c83a 	sub	r16,r21,r2
 800e9bc:	ac2b803a 	cmpltu	r21,r21,r16
 800e9c0:	256bc83a 	sub	r21,r4,r21
 800e9c4:	b540d926 	beq	r22,r21,800ed2c <__divdf3+0x84c>
 800e9c8:	a00b883a 	mov	r5,r20
 800e9cc:	a809883a 	mov	r4,r21
 800e9d0:	d8c00215 	stw	r3,8(sp)
 800e9d4:	80036900 	call	8003690 <__udivsi3>
 800e9d8:	100b883a 	mov	r5,r2
 800e9dc:	9009883a 	mov	r4,r18
 800e9e0:	d8800515 	stw	r2,20(sp)
 800e9e4:	800374c0 	call	800374c <__mulsi3>
 800e9e8:	a809883a 	mov	r4,r21
 800e9ec:	a00b883a 	mov	r5,r20
 800e9f0:	d8800415 	stw	r2,16(sp)
 800e9f4:	80036f40 	call	80036f4 <__umodsi3>
 800e9f8:	1004943a 	slli	r2,r2,16
 800e9fc:	8008d43a 	srli	r4,r16,16
 800ea00:	da000417 	ldw	r8,16(sp)
 800ea04:	d8c00217 	ldw	r3,8(sp)
 800ea08:	2084b03a 	or	r2,r4,r2
 800ea0c:	d9c00517 	ldw	r7,20(sp)
 800ea10:	1200062e 	bgeu	r2,r8,800ea2c <__divdf3+0x54c>
 800ea14:	1585883a 	add	r2,r2,r22
 800ea18:	393fffc4 	addi	r4,r7,-1
 800ea1c:	1580c536 	bltu	r2,r22,800ed34 <__divdf3+0x854>
 800ea20:	1200c42e 	bgeu	r2,r8,800ed34 <__divdf3+0x854>
 800ea24:	39ffff84 	addi	r7,r7,-2
 800ea28:	1585883a 	add	r2,r2,r22
 800ea2c:	122bc83a 	sub	r21,r2,r8
 800ea30:	a00b883a 	mov	r5,r20
 800ea34:	a809883a 	mov	r4,r21
 800ea38:	d8c00215 	stw	r3,8(sp)
 800ea3c:	d9c00515 	stw	r7,20(sp)
 800ea40:	80036900 	call	8003690 <__udivsi3>
 800ea44:	9009883a 	mov	r4,r18
 800ea48:	100b883a 	mov	r5,r2
 800ea4c:	d8800415 	stw	r2,16(sp)
 800ea50:	800374c0 	call	800374c <__mulsi3>
 800ea54:	a809883a 	mov	r4,r21
 800ea58:	a00b883a 	mov	r5,r20
 800ea5c:	1025883a 	mov	r18,r2
 800ea60:	80036f40 	call	80036f4 <__umodsi3>
 800ea64:	1004943a 	slli	r2,r2,16
 800ea68:	813fffcc 	andi	r4,r16,65535
 800ea6c:	d8c00217 	ldw	r3,8(sp)
 800ea70:	20a0b03a 	or	r16,r4,r2
 800ea74:	d9c00517 	ldw	r7,20(sp)
 800ea78:	da000417 	ldw	r8,16(sp)
 800ea7c:	8480062e 	bgeu	r16,r18,800ea98 <__divdf3+0x5b8>
 800ea80:	85a1883a 	add	r16,r16,r22
 800ea84:	40bfffc4 	addi	r2,r8,-1
 800ea88:	8580ac36 	bltu	r16,r22,800ed3c <__divdf3+0x85c>
 800ea8c:	8480ab2e 	bgeu	r16,r18,800ed3c <__divdf3+0x85c>
 800ea90:	423fff84 	addi	r8,r8,-2
 800ea94:	85a1883a 	add	r16,r16,r22
 800ea98:	3804943a 	slli	r2,r7,16
 800ea9c:	84a1c83a 	sub	r16,r16,r18
 800eaa0:	e009883a 	mov	r4,fp
 800eaa4:	1228b03a 	or	r20,r2,r8
 800eaa8:	a1ffffcc 	andi	r7,r20,65535
 800eaac:	a024d43a 	srli	r18,r20,16
 800eab0:	380b883a 	mov	r5,r7
 800eab4:	d8c00215 	stw	r3,8(sp)
 800eab8:	d9c00515 	stw	r7,20(sp)
 800eabc:	800374c0 	call	800374c <__mulsi3>
 800eac0:	900b883a 	mov	r5,r18
 800eac4:	e009883a 	mov	r4,fp
 800eac8:	102b883a 	mov	r21,r2
 800eacc:	800374c0 	call	800374c <__mulsi3>
 800ead0:	900b883a 	mov	r5,r18
 800ead4:	b809883a 	mov	r4,r23
 800ead8:	1039883a 	mov	fp,r2
 800eadc:	800374c0 	call	800374c <__mulsi3>
 800eae0:	d9c00517 	ldw	r7,20(sp)
 800eae4:	b80b883a 	mov	r5,r23
 800eae8:	1025883a 	mov	r18,r2
 800eaec:	3809883a 	mov	r4,r7
 800eaf0:	800374c0 	call	800374c <__mulsi3>
 800eaf4:	a808d43a 	srli	r4,r21,16
 800eaf8:	1705883a 	add	r2,r2,fp
 800eafc:	d8c00217 	ldw	r3,8(sp)
 800eb00:	2085883a 	add	r2,r4,r2
 800eb04:	1700022e 	bgeu	r2,fp,800eb10 <__divdf3+0x630>
 800eb08:	01000074 	movhi	r4,1
 800eb0c:	9125883a 	add	r18,r18,r4
 800eb10:	1008d43a 	srli	r4,r2,16
 800eb14:	1004943a 	slli	r2,r2,16
 800eb18:	ad7fffcc 	andi	r21,r21,65535
 800eb1c:	2489883a 	add	r4,r4,r18
 800eb20:	1545883a 	add	r2,r2,r21
 800eb24:	81003836 	bltu	r16,r4,800ec08 <__divdf3+0x728>
 800eb28:	81003626 	beq	r16,r4,800ec04 <__divdf3+0x724>
 800eb2c:	a5000054 	ori	r20,r20,1
 800eb30:	1880ffc4 	addi	r2,r3,1023
 800eb34:	00bf2e0e 	bge	zero,r2,800e7f0 <__alt_data_end+0xfc00e7f0>
 800eb38:	a10001cc 	andi	r4,r20,7
 800eb3c:	20000726 	beq	r4,zero,800eb5c <__divdf3+0x67c>
 800eb40:	a10003cc 	andi	r4,r20,15
 800eb44:	01400104 	movi	r5,4
 800eb48:	21400426 	beq	r4,r5,800eb5c <__divdf3+0x67c>
 800eb4c:	a149883a 	add	r4,r20,r5
 800eb50:	2529803a 	cmpltu	r20,r4,r20
 800eb54:	8d23883a 	add	r17,r17,r20
 800eb58:	2029883a 	mov	r20,r4
 800eb5c:	8900402c 	andhi	r4,r17,256
 800eb60:	20000426 	beq	r4,zero,800eb74 <__divdf3+0x694>
 800eb64:	18810004 	addi	r2,r3,1024
 800eb68:	00ffc034 	movhi	r3,65280
 800eb6c:	18ffffc4 	addi	r3,r3,-1
 800eb70:	88e2703a 	and	r17,r17,r3
 800eb74:	00c1ff84 	movi	r3,2046
 800eb78:	18beb416 	blt	r3,r2,800e64c <__alt_data_end+0xfc00e64c>
 800eb7c:	a028d0fa 	srli	r20,r20,3
 800eb80:	882a977a 	slli	r21,r17,29
 800eb84:	8820927a 	slli	r16,r17,9
 800eb88:	1081ffcc 	andi	r2,r2,2047
 800eb8c:	ad2ab03a 	or	r21,r21,r20
 800eb90:	8020d33a 	srli	r16,r16,12
 800eb94:	9900004c 	andi	r4,r19,1
 800eb98:	003eb006 	br	800e65c <__alt_data_end+0xfc00e65c>
 800eb9c:	8080022c 	andhi	r2,r16,8
 800eba0:	10001226 	beq	r2,zero,800ebec <__divdf3+0x70c>
 800eba4:	8880022c 	andhi	r2,r17,8
 800eba8:	1000101e 	bne	r2,zero,800ebec <__divdf3+0x70c>
 800ebac:	00800434 	movhi	r2,16
 800ebb0:	8c000234 	orhi	r16,r17,8
 800ebb4:	10bfffc4 	addi	r2,r2,-1
 800ebb8:	b809883a 	mov	r4,r23
 800ebbc:	80a0703a 	and	r16,r16,r2
 800ebc0:	a02b883a 	mov	r21,r20
 800ebc4:	003f0806 	br	800e7e8 <__alt_data_end+0xfc00e7e8>
 800ebc8:	008000c4 	movi	r2,3
 800ebcc:	3880b126 	beq	r7,r2,800ee94 <__divdf3+0x9b4>
 800ebd0:	00800044 	movi	r2,1
 800ebd4:	38805b1e 	bne	r7,r2,800ed44 <__divdf3+0x864>
 800ebd8:	e009883a 	mov	r4,fp
 800ebdc:	0005883a 	mov	r2,zero
 800ebe0:	0021883a 	mov	r16,zero
 800ebe4:	002b883a 	mov	r21,zero
 800ebe8:	003e9c06 	br	800e65c <__alt_data_end+0xfc00e65c>
 800ebec:	00800434 	movhi	r2,16
 800ebf0:	84000234 	orhi	r16,r16,8
 800ebf4:	10bfffc4 	addi	r2,r2,-1
 800ebf8:	b009883a 	mov	r4,r22
 800ebfc:	80a0703a 	and	r16,r16,r2
 800ec00:	003ef906 	br	800e7e8 <__alt_data_end+0xfc00e7e8>
 800ec04:	103fca26 	beq	r2,zero,800eb30 <__alt_data_end+0xfc00eb30>
 800ec08:	b421883a 	add	r16,r22,r16
 800ec0c:	a17fffc4 	addi	r5,r20,-1
 800ec10:	8580422e 	bgeu	r16,r22,800ed1c <__divdf3+0x83c>
 800ec14:	2829883a 	mov	r20,r5
 800ec18:	813fc41e 	bne	r16,r4,800eb2c <__alt_data_end+0xfc00eb2c>
 800ec1c:	d9800017 	ldw	r6,0(sp)
 800ec20:	30bfc21e 	bne	r6,r2,800eb2c <__alt_data_end+0xfc00eb2c>
 800ec24:	003fc206 	br	800eb30 <__alt_data_end+0xfc00eb30>
 800ec28:	143ff604 	addi	r16,r2,-40
 800ec2c:	8c20983a 	sll	r16,r17,r16
 800ec30:	002b883a 	mov	r21,zero
 800ec34:	003eb406 	br	800e708 <__alt_data_end+0xfc00e708>
 800ec38:	d9800215 	stw	r6,8(sp)
 800ec3c:	d9c00515 	stw	r7,20(sp)
 800ec40:	da000415 	stw	r8,16(sp)
 800ec44:	80104740 	call	8010474 <__clzsi2>
 800ec48:	10800804 	addi	r2,r2,32
 800ec4c:	da000417 	ldw	r8,16(sp)
 800ec50:	d9c00517 	ldw	r7,20(sp)
 800ec54:	d9800217 	ldw	r6,8(sp)
 800ec58:	003ea106 	br	800e6e0 <__alt_data_end+0xfc00e6e0>
 800ec5c:	147ff604 	addi	r17,r2,-40
 800ec60:	3462983a 	sll	r17,r6,r17
 800ec64:	0029883a 	mov	r20,zero
 800ec68:	003ec906 	br	800e790 <__alt_data_end+0xfc00e790>
 800ec6c:	3009883a 	mov	r4,r6
 800ec70:	d9400115 	stw	r5,4(sp)
 800ec74:	d9800215 	stw	r6,8(sp)
 800ec78:	da000415 	stw	r8,16(sp)
 800ec7c:	da400315 	stw	r9,12(sp)
 800ec80:	80104740 	call	8010474 <__clzsi2>
 800ec84:	10800804 	addi	r2,r2,32
 800ec88:	da400317 	ldw	r9,12(sp)
 800ec8c:	da000417 	ldw	r8,16(sp)
 800ec90:	d9800217 	ldw	r6,8(sp)
 800ec94:	d9400117 	ldw	r5,4(sp)
 800ec98:	003eb306 	br	800e768 <__alt_data_end+0xfc00e768>
 800ec9c:	d9800017 	ldw	r6,0(sp)
 800eca0:	a9ab883a 	add	r21,r21,r6
 800eca4:	a98b803a 	cmpltu	r5,r21,r6
 800eca8:	2d8b883a 	add	r5,r5,r22
 800ecac:	2a11883a 	add	r8,r5,r8
 800ecb0:	897fffc4 	addi	r5,r17,-1
 800ecb4:	b2000c2e 	bgeu	r22,r8,800ece8 <__divdf3+0x808>
 800ecb8:	41003f36 	bltu	r8,r4,800edb8 <__divdf3+0x8d8>
 800ecbc:	22006c26 	beq	r4,r8,800ee70 <__divdf3+0x990>
 800ecc0:	4109c83a 	sub	r4,r8,r4
 800ecc4:	2823883a 	mov	r17,r5
 800ecc8:	003f3b06 	br	800e9b8 <__alt_data_end+0xfc00e9b8>
 800eccc:	ad3ed336 	bltu	r21,r20,800e81c <__alt_data_end+0xfc00e81c>
 800ecd0:	a804d07a 	srli	r2,r21,1
 800ecd4:	802e97fa 	slli	r23,r16,31
 800ecd8:	a82a97fa 	slli	r21,r21,31
 800ecdc:	8020d07a 	srli	r16,r16,1
 800ece0:	b8aeb03a 	or	r23,r23,r2
 800ece4:	003ed006 	br	800e828 <__alt_data_end+0xfc00e828>
 800ece8:	b23ff51e 	bne	r22,r8,800ecc0 <__alt_data_end+0xfc00ecc0>
 800ecec:	d9800017 	ldw	r6,0(sp)
 800ecf0:	a9bff12e 	bgeu	r21,r6,800ecb8 <__alt_data_end+0xfc00ecb8>
 800ecf4:	b109c83a 	sub	r4,r22,r4
 800ecf8:	2823883a 	mov	r17,r5
 800ecfc:	003f2e06 	br	800e9b8 <__alt_data_end+0xfc00e9b8>
 800ed00:	2021883a 	mov	r16,r4
 800ed04:	003eff06 	br	800e904 <__alt_data_end+0xfc00e904>
 800ed08:	2023883a 	mov	r17,r4
 800ed0c:	003ee406 	br	800e8a0 <__alt_data_end+0xfc00e8a0>
 800ed10:	a8bfe236 	bltu	r21,r2,800ec9c <__alt_data_end+0xfc00ec9c>
 800ed14:	0009883a 	mov	r4,zero
 800ed18:	003f2706 	br	800e9b8 <__alt_data_end+0xfc00e9b8>
 800ed1c:	81002d36 	bltu	r16,r4,800edd4 <__divdf3+0x8f4>
 800ed20:	24005626 	beq	r4,r16,800ee7c <__divdf3+0x99c>
 800ed24:	2829883a 	mov	r20,r5
 800ed28:	003f8006 	br	800eb2c <__alt_data_end+0xfc00eb2c>
 800ed2c:	053fffc4 	movi	r20,-1
 800ed30:	003f7f06 	br	800eb30 <__alt_data_end+0xfc00eb30>
 800ed34:	200f883a 	mov	r7,r4
 800ed38:	003f3c06 	br	800ea2c <__alt_data_end+0xfc00ea2c>
 800ed3c:	1011883a 	mov	r8,r2
 800ed40:	003f5506 	br	800ea98 <__alt_data_end+0xfc00ea98>
 800ed44:	e027883a 	mov	r19,fp
 800ed48:	003f7906 	br	800eb30 <__alt_data_end+0xfc00eb30>
 800ed4c:	010007c4 	movi	r4,31
 800ed50:	20c02816 	blt	r4,r3,800edf4 <__divdf3+0x914>
 800ed54:	00800804 	movi	r2,32
 800ed58:	10c5c83a 	sub	r2,r2,r3
 800ed5c:	888a983a 	sll	r5,r17,r2
 800ed60:	a0c8d83a 	srl	r4,r20,r3
 800ed64:	a084983a 	sll	r2,r20,r2
 800ed68:	88e2d83a 	srl	r17,r17,r3
 800ed6c:	2906b03a 	or	r3,r5,r4
 800ed70:	1004c03a 	cmpne	r2,r2,zero
 800ed74:	1886b03a 	or	r3,r3,r2
 800ed78:	188001cc 	andi	r2,r3,7
 800ed7c:	10000726 	beq	r2,zero,800ed9c <__divdf3+0x8bc>
 800ed80:	188003cc 	andi	r2,r3,15
 800ed84:	01000104 	movi	r4,4
 800ed88:	11000426 	beq	r2,r4,800ed9c <__divdf3+0x8bc>
 800ed8c:	1805883a 	mov	r2,r3
 800ed90:	10c00104 	addi	r3,r2,4
 800ed94:	1885803a 	cmpltu	r2,r3,r2
 800ed98:	88a3883a 	add	r17,r17,r2
 800ed9c:	8880202c 	andhi	r2,r17,128
 800eda0:	10002926 	beq	r2,zero,800ee48 <__divdf3+0x968>
 800eda4:	9900004c 	andi	r4,r19,1
 800eda8:	00800044 	movi	r2,1
 800edac:	0021883a 	mov	r16,zero
 800edb0:	002b883a 	mov	r21,zero
 800edb4:	003e2906 	br	800e65c <__alt_data_end+0xfc00e65c>
 800edb8:	d9800017 	ldw	r6,0(sp)
 800edbc:	8c7fff84 	addi	r17,r17,-2
 800edc0:	a9ab883a 	add	r21,r21,r6
 800edc4:	a98b803a 	cmpltu	r5,r21,r6
 800edc8:	2d8b883a 	add	r5,r5,r22
 800edcc:	2a11883a 	add	r8,r5,r8
 800edd0:	003ef806 	br	800e9b4 <__alt_data_end+0xfc00e9b4>
 800edd4:	d9800017 	ldw	r6,0(sp)
 800edd8:	318f883a 	add	r7,r6,r6
 800eddc:	398b803a 	cmpltu	r5,r7,r6
 800ede0:	2d8d883a 	add	r6,r5,r22
 800ede4:	81a1883a 	add	r16,r16,r6
 800ede8:	a17fff84 	addi	r5,r20,-2
 800edec:	d9c00015 	stw	r7,0(sp)
 800edf0:	003f8806 	br	800ec14 <__alt_data_end+0xfc00ec14>
 800edf4:	013ff844 	movi	r4,-31
 800edf8:	2085c83a 	sub	r2,r4,r2
 800edfc:	8888d83a 	srl	r4,r17,r2
 800ee00:	00800804 	movi	r2,32
 800ee04:	18802126 	beq	r3,r2,800ee8c <__divdf3+0x9ac>
 800ee08:	04001004 	movi	r16,64
 800ee0c:	80c7c83a 	sub	r3,r16,r3
 800ee10:	88e0983a 	sll	r16,r17,r3
 800ee14:	8504b03a 	or	r2,r16,r20
 800ee18:	1004c03a 	cmpne	r2,r2,zero
 800ee1c:	2084b03a 	or	r2,r4,r2
 800ee20:	144001cc 	andi	r17,r2,7
 800ee24:	88000d1e 	bne	r17,zero,800ee5c <__divdf3+0x97c>
 800ee28:	0021883a 	mov	r16,zero
 800ee2c:	102ad0fa 	srli	r21,r2,3
 800ee30:	9900004c 	andi	r4,r19,1
 800ee34:	0005883a 	mov	r2,zero
 800ee38:	ac6ab03a 	or	r21,r21,r17
 800ee3c:	003e0706 	br	800e65c <__alt_data_end+0xfc00e65c>
 800ee40:	1007883a 	mov	r3,r2
 800ee44:	0023883a 	mov	r17,zero
 800ee48:	8820927a 	slli	r16,r17,9
 800ee4c:	1805883a 	mov	r2,r3
 800ee50:	8822977a 	slli	r17,r17,29
 800ee54:	8020d33a 	srli	r16,r16,12
 800ee58:	003ff406 	br	800ee2c <__alt_data_end+0xfc00ee2c>
 800ee5c:	10c003cc 	andi	r3,r2,15
 800ee60:	01000104 	movi	r4,4
 800ee64:	193ff626 	beq	r3,r4,800ee40 <__alt_data_end+0xfc00ee40>
 800ee68:	0023883a 	mov	r17,zero
 800ee6c:	003fc806 	br	800ed90 <__alt_data_end+0xfc00ed90>
 800ee70:	a8bfd136 	bltu	r21,r2,800edb8 <__alt_data_end+0xfc00edb8>
 800ee74:	2823883a 	mov	r17,r5
 800ee78:	003fa606 	br	800ed14 <__alt_data_end+0xfc00ed14>
 800ee7c:	d9800017 	ldw	r6,0(sp)
 800ee80:	30bfd436 	bltu	r6,r2,800edd4 <__alt_data_end+0xfc00edd4>
 800ee84:	2829883a 	mov	r20,r5
 800ee88:	003f6406 	br	800ec1c <__alt_data_end+0xfc00ec1c>
 800ee8c:	0021883a 	mov	r16,zero
 800ee90:	003fe006 	br	800ee14 <__alt_data_end+0xfc00ee14>
 800ee94:	00800434 	movhi	r2,16
 800ee98:	8c000234 	orhi	r16,r17,8
 800ee9c:	10bfffc4 	addi	r2,r2,-1
 800eea0:	e009883a 	mov	r4,fp
 800eea4:	80a0703a 	and	r16,r16,r2
 800eea8:	a02b883a 	mov	r21,r20
 800eeac:	003e4e06 	br	800e7e8 <__alt_data_end+0xfc00e7e8>

0800eeb0 <__eqdf2>:
 800eeb0:	2804d53a 	srli	r2,r5,20
 800eeb4:	3806d53a 	srli	r3,r7,20
 800eeb8:	02000434 	movhi	r8,16
 800eebc:	423fffc4 	addi	r8,r8,-1
 800eec0:	1081ffcc 	andi	r2,r2,2047
 800eec4:	0281ffc4 	movi	r10,2047
 800eec8:	2a12703a 	and	r9,r5,r8
 800eecc:	18c1ffcc 	andi	r3,r3,2047
 800eed0:	3a10703a 	and	r8,r7,r8
 800eed4:	280ad7fa 	srli	r5,r5,31
 800eed8:	380ed7fa 	srli	r7,r7,31
 800eedc:	12801026 	beq	r2,r10,800ef20 <__eqdf2+0x70>
 800eee0:	0281ffc4 	movi	r10,2047
 800eee4:	1a800a26 	beq	r3,r10,800ef10 <__eqdf2+0x60>
 800eee8:	10c00226 	beq	r2,r3,800eef4 <__eqdf2+0x44>
 800eeec:	00800044 	movi	r2,1
 800eef0:	f800283a 	ret
 800eef4:	4a3ffd1e 	bne	r9,r8,800eeec <__alt_data_end+0xfc00eeec>
 800eef8:	21bffc1e 	bne	r4,r6,800eeec <__alt_data_end+0xfc00eeec>
 800eefc:	29c00c26 	beq	r5,r7,800ef30 <__eqdf2+0x80>
 800ef00:	103ffa1e 	bne	r2,zero,800eeec <__alt_data_end+0xfc00eeec>
 800ef04:	2244b03a 	or	r2,r4,r9
 800ef08:	1004c03a 	cmpne	r2,r2,zero
 800ef0c:	f800283a 	ret
 800ef10:	3214b03a 	or	r10,r6,r8
 800ef14:	503ff426 	beq	r10,zero,800eee8 <__alt_data_end+0xfc00eee8>
 800ef18:	00800044 	movi	r2,1
 800ef1c:	f800283a 	ret
 800ef20:	2254b03a 	or	r10,r4,r9
 800ef24:	503fee26 	beq	r10,zero,800eee0 <__alt_data_end+0xfc00eee0>
 800ef28:	00800044 	movi	r2,1
 800ef2c:	f800283a 	ret
 800ef30:	0005883a 	mov	r2,zero
 800ef34:	f800283a 	ret

0800ef38 <__gedf2>:
 800ef38:	2804d53a 	srli	r2,r5,20
 800ef3c:	3806d53a 	srli	r3,r7,20
 800ef40:	02000434 	movhi	r8,16
 800ef44:	423fffc4 	addi	r8,r8,-1
 800ef48:	1081ffcc 	andi	r2,r2,2047
 800ef4c:	0241ffc4 	movi	r9,2047
 800ef50:	2a14703a 	and	r10,r5,r8
 800ef54:	18c1ffcc 	andi	r3,r3,2047
 800ef58:	3a10703a 	and	r8,r7,r8
 800ef5c:	280ad7fa 	srli	r5,r5,31
 800ef60:	380ed7fa 	srli	r7,r7,31
 800ef64:	12401d26 	beq	r2,r9,800efdc <__gedf2+0xa4>
 800ef68:	0241ffc4 	movi	r9,2047
 800ef6c:	1a401226 	beq	r3,r9,800efb8 <__gedf2+0x80>
 800ef70:	1000081e 	bne	r2,zero,800ef94 <__gedf2+0x5c>
 800ef74:	2296b03a 	or	r11,r4,r10
 800ef78:	5813003a 	cmpeq	r9,r11,zero
 800ef7c:	1800091e 	bne	r3,zero,800efa4 <__gedf2+0x6c>
 800ef80:	3218b03a 	or	r12,r6,r8
 800ef84:	6000071e 	bne	r12,zero,800efa4 <__gedf2+0x6c>
 800ef88:	0005883a 	mov	r2,zero
 800ef8c:	5800101e 	bne	r11,zero,800efd0 <__gedf2+0x98>
 800ef90:	f800283a 	ret
 800ef94:	18000c1e 	bne	r3,zero,800efc8 <__gedf2+0x90>
 800ef98:	3212b03a 	or	r9,r6,r8
 800ef9c:	48000c26 	beq	r9,zero,800efd0 <__gedf2+0x98>
 800efa0:	0013883a 	mov	r9,zero
 800efa4:	39c03fcc 	andi	r7,r7,255
 800efa8:	48000826 	beq	r9,zero,800efcc <__gedf2+0x94>
 800efac:	38000926 	beq	r7,zero,800efd4 <__gedf2+0x9c>
 800efb0:	00800044 	movi	r2,1
 800efb4:	f800283a 	ret
 800efb8:	3212b03a 	or	r9,r6,r8
 800efbc:	483fec26 	beq	r9,zero,800ef70 <__alt_data_end+0xfc00ef70>
 800efc0:	00bfff84 	movi	r2,-2
 800efc4:	f800283a 	ret
 800efc8:	39c03fcc 	andi	r7,r7,255
 800efcc:	29c00626 	beq	r5,r7,800efe8 <__gedf2+0xb0>
 800efd0:	283ff726 	beq	r5,zero,800efb0 <__alt_data_end+0xfc00efb0>
 800efd4:	00bfffc4 	movi	r2,-1
 800efd8:	f800283a 	ret
 800efdc:	2292b03a 	or	r9,r4,r10
 800efe0:	483fe126 	beq	r9,zero,800ef68 <__alt_data_end+0xfc00ef68>
 800efe4:	003ff606 	br	800efc0 <__alt_data_end+0xfc00efc0>
 800efe8:	18bff916 	blt	r3,r2,800efd0 <__alt_data_end+0xfc00efd0>
 800efec:	10c00316 	blt	r2,r3,800effc <__gedf2+0xc4>
 800eff0:	42bff736 	bltu	r8,r10,800efd0 <__alt_data_end+0xfc00efd0>
 800eff4:	52000326 	beq	r10,r8,800f004 <__gedf2+0xcc>
 800eff8:	5200042e 	bgeu	r10,r8,800f00c <__gedf2+0xd4>
 800effc:	283fec1e 	bne	r5,zero,800efb0 <__alt_data_end+0xfc00efb0>
 800f000:	003ff406 	br	800efd4 <__alt_data_end+0xfc00efd4>
 800f004:	313ff236 	bltu	r6,r4,800efd0 <__alt_data_end+0xfc00efd0>
 800f008:	21bffc36 	bltu	r4,r6,800effc <__alt_data_end+0xfc00effc>
 800f00c:	0005883a 	mov	r2,zero
 800f010:	f800283a 	ret

0800f014 <__ledf2>:
 800f014:	2804d53a 	srli	r2,r5,20
 800f018:	3810d53a 	srli	r8,r7,20
 800f01c:	00c00434 	movhi	r3,16
 800f020:	18ffffc4 	addi	r3,r3,-1
 800f024:	1081ffcc 	andi	r2,r2,2047
 800f028:	0241ffc4 	movi	r9,2047
 800f02c:	28d4703a 	and	r10,r5,r3
 800f030:	4201ffcc 	andi	r8,r8,2047
 800f034:	38c6703a 	and	r3,r7,r3
 800f038:	280ad7fa 	srli	r5,r5,31
 800f03c:	380ed7fa 	srli	r7,r7,31
 800f040:	12401f26 	beq	r2,r9,800f0c0 <__ledf2+0xac>
 800f044:	0241ffc4 	movi	r9,2047
 800f048:	42401426 	beq	r8,r9,800f09c <__ledf2+0x88>
 800f04c:	1000091e 	bne	r2,zero,800f074 <__ledf2+0x60>
 800f050:	2296b03a 	or	r11,r4,r10
 800f054:	5813003a 	cmpeq	r9,r11,zero
 800f058:	29403fcc 	andi	r5,r5,255
 800f05c:	40000a1e 	bne	r8,zero,800f088 <__ledf2+0x74>
 800f060:	30d8b03a 	or	r12,r6,r3
 800f064:	6000081e 	bne	r12,zero,800f088 <__ledf2+0x74>
 800f068:	0005883a 	mov	r2,zero
 800f06c:	5800111e 	bne	r11,zero,800f0b4 <__ledf2+0xa0>
 800f070:	f800283a 	ret
 800f074:	29403fcc 	andi	r5,r5,255
 800f078:	40000c1e 	bne	r8,zero,800f0ac <__ledf2+0x98>
 800f07c:	30d2b03a 	or	r9,r6,r3
 800f080:	48000c26 	beq	r9,zero,800f0b4 <__ledf2+0xa0>
 800f084:	0013883a 	mov	r9,zero
 800f088:	39c03fcc 	andi	r7,r7,255
 800f08c:	48000826 	beq	r9,zero,800f0b0 <__ledf2+0x9c>
 800f090:	38001126 	beq	r7,zero,800f0d8 <__ledf2+0xc4>
 800f094:	00800044 	movi	r2,1
 800f098:	f800283a 	ret
 800f09c:	30d2b03a 	or	r9,r6,r3
 800f0a0:	483fea26 	beq	r9,zero,800f04c <__alt_data_end+0xfc00f04c>
 800f0a4:	00800084 	movi	r2,2
 800f0a8:	f800283a 	ret
 800f0ac:	39c03fcc 	andi	r7,r7,255
 800f0b0:	39400726 	beq	r7,r5,800f0d0 <__ledf2+0xbc>
 800f0b4:	2800081e 	bne	r5,zero,800f0d8 <__ledf2+0xc4>
 800f0b8:	00800044 	movi	r2,1
 800f0bc:	f800283a 	ret
 800f0c0:	2292b03a 	or	r9,r4,r10
 800f0c4:	483fdf26 	beq	r9,zero,800f044 <__alt_data_end+0xfc00f044>
 800f0c8:	00800084 	movi	r2,2
 800f0cc:	f800283a 	ret
 800f0d0:	4080030e 	bge	r8,r2,800f0e0 <__ledf2+0xcc>
 800f0d4:	383fef26 	beq	r7,zero,800f094 <__alt_data_end+0xfc00f094>
 800f0d8:	00bfffc4 	movi	r2,-1
 800f0dc:	f800283a 	ret
 800f0e0:	123feb16 	blt	r2,r8,800f090 <__alt_data_end+0xfc00f090>
 800f0e4:	1abff336 	bltu	r3,r10,800f0b4 <__alt_data_end+0xfc00f0b4>
 800f0e8:	50c00326 	beq	r10,r3,800f0f8 <__ledf2+0xe4>
 800f0ec:	50c0042e 	bgeu	r10,r3,800f100 <__ledf2+0xec>
 800f0f0:	283fe81e 	bne	r5,zero,800f094 <__alt_data_end+0xfc00f094>
 800f0f4:	003ff806 	br	800f0d8 <__alt_data_end+0xfc00f0d8>
 800f0f8:	313fee36 	bltu	r6,r4,800f0b4 <__alt_data_end+0xfc00f0b4>
 800f0fc:	21bffc36 	bltu	r4,r6,800f0f0 <__alt_data_end+0xfc00f0f0>
 800f100:	0005883a 	mov	r2,zero
 800f104:	f800283a 	ret

0800f108 <__muldf3>:
 800f108:	deffee04 	addi	sp,sp,-72
 800f10c:	dd000c15 	stw	r20,48(sp)
 800f110:	2828d53a 	srli	r20,r5,20
 800f114:	ddc00f15 	stw	r23,60(sp)
 800f118:	282ed7fa 	srli	r23,r5,31
 800f11c:	dc000815 	stw	r16,32(sp)
 800f120:	04000434 	movhi	r16,16
 800f124:	dcc00b15 	stw	r19,44(sp)
 800f128:	843fffc4 	addi	r16,r16,-1
 800f12c:	dfc01115 	stw	ra,68(sp)
 800f130:	df001015 	stw	fp,64(sp)
 800f134:	dd800e15 	stw	r22,56(sp)
 800f138:	dd400d15 	stw	r21,52(sp)
 800f13c:	dc800a15 	stw	r18,40(sp)
 800f140:	dc400915 	stw	r17,36(sp)
 800f144:	a501ffcc 	andi	r20,r20,2047
 800f148:	2c20703a 	and	r16,r5,r16
 800f14c:	b827883a 	mov	r19,r23
 800f150:	ba403fcc 	andi	r9,r23,255
 800f154:	a0006026 	beq	r20,zero,800f2d8 <__muldf3+0x1d0>
 800f158:	0081ffc4 	movi	r2,2047
 800f15c:	202d883a 	mov	r22,r4
 800f160:	a0803626 	beq	r20,r2,800f23c <__muldf3+0x134>
 800f164:	84000434 	orhi	r16,r16,16
 800f168:	200ad77a 	srli	r5,r4,29
 800f16c:	800490fa 	slli	r2,r16,3
 800f170:	202c90fa 	slli	r22,r4,3
 800f174:	a53f0044 	addi	r20,r20,-1023
 800f178:	28a0b03a 	or	r16,r5,r2
 800f17c:	002b883a 	mov	r21,zero
 800f180:	000b883a 	mov	r5,zero
 800f184:	3804d53a 	srli	r2,r7,20
 800f188:	3838d7fa 	srli	fp,r7,31
 800f18c:	04400434 	movhi	r17,16
 800f190:	8c7fffc4 	addi	r17,r17,-1
 800f194:	1081ffcc 	andi	r2,r2,2047
 800f198:	3025883a 	mov	r18,r6
 800f19c:	3c62703a 	and	r17,r7,r17
 800f1a0:	e2803fcc 	andi	r10,fp,255
 800f1a4:	10006d26 	beq	r2,zero,800f35c <__muldf3+0x254>
 800f1a8:	00c1ffc4 	movi	r3,2047
 800f1ac:	10c06526 	beq	r2,r3,800f344 <__muldf3+0x23c>
 800f1b0:	8c400434 	orhi	r17,r17,16
 800f1b4:	300ed77a 	srli	r7,r6,29
 800f1b8:	880690fa 	slli	r3,r17,3
 800f1bc:	302490fa 	slli	r18,r6,3
 800f1c0:	10bf0044 	addi	r2,r2,-1023
 800f1c4:	38e2b03a 	or	r17,r7,r3
 800f1c8:	000f883a 	mov	r7,zero
 800f1cc:	a087883a 	add	r3,r20,r2
 800f1d0:	010003c4 	movi	r4,15
 800f1d4:	3d44b03a 	or	r2,r7,r21
 800f1d8:	e5ccf03a 	xor	r6,fp,r23
 800f1dc:	1a000044 	addi	r8,r3,1
 800f1e0:	20809b36 	bltu	r4,r2,800f450 <__muldf3+0x348>
 800f1e4:	100490ba 	slli	r2,r2,2
 800f1e8:	01020074 	movhi	r4,2049
 800f1ec:	213c7f04 	addi	r4,r4,-3588
 800f1f0:	1105883a 	add	r2,r2,r4
 800f1f4:	10800017 	ldw	r2,0(r2)
 800f1f8:	1000683a 	jmp	r2
 800f1fc:	0800f450 	cmplti	zero,at,977
 800f200:	0800f25c 	xori	zero,at,969
 800f204:	0800f25c 	xori	zero,at,969
 800f208:	0800f258 	cmpnei	zero,at,969
 800f20c:	0800f42c 	andhi	zero,at,976
 800f210:	0800f42c 	andhi	zero,at,976
 800f214:	0800f414 	ori	zero,at,976
 800f218:	0800f258 	cmpnei	zero,at,969
 800f21c:	0800f42c 	andhi	zero,at,976
 800f220:	0800f414 	ori	zero,at,976
 800f224:	0800f42c 	andhi	zero,at,976
 800f228:	0800f258 	cmpnei	zero,at,969
 800f22c:	0800f43c 	xorhi	zero,at,976
 800f230:	0800f43c 	xorhi	zero,at,976
 800f234:	0800f43c 	xorhi	zero,at,976
 800f238:	0800f79c 	xori	zero,at,990
 800f23c:	2404b03a 	or	r2,r4,r16
 800f240:	1000711e 	bne	r2,zero,800f408 <__muldf3+0x300>
 800f244:	05400204 	movi	r21,8
 800f248:	0021883a 	mov	r16,zero
 800f24c:	002d883a 	mov	r22,zero
 800f250:	01400084 	movi	r5,2
 800f254:	003fcb06 	br	800f184 <__alt_data_end+0xfc00f184>
 800f258:	500d883a 	mov	r6,r10
 800f25c:	00800084 	movi	r2,2
 800f260:	38805926 	beq	r7,r2,800f3c8 <__muldf3+0x2c0>
 800f264:	008000c4 	movi	r2,3
 800f268:	3881bb26 	beq	r7,r2,800f958 <__muldf3+0x850>
 800f26c:	00800044 	movi	r2,1
 800f270:	3881961e 	bne	r7,r2,800f8cc <__muldf3+0x7c4>
 800f274:	3027883a 	mov	r19,r6
 800f278:	0005883a 	mov	r2,zero
 800f27c:	0021883a 	mov	r16,zero
 800f280:	002d883a 	mov	r22,zero
 800f284:	1004953a 	slli	r2,r2,20
 800f288:	98c03fcc 	andi	r3,r19,255
 800f28c:	04400434 	movhi	r17,16
 800f290:	8c7fffc4 	addi	r17,r17,-1
 800f294:	180697fa 	slli	r3,r3,31
 800f298:	8460703a 	and	r16,r16,r17
 800f29c:	80a0b03a 	or	r16,r16,r2
 800f2a0:	80c6b03a 	or	r3,r16,r3
 800f2a4:	b005883a 	mov	r2,r22
 800f2a8:	dfc01117 	ldw	ra,68(sp)
 800f2ac:	df001017 	ldw	fp,64(sp)
 800f2b0:	ddc00f17 	ldw	r23,60(sp)
 800f2b4:	dd800e17 	ldw	r22,56(sp)
 800f2b8:	dd400d17 	ldw	r21,52(sp)
 800f2bc:	dd000c17 	ldw	r20,48(sp)
 800f2c0:	dcc00b17 	ldw	r19,44(sp)
 800f2c4:	dc800a17 	ldw	r18,40(sp)
 800f2c8:	dc400917 	ldw	r17,36(sp)
 800f2cc:	dc000817 	ldw	r16,32(sp)
 800f2d0:	dec01204 	addi	sp,sp,72
 800f2d4:	f800283a 	ret
 800f2d8:	2404b03a 	or	r2,r4,r16
 800f2dc:	202b883a 	mov	r21,r4
 800f2e0:	10004426 	beq	r2,zero,800f3f4 <__muldf3+0x2ec>
 800f2e4:	80015126 	beq	r16,zero,800f82c <__muldf3+0x724>
 800f2e8:	8009883a 	mov	r4,r16
 800f2ec:	d9800715 	stw	r6,28(sp)
 800f2f0:	d9c00215 	stw	r7,8(sp)
 800f2f4:	da400415 	stw	r9,16(sp)
 800f2f8:	80104740 	call	8010474 <__clzsi2>
 800f2fc:	d9800717 	ldw	r6,28(sp)
 800f300:	d9c00217 	ldw	r7,8(sp)
 800f304:	da400417 	ldw	r9,16(sp)
 800f308:	113ffd44 	addi	r4,r2,-11
 800f30c:	00c00704 	movi	r3,28
 800f310:	19014216 	blt	r3,r4,800f81c <__muldf3+0x714>
 800f314:	00c00744 	movi	r3,29
 800f318:	15bffe04 	addi	r22,r2,-8
 800f31c:	1907c83a 	sub	r3,r3,r4
 800f320:	85a0983a 	sll	r16,r16,r22
 800f324:	a8c6d83a 	srl	r3,r21,r3
 800f328:	adac983a 	sll	r22,r21,r22
 800f32c:	1c20b03a 	or	r16,r3,r16
 800f330:	1080fcc4 	addi	r2,r2,1011
 800f334:	00a9c83a 	sub	r20,zero,r2
 800f338:	002b883a 	mov	r21,zero
 800f33c:	000b883a 	mov	r5,zero
 800f340:	003f9006 	br	800f184 <__alt_data_end+0xfc00f184>
 800f344:	3446b03a 	or	r3,r6,r17
 800f348:	1800281e 	bne	r3,zero,800f3ec <__muldf3+0x2e4>
 800f34c:	0023883a 	mov	r17,zero
 800f350:	0025883a 	mov	r18,zero
 800f354:	01c00084 	movi	r7,2
 800f358:	003f9c06 	br	800f1cc <__alt_data_end+0xfc00f1cc>
 800f35c:	3446b03a 	or	r3,r6,r17
 800f360:	18001e26 	beq	r3,zero,800f3dc <__muldf3+0x2d4>
 800f364:	88012126 	beq	r17,zero,800f7ec <__muldf3+0x6e4>
 800f368:	8809883a 	mov	r4,r17
 800f36c:	d9400215 	stw	r5,8(sp)
 800f370:	d9800715 	stw	r6,28(sp)
 800f374:	da400415 	stw	r9,16(sp)
 800f378:	da800315 	stw	r10,12(sp)
 800f37c:	80104740 	call	8010474 <__clzsi2>
 800f380:	d9400217 	ldw	r5,8(sp)
 800f384:	d9800717 	ldw	r6,28(sp)
 800f388:	da400417 	ldw	r9,16(sp)
 800f38c:	da800317 	ldw	r10,12(sp)
 800f390:	113ffd44 	addi	r4,r2,-11
 800f394:	00c00704 	movi	r3,28
 800f398:	19011016 	blt	r3,r4,800f7dc <__muldf3+0x6d4>
 800f39c:	00c00744 	movi	r3,29
 800f3a0:	14bffe04 	addi	r18,r2,-8
 800f3a4:	1907c83a 	sub	r3,r3,r4
 800f3a8:	8ca2983a 	sll	r17,r17,r18
 800f3ac:	30c6d83a 	srl	r3,r6,r3
 800f3b0:	34a4983a 	sll	r18,r6,r18
 800f3b4:	1c62b03a 	or	r17,r3,r17
 800f3b8:	1080fcc4 	addi	r2,r2,1011
 800f3bc:	0085c83a 	sub	r2,zero,r2
 800f3c0:	000f883a 	mov	r7,zero
 800f3c4:	003f8106 	br	800f1cc <__alt_data_end+0xfc00f1cc>
 800f3c8:	3027883a 	mov	r19,r6
 800f3cc:	0081ffc4 	movi	r2,2047
 800f3d0:	0021883a 	mov	r16,zero
 800f3d4:	002d883a 	mov	r22,zero
 800f3d8:	003faa06 	br	800f284 <__alt_data_end+0xfc00f284>
 800f3dc:	0023883a 	mov	r17,zero
 800f3e0:	0025883a 	mov	r18,zero
 800f3e4:	01c00044 	movi	r7,1
 800f3e8:	003f7806 	br	800f1cc <__alt_data_end+0xfc00f1cc>
 800f3ec:	01c000c4 	movi	r7,3
 800f3f0:	003f7606 	br	800f1cc <__alt_data_end+0xfc00f1cc>
 800f3f4:	05400104 	movi	r21,4
 800f3f8:	0021883a 	mov	r16,zero
 800f3fc:	002d883a 	mov	r22,zero
 800f400:	01400044 	movi	r5,1
 800f404:	003f5f06 	br	800f184 <__alt_data_end+0xfc00f184>
 800f408:	05400304 	movi	r21,12
 800f40c:	014000c4 	movi	r5,3
 800f410:	003f5c06 	br	800f184 <__alt_data_end+0xfc00f184>
 800f414:	04000434 	movhi	r16,16
 800f418:	0027883a 	mov	r19,zero
 800f41c:	843fffc4 	addi	r16,r16,-1
 800f420:	05bfffc4 	movi	r22,-1
 800f424:	0081ffc4 	movi	r2,2047
 800f428:	003f9606 	br	800f284 <__alt_data_end+0xfc00f284>
 800f42c:	8023883a 	mov	r17,r16
 800f430:	b025883a 	mov	r18,r22
 800f434:	280f883a 	mov	r7,r5
 800f438:	003f8806 	br	800f25c <__alt_data_end+0xfc00f25c>
 800f43c:	8023883a 	mov	r17,r16
 800f440:	b025883a 	mov	r18,r22
 800f444:	480d883a 	mov	r6,r9
 800f448:	280f883a 	mov	r7,r5
 800f44c:	003f8306 	br	800f25c <__alt_data_end+0xfc00f25c>
 800f450:	b026d43a 	srli	r19,r22,16
 800f454:	902ed43a 	srli	r23,r18,16
 800f458:	b5bfffcc 	andi	r22,r22,65535
 800f45c:	94bfffcc 	andi	r18,r18,65535
 800f460:	b00b883a 	mov	r5,r22
 800f464:	9009883a 	mov	r4,r18
 800f468:	d8c00515 	stw	r3,20(sp)
 800f46c:	d9800715 	stw	r6,28(sp)
 800f470:	da000615 	stw	r8,24(sp)
 800f474:	800374c0 	call	800374c <__mulsi3>
 800f478:	980b883a 	mov	r5,r19
 800f47c:	9009883a 	mov	r4,r18
 800f480:	1029883a 	mov	r20,r2
 800f484:	800374c0 	call	800374c <__mulsi3>
 800f488:	b80b883a 	mov	r5,r23
 800f48c:	9809883a 	mov	r4,r19
 800f490:	102b883a 	mov	r21,r2
 800f494:	800374c0 	call	800374c <__mulsi3>
 800f498:	b809883a 	mov	r4,r23
 800f49c:	b00b883a 	mov	r5,r22
 800f4a0:	1039883a 	mov	fp,r2
 800f4a4:	800374c0 	call	800374c <__mulsi3>
 800f4a8:	a008d43a 	srli	r4,r20,16
 800f4ac:	1545883a 	add	r2,r2,r21
 800f4b0:	d8c00517 	ldw	r3,20(sp)
 800f4b4:	2085883a 	add	r2,r4,r2
 800f4b8:	d9800717 	ldw	r6,28(sp)
 800f4bc:	da000617 	ldw	r8,24(sp)
 800f4c0:	1540022e 	bgeu	r2,r21,800f4cc <__muldf3+0x3c4>
 800f4c4:	01000074 	movhi	r4,1
 800f4c8:	e139883a 	add	fp,fp,r4
 800f4cc:	100e943a 	slli	r7,r2,16
 800f4d0:	1004d43a 	srli	r2,r2,16
 800f4d4:	882ad43a 	srli	r21,r17,16
 800f4d8:	a53fffcc 	andi	r20,r20,65535
 800f4dc:	8c7fffcc 	andi	r17,r17,65535
 800f4e0:	3d29883a 	add	r20,r7,r20
 800f4e4:	b00b883a 	mov	r5,r22
 800f4e8:	8809883a 	mov	r4,r17
 800f4ec:	d8c00515 	stw	r3,20(sp)
 800f4f0:	d9800715 	stw	r6,28(sp)
 800f4f4:	da000615 	stw	r8,24(sp)
 800f4f8:	dd000115 	stw	r20,4(sp)
 800f4fc:	d8800015 	stw	r2,0(sp)
 800f500:	800374c0 	call	800374c <__mulsi3>
 800f504:	980b883a 	mov	r5,r19
 800f508:	8809883a 	mov	r4,r17
 800f50c:	d8800215 	stw	r2,8(sp)
 800f510:	800374c0 	call	800374c <__mulsi3>
 800f514:	9809883a 	mov	r4,r19
 800f518:	a80b883a 	mov	r5,r21
 800f51c:	1029883a 	mov	r20,r2
 800f520:	800374c0 	call	800374c <__mulsi3>
 800f524:	b00b883a 	mov	r5,r22
 800f528:	a809883a 	mov	r4,r21
 800f52c:	d8800415 	stw	r2,16(sp)
 800f530:	800374c0 	call	800374c <__mulsi3>
 800f534:	d9c00217 	ldw	r7,8(sp)
 800f538:	1505883a 	add	r2,r2,r20
 800f53c:	d8c00517 	ldw	r3,20(sp)
 800f540:	3826d43a 	srli	r19,r7,16
 800f544:	d9800717 	ldw	r6,28(sp)
 800f548:	da000617 	ldw	r8,24(sp)
 800f54c:	9885883a 	add	r2,r19,r2
 800f550:	da400417 	ldw	r9,16(sp)
 800f554:	1500022e 	bgeu	r2,r20,800f560 <__muldf3+0x458>
 800f558:	01000074 	movhi	r4,1
 800f55c:	4913883a 	add	r9,r9,r4
 800f560:	1028d43a 	srli	r20,r2,16
 800f564:	1004943a 	slli	r2,r2,16
 800f568:	802cd43a 	srli	r22,r16,16
 800f56c:	843fffcc 	andi	r16,r16,65535
 800f570:	3cffffcc 	andi	r19,r7,65535
 800f574:	9009883a 	mov	r4,r18
 800f578:	800b883a 	mov	r5,r16
 800f57c:	a269883a 	add	r20,r20,r9
 800f580:	d8c00515 	stw	r3,20(sp)
 800f584:	d9800715 	stw	r6,28(sp)
 800f588:	da000615 	stw	r8,24(sp)
 800f58c:	14e7883a 	add	r19,r2,r19
 800f590:	800374c0 	call	800374c <__mulsi3>
 800f594:	9009883a 	mov	r4,r18
 800f598:	b00b883a 	mov	r5,r22
 800f59c:	d8800315 	stw	r2,12(sp)
 800f5a0:	800374c0 	call	800374c <__mulsi3>
 800f5a4:	b809883a 	mov	r4,r23
 800f5a8:	b00b883a 	mov	r5,r22
 800f5ac:	d8800215 	stw	r2,8(sp)
 800f5b0:	800374c0 	call	800374c <__mulsi3>
 800f5b4:	b80b883a 	mov	r5,r23
 800f5b8:	8009883a 	mov	r4,r16
 800f5bc:	d8800415 	stw	r2,16(sp)
 800f5c0:	800374c0 	call	800374c <__mulsi3>
 800f5c4:	da800317 	ldw	r10,12(sp)
 800f5c8:	d9c00217 	ldw	r7,8(sp)
 800f5cc:	d9000017 	ldw	r4,0(sp)
 800f5d0:	502ed43a 	srli	r23,r10,16
 800f5d4:	11c5883a 	add	r2,r2,r7
 800f5d8:	24e5883a 	add	r18,r4,r19
 800f5dc:	b885883a 	add	r2,r23,r2
 800f5e0:	d8c00517 	ldw	r3,20(sp)
 800f5e4:	d9800717 	ldw	r6,28(sp)
 800f5e8:	da000617 	ldw	r8,24(sp)
 800f5ec:	da400417 	ldw	r9,16(sp)
 800f5f0:	11c0022e 	bgeu	r2,r7,800f5fc <__muldf3+0x4f4>
 800f5f4:	01000074 	movhi	r4,1
 800f5f8:	4913883a 	add	r9,r9,r4
 800f5fc:	100ed43a 	srli	r7,r2,16
 800f600:	1004943a 	slli	r2,r2,16
 800f604:	55ffffcc 	andi	r23,r10,65535
 800f608:	3a53883a 	add	r9,r7,r9
 800f60c:	8809883a 	mov	r4,r17
 800f610:	800b883a 	mov	r5,r16
 800f614:	d8c00515 	stw	r3,20(sp)
 800f618:	d9800715 	stw	r6,28(sp)
 800f61c:	da000615 	stw	r8,24(sp)
 800f620:	da400415 	stw	r9,16(sp)
 800f624:	15ef883a 	add	r23,r2,r23
 800f628:	800374c0 	call	800374c <__mulsi3>
 800f62c:	8809883a 	mov	r4,r17
 800f630:	b00b883a 	mov	r5,r22
 800f634:	d8800215 	stw	r2,8(sp)
 800f638:	800374c0 	call	800374c <__mulsi3>
 800f63c:	b00b883a 	mov	r5,r22
 800f640:	a809883a 	mov	r4,r21
 800f644:	d8800315 	stw	r2,12(sp)
 800f648:	800374c0 	call	800374c <__mulsi3>
 800f64c:	8009883a 	mov	r4,r16
 800f650:	a80b883a 	mov	r5,r21
 800f654:	1023883a 	mov	r17,r2
 800f658:	800374c0 	call	800374c <__mulsi3>
 800f65c:	d9c00217 	ldw	r7,8(sp)
 800f660:	da800317 	ldw	r10,12(sp)
 800f664:	d8c00517 	ldw	r3,20(sp)
 800f668:	3808d43a 	srli	r4,r7,16
 800f66c:	1285883a 	add	r2,r2,r10
 800f670:	d9800717 	ldw	r6,28(sp)
 800f674:	2085883a 	add	r2,r4,r2
 800f678:	da000617 	ldw	r8,24(sp)
 800f67c:	da400417 	ldw	r9,16(sp)
 800f680:	1280022e 	bgeu	r2,r10,800f68c <__muldf3+0x584>
 800f684:	01000074 	movhi	r4,1
 800f688:	8923883a 	add	r17,r17,r4
 800f68c:	1008943a 	slli	r4,r2,16
 800f690:	39ffffcc 	andi	r7,r7,65535
 800f694:	e4b9883a 	add	fp,fp,r18
 800f698:	21cf883a 	add	r7,r4,r7
 800f69c:	e4e7803a 	cmpltu	r19,fp,r19
 800f6a0:	3d0f883a 	add	r7,r7,r20
 800f6a4:	bf39883a 	add	fp,r23,fp
 800f6a8:	99c9883a 	add	r4,r19,r7
 800f6ac:	e5ef803a 	cmpltu	r23,fp,r23
 800f6b0:	490b883a 	add	r5,r9,r4
 800f6b4:	1004d43a 	srli	r2,r2,16
 800f6b8:	b965883a 	add	r18,r23,r5
 800f6bc:	24c9803a 	cmpltu	r4,r4,r19
 800f6c0:	3d29803a 	cmpltu	r20,r7,r20
 800f6c4:	a128b03a 	or	r20,r20,r4
 800f6c8:	95ef803a 	cmpltu	r23,r18,r23
 800f6cc:	2a53803a 	cmpltu	r9,r5,r9
 800f6d0:	a0a9883a 	add	r20,r20,r2
 800f6d4:	4deeb03a 	or	r23,r9,r23
 800f6d8:	a5ef883a 	add	r23,r20,r23
 800f6dc:	bc63883a 	add	r17,r23,r17
 800f6e0:	e004927a 	slli	r2,fp,9
 800f6e4:	d9000117 	ldw	r4,4(sp)
 800f6e8:	882e927a 	slli	r23,r17,9
 800f6ec:	9022d5fa 	srli	r17,r18,23
 800f6f0:	e038d5fa 	srli	fp,fp,23
 800f6f4:	1104b03a 	or	r2,r2,r4
 800f6f8:	9024927a 	slli	r18,r18,9
 800f6fc:	1004c03a 	cmpne	r2,r2,zero
 800f700:	bc62b03a 	or	r17,r23,r17
 800f704:	1738b03a 	or	fp,r2,fp
 800f708:	8880402c 	andhi	r2,r17,256
 800f70c:	e4a4b03a 	or	r18,fp,r18
 800f710:	10000726 	beq	r2,zero,800f730 <__muldf3+0x628>
 800f714:	9006d07a 	srli	r3,r18,1
 800f718:	880497fa 	slli	r2,r17,31
 800f71c:	9480004c 	andi	r18,r18,1
 800f720:	8822d07a 	srli	r17,r17,1
 800f724:	1ca4b03a 	or	r18,r3,r18
 800f728:	14a4b03a 	or	r18,r2,r18
 800f72c:	4007883a 	mov	r3,r8
 800f730:	1880ffc4 	addi	r2,r3,1023
 800f734:	0080460e 	bge	zero,r2,800f850 <__muldf3+0x748>
 800f738:	910001cc 	andi	r4,r18,7
 800f73c:	20000726 	beq	r4,zero,800f75c <__muldf3+0x654>
 800f740:	910003cc 	andi	r4,r18,15
 800f744:	01400104 	movi	r5,4
 800f748:	21400426 	beq	r4,r5,800f75c <__muldf3+0x654>
 800f74c:	9149883a 	add	r4,r18,r5
 800f750:	24a5803a 	cmpltu	r18,r4,r18
 800f754:	8ca3883a 	add	r17,r17,r18
 800f758:	2025883a 	mov	r18,r4
 800f75c:	8900402c 	andhi	r4,r17,256
 800f760:	20000426 	beq	r4,zero,800f774 <__muldf3+0x66c>
 800f764:	18810004 	addi	r2,r3,1024
 800f768:	00ffc034 	movhi	r3,65280
 800f76c:	18ffffc4 	addi	r3,r3,-1
 800f770:	88e2703a 	and	r17,r17,r3
 800f774:	00c1ff84 	movi	r3,2046
 800f778:	18bf1316 	blt	r3,r2,800f3c8 <__alt_data_end+0xfc00f3c8>
 800f77c:	882c977a 	slli	r22,r17,29
 800f780:	9024d0fa 	srli	r18,r18,3
 800f784:	8822927a 	slli	r17,r17,9
 800f788:	1081ffcc 	andi	r2,r2,2047
 800f78c:	b4acb03a 	or	r22,r22,r18
 800f790:	8820d33a 	srli	r16,r17,12
 800f794:	3027883a 	mov	r19,r6
 800f798:	003eba06 	br	800f284 <__alt_data_end+0xfc00f284>
 800f79c:	8080022c 	andhi	r2,r16,8
 800f7a0:	10000926 	beq	r2,zero,800f7c8 <__muldf3+0x6c0>
 800f7a4:	8880022c 	andhi	r2,r17,8
 800f7a8:	1000071e 	bne	r2,zero,800f7c8 <__muldf3+0x6c0>
 800f7ac:	00800434 	movhi	r2,16
 800f7b0:	8c000234 	orhi	r16,r17,8
 800f7b4:	10bfffc4 	addi	r2,r2,-1
 800f7b8:	e027883a 	mov	r19,fp
 800f7bc:	80a0703a 	and	r16,r16,r2
 800f7c0:	902d883a 	mov	r22,r18
 800f7c4:	003f1706 	br	800f424 <__alt_data_end+0xfc00f424>
 800f7c8:	00800434 	movhi	r2,16
 800f7cc:	84000234 	orhi	r16,r16,8
 800f7d0:	10bfffc4 	addi	r2,r2,-1
 800f7d4:	80a0703a 	and	r16,r16,r2
 800f7d8:	003f1206 	br	800f424 <__alt_data_end+0xfc00f424>
 800f7dc:	147ff604 	addi	r17,r2,-40
 800f7e0:	3462983a 	sll	r17,r6,r17
 800f7e4:	0025883a 	mov	r18,zero
 800f7e8:	003ef306 	br	800f3b8 <__alt_data_end+0xfc00f3b8>
 800f7ec:	3009883a 	mov	r4,r6
 800f7f0:	d9400215 	stw	r5,8(sp)
 800f7f4:	d9800715 	stw	r6,28(sp)
 800f7f8:	da400415 	stw	r9,16(sp)
 800f7fc:	da800315 	stw	r10,12(sp)
 800f800:	80104740 	call	8010474 <__clzsi2>
 800f804:	10800804 	addi	r2,r2,32
 800f808:	da800317 	ldw	r10,12(sp)
 800f80c:	da400417 	ldw	r9,16(sp)
 800f810:	d9800717 	ldw	r6,28(sp)
 800f814:	d9400217 	ldw	r5,8(sp)
 800f818:	003edd06 	br	800f390 <__alt_data_end+0xfc00f390>
 800f81c:	143ff604 	addi	r16,r2,-40
 800f820:	ac20983a 	sll	r16,r21,r16
 800f824:	002d883a 	mov	r22,zero
 800f828:	003ec106 	br	800f330 <__alt_data_end+0xfc00f330>
 800f82c:	d9800715 	stw	r6,28(sp)
 800f830:	d9c00215 	stw	r7,8(sp)
 800f834:	da400415 	stw	r9,16(sp)
 800f838:	80104740 	call	8010474 <__clzsi2>
 800f83c:	10800804 	addi	r2,r2,32
 800f840:	da400417 	ldw	r9,16(sp)
 800f844:	d9c00217 	ldw	r7,8(sp)
 800f848:	d9800717 	ldw	r6,28(sp)
 800f84c:	003eae06 	br	800f308 <__alt_data_end+0xfc00f308>
 800f850:	00c00044 	movi	r3,1
 800f854:	1887c83a 	sub	r3,r3,r2
 800f858:	01000e04 	movi	r4,56
 800f85c:	20fe8516 	blt	r4,r3,800f274 <__alt_data_end+0xfc00f274>
 800f860:	010007c4 	movi	r4,31
 800f864:	20c01b16 	blt	r4,r3,800f8d4 <__muldf3+0x7cc>
 800f868:	00800804 	movi	r2,32
 800f86c:	10c5c83a 	sub	r2,r2,r3
 800f870:	888a983a 	sll	r5,r17,r2
 800f874:	90c8d83a 	srl	r4,r18,r3
 800f878:	9084983a 	sll	r2,r18,r2
 800f87c:	88e2d83a 	srl	r17,r17,r3
 800f880:	2906b03a 	or	r3,r5,r4
 800f884:	1004c03a 	cmpne	r2,r2,zero
 800f888:	1886b03a 	or	r3,r3,r2
 800f88c:	188001cc 	andi	r2,r3,7
 800f890:	10000726 	beq	r2,zero,800f8b0 <__muldf3+0x7a8>
 800f894:	188003cc 	andi	r2,r3,15
 800f898:	01000104 	movi	r4,4
 800f89c:	11000426 	beq	r2,r4,800f8b0 <__muldf3+0x7a8>
 800f8a0:	1805883a 	mov	r2,r3
 800f8a4:	10c00104 	addi	r3,r2,4
 800f8a8:	1885803a 	cmpltu	r2,r3,r2
 800f8ac:	88a3883a 	add	r17,r17,r2
 800f8b0:	8880202c 	andhi	r2,r17,128
 800f8b4:	10001c26 	beq	r2,zero,800f928 <__muldf3+0x820>
 800f8b8:	3027883a 	mov	r19,r6
 800f8bc:	00800044 	movi	r2,1
 800f8c0:	0021883a 	mov	r16,zero
 800f8c4:	002d883a 	mov	r22,zero
 800f8c8:	003e6e06 	br	800f284 <__alt_data_end+0xfc00f284>
 800f8cc:	4007883a 	mov	r3,r8
 800f8d0:	003f9706 	br	800f730 <__alt_data_end+0xfc00f730>
 800f8d4:	017ff844 	movi	r5,-31
 800f8d8:	2885c83a 	sub	r2,r5,r2
 800f8dc:	888ad83a 	srl	r5,r17,r2
 800f8e0:	00800804 	movi	r2,32
 800f8e4:	18801a26 	beq	r3,r2,800f950 <__muldf3+0x848>
 800f8e8:	01001004 	movi	r4,64
 800f8ec:	20c7c83a 	sub	r3,r4,r3
 800f8f0:	88e2983a 	sll	r17,r17,r3
 800f8f4:	8ca4b03a 	or	r18,r17,r18
 800f8f8:	9004c03a 	cmpne	r2,r18,zero
 800f8fc:	2884b03a 	or	r2,r5,r2
 800f900:	144001cc 	andi	r17,r2,7
 800f904:	88000d1e 	bne	r17,zero,800f93c <__muldf3+0x834>
 800f908:	0021883a 	mov	r16,zero
 800f90c:	102cd0fa 	srli	r22,r2,3
 800f910:	3027883a 	mov	r19,r6
 800f914:	0005883a 	mov	r2,zero
 800f918:	b46cb03a 	or	r22,r22,r17
 800f91c:	003e5906 	br	800f284 <__alt_data_end+0xfc00f284>
 800f920:	1007883a 	mov	r3,r2
 800f924:	0023883a 	mov	r17,zero
 800f928:	8820927a 	slli	r16,r17,9
 800f92c:	1805883a 	mov	r2,r3
 800f930:	8822977a 	slli	r17,r17,29
 800f934:	8020d33a 	srli	r16,r16,12
 800f938:	003ff406 	br	800f90c <__alt_data_end+0xfc00f90c>
 800f93c:	10c003cc 	andi	r3,r2,15
 800f940:	01000104 	movi	r4,4
 800f944:	193ff626 	beq	r3,r4,800f920 <__alt_data_end+0xfc00f920>
 800f948:	0023883a 	mov	r17,zero
 800f94c:	003fd506 	br	800f8a4 <__alt_data_end+0xfc00f8a4>
 800f950:	0023883a 	mov	r17,zero
 800f954:	003fe706 	br	800f8f4 <__alt_data_end+0xfc00f8f4>
 800f958:	00800434 	movhi	r2,16
 800f95c:	8c000234 	orhi	r16,r17,8
 800f960:	10bfffc4 	addi	r2,r2,-1
 800f964:	3027883a 	mov	r19,r6
 800f968:	80a0703a 	and	r16,r16,r2
 800f96c:	902d883a 	mov	r22,r18
 800f970:	003eac06 	br	800f424 <__alt_data_end+0xfc00f424>

0800f974 <__subdf3>:
 800f974:	02000434 	movhi	r8,16
 800f978:	423fffc4 	addi	r8,r8,-1
 800f97c:	defffb04 	addi	sp,sp,-20
 800f980:	2a14703a 	and	r10,r5,r8
 800f984:	3812d53a 	srli	r9,r7,20
 800f988:	3a10703a 	and	r8,r7,r8
 800f98c:	2006d77a 	srli	r3,r4,29
 800f990:	3004d77a 	srli	r2,r6,29
 800f994:	dc000015 	stw	r16,0(sp)
 800f998:	501490fa 	slli	r10,r10,3
 800f99c:	2820d53a 	srli	r16,r5,20
 800f9a0:	401090fa 	slli	r8,r8,3
 800f9a4:	dc800215 	stw	r18,8(sp)
 800f9a8:	dc400115 	stw	r17,4(sp)
 800f9ac:	dfc00415 	stw	ra,16(sp)
 800f9b0:	202290fa 	slli	r17,r4,3
 800f9b4:	dcc00315 	stw	r19,12(sp)
 800f9b8:	4a41ffcc 	andi	r9,r9,2047
 800f9bc:	0101ffc4 	movi	r4,2047
 800f9c0:	2824d7fa 	srli	r18,r5,31
 800f9c4:	8401ffcc 	andi	r16,r16,2047
 800f9c8:	50c6b03a 	or	r3,r10,r3
 800f9cc:	380ed7fa 	srli	r7,r7,31
 800f9d0:	408ab03a 	or	r5,r8,r2
 800f9d4:	300c90fa 	slli	r6,r6,3
 800f9d8:	49009626 	beq	r9,r4,800fc34 <__subdf3+0x2c0>
 800f9dc:	39c0005c 	xori	r7,r7,1
 800f9e0:	8245c83a 	sub	r2,r16,r9
 800f9e4:	3c807426 	beq	r7,r18,800fbb8 <__subdf3+0x244>
 800f9e8:	0080af0e 	bge	zero,r2,800fca8 <__subdf3+0x334>
 800f9ec:	48002a1e 	bne	r9,zero,800fa98 <__subdf3+0x124>
 800f9f0:	2988b03a 	or	r4,r5,r6
 800f9f4:	20009a1e 	bne	r4,zero,800fc60 <__subdf3+0x2ec>
 800f9f8:	888001cc 	andi	r2,r17,7
 800f9fc:	10000726 	beq	r2,zero,800fa1c <__subdf3+0xa8>
 800fa00:	888003cc 	andi	r2,r17,15
 800fa04:	01000104 	movi	r4,4
 800fa08:	11000426 	beq	r2,r4,800fa1c <__subdf3+0xa8>
 800fa0c:	890b883a 	add	r5,r17,r4
 800fa10:	2c63803a 	cmpltu	r17,r5,r17
 800fa14:	1c47883a 	add	r3,r3,r17
 800fa18:	2823883a 	mov	r17,r5
 800fa1c:	1880202c 	andhi	r2,r3,128
 800fa20:	10005926 	beq	r2,zero,800fb88 <__subdf3+0x214>
 800fa24:	84000044 	addi	r16,r16,1
 800fa28:	0081ffc4 	movi	r2,2047
 800fa2c:	8080be26 	beq	r16,r2,800fd28 <__subdf3+0x3b4>
 800fa30:	017fe034 	movhi	r5,65408
 800fa34:	297fffc4 	addi	r5,r5,-1
 800fa38:	1946703a 	and	r3,r3,r5
 800fa3c:	1804977a 	slli	r2,r3,29
 800fa40:	1806927a 	slli	r3,r3,9
 800fa44:	8822d0fa 	srli	r17,r17,3
 800fa48:	8401ffcc 	andi	r16,r16,2047
 800fa4c:	180ad33a 	srli	r5,r3,12
 800fa50:	9100004c 	andi	r4,r18,1
 800fa54:	1444b03a 	or	r2,r2,r17
 800fa58:	80c1ffcc 	andi	r3,r16,2047
 800fa5c:	1820953a 	slli	r16,r3,20
 800fa60:	20c03fcc 	andi	r3,r4,255
 800fa64:	180897fa 	slli	r4,r3,31
 800fa68:	00c00434 	movhi	r3,16
 800fa6c:	18ffffc4 	addi	r3,r3,-1
 800fa70:	28c6703a 	and	r3,r5,r3
 800fa74:	1c06b03a 	or	r3,r3,r16
 800fa78:	1906b03a 	or	r3,r3,r4
 800fa7c:	dfc00417 	ldw	ra,16(sp)
 800fa80:	dcc00317 	ldw	r19,12(sp)
 800fa84:	dc800217 	ldw	r18,8(sp)
 800fa88:	dc400117 	ldw	r17,4(sp)
 800fa8c:	dc000017 	ldw	r16,0(sp)
 800fa90:	dec00504 	addi	sp,sp,20
 800fa94:	f800283a 	ret
 800fa98:	0101ffc4 	movi	r4,2047
 800fa9c:	813fd626 	beq	r16,r4,800f9f8 <__alt_data_end+0xfc00f9f8>
 800faa0:	29402034 	orhi	r5,r5,128
 800faa4:	01000e04 	movi	r4,56
 800faa8:	2080a316 	blt	r4,r2,800fd38 <__subdf3+0x3c4>
 800faac:	010007c4 	movi	r4,31
 800fab0:	2080c616 	blt	r4,r2,800fdcc <__subdf3+0x458>
 800fab4:	01000804 	movi	r4,32
 800fab8:	2089c83a 	sub	r4,r4,r2
 800fabc:	2910983a 	sll	r8,r5,r4
 800fac0:	308ed83a 	srl	r7,r6,r2
 800fac4:	3108983a 	sll	r4,r6,r4
 800fac8:	2884d83a 	srl	r2,r5,r2
 800facc:	41ccb03a 	or	r6,r8,r7
 800fad0:	2008c03a 	cmpne	r4,r4,zero
 800fad4:	310cb03a 	or	r6,r6,r4
 800fad8:	898dc83a 	sub	r6,r17,r6
 800fadc:	89a3803a 	cmpltu	r17,r17,r6
 800fae0:	1887c83a 	sub	r3,r3,r2
 800fae4:	1c47c83a 	sub	r3,r3,r17
 800fae8:	3023883a 	mov	r17,r6
 800faec:	1880202c 	andhi	r2,r3,128
 800faf0:	10002326 	beq	r2,zero,800fb80 <__subdf3+0x20c>
 800faf4:	04c02034 	movhi	r19,128
 800faf8:	9cffffc4 	addi	r19,r19,-1
 800fafc:	1ce6703a 	and	r19,r3,r19
 800fb00:	98007a26 	beq	r19,zero,800fcec <__subdf3+0x378>
 800fb04:	9809883a 	mov	r4,r19
 800fb08:	80104740 	call	8010474 <__clzsi2>
 800fb0c:	113ffe04 	addi	r4,r2,-8
 800fb10:	00c007c4 	movi	r3,31
 800fb14:	19007b16 	blt	r3,r4,800fd04 <__subdf3+0x390>
 800fb18:	00800804 	movi	r2,32
 800fb1c:	1105c83a 	sub	r2,r2,r4
 800fb20:	8884d83a 	srl	r2,r17,r2
 800fb24:	9906983a 	sll	r3,r19,r4
 800fb28:	8922983a 	sll	r17,r17,r4
 800fb2c:	10c4b03a 	or	r2,r2,r3
 800fb30:	24007816 	blt	r4,r16,800fd14 <__subdf3+0x3a0>
 800fb34:	2421c83a 	sub	r16,r4,r16
 800fb38:	80c00044 	addi	r3,r16,1
 800fb3c:	010007c4 	movi	r4,31
 800fb40:	20c09516 	blt	r4,r3,800fd98 <__subdf3+0x424>
 800fb44:	01400804 	movi	r5,32
 800fb48:	28cbc83a 	sub	r5,r5,r3
 800fb4c:	88c8d83a 	srl	r4,r17,r3
 800fb50:	8962983a 	sll	r17,r17,r5
 800fb54:	114a983a 	sll	r5,r2,r5
 800fb58:	10c6d83a 	srl	r3,r2,r3
 800fb5c:	8804c03a 	cmpne	r2,r17,zero
 800fb60:	290ab03a 	or	r5,r5,r4
 800fb64:	28a2b03a 	or	r17,r5,r2
 800fb68:	0021883a 	mov	r16,zero
 800fb6c:	003fa206 	br	800f9f8 <__alt_data_end+0xfc00f9f8>
 800fb70:	2090b03a 	or	r8,r4,r2
 800fb74:	40018e26 	beq	r8,zero,80101b0 <__subdf3+0x83c>
 800fb78:	1007883a 	mov	r3,r2
 800fb7c:	2023883a 	mov	r17,r4
 800fb80:	888001cc 	andi	r2,r17,7
 800fb84:	103f9e1e 	bne	r2,zero,800fa00 <__alt_data_end+0xfc00fa00>
 800fb88:	1804977a 	slli	r2,r3,29
 800fb8c:	8822d0fa 	srli	r17,r17,3
 800fb90:	1810d0fa 	srli	r8,r3,3
 800fb94:	9100004c 	andi	r4,r18,1
 800fb98:	1444b03a 	or	r2,r2,r17
 800fb9c:	00c1ffc4 	movi	r3,2047
 800fba0:	80c02826 	beq	r16,r3,800fc44 <__subdf3+0x2d0>
 800fba4:	01400434 	movhi	r5,16
 800fba8:	297fffc4 	addi	r5,r5,-1
 800fbac:	80e0703a 	and	r16,r16,r3
 800fbb0:	414a703a 	and	r5,r8,r5
 800fbb4:	003fa806 	br	800fa58 <__alt_data_end+0xfc00fa58>
 800fbb8:	0080630e 	bge	zero,r2,800fd48 <__subdf3+0x3d4>
 800fbbc:	48003026 	beq	r9,zero,800fc80 <__subdf3+0x30c>
 800fbc0:	0101ffc4 	movi	r4,2047
 800fbc4:	813f8c26 	beq	r16,r4,800f9f8 <__alt_data_end+0xfc00f9f8>
 800fbc8:	29402034 	orhi	r5,r5,128
 800fbcc:	01000e04 	movi	r4,56
 800fbd0:	2080a90e 	bge	r4,r2,800fe78 <__subdf3+0x504>
 800fbd4:	298cb03a 	or	r6,r5,r6
 800fbd8:	3012c03a 	cmpne	r9,r6,zero
 800fbdc:	0005883a 	mov	r2,zero
 800fbe0:	4c53883a 	add	r9,r9,r17
 800fbe4:	4c63803a 	cmpltu	r17,r9,r17
 800fbe8:	10c7883a 	add	r3,r2,r3
 800fbec:	88c7883a 	add	r3,r17,r3
 800fbf0:	4823883a 	mov	r17,r9
 800fbf4:	1880202c 	andhi	r2,r3,128
 800fbf8:	1000d026 	beq	r2,zero,800ff3c <__subdf3+0x5c8>
 800fbfc:	84000044 	addi	r16,r16,1
 800fc00:	0081ffc4 	movi	r2,2047
 800fc04:	8080fe26 	beq	r16,r2,8010000 <__subdf3+0x68c>
 800fc08:	00bfe034 	movhi	r2,65408
 800fc0c:	10bfffc4 	addi	r2,r2,-1
 800fc10:	1886703a 	and	r3,r3,r2
 800fc14:	880ad07a 	srli	r5,r17,1
 800fc18:	180497fa 	slli	r2,r3,31
 800fc1c:	8900004c 	andi	r4,r17,1
 800fc20:	2922b03a 	or	r17,r5,r4
 800fc24:	1806d07a 	srli	r3,r3,1
 800fc28:	1462b03a 	or	r17,r2,r17
 800fc2c:	3825883a 	mov	r18,r7
 800fc30:	003f7106 	br	800f9f8 <__alt_data_end+0xfc00f9f8>
 800fc34:	2984b03a 	or	r2,r5,r6
 800fc38:	103f6826 	beq	r2,zero,800f9dc <__alt_data_end+0xfc00f9dc>
 800fc3c:	39c03fcc 	andi	r7,r7,255
 800fc40:	003f6706 	br	800f9e0 <__alt_data_end+0xfc00f9e0>
 800fc44:	4086b03a 	or	r3,r8,r2
 800fc48:	18015226 	beq	r3,zero,8010194 <__subdf3+0x820>
 800fc4c:	00c00434 	movhi	r3,16
 800fc50:	41400234 	orhi	r5,r8,8
 800fc54:	18ffffc4 	addi	r3,r3,-1
 800fc58:	28ca703a 	and	r5,r5,r3
 800fc5c:	003f7e06 	br	800fa58 <__alt_data_end+0xfc00fa58>
 800fc60:	10bfffc4 	addi	r2,r2,-1
 800fc64:	1000491e 	bne	r2,zero,800fd8c <__subdf3+0x418>
 800fc68:	898fc83a 	sub	r7,r17,r6
 800fc6c:	89e3803a 	cmpltu	r17,r17,r7
 800fc70:	1947c83a 	sub	r3,r3,r5
 800fc74:	1c47c83a 	sub	r3,r3,r17
 800fc78:	3823883a 	mov	r17,r7
 800fc7c:	003f9b06 	br	800faec <__alt_data_end+0xfc00faec>
 800fc80:	2988b03a 	or	r4,r5,r6
 800fc84:	203f5c26 	beq	r4,zero,800f9f8 <__alt_data_end+0xfc00f9f8>
 800fc88:	10bfffc4 	addi	r2,r2,-1
 800fc8c:	1000931e 	bne	r2,zero,800fedc <__subdf3+0x568>
 800fc90:	898d883a 	add	r6,r17,r6
 800fc94:	3463803a 	cmpltu	r17,r6,r17
 800fc98:	1947883a 	add	r3,r3,r5
 800fc9c:	88c7883a 	add	r3,r17,r3
 800fca0:	3023883a 	mov	r17,r6
 800fca4:	003fd306 	br	800fbf4 <__alt_data_end+0xfc00fbf4>
 800fca8:	1000541e 	bne	r2,zero,800fdfc <__subdf3+0x488>
 800fcac:	80800044 	addi	r2,r16,1
 800fcb0:	1081ffcc 	andi	r2,r2,2047
 800fcb4:	01000044 	movi	r4,1
 800fcb8:	2080a20e 	bge	r4,r2,800ff44 <__subdf3+0x5d0>
 800fcbc:	8989c83a 	sub	r4,r17,r6
 800fcc0:	8905803a 	cmpltu	r2,r17,r4
 800fcc4:	1967c83a 	sub	r19,r3,r5
 800fcc8:	98a7c83a 	sub	r19,r19,r2
 800fccc:	9880202c 	andhi	r2,r19,128
 800fcd0:	10006326 	beq	r2,zero,800fe60 <__subdf3+0x4ec>
 800fcd4:	3463c83a 	sub	r17,r6,r17
 800fcd8:	28c7c83a 	sub	r3,r5,r3
 800fcdc:	344d803a 	cmpltu	r6,r6,r17
 800fce0:	19a7c83a 	sub	r19,r3,r6
 800fce4:	3825883a 	mov	r18,r7
 800fce8:	983f861e 	bne	r19,zero,800fb04 <__alt_data_end+0xfc00fb04>
 800fcec:	8809883a 	mov	r4,r17
 800fcf0:	80104740 	call	8010474 <__clzsi2>
 800fcf4:	10800804 	addi	r2,r2,32
 800fcf8:	113ffe04 	addi	r4,r2,-8
 800fcfc:	00c007c4 	movi	r3,31
 800fd00:	193f850e 	bge	r3,r4,800fb18 <__alt_data_end+0xfc00fb18>
 800fd04:	10bff604 	addi	r2,r2,-40
 800fd08:	8884983a 	sll	r2,r17,r2
 800fd0c:	0023883a 	mov	r17,zero
 800fd10:	243f880e 	bge	r4,r16,800fb34 <__alt_data_end+0xfc00fb34>
 800fd14:	00ffe034 	movhi	r3,65408
 800fd18:	18ffffc4 	addi	r3,r3,-1
 800fd1c:	8121c83a 	sub	r16,r16,r4
 800fd20:	10c6703a 	and	r3,r2,r3
 800fd24:	003f3406 	br	800f9f8 <__alt_data_end+0xfc00f9f8>
 800fd28:	9100004c 	andi	r4,r18,1
 800fd2c:	000b883a 	mov	r5,zero
 800fd30:	0005883a 	mov	r2,zero
 800fd34:	003f4806 	br	800fa58 <__alt_data_end+0xfc00fa58>
 800fd38:	298cb03a 	or	r6,r5,r6
 800fd3c:	300cc03a 	cmpne	r6,r6,zero
 800fd40:	0005883a 	mov	r2,zero
 800fd44:	003f6406 	br	800fad8 <__alt_data_end+0xfc00fad8>
 800fd48:	10009a1e 	bne	r2,zero,800ffb4 <__subdf3+0x640>
 800fd4c:	82400044 	addi	r9,r16,1
 800fd50:	4881ffcc 	andi	r2,r9,2047
 800fd54:	02800044 	movi	r10,1
 800fd58:	5080670e 	bge	r10,r2,800fef8 <__subdf3+0x584>
 800fd5c:	0081ffc4 	movi	r2,2047
 800fd60:	4880af26 	beq	r9,r2,8010020 <__subdf3+0x6ac>
 800fd64:	898d883a 	add	r6,r17,r6
 800fd68:	1945883a 	add	r2,r3,r5
 800fd6c:	3447803a 	cmpltu	r3,r6,r17
 800fd70:	1887883a 	add	r3,r3,r2
 800fd74:	182297fa 	slli	r17,r3,31
 800fd78:	300cd07a 	srli	r6,r6,1
 800fd7c:	1806d07a 	srli	r3,r3,1
 800fd80:	4821883a 	mov	r16,r9
 800fd84:	89a2b03a 	or	r17,r17,r6
 800fd88:	003f1b06 	br	800f9f8 <__alt_data_end+0xfc00f9f8>
 800fd8c:	0101ffc4 	movi	r4,2047
 800fd90:	813f441e 	bne	r16,r4,800faa4 <__alt_data_end+0xfc00faa4>
 800fd94:	003f1806 	br	800f9f8 <__alt_data_end+0xfc00f9f8>
 800fd98:	843ff844 	addi	r16,r16,-31
 800fd9c:	01400804 	movi	r5,32
 800fda0:	1408d83a 	srl	r4,r2,r16
 800fda4:	19405026 	beq	r3,r5,800fee8 <__subdf3+0x574>
 800fda8:	01401004 	movi	r5,64
 800fdac:	28c7c83a 	sub	r3,r5,r3
 800fdb0:	10c4983a 	sll	r2,r2,r3
 800fdb4:	88a2b03a 	or	r17,r17,r2
 800fdb8:	8822c03a 	cmpne	r17,r17,zero
 800fdbc:	2462b03a 	or	r17,r4,r17
 800fdc0:	0007883a 	mov	r3,zero
 800fdc4:	0021883a 	mov	r16,zero
 800fdc8:	003f6d06 	br	800fb80 <__alt_data_end+0xfc00fb80>
 800fdcc:	11fff804 	addi	r7,r2,-32
 800fdd0:	01000804 	movi	r4,32
 800fdd4:	29ced83a 	srl	r7,r5,r7
 800fdd8:	11004526 	beq	r2,r4,800fef0 <__subdf3+0x57c>
 800fddc:	01001004 	movi	r4,64
 800fde0:	2089c83a 	sub	r4,r4,r2
 800fde4:	2904983a 	sll	r2,r5,r4
 800fde8:	118cb03a 	or	r6,r2,r6
 800fdec:	300cc03a 	cmpne	r6,r6,zero
 800fdf0:	398cb03a 	or	r6,r7,r6
 800fdf4:	0005883a 	mov	r2,zero
 800fdf8:	003f3706 	br	800fad8 <__alt_data_end+0xfc00fad8>
 800fdfc:	80002a26 	beq	r16,zero,800fea8 <__subdf3+0x534>
 800fe00:	0101ffc4 	movi	r4,2047
 800fe04:	49006626 	beq	r9,r4,800ffa0 <__subdf3+0x62c>
 800fe08:	0085c83a 	sub	r2,zero,r2
 800fe0c:	18c02034 	orhi	r3,r3,128
 800fe10:	01000e04 	movi	r4,56
 800fe14:	20807e16 	blt	r4,r2,8010010 <__subdf3+0x69c>
 800fe18:	010007c4 	movi	r4,31
 800fe1c:	2080e716 	blt	r4,r2,80101bc <__subdf3+0x848>
 800fe20:	01000804 	movi	r4,32
 800fe24:	2089c83a 	sub	r4,r4,r2
 800fe28:	1914983a 	sll	r10,r3,r4
 800fe2c:	8890d83a 	srl	r8,r17,r2
 800fe30:	8908983a 	sll	r4,r17,r4
 800fe34:	1884d83a 	srl	r2,r3,r2
 800fe38:	5222b03a 	or	r17,r10,r8
 800fe3c:	2006c03a 	cmpne	r3,r4,zero
 800fe40:	88e2b03a 	or	r17,r17,r3
 800fe44:	3463c83a 	sub	r17,r6,r17
 800fe48:	2885c83a 	sub	r2,r5,r2
 800fe4c:	344d803a 	cmpltu	r6,r6,r17
 800fe50:	1187c83a 	sub	r3,r2,r6
 800fe54:	4821883a 	mov	r16,r9
 800fe58:	3825883a 	mov	r18,r7
 800fe5c:	003f2306 	br	800faec <__alt_data_end+0xfc00faec>
 800fe60:	24d0b03a 	or	r8,r4,r19
 800fe64:	40001b1e 	bne	r8,zero,800fed4 <__subdf3+0x560>
 800fe68:	0005883a 	mov	r2,zero
 800fe6c:	0009883a 	mov	r4,zero
 800fe70:	0021883a 	mov	r16,zero
 800fe74:	003f4906 	br	800fb9c <__alt_data_end+0xfc00fb9c>
 800fe78:	010007c4 	movi	r4,31
 800fe7c:	20803a16 	blt	r4,r2,800ff68 <__subdf3+0x5f4>
 800fe80:	01000804 	movi	r4,32
 800fe84:	2089c83a 	sub	r4,r4,r2
 800fe88:	2912983a 	sll	r9,r5,r4
 800fe8c:	3090d83a 	srl	r8,r6,r2
 800fe90:	3108983a 	sll	r4,r6,r4
 800fe94:	2884d83a 	srl	r2,r5,r2
 800fe98:	4a12b03a 	or	r9,r9,r8
 800fe9c:	2008c03a 	cmpne	r4,r4,zero
 800fea0:	4912b03a 	or	r9,r9,r4
 800fea4:	003f4e06 	br	800fbe0 <__alt_data_end+0xfc00fbe0>
 800fea8:	1c48b03a 	or	r4,r3,r17
 800feac:	20003c26 	beq	r4,zero,800ffa0 <__subdf3+0x62c>
 800feb0:	0084303a 	nor	r2,zero,r2
 800feb4:	1000381e 	bne	r2,zero,800ff98 <__subdf3+0x624>
 800feb8:	3463c83a 	sub	r17,r6,r17
 800febc:	28c5c83a 	sub	r2,r5,r3
 800fec0:	344d803a 	cmpltu	r6,r6,r17
 800fec4:	1187c83a 	sub	r3,r2,r6
 800fec8:	4821883a 	mov	r16,r9
 800fecc:	3825883a 	mov	r18,r7
 800fed0:	003f0606 	br	800faec <__alt_data_end+0xfc00faec>
 800fed4:	2023883a 	mov	r17,r4
 800fed8:	003f0906 	br	800fb00 <__alt_data_end+0xfc00fb00>
 800fedc:	0101ffc4 	movi	r4,2047
 800fee0:	813f3a1e 	bne	r16,r4,800fbcc <__alt_data_end+0xfc00fbcc>
 800fee4:	003ec406 	br	800f9f8 <__alt_data_end+0xfc00f9f8>
 800fee8:	0005883a 	mov	r2,zero
 800feec:	003fb106 	br	800fdb4 <__alt_data_end+0xfc00fdb4>
 800fef0:	0005883a 	mov	r2,zero
 800fef4:	003fbc06 	br	800fde8 <__alt_data_end+0xfc00fde8>
 800fef8:	1c44b03a 	or	r2,r3,r17
 800fefc:	80008e1e 	bne	r16,zero,8010138 <__subdf3+0x7c4>
 800ff00:	1000c826 	beq	r2,zero,8010224 <__subdf3+0x8b0>
 800ff04:	2984b03a 	or	r2,r5,r6
 800ff08:	103ebb26 	beq	r2,zero,800f9f8 <__alt_data_end+0xfc00f9f8>
 800ff0c:	8989883a 	add	r4,r17,r6
 800ff10:	1945883a 	add	r2,r3,r5
 800ff14:	2447803a 	cmpltu	r3,r4,r17
 800ff18:	1887883a 	add	r3,r3,r2
 800ff1c:	1880202c 	andhi	r2,r3,128
 800ff20:	2023883a 	mov	r17,r4
 800ff24:	103f1626 	beq	r2,zero,800fb80 <__alt_data_end+0xfc00fb80>
 800ff28:	00bfe034 	movhi	r2,65408
 800ff2c:	10bfffc4 	addi	r2,r2,-1
 800ff30:	5021883a 	mov	r16,r10
 800ff34:	1886703a 	and	r3,r3,r2
 800ff38:	003eaf06 	br	800f9f8 <__alt_data_end+0xfc00f9f8>
 800ff3c:	3825883a 	mov	r18,r7
 800ff40:	003f0f06 	br	800fb80 <__alt_data_end+0xfc00fb80>
 800ff44:	1c44b03a 	or	r2,r3,r17
 800ff48:	8000251e 	bne	r16,zero,800ffe0 <__subdf3+0x66c>
 800ff4c:	1000661e 	bne	r2,zero,80100e8 <__subdf3+0x774>
 800ff50:	2990b03a 	or	r8,r5,r6
 800ff54:	40009626 	beq	r8,zero,80101b0 <__subdf3+0x83c>
 800ff58:	2807883a 	mov	r3,r5
 800ff5c:	3023883a 	mov	r17,r6
 800ff60:	3825883a 	mov	r18,r7
 800ff64:	003ea406 	br	800f9f8 <__alt_data_end+0xfc00f9f8>
 800ff68:	127ff804 	addi	r9,r2,-32
 800ff6c:	01000804 	movi	r4,32
 800ff70:	2a52d83a 	srl	r9,r5,r9
 800ff74:	11008c26 	beq	r2,r4,80101a8 <__subdf3+0x834>
 800ff78:	01001004 	movi	r4,64
 800ff7c:	2085c83a 	sub	r2,r4,r2
 800ff80:	2884983a 	sll	r2,r5,r2
 800ff84:	118cb03a 	or	r6,r2,r6
 800ff88:	300cc03a 	cmpne	r6,r6,zero
 800ff8c:	4992b03a 	or	r9,r9,r6
 800ff90:	0005883a 	mov	r2,zero
 800ff94:	003f1206 	br	800fbe0 <__alt_data_end+0xfc00fbe0>
 800ff98:	0101ffc4 	movi	r4,2047
 800ff9c:	493f9c1e 	bne	r9,r4,800fe10 <__alt_data_end+0xfc00fe10>
 800ffa0:	2807883a 	mov	r3,r5
 800ffa4:	3023883a 	mov	r17,r6
 800ffa8:	4821883a 	mov	r16,r9
 800ffac:	3825883a 	mov	r18,r7
 800ffb0:	003e9106 	br	800f9f8 <__alt_data_end+0xfc00f9f8>
 800ffb4:	80001f1e 	bne	r16,zero,8010034 <__subdf3+0x6c0>
 800ffb8:	1c48b03a 	or	r4,r3,r17
 800ffbc:	20005a26 	beq	r4,zero,8010128 <__subdf3+0x7b4>
 800ffc0:	0084303a 	nor	r2,zero,r2
 800ffc4:	1000561e 	bne	r2,zero,8010120 <__subdf3+0x7ac>
 800ffc8:	89a3883a 	add	r17,r17,r6
 800ffcc:	1945883a 	add	r2,r3,r5
 800ffd0:	898d803a 	cmpltu	r6,r17,r6
 800ffd4:	3087883a 	add	r3,r6,r2
 800ffd8:	4821883a 	mov	r16,r9
 800ffdc:	003f0506 	br	800fbf4 <__alt_data_end+0xfc00fbf4>
 800ffe0:	10002b1e 	bne	r2,zero,8010090 <__subdf3+0x71c>
 800ffe4:	2984b03a 	or	r2,r5,r6
 800ffe8:	10008026 	beq	r2,zero,80101ec <__subdf3+0x878>
 800ffec:	2807883a 	mov	r3,r5
 800fff0:	3023883a 	mov	r17,r6
 800fff4:	3825883a 	mov	r18,r7
 800fff8:	0401ffc4 	movi	r16,2047
 800fffc:	003e7e06 	br	800f9f8 <__alt_data_end+0xfc00f9f8>
 8010000:	3809883a 	mov	r4,r7
 8010004:	0011883a 	mov	r8,zero
 8010008:	0005883a 	mov	r2,zero
 801000c:	003ee306 	br	800fb9c <__alt_data_end+0xfc00fb9c>
 8010010:	1c62b03a 	or	r17,r3,r17
 8010014:	8822c03a 	cmpne	r17,r17,zero
 8010018:	0005883a 	mov	r2,zero
 801001c:	003f8906 	br	800fe44 <__alt_data_end+0xfc00fe44>
 8010020:	3809883a 	mov	r4,r7
 8010024:	4821883a 	mov	r16,r9
 8010028:	0011883a 	mov	r8,zero
 801002c:	0005883a 	mov	r2,zero
 8010030:	003eda06 	br	800fb9c <__alt_data_end+0xfc00fb9c>
 8010034:	0101ffc4 	movi	r4,2047
 8010038:	49003b26 	beq	r9,r4,8010128 <__subdf3+0x7b4>
 801003c:	0085c83a 	sub	r2,zero,r2
 8010040:	18c02034 	orhi	r3,r3,128
 8010044:	01000e04 	movi	r4,56
 8010048:	20806e16 	blt	r4,r2,8010204 <__subdf3+0x890>
 801004c:	010007c4 	movi	r4,31
 8010050:	20807716 	blt	r4,r2,8010230 <__subdf3+0x8bc>
 8010054:	01000804 	movi	r4,32
 8010058:	2089c83a 	sub	r4,r4,r2
 801005c:	1914983a 	sll	r10,r3,r4
 8010060:	8890d83a 	srl	r8,r17,r2
 8010064:	8908983a 	sll	r4,r17,r4
 8010068:	1884d83a 	srl	r2,r3,r2
 801006c:	5222b03a 	or	r17,r10,r8
 8010070:	2006c03a 	cmpne	r3,r4,zero
 8010074:	88e2b03a 	or	r17,r17,r3
 8010078:	89a3883a 	add	r17,r17,r6
 801007c:	1145883a 	add	r2,r2,r5
 8010080:	898d803a 	cmpltu	r6,r17,r6
 8010084:	3087883a 	add	r3,r6,r2
 8010088:	4821883a 	mov	r16,r9
 801008c:	003ed906 	br	800fbf4 <__alt_data_end+0xfc00fbf4>
 8010090:	2984b03a 	or	r2,r5,r6
 8010094:	10004226 	beq	r2,zero,80101a0 <__subdf3+0x82c>
 8010098:	1808d0fa 	srli	r4,r3,3
 801009c:	8822d0fa 	srli	r17,r17,3
 80100a0:	1806977a 	slli	r3,r3,29
 80100a4:	2080022c 	andhi	r2,r4,8
 80100a8:	1c62b03a 	or	r17,r3,r17
 80100ac:	10000826 	beq	r2,zero,80100d0 <__subdf3+0x75c>
 80100b0:	2812d0fa 	srli	r9,r5,3
 80100b4:	4880022c 	andhi	r2,r9,8
 80100b8:	1000051e 	bne	r2,zero,80100d0 <__subdf3+0x75c>
 80100bc:	300cd0fa 	srli	r6,r6,3
 80100c0:	2804977a 	slli	r2,r5,29
 80100c4:	4809883a 	mov	r4,r9
 80100c8:	3825883a 	mov	r18,r7
 80100cc:	11a2b03a 	or	r17,r2,r6
 80100d0:	8806d77a 	srli	r3,r17,29
 80100d4:	200890fa 	slli	r4,r4,3
 80100d8:	882290fa 	slli	r17,r17,3
 80100dc:	0401ffc4 	movi	r16,2047
 80100e0:	1906b03a 	or	r3,r3,r4
 80100e4:	003e4406 	br	800f9f8 <__alt_data_end+0xfc00f9f8>
 80100e8:	2984b03a 	or	r2,r5,r6
 80100ec:	103e4226 	beq	r2,zero,800f9f8 <__alt_data_end+0xfc00f9f8>
 80100f0:	8989c83a 	sub	r4,r17,r6
 80100f4:	8911803a 	cmpltu	r8,r17,r4
 80100f8:	1945c83a 	sub	r2,r3,r5
 80100fc:	1205c83a 	sub	r2,r2,r8
 8010100:	1200202c 	andhi	r8,r2,128
 8010104:	403e9a26 	beq	r8,zero,800fb70 <__alt_data_end+0xfc00fb70>
 8010108:	3463c83a 	sub	r17,r6,r17
 801010c:	28c5c83a 	sub	r2,r5,r3
 8010110:	344d803a 	cmpltu	r6,r6,r17
 8010114:	1187c83a 	sub	r3,r2,r6
 8010118:	3825883a 	mov	r18,r7
 801011c:	003e3606 	br	800f9f8 <__alt_data_end+0xfc00f9f8>
 8010120:	0101ffc4 	movi	r4,2047
 8010124:	493fc71e 	bne	r9,r4,8010044 <__alt_data_end+0xfc010044>
 8010128:	2807883a 	mov	r3,r5
 801012c:	3023883a 	mov	r17,r6
 8010130:	4821883a 	mov	r16,r9
 8010134:	003e3006 	br	800f9f8 <__alt_data_end+0xfc00f9f8>
 8010138:	10003626 	beq	r2,zero,8010214 <__subdf3+0x8a0>
 801013c:	2984b03a 	or	r2,r5,r6
 8010140:	10001726 	beq	r2,zero,80101a0 <__subdf3+0x82c>
 8010144:	1808d0fa 	srli	r4,r3,3
 8010148:	8822d0fa 	srli	r17,r17,3
 801014c:	1806977a 	slli	r3,r3,29
 8010150:	2080022c 	andhi	r2,r4,8
 8010154:	1c62b03a 	or	r17,r3,r17
 8010158:	10000726 	beq	r2,zero,8010178 <__subdf3+0x804>
 801015c:	2812d0fa 	srli	r9,r5,3
 8010160:	4880022c 	andhi	r2,r9,8
 8010164:	1000041e 	bne	r2,zero,8010178 <__subdf3+0x804>
 8010168:	300cd0fa 	srli	r6,r6,3
 801016c:	2804977a 	slli	r2,r5,29
 8010170:	4809883a 	mov	r4,r9
 8010174:	11a2b03a 	or	r17,r2,r6
 8010178:	8806d77a 	srli	r3,r17,29
 801017c:	200890fa 	slli	r4,r4,3
 8010180:	882290fa 	slli	r17,r17,3
 8010184:	3825883a 	mov	r18,r7
 8010188:	1906b03a 	or	r3,r3,r4
 801018c:	0401ffc4 	movi	r16,2047
 8010190:	003e1906 	br	800f9f8 <__alt_data_end+0xfc00f9f8>
 8010194:	000b883a 	mov	r5,zero
 8010198:	0005883a 	mov	r2,zero
 801019c:	003e2e06 	br	800fa58 <__alt_data_end+0xfc00fa58>
 80101a0:	0401ffc4 	movi	r16,2047
 80101a4:	003e1406 	br	800f9f8 <__alt_data_end+0xfc00f9f8>
 80101a8:	0005883a 	mov	r2,zero
 80101ac:	003f7506 	br	800ff84 <__alt_data_end+0xfc00ff84>
 80101b0:	0005883a 	mov	r2,zero
 80101b4:	0009883a 	mov	r4,zero
 80101b8:	003e7806 	br	800fb9c <__alt_data_end+0xfc00fb9c>
 80101bc:	123ff804 	addi	r8,r2,-32
 80101c0:	01000804 	movi	r4,32
 80101c4:	1a10d83a 	srl	r8,r3,r8
 80101c8:	11002526 	beq	r2,r4,8010260 <__subdf3+0x8ec>
 80101cc:	01001004 	movi	r4,64
 80101d0:	2085c83a 	sub	r2,r4,r2
 80101d4:	1884983a 	sll	r2,r3,r2
 80101d8:	1444b03a 	or	r2,r2,r17
 80101dc:	1004c03a 	cmpne	r2,r2,zero
 80101e0:	40a2b03a 	or	r17,r8,r2
 80101e4:	0005883a 	mov	r2,zero
 80101e8:	003f1606 	br	800fe44 <__alt_data_end+0xfc00fe44>
 80101ec:	02000434 	movhi	r8,16
 80101f0:	0009883a 	mov	r4,zero
 80101f4:	423fffc4 	addi	r8,r8,-1
 80101f8:	00bfffc4 	movi	r2,-1
 80101fc:	0401ffc4 	movi	r16,2047
 8010200:	003e6606 	br	800fb9c <__alt_data_end+0xfc00fb9c>
 8010204:	1c62b03a 	or	r17,r3,r17
 8010208:	8822c03a 	cmpne	r17,r17,zero
 801020c:	0005883a 	mov	r2,zero
 8010210:	003f9906 	br	8010078 <__alt_data_end+0xfc010078>
 8010214:	2807883a 	mov	r3,r5
 8010218:	3023883a 	mov	r17,r6
 801021c:	0401ffc4 	movi	r16,2047
 8010220:	003df506 	br	800f9f8 <__alt_data_end+0xfc00f9f8>
 8010224:	2807883a 	mov	r3,r5
 8010228:	3023883a 	mov	r17,r6
 801022c:	003df206 	br	800f9f8 <__alt_data_end+0xfc00f9f8>
 8010230:	123ff804 	addi	r8,r2,-32
 8010234:	01000804 	movi	r4,32
 8010238:	1a10d83a 	srl	r8,r3,r8
 801023c:	11000a26 	beq	r2,r4,8010268 <__subdf3+0x8f4>
 8010240:	01001004 	movi	r4,64
 8010244:	2085c83a 	sub	r2,r4,r2
 8010248:	1884983a 	sll	r2,r3,r2
 801024c:	1444b03a 	or	r2,r2,r17
 8010250:	1004c03a 	cmpne	r2,r2,zero
 8010254:	40a2b03a 	or	r17,r8,r2
 8010258:	0005883a 	mov	r2,zero
 801025c:	003f8606 	br	8010078 <__alt_data_end+0xfc010078>
 8010260:	0005883a 	mov	r2,zero
 8010264:	003fdc06 	br	80101d8 <__alt_data_end+0xfc0101d8>
 8010268:	0005883a 	mov	r2,zero
 801026c:	003ff706 	br	801024c <__alt_data_end+0xfc01024c>

08010270 <__fixdfsi>:
 8010270:	280cd53a 	srli	r6,r5,20
 8010274:	00c00434 	movhi	r3,16
 8010278:	18ffffc4 	addi	r3,r3,-1
 801027c:	3181ffcc 	andi	r6,r6,2047
 8010280:	01c0ff84 	movi	r7,1022
 8010284:	28c6703a 	and	r3,r5,r3
 8010288:	280ad7fa 	srli	r5,r5,31
 801028c:	3980120e 	bge	r7,r6,80102d8 <__fixdfsi+0x68>
 8010290:	00810744 	movi	r2,1053
 8010294:	11800c16 	blt	r2,r6,80102c8 <__fixdfsi+0x58>
 8010298:	00810cc4 	movi	r2,1075
 801029c:	1185c83a 	sub	r2,r2,r6
 80102a0:	01c007c4 	movi	r7,31
 80102a4:	18c00434 	orhi	r3,r3,16
 80102a8:	38800d16 	blt	r7,r2,80102e0 <__fixdfsi+0x70>
 80102ac:	31befb44 	addi	r6,r6,-1043
 80102b0:	2084d83a 	srl	r2,r4,r2
 80102b4:	1986983a 	sll	r3,r3,r6
 80102b8:	1884b03a 	or	r2,r3,r2
 80102bc:	28000726 	beq	r5,zero,80102dc <__fixdfsi+0x6c>
 80102c0:	0085c83a 	sub	r2,zero,r2
 80102c4:	f800283a 	ret
 80102c8:	00a00034 	movhi	r2,32768
 80102cc:	10bfffc4 	addi	r2,r2,-1
 80102d0:	2885883a 	add	r2,r5,r2
 80102d4:	f800283a 	ret
 80102d8:	0005883a 	mov	r2,zero
 80102dc:	f800283a 	ret
 80102e0:	008104c4 	movi	r2,1043
 80102e4:	1185c83a 	sub	r2,r2,r6
 80102e8:	1884d83a 	srl	r2,r3,r2
 80102ec:	003ff306 	br	80102bc <__alt_data_end+0xfc0102bc>

080102f0 <__floatsidf>:
 80102f0:	defffd04 	addi	sp,sp,-12
 80102f4:	dfc00215 	stw	ra,8(sp)
 80102f8:	dc400115 	stw	r17,4(sp)
 80102fc:	dc000015 	stw	r16,0(sp)
 8010300:	20002b26 	beq	r4,zero,80103b0 <__floatsidf+0xc0>
 8010304:	2023883a 	mov	r17,r4
 8010308:	2020d7fa 	srli	r16,r4,31
 801030c:	20002d16 	blt	r4,zero,80103c4 <__floatsidf+0xd4>
 8010310:	8809883a 	mov	r4,r17
 8010314:	80104740 	call	8010474 <__clzsi2>
 8010318:	01410784 	movi	r5,1054
 801031c:	288bc83a 	sub	r5,r5,r2
 8010320:	01010cc4 	movi	r4,1075
 8010324:	2149c83a 	sub	r4,r4,r5
 8010328:	00c007c4 	movi	r3,31
 801032c:	1900160e 	bge	r3,r4,8010388 <__floatsidf+0x98>
 8010330:	00c104c4 	movi	r3,1043
 8010334:	1947c83a 	sub	r3,r3,r5
 8010338:	88c6983a 	sll	r3,r17,r3
 801033c:	00800434 	movhi	r2,16
 8010340:	10bfffc4 	addi	r2,r2,-1
 8010344:	1886703a 	and	r3,r3,r2
 8010348:	2941ffcc 	andi	r5,r5,2047
 801034c:	800d883a 	mov	r6,r16
 8010350:	0005883a 	mov	r2,zero
 8010354:	280a953a 	slli	r5,r5,20
 8010358:	31803fcc 	andi	r6,r6,255
 801035c:	01000434 	movhi	r4,16
 8010360:	300c97fa 	slli	r6,r6,31
 8010364:	213fffc4 	addi	r4,r4,-1
 8010368:	1906703a 	and	r3,r3,r4
 801036c:	1946b03a 	or	r3,r3,r5
 8010370:	1986b03a 	or	r3,r3,r6
 8010374:	dfc00217 	ldw	ra,8(sp)
 8010378:	dc400117 	ldw	r17,4(sp)
 801037c:	dc000017 	ldw	r16,0(sp)
 8010380:	dec00304 	addi	sp,sp,12
 8010384:	f800283a 	ret
 8010388:	00c002c4 	movi	r3,11
 801038c:	1887c83a 	sub	r3,r3,r2
 8010390:	88c6d83a 	srl	r3,r17,r3
 8010394:	8904983a 	sll	r2,r17,r4
 8010398:	01000434 	movhi	r4,16
 801039c:	213fffc4 	addi	r4,r4,-1
 80103a0:	2941ffcc 	andi	r5,r5,2047
 80103a4:	1906703a 	and	r3,r3,r4
 80103a8:	800d883a 	mov	r6,r16
 80103ac:	003fe906 	br	8010354 <__alt_data_end+0xfc010354>
 80103b0:	000d883a 	mov	r6,zero
 80103b4:	000b883a 	mov	r5,zero
 80103b8:	0007883a 	mov	r3,zero
 80103bc:	0005883a 	mov	r2,zero
 80103c0:	003fe406 	br	8010354 <__alt_data_end+0xfc010354>
 80103c4:	0123c83a 	sub	r17,zero,r4
 80103c8:	003fd106 	br	8010310 <__alt_data_end+0xfc010310>

080103cc <__floatunsidf>:
 80103cc:	defffe04 	addi	sp,sp,-8
 80103d0:	dc000015 	stw	r16,0(sp)
 80103d4:	dfc00115 	stw	ra,4(sp)
 80103d8:	2021883a 	mov	r16,r4
 80103dc:	20002226 	beq	r4,zero,8010468 <__floatunsidf+0x9c>
 80103e0:	80104740 	call	8010474 <__clzsi2>
 80103e4:	01010784 	movi	r4,1054
 80103e8:	2089c83a 	sub	r4,r4,r2
 80103ec:	01810cc4 	movi	r6,1075
 80103f0:	310dc83a 	sub	r6,r6,r4
 80103f4:	00c007c4 	movi	r3,31
 80103f8:	1980120e 	bge	r3,r6,8010444 <__floatunsidf+0x78>
 80103fc:	00c104c4 	movi	r3,1043
 8010400:	1907c83a 	sub	r3,r3,r4
 8010404:	80ca983a 	sll	r5,r16,r3
 8010408:	00800434 	movhi	r2,16
 801040c:	10bfffc4 	addi	r2,r2,-1
 8010410:	2101ffcc 	andi	r4,r4,2047
 8010414:	0021883a 	mov	r16,zero
 8010418:	288a703a 	and	r5,r5,r2
 801041c:	2008953a 	slli	r4,r4,20
 8010420:	00c00434 	movhi	r3,16
 8010424:	18ffffc4 	addi	r3,r3,-1
 8010428:	28c6703a 	and	r3,r5,r3
 801042c:	8005883a 	mov	r2,r16
 8010430:	1906b03a 	or	r3,r3,r4
 8010434:	dfc00117 	ldw	ra,4(sp)
 8010438:	dc000017 	ldw	r16,0(sp)
 801043c:	dec00204 	addi	sp,sp,8
 8010440:	f800283a 	ret
 8010444:	00c002c4 	movi	r3,11
 8010448:	188bc83a 	sub	r5,r3,r2
 801044c:	814ad83a 	srl	r5,r16,r5
 8010450:	00c00434 	movhi	r3,16
 8010454:	18ffffc4 	addi	r3,r3,-1
 8010458:	81a0983a 	sll	r16,r16,r6
 801045c:	2101ffcc 	andi	r4,r4,2047
 8010460:	28ca703a 	and	r5,r5,r3
 8010464:	003fed06 	br	801041c <__alt_data_end+0xfc01041c>
 8010468:	0009883a 	mov	r4,zero
 801046c:	000b883a 	mov	r5,zero
 8010470:	003fea06 	br	801041c <__alt_data_end+0xfc01041c>

08010474 <__clzsi2>:
 8010474:	00bfffd4 	movui	r2,65535
 8010478:	11000536 	bltu	r2,r4,8010490 <__clzsi2+0x1c>
 801047c:	00803fc4 	movi	r2,255
 8010480:	11000f36 	bltu	r2,r4,80104c0 <__clzsi2+0x4c>
 8010484:	00800804 	movi	r2,32
 8010488:	0007883a 	mov	r3,zero
 801048c:	00000506 	br	80104a4 <__clzsi2+0x30>
 8010490:	00804034 	movhi	r2,256
 8010494:	10bfffc4 	addi	r2,r2,-1
 8010498:	11000c2e 	bgeu	r2,r4,80104cc <__clzsi2+0x58>
 801049c:	00800204 	movi	r2,8
 80104a0:	00c00604 	movi	r3,24
 80104a4:	20c8d83a 	srl	r4,r4,r3
 80104a8:	00c200f4 	movhi	r3,2051
 80104ac:	18c58d04 	addi	r3,r3,5684
 80104b0:	1909883a 	add	r4,r3,r4
 80104b4:	20c00003 	ldbu	r3,0(r4)
 80104b8:	10c5c83a 	sub	r2,r2,r3
 80104bc:	f800283a 	ret
 80104c0:	00800604 	movi	r2,24
 80104c4:	00c00204 	movi	r3,8
 80104c8:	003ff606 	br	80104a4 <__alt_data_end+0xfc0104a4>
 80104cc:	00800404 	movi	r2,16
 80104d0:	1007883a 	mov	r3,r2
 80104d4:	003ff306 	br	80104a4 <__alt_data_end+0xfc0104a4>

080104d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80104d8:	defffe04 	addi	sp,sp,-8
 80104dc:	dfc00115 	stw	ra,4(sp)
 80104e0:	df000015 	stw	fp,0(sp)
 80104e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80104e8:	d0a01017 	ldw	r2,-32704(gp)
 80104ec:	10000326 	beq	r2,zero,80104fc <alt_get_errno+0x24>
 80104f0:	d0a01017 	ldw	r2,-32704(gp)
 80104f4:	103ee83a 	callr	r2
 80104f8:	00000106 	br	8010500 <alt_get_errno+0x28>
 80104fc:	d0a76504 	addi	r2,gp,-25196
}
 8010500:	e037883a 	mov	sp,fp
 8010504:	dfc00117 	ldw	ra,4(sp)
 8010508:	df000017 	ldw	fp,0(sp)
 801050c:	dec00204 	addi	sp,sp,8
 8010510:	f800283a 	ret

08010514 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8010514:	defffb04 	addi	sp,sp,-20
 8010518:	dfc00415 	stw	ra,16(sp)
 801051c:	df000315 	stw	fp,12(sp)
 8010520:	df000304 	addi	fp,sp,12
 8010524:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8010528:	e0bfff17 	ldw	r2,-4(fp)
 801052c:	10000816 	blt	r2,zero,8010550 <close+0x3c>
 8010530:	01400304 	movi	r5,12
 8010534:	e13fff17 	ldw	r4,-4(fp)
 8010538:	800374c0 	call	800374c <__mulsi3>
 801053c:	1007883a 	mov	r3,r2
 8010540:	008200f4 	movhi	r2,2051
 8010544:	10889104 	addi	r2,r2,8772
 8010548:	1885883a 	add	r2,r3,r2
 801054c:	00000106 	br	8010554 <close+0x40>
 8010550:	0005883a 	mov	r2,zero
 8010554:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8010558:	e0bffd17 	ldw	r2,-12(fp)
 801055c:	10001926 	beq	r2,zero,80105c4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8010560:	e0bffd17 	ldw	r2,-12(fp)
 8010564:	10800017 	ldw	r2,0(r2)
 8010568:	10800417 	ldw	r2,16(r2)
 801056c:	10000626 	beq	r2,zero,8010588 <close+0x74>
 8010570:	e0bffd17 	ldw	r2,-12(fp)
 8010574:	10800017 	ldw	r2,0(r2)
 8010578:	10800417 	ldw	r2,16(r2)
 801057c:	e13ffd17 	ldw	r4,-12(fp)
 8010580:	103ee83a 	callr	r2
 8010584:	00000106 	br	801058c <close+0x78>
 8010588:	0005883a 	mov	r2,zero
 801058c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8010590:	e13fff17 	ldw	r4,-4(fp)
 8010594:	8010bfc0 	call	8010bfc <alt_release_fd>
    if (rval < 0)
 8010598:	e0bffe17 	ldw	r2,-8(fp)
 801059c:	1000070e 	bge	r2,zero,80105bc <close+0xa8>
    {
      ALT_ERRNO = -rval;
 80105a0:	80104d80 	call	80104d8 <alt_get_errno>
 80105a4:	1007883a 	mov	r3,r2
 80105a8:	e0bffe17 	ldw	r2,-8(fp)
 80105ac:	0085c83a 	sub	r2,zero,r2
 80105b0:	18800015 	stw	r2,0(r3)
      return -1;
 80105b4:	00bfffc4 	movi	r2,-1
 80105b8:	00000706 	br	80105d8 <close+0xc4>
    }
    return 0;
 80105bc:	0005883a 	mov	r2,zero
 80105c0:	00000506 	br	80105d8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80105c4:	80104d80 	call	80104d8 <alt_get_errno>
 80105c8:	1007883a 	mov	r3,r2
 80105cc:	00801444 	movi	r2,81
 80105d0:	18800015 	stw	r2,0(r3)
    return -1;
 80105d4:	00bfffc4 	movi	r2,-1
  }
}
 80105d8:	e037883a 	mov	sp,fp
 80105dc:	dfc00117 	ldw	ra,4(sp)
 80105e0:	df000017 	ldw	fp,0(sp)
 80105e4:	dec00204 	addi	sp,sp,8
 80105e8:	f800283a 	ret

080105ec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80105ec:	defffc04 	addi	sp,sp,-16
 80105f0:	df000315 	stw	fp,12(sp)
 80105f4:	df000304 	addi	fp,sp,12
 80105f8:	e13ffd15 	stw	r4,-12(fp)
 80105fc:	e17ffe15 	stw	r5,-8(fp)
 8010600:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8010604:	e0bfff17 	ldw	r2,-4(fp)
}
 8010608:	e037883a 	mov	sp,fp
 801060c:	df000017 	ldw	fp,0(sp)
 8010610:	dec00104 	addi	sp,sp,4
 8010614:	f800283a 	ret

08010618 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010618:	defffe04 	addi	sp,sp,-8
 801061c:	dfc00115 	stw	ra,4(sp)
 8010620:	df000015 	stw	fp,0(sp)
 8010624:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010628:	d0a01017 	ldw	r2,-32704(gp)
 801062c:	10000326 	beq	r2,zero,801063c <alt_get_errno+0x24>
 8010630:	d0a01017 	ldw	r2,-32704(gp)
 8010634:	103ee83a 	callr	r2
 8010638:	00000106 	br	8010640 <alt_get_errno+0x28>
 801063c:	d0a76504 	addi	r2,gp,-25196
}
 8010640:	e037883a 	mov	sp,fp
 8010644:	dfc00117 	ldw	ra,4(sp)
 8010648:	df000017 	ldw	fp,0(sp)
 801064c:	dec00204 	addi	sp,sp,8
 8010650:	f800283a 	ret

08010654 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8010654:	defffb04 	addi	sp,sp,-20
 8010658:	dfc00415 	stw	ra,16(sp)
 801065c:	df000315 	stw	fp,12(sp)
 8010660:	df000304 	addi	fp,sp,12
 8010664:	e13ffe15 	stw	r4,-8(fp)
 8010668:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801066c:	e0bffe17 	ldw	r2,-8(fp)
 8010670:	10000816 	blt	r2,zero,8010694 <fstat+0x40>
 8010674:	01400304 	movi	r5,12
 8010678:	e13ffe17 	ldw	r4,-8(fp)
 801067c:	800374c0 	call	800374c <__mulsi3>
 8010680:	1007883a 	mov	r3,r2
 8010684:	008200f4 	movhi	r2,2051
 8010688:	10889104 	addi	r2,r2,8772
 801068c:	1885883a 	add	r2,r3,r2
 8010690:	00000106 	br	8010698 <fstat+0x44>
 8010694:	0005883a 	mov	r2,zero
 8010698:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 801069c:	e0bffd17 	ldw	r2,-12(fp)
 80106a0:	10001026 	beq	r2,zero,80106e4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 80106a4:	e0bffd17 	ldw	r2,-12(fp)
 80106a8:	10800017 	ldw	r2,0(r2)
 80106ac:	10800817 	ldw	r2,32(r2)
 80106b0:	10000726 	beq	r2,zero,80106d0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 80106b4:	e0bffd17 	ldw	r2,-12(fp)
 80106b8:	10800017 	ldw	r2,0(r2)
 80106bc:	10800817 	ldw	r2,32(r2)
 80106c0:	e17fff17 	ldw	r5,-4(fp)
 80106c4:	e13ffd17 	ldw	r4,-12(fp)
 80106c8:	103ee83a 	callr	r2
 80106cc:	00000a06 	br	80106f8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 80106d0:	e0bfff17 	ldw	r2,-4(fp)
 80106d4:	00c80004 	movi	r3,8192
 80106d8:	10c00115 	stw	r3,4(r2)
      return 0;
 80106dc:	0005883a 	mov	r2,zero
 80106e0:	00000506 	br	80106f8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80106e4:	80106180 	call	8010618 <alt_get_errno>
 80106e8:	1007883a 	mov	r3,r2
 80106ec:	00801444 	movi	r2,81
 80106f0:	18800015 	stw	r2,0(r3)
    return -1;
 80106f4:	00bfffc4 	movi	r2,-1
  }
}
 80106f8:	e037883a 	mov	sp,fp
 80106fc:	dfc00117 	ldw	ra,4(sp)
 8010700:	df000017 	ldw	fp,0(sp)
 8010704:	dec00204 	addi	sp,sp,8
 8010708:	f800283a 	ret

0801070c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801070c:	defffe04 	addi	sp,sp,-8
 8010710:	dfc00115 	stw	ra,4(sp)
 8010714:	df000015 	stw	fp,0(sp)
 8010718:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801071c:	d0a01017 	ldw	r2,-32704(gp)
 8010720:	10000326 	beq	r2,zero,8010730 <alt_get_errno+0x24>
 8010724:	d0a01017 	ldw	r2,-32704(gp)
 8010728:	103ee83a 	callr	r2
 801072c:	00000106 	br	8010734 <alt_get_errno+0x28>
 8010730:	d0a76504 	addi	r2,gp,-25196
}
 8010734:	e037883a 	mov	sp,fp
 8010738:	dfc00117 	ldw	ra,4(sp)
 801073c:	df000017 	ldw	fp,0(sp)
 8010740:	dec00204 	addi	sp,sp,8
 8010744:	f800283a 	ret

08010748 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8010748:	deffed04 	addi	sp,sp,-76
 801074c:	dfc01215 	stw	ra,72(sp)
 8010750:	df001115 	stw	fp,68(sp)
 8010754:	df001104 	addi	fp,sp,68
 8010758:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801075c:	e0bfff17 	ldw	r2,-4(fp)
 8010760:	10000816 	blt	r2,zero,8010784 <isatty+0x3c>
 8010764:	01400304 	movi	r5,12
 8010768:	e13fff17 	ldw	r4,-4(fp)
 801076c:	800374c0 	call	800374c <__mulsi3>
 8010770:	1007883a 	mov	r3,r2
 8010774:	008200f4 	movhi	r2,2051
 8010778:	10889104 	addi	r2,r2,8772
 801077c:	1885883a 	add	r2,r3,r2
 8010780:	00000106 	br	8010788 <isatty+0x40>
 8010784:	0005883a 	mov	r2,zero
 8010788:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 801078c:	e0bfef17 	ldw	r2,-68(fp)
 8010790:	10000e26 	beq	r2,zero,80107cc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8010794:	e0bfef17 	ldw	r2,-68(fp)
 8010798:	10800017 	ldw	r2,0(r2)
 801079c:	10800817 	ldw	r2,32(r2)
 80107a0:	1000021e 	bne	r2,zero,80107ac <isatty+0x64>
    {
      return 1;
 80107a4:	00800044 	movi	r2,1
 80107a8:	00000d06 	br	80107e0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 80107ac:	e0bff004 	addi	r2,fp,-64
 80107b0:	100b883a 	mov	r5,r2
 80107b4:	e13fff17 	ldw	r4,-4(fp)
 80107b8:	80106540 	call	8010654 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 80107bc:	e0bff117 	ldw	r2,-60(fp)
 80107c0:	10880020 	cmpeqi	r2,r2,8192
 80107c4:	10803fcc 	andi	r2,r2,255
 80107c8:	00000506 	br	80107e0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80107cc:	801070c0 	call	801070c <alt_get_errno>
 80107d0:	1007883a 	mov	r3,r2
 80107d4:	00801444 	movi	r2,81
 80107d8:	18800015 	stw	r2,0(r3)
    return 0;
 80107dc:	0005883a 	mov	r2,zero
  }
}
 80107e0:	e037883a 	mov	sp,fp
 80107e4:	dfc00117 	ldw	ra,4(sp)
 80107e8:	df000017 	ldw	fp,0(sp)
 80107ec:	dec00204 	addi	sp,sp,8
 80107f0:	f800283a 	ret

080107f4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80107f4:	defffc04 	addi	sp,sp,-16
 80107f8:	df000315 	stw	fp,12(sp)
 80107fc:	df000304 	addi	fp,sp,12
 8010800:	e13ffd15 	stw	r4,-12(fp)
 8010804:	e17ffe15 	stw	r5,-8(fp)
 8010808:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 801080c:	e0fffe17 	ldw	r3,-8(fp)
 8010810:	e0bffd17 	ldw	r2,-12(fp)
 8010814:	18800c26 	beq	r3,r2,8010848 <alt_load_section+0x54>
  {
    while( to != end )
 8010818:	00000806 	br	801083c <alt_load_section+0x48>
    {
      *to++ = *from++;
 801081c:	e0bffe17 	ldw	r2,-8(fp)
 8010820:	10c00104 	addi	r3,r2,4
 8010824:	e0fffe15 	stw	r3,-8(fp)
 8010828:	e0fffd17 	ldw	r3,-12(fp)
 801082c:	19000104 	addi	r4,r3,4
 8010830:	e13ffd15 	stw	r4,-12(fp)
 8010834:	18c00017 	ldw	r3,0(r3)
 8010838:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 801083c:	e0fffe17 	ldw	r3,-8(fp)
 8010840:	e0bfff17 	ldw	r2,-4(fp)
 8010844:	18bff51e 	bne	r3,r2,801081c <__alt_data_end+0xfc01081c>
    {
      *to++ = *from++;
    }
  }
}
 8010848:	0001883a 	nop
 801084c:	e037883a 	mov	sp,fp
 8010850:	df000017 	ldw	fp,0(sp)
 8010854:	dec00104 	addi	sp,sp,4
 8010858:	f800283a 	ret

0801085c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 801085c:	defffe04 	addi	sp,sp,-8
 8010860:	dfc00115 	stw	ra,4(sp)
 8010864:	df000015 	stw	fp,0(sp)
 8010868:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 801086c:	018200f4 	movhi	r6,2051
 8010870:	318d1e04 	addi	r6,r6,13432
 8010874:	014200f4 	movhi	r5,2051
 8010878:	2945da04 	addi	r5,r5,5992
 801087c:	010200f4 	movhi	r4,2051
 8010880:	210d1e04 	addi	r4,r4,13432
 8010884:	80107f40 	call	80107f4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8010888:	01820034 	movhi	r6,2048
 801088c:	31808c04 	addi	r6,r6,560
 8010890:	01420034 	movhi	r5,2048
 8010894:	29400804 	addi	r5,r5,32
 8010898:	01020034 	movhi	r4,2048
 801089c:	21000804 	addi	r4,r4,32
 80108a0:	80107f40 	call	80107f4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 80108a4:	018200f4 	movhi	r6,2051
 80108a8:	3185da04 	addi	r6,r6,5992
 80108ac:	01420074 	movhi	r5,2049
 80108b0:	294c0004 	addi	r5,r5,12288
 80108b4:	01020074 	movhi	r4,2049
 80108b8:	210c0004 	addi	r4,r4,12288
 80108bc:	80107f40 	call	80107f4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80108c0:	80120ec0 	call	80120ec <alt_dcache_flush_all>
  alt_icache_flush_all();
 80108c4:	80122ac0 	call	80122ac <alt_icache_flush_all>
}
 80108c8:	0001883a 	nop
 80108cc:	e037883a 	mov	sp,fp
 80108d0:	dfc00117 	ldw	ra,4(sp)
 80108d4:	df000017 	ldw	fp,0(sp)
 80108d8:	dec00204 	addi	sp,sp,8
 80108dc:	f800283a 	ret

080108e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80108e0:	defffe04 	addi	sp,sp,-8
 80108e4:	dfc00115 	stw	ra,4(sp)
 80108e8:	df000015 	stw	fp,0(sp)
 80108ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80108f0:	d0a01017 	ldw	r2,-32704(gp)
 80108f4:	10000326 	beq	r2,zero,8010904 <alt_get_errno+0x24>
 80108f8:	d0a01017 	ldw	r2,-32704(gp)
 80108fc:	103ee83a 	callr	r2
 8010900:	00000106 	br	8010908 <alt_get_errno+0x28>
 8010904:	d0a76504 	addi	r2,gp,-25196
}
 8010908:	e037883a 	mov	sp,fp
 801090c:	dfc00117 	ldw	ra,4(sp)
 8010910:	df000017 	ldw	fp,0(sp)
 8010914:	dec00204 	addi	sp,sp,8
 8010918:	f800283a 	ret

0801091c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 801091c:	defff904 	addi	sp,sp,-28
 8010920:	dfc00615 	stw	ra,24(sp)
 8010924:	df000515 	stw	fp,20(sp)
 8010928:	df000504 	addi	fp,sp,20
 801092c:	e13ffd15 	stw	r4,-12(fp)
 8010930:	e17ffe15 	stw	r5,-8(fp)
 8010934:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8010938:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801093c:	e0bffd17 	ldw	r2,-12(fp)
 8010940:	10000816 	blt	r2,zero,8010964 <lseek+0x48>
 8010944:	01400304 	movi	r5,12
 8010948:	e13ffd17 	ldw	r4,-12(fp)
 801094c:	800374c0 	call	800374c <__mulsi3>
 8010950:	1007883a 	mov	r3,r2
 8010954:	008200f4 	movhi	r2,2051
 8010958:	10889104 	addi	r2,r2,8772
 801095c:	1885883a 	add	r2,r3,r2
 8010960:	00000106 	br	8010968 <lseek+0x4c>
 8010964:	0005883a 	mov	r2,zero
 8010968:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 801096c:	e0bffc17 	ldw	r2,-16(fp)
 8010970:	10001026 	beq	r2,zero,80109b4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8010974:	e0bffc17 	ldw	r2,-16(fp)
 8010978:	10800017 	ldw	r2,0(r2)
 801097c:	10800717 	ldw	r2,28(r2)
 8010980:	10000926 	beq	r2,zero,80109a8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8010984:	e0bffc17 	ldw	r2,-16(fp)
 8010988:	10800017 	ldw	r2,0(r2)
 801098c:	10800717 	ldw	r2,28(r2)
 8010990:	e1bfff17 	ldw	r6,-4(fp)
 8010994:	e17ffe17 	ldw	r5,-8(fp)
 8010998:	e13ffc17 	ldw	r4,-16(fp)
 801099c:	103ee83a 	callr	r2
 80109a0:	e0bffb15 	stw	r2,-20(fp)
 80109a4:	00000506 	br	80109bc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 80109a8:	00bfde84 	movi	r2,-134
 80109ac:	e0bffb15 	stw	r2,-20(fp)
 80109b0:	00000206 	br	80109bc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 80109b4:	00bfebc4 	movi	r2,-81
 80109b8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 80109bc:	e0bffb17 	ldw	r2,-20(fp)
 80109c0:	1000070e 	bge	r2,zero,80109e0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 80109c4:	80108e00 	call	80108e0 <alt_get_errno>
 80109c8:	1007883a 	mov	r3,r2
 80109cc:	e0bffb17 	ldw	r2,-20(fp)
 80109d0:	0085c83a 	sub	r2,zero,r2
 80109d4:	18800015 	stw	r2,0(r3)
    rc = -1;
 80109d8:	00bfffc4 	movi	r2,-1
 80109dc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 80109e0:	e0bffb17 	ldw	r2,-20(fp)
}
 80109e4:	e037883a 	mov	sp,fp
 80109e8:	dfc00117 	ldw	ra,4(sp)
 80109ec:	df000017 	ldw	fp,0(sp)
 80109f0:	dec00204 	addi	sp,sp,8
 80109f4:	f800283a 	ret

080109f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80109f8:	defffd04 	addi	sp,sp,-12
 80109fc:	dfc00215 	stw	ra,8(sp)
 8010a00:	df000115 	stw	fp,4(sp)
 8010a04:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8010a08:	0009883a 	mov	r4,zero
 8010a0c:	80110740 	call	8011074 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8010a10:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8010a14:	80110ac0 	call	80110ac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8010a18:	018200f4 	movhi	r6,2051
 8010a1c:	3185d004 	addi	r6,r6,5952
 8010a20:	014200f4 	movhi	r5,2051
 8010a24:	2945d004 	addi	r5,r5,5952
 8010a28:	010200f4 	movhi	r4,2051
 8010a2c:	2105d004 	addi	r4,r4,5952
 8010a30:	80126500 	call	8012650 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8010a34:	80121ec0 	call	80121ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8010a38:	01020074 	movhi	r4,2049
 8010a3c:	21089304 	addi	r4,r4,8780
 8010a40:	8012c6c0 	call	8012c6c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8010a44:	d0a76617 	ldw	r2,-25192(gp)
 8010a48:	d0e76717 	ldw	r3,-25188(gp)
 8010a4c:	d1276817 	ldw	r4,-25184(gp)
 8010a50:	200d883a 	mov	r6,r4
 8010a54:	180b883a 	mov	r5,r3
 8010a58:	1009883a 	mov	r4,r2
 8010a5c:	80009ec0 	call	80009ec <main>
 8010a60:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8010a64:	01000044 	movi	r4,1
 8010a68:	80105140 	call	8010514 <close>
  exit (result);
 8010a6c:	e13fff17 	ldw	r4,-4(fp)
 8010a70:	8012c800 	call	8012c80 <exit>

08010a74 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8010a74:	defffe04 	addi	sp,sp,-8
 8010a78:	df000115 	stw	fp,4(sp)
 8010a7c:	df000104 	addi	fp,sp,4
 8010a80:	e13fff15 	stw	r4,-4(fp)
}
 8010a84:	0001883a 	nop
 8010a88:	e037883a 	mov	sp,fp
 8010a8c:	df000017 	ldw	fp,0(sp)
 8010a90:	dec00104 	addi	sp,sp,4
 8010a94:	f800283a 	ret

08010a98 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8010a98:	defffe04 	addi	sp,sp,-8
 8010a9c:	df000115 	stw	fp,4(sp)
 8010aa0:	df000104 	addi	fp,sp,4
 8010aa4:	e13fff15 	stw	r4,-4(fp)
}
 8010aa8:	0001883a 	nop
 8010aac:	e037883a 	mov	sp,fp
 8010ab0:	df000017 	ldw	fp,0(sp)
 8010ab4:	dec00104 	addi	sp,sp,4
 8010ab8:	f800283a 	ret

08010abc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010abc:	defffe04 	addi	sp,sp,-8
 8010ac0:	dfc00115 	stw	ra,4(sp)
 8010ac4:	df000015 	stw	fp,0(sp)
 8010ac8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010acc:	d0a01017 	ldw	r2,-32704(gp)
 8010ad0:	10000326 	beq	r2,zero,8010ae0 <alt_get_errno+0x24>
 8010ad4:	d0a01017 	ldw	r2,-32704(gp)
 8010ad8:	103ee83a 	callr	r2
 8010adc:	00000106 	br	8010ae4 <alt_get_errno+0x28>
 8010ae0:	d0a76504 	addi	r2,gp,-25196
}
 8010ae4:	e037883a 	mov	sp,fp
 8010ae8:	dfc00117 	ldw	ra,4(sp)
 8010aec:	df000017 	ldw	fp,0(sp)
 8010af0:	dec00204 	addi	sp,sp,8
 8010af4:	f800283a 	ret

08010af8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8010af8:	defff904 	addi	sp,sp,-28
 8010afc:	dfc00615 	stw	ra,24(sp)
 8010b00:	df000515 	stw	fp,20(sp)
 8010b04:	df000504 	addi	fp,sp,20
 8010b08:	e13ffd15 	stw	r4,-12(fp)
 8010b0c:	e17ffe15 	stw	r5,-8(fp)
 8010b10:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8010b14:	e0bffd17 	ldw	r2,-12(fp)
 8010b18:	10000816 	blt	r2,zero,8010b3c <read+0x44>
 8010b1c:	01400304 	movi	r5,12
 8010b20:	e13ffd17 	ldw	r4,-12(fp)
 8010b24:	800374c0 	call	800374c <__mulsi3>
 8010b28:	1007883a 	mov	r3,r2
 8010b2c:	008200f4 	movhi	r2,2051
 8010b30:	10889104 	addi	r2,r2,8772
 8010b34:	1885883a 	add	r2,r3,r2
 8010b38:	00000106 	br	8010b40 <read+0x48>
 8010b3c:	0005883a 	mov	r2,zero
 8010b40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8010b44:	e0bffb17 	ldw	r2,-20(fp)
 8010b48:	10002226 	beq	r2,zero,8010bd4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8010b4c:	e0bffb17 	ldw	r2,-20(fp)
 8010b50:	10800217 	ldw	r2,8(r2)
 8010b54:	108000cc 	andi	r2,r2,3
 8010b58:	10800060 	cmpeqi	r2,r2,1
 8010b5c:	1000181e 	bne	r2,zero,8010bc0 <read+0xc8>
        (fd->dev->read))
 8010b60:	e0bffb17 	ldw	r2,-20(fp)
 8010b64:	10800017 	ldw	r2,0(r2)
 8010b68:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8010b6c:	10001426 	beq	r2,zero,8010bc0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8010b70:	e0bffb17 	ldw	r2,-20(fp)
 8010b74:	10800017 	ldw	r2,0(r2)
 8010b78:	10800517 	ldw	r2,20(r2)
 8010b7c:	e0ffff17 	ldw	r3,-4(fp)
 8010b80:	180d883a 	mov	r6,r3
 8010b84:	e17ffe17 	ldw	r5,-8(fp)
 8010b88:	e13ffb17 	ldw	r4,-20(fp)
 8010b8c:	103ee83a 	callr	r2
 8010b90:	e0bffc15 	stw	r2,-16(fp)
 8010b94:	e0bffc17 	ldw	r2,-16(fp)
 8010b98:	1000070e 	bge	r2,zero,8010bb8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 8010b9c:	8010abc0 	call	8010abc <alt_get_errno>
 8010ba0:	1007883a 	mov	r3,r2
 8010ba4:	e0bffc17 	ldw	r2,-16(fp)
 8010ba8:	0085c83a 	sub	r2,zero,r2
 8010bac:	18800015 	stw	r2,0(r3)
          return -1;
 8010bb0:	00bfffc4 	movi	r2,-1
 8010bb4:	00000c06 	br	8010be8 <read+0xf0>
        }
        return rval;
 8010bb8:	e0bffc17 	ldw	r2,-16(fp)
 8010bbc:	00000a06 	br	8010be8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8010bc0:	8010abc0 	call	8010abc <alt_get_errno>
 8010bc4:	1007883a 	mov	r3,r2
 8010bc8:	00800344 	movi	r2,13
 8010bcc:	18800015 	stw	r2,0(r3)
 8010bd0:	00000406 	br	8010be4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8010bd4:	8010abc0 	call	8010abc <alt_get_errno>
 8010bd8:	1007883a 	mov	r3,r2
 8010bdc:	00801444 	movi	r2,81
 8010be0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8010be4:	00bfffc4 	movi	r2,-1
}
 8010be8:	e037883a 	mov	sp,fp
 8010bec:	dfc00117 	ldw	ra,4(sp)
 8010bf0:	df000017 	ldw	fp,0(sp)
 8010bf4:	dec00204 	addi	sp,sp,8
 8010bf8:	f800283a 	ret

08010bfc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8010bfc:	defffc04 	addi	sp,sp,-16
 8010c00:	dfc00315 	stw	ra,12(sp)
 8010c04:	df000215 	stw	fp,8(sp)
 8010c08:	dc000115 	stw	r16,4(sp)
 8010c0c:	df000204 	addi	fp,sp,8
 8010c10:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 8010c14:	e0bffe17 	ldw	r2,-8(fp)
 8010c18:	108000d0 	cmplti	r2,r2,3
 8010c1c:	1000111e 	bne	r2,zero,8010c64 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 8010c20:	040200f4 	movhi	r16,2051
 8010c24:	84089104 	addi	r16,r16,8772
 8010c28:	e0bffe17 	ldw	r2,-8(fp)
 8010c2c:	01400304 	movi	r5,12
 8010c30:	1009883a 	mov	r4,r2
 8010c34:	800374c0 	call	800374c <__mulsi3>
 8010c38:	8085883a 	add	r2,r16,r2
 8010c3c:	10800204 	addi	r2,r2,8
 8010c40:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8010c44:	040200f4 	movhi	r16,2051
 8010c48:	84089104 	addi	r16,r16,8772
 8010c4c:	e0bffe17 	ldw	r2,-8(fp)
 8010c50:	01400304 	movi	r5,12
 8010c54:	1009883a 	mov	r4,r2
 8010c58:	800374c0 	call	800374c <__mulsi3>
 8010c5c:	8085883a 	add	r2,r16,r2
 8010c60:	10000015 	stw	zero,0(r2)
  }
}
 8010c64:	0001883a 	nop
 8010c68:	e6ffff04 	addi	sp,fp,-4
 8010c6c:	dfc00217 	ldw	ra,8(sp)
 8010c70:	df000117 	ldw	fp,4(sp)
 8010c74:	dc000017 	ldw	r16,0(sp)
 8010c78:	dec00304 	addi	sp,sp,12
 8010c7c:	f800283a 	ret

08010c80 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8010c80:	defff904 	addi	sp,sp,-28
 8010c84:	df000615 	stw	fp,24(sp)
 8010c88:	df000604 	addi	fp,sp,24
 8010c8c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010c90:	0005303a 	rdctl	r2,status
 8010c94:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010c98:	e0fffe17 	ldw	r3,-8(fp)
 8010c9c:	00bfff84 	movi	r2,-2
 8010ca0:	1884703a 	and	r2,r3,r2
 8010ca4:	1001703a 	wrctl	status,r2
  
  return context;
 8010ca8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8010cac:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8010cb0:	d0a01117 	ldw	r2,-32700(gp)
 8010cb4:	10c000c4 	addi	r3,r2,3
 8010cb8:	00bfff04 	movi	r2,-4
 8010cbc:	1884703a 	and	r2,r3,r2
 8010cc0:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8010cc4:	d0e01117 	ldw	r3,-32700(gp)
 8010cc8:	e0bfff17 	ldw	r2,-4(fp)
 8010ccc:	1887883a 	add	r3,r3,r2
 8010cd0:	00830034 	movhi	r2,3072
 8010cd4:	10800004 	addi	r2,r2,0
 8010cd8:	10c0062e 	bgeu	r2,r3,8010cf4 <sbrk+0x74>
 8010cdc:	e0bffb17 	ldw	r2,-20(fp)
 8010ce0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010ce4:	e0bffa17 	ldw	r2,-24(fp)
 8010ce8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8010cec:	00bfffc4 	movi	r2,-1
 8010cf0:	00000b06 	br	8010d20 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8010cf4:	d0a01117 	ldw	r2,-32700(gp)
 8010cf8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8010cfc:	d0e01117 	ldw	r3,-32700(gp)
 8010d00:	e0bfff17 	ldw	r2,-4(fp)
 8010d04:	1885883a 	add	r2,r3,r2
 8010d08:	d0a01115 	stw	r2,-32700(gp)
 8010d0c:	e0bffb17 	ldw	r2,-20(fp)
 8010d10:	e0bffc15 	stw	r2,-16(fp)
 8010d14:	e0bffc17 	ldw	r2,-16(fp)
 8010d18:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8010d1c:	e0bffd17 	ldw	r2,-12(fp)
} 
 8010d20:	e037883a 	mov	sp,fp
 8010d24:	df000017 	ldw	fp,0(sp)
 8010d28:	dec00104 	addi	sp,sp,4
 8010d2c:	f800283a 	ret

08010d30 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8010d30:	defffa04 	addi	sp,sp,-24
 8010d34:	df000515 	stw	fp,20(sp)
 8010d38:	df000504 	addi	fp,sp,20
 8010d3c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010d40:	0005303a 	rdctl	r2,status
 8010d44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010d48:	e0fffc17 	ldw	r3,-16(fp)
 8010d4c:	00bfff84 	movi	r2,-2
 8010d50:	1884703a 	and	r2,r3,r2
 8010d54:	1001703a 	wrctl	status,r2
  
  return context;
 8010d58:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8010d5c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8010d60:	e0bfff17 	ldw	r2,-4(fp)
 8010d64:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8010d68:	e0bffd17 	ldw	r2,-12(fp)
 8010d6c:	10800017 	ldw	r2,0(r2)
 8010d70:	e0fffd17 	ldw	r3,-12(fp)
 8010d74:	18c00117 	ldw	r3,4(r3)
 8010d78:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8010d7c:	e0bffd17 	ldw	r2,-12(fp)
 8010d80:	10800117 	ldw	r2,4(r2)
 8010d84:	e0fffd17 	ldw	r3,-12(fp)
 8010d88:	18c00017 	ldw	r3,0(r3)
 8010d8c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8010d90:	e0bffd17 	ldw	r2,-12(fp)
 8010d94:	e0fffd17 	ldw	r3,-12(fp)
 8010d98:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8010d9c:	e0bffd17 	ldw	r2,-12(fp)
 8010da0:	e0fffd17 	ldw	r3,-12(fp)
 8010da4:	10c00015 	stw	r3,0(r2)
 8010da8:	e0bffb17 	ldw	r2,-20(fp)
 8010dac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010db0:	e0bffe17 	ldw	r2,-8(fp)
 8010db4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8010db8:	0001883a 	nop
 8010dbc:	e037883a 	mov	sp,fp
 8010dc0:	df000017 	ldw	fp,0(sp)
 8010dc4:	dec00104 	addi	sp,sp,4
 8010dc8:	f800283a 	ret

08010dcc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8010dcc:	defffb04 	addi	sp,sp,-20
 8010dd0:	dfc00415 	stw	ra,16(sp)
 8010dd4:	df000315 	stw	fp,12(sp)
 8010dd8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8010ddc:	d0a01217 	ldw	r2,-32696(gp)
 8010de0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8010de4:	d0a76a17 	ldw	r2,-25176(gp)
 8010de8:	10800044 	addi	r2,r2,1
 8010dec:	d0a76a15 	stw	r2,-25176(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010df0:	00002e06 	br	8010eac <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8010df4:	e0bffd17 	ldw	r2,-12(fp)
 8010df8:	10800017 	ldw	r2,0(r2)
 8010dfc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8010e00:	e0bffd17 	ldw	r2,-12(fp)
 8010e04:	10800403 	ldbu	r2,16(r2)
 8010e08:	10803fcc 	andi	r2,r2,255
 8010e0c:	10000426 	beq	r2,zero,8010e20 <alt_tick+0x54>
 8010e10:	d0a76a17 	ldw	r2,-25176(gp)
 8010e14:	1000021e 	bne	r2,zero,8010e20 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8010e18:	e0bffd17 	ldw	r2,-12(fp)
 8010e1c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8010e20:	e0bffd17 	ldw	r2,-12(fp)
 8010e24:	10800217 	ldw	r2,8(r2)
 8010e28:	d0e76a17 	ldw	r3,-25176(gp)
 8010e2c:	18801d36 	bltu	r3,r2,8010ea4 <alt_tick+0xd8>
 8010e30:	e0bffd17 	ldw	r2,-12(fp)
 8010e34:	10800403 	ldbu	r2,16(r2)
 8010e38:	10803fcc 	andi	r2,r2,255
 8010e3c:	1000191e 	bne	r2,zero,8010ea4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8010e40:	e0bffd17 	ldw	r2,-12(fp)
 8010e44:	10800317 	ldw	r2,12(r2)
 8010e48:	e0fffd17 	ldw	r3,-12(fp)
 8010e4c:	18c00517 	ldw	r3,20(r3)
 8010e50:	1809883a 	mov	r4,r3
 8010e54:	103ee83a 	callr	r2
 8010e58:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8010e5c:	e0bfff17 	ldw	r2,-4(fp)
 8010e60:	1000031e 	bne	r2,zero,8010e70 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8010e64:	e13ffd17 	ldw	r4,-12(fp)
 8010e68:	8010d300 	call	8010d30 <alt_alarm_stop>
 8010e6c:	00000d06 	br	8010ea4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8010e70:	e0bffd17 	ldw	r2,-12(fp)
 8010e74:	10c00217 	ldw	r3,8(r2)
 8010e78:	e0bfff17 	ldw	r2,-4(fp)
 8010e7c:	1887883a 	add	r3,r3,r2
 8010e80:	e0bffd17 	ldw	r2,-12(fp)
 8010e84:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8010e88:	e0bffd17 	ldw	r2,-12(fp)
 8010e8c:	10c00217 	ldw	r3,8(r2)
 8010e90:	d0a76a17 	ldw	r2,-25176(gp)
 8010e94:	1880032e 	bgeu	r3,r2,8010ea4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8010e98:	e0bffd17 	ldw	r2,-12(fp)
 8010e9c:	00c00044 	movi	r3,1
 8010ea0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8010ea4:	e0bffe17 	ldw	r2,-8(fp)
 8010ea8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010eac:	e0fffd17 	ldw	r3,-12(fp)
 8010eb0:	d0a01204 	addi	r2,gp,-32696
 8010eb4:	18bfcf1e 	bne	r3,r2,8010df4 <__alt_data_end+0xfc010df4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8010eb8:	0001883a 	nop
}
 8010ebc:	0001883a 	nop
 8010ec0:	e037883a 	mov	sp,fp
 8010ec4:	dfc00117 	ldw	ra,4(sp)
 8010ec8:	df000017 	ldw	fp,0(sp)
 8010ecc:	dec00204 	addi	sp,sp,8
 8010ed0:	f800283a 	ret

08010ed4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8010ed4:	defffd04 	addi	sp,sp,-12
 8010ed8:	dfc00215 	stw	ra,8(sp)
 8010edc:	df000115 	stw	fp,4(sp)
 8010ee0:	df000104 	addi	fp,sp,4
 8010ee4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8010ee8:	e13fff17 	ldw	r4,-4(fp)
 8010eec:	8011f940 	call	8011f94 <alt_busy_sleep>
}
 8010ef0:	e037883a 	mov	sp,fp
 8010ef4:	dfc00117 	ldw	ra,4(sp)
 8010ef8:	df000017 	ldw	fp,0(sp)
 8010efc:	dec00204 	addi	sp,sp,8
 8010f00:	f800283a 	ret

08010f04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010f04:	defffe04 	addi	sp,sp,-8
 8010f08:	dfc00115 	stw	ra,4(sp)
 8010f0c:	df000015 	stw	fp,0(sp)
 8010f10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010f14:	d0a01017 	ldw	r2,-32704(gp)
 8010f18:	10000326 	beq	r2,zero,8010f28 <alt_get_errno+0x24>
 8010f1c:	d0a01017 	ldw	r2,-32704(gp)
 8010f20:	103ee83a 	callr	r2
 8010f24:	00000106 	br	8010f2c <alt_get_errno+0x28>
 8010f28:	d0a76504 	addi	r2,gp,-25196
}
 8010f2c:	e037883a 	mov	sp,fp
 8010f30:	dfc00117 	ldw	ra,4(sp)
 8010f34:	df000017 	ldw	fp,0(sp)
 8010f38:	dec00204 	addi	sp,sp,8
 8010f3c:	f800283a 	ret

08010f40 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8010f40:	defff904 	addi	sp,sp,-28
 8010f44:	dfc00615 	stw	ra,24(sp)
 8010f48:	df000515 	stw	fp,20(sp)
 8010f4c:	df000504 	addi	fp,sp,20
 8010f50:	e13ffd15 	stw	r4,-12(fp)
 8010f54:	e17ffe15 	stw	r5,-8(fp)
 8010f58:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8010f5c:	e0bffd17 	ldw	r2,-12(fp)
 8010f60:	10000816 	blt	r2,zero,8010f84 <write+0x44>
 8010f64:	01400304 	movi	r5,12
 8010f68:	e13ffd17 	ldw	r4,-12(fp)
 8010f6c:	800374c0 	call	800374c <__mulsi3>
 8010f70:	1007883a 	mov	r3,r2
 8010f74:	008200f4 	movhi	r2,2051
 8010f78:	10889104 	addi	r2,r2,8772
 8010f7c:	1885883a 	add	r2,r3,r2
 8010f80:	00000106 	br	8010f88 <write+0x48>
 8010f84:	0005883a 	mov	r2,zero
 8010f88:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8010f8c:	e0bffb17 	ldw	r2,-20(fp)
 8010f90:	10002126 	beq	r2,zero,8011018 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8010f94:	e0bffb17 	ldw	r2,-20(fp)
 8010f98:	10800217 	ldw	r2,8(r2)
 8010f9c:	108000cc 	andi	r2,r2,3
 8010fa0:	10001826 	beq	r2,zero,8011004 <write+0xc4>
 8010fa4:	e0bffb17 	ldw	r2,-20(fp)
 8010fa8:	10800017 	ldw	r2,0(r2)
 8010fac:	10800617 	ldw	r2,24(r2)
 8010fb0:	10001426 	beq	r2,zero,8011004 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8010fb4:	e0bffb17 	ldw	r2,-20(fp)
 8010fb8:	10800017 	ldw	r2,0(r2)
 8010fbc:	10800617 	ldw	r2,24(r2)
 8010fc0:	e0ffff17 	ldw	r3,-4(fp)
 8010fc4:	180d883a 	mov	r6,r3
 8010fc8:	e17ffe17 	ldw	r5,-8(fp)
 8010fcc:	e13ffb17 	ldw	r4,-20(fp)
 8010fd0:	103ee83a 	callr	r2
 8010fd4:	e0bffc15 	stw	r2,-16(fp)
 8010fd8:	e0bffc17 	ldw	r2,-16(fp)
 8010fdc:	1000070e 	bge	r2,zero,8010ffc <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8010fe0:	8010f040 	call	8010f04 <alt_get_errno>
 8010fe4:	1007883a 	mov	r3,r2
 8010fe8:	e0bffc17 	ldw	r2,-16(fp)
 8010fec:	0085c83a 	sub	r2,zero,r2
 8010ff0:	18800015 	stw	r2,0(r3)
        return -1;
 8010ff4:	00bfffc4 	movi	r2,-1
 8010ff8:	00000c06 	br	801102c <write+0xec>
      }
      return rval;
 8010ffc:	e0bffc17 	ldw	r2,-16(fp)
 8011000:	00000a06 	br	801102c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8011004:	8010f040 	call	8010f04 <alt_get_errno>
 8011008:	1007883a 	mov	r3,r2
 801100c:	00800344 	movi	r2,13
 8011010:	18800015 	stw	r2,0(r3)
 8011014:	00000406 	br	8011028 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8011018:	8010f040 	call	8010f04 <alt_get_errno>
 801101c:	1007883a 	mov	r3,r2
 8011020:	00801444 	movi	r2,81
 8011024:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8011028:	00bfffc4 	movi	r2,-1
}
 801102c:	e037883a 	mov	sp,fp
 8011030:	dfc00117 	ldw	ra,4(sp)
 8011034:	df000017 	ldw	fp,0(sp)
 8011038:	dec00204 	addi	sp,sp,8
 801103c:	f800283a 	ret

08011040 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8011040:	defffd04 	addi	sp,sp,-12
 8011044:	dfc00215 	stw	ra,8(sp)
 8011048:	df000115 	stw	fp,4(sp)
 801104c:	df000104 	addi	fp,sp,4
 8011050:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8011054:	d1600d04 	addi	r5,gp,-32716
 8011058:	e13fff17 	ldw	r4,-4(fp)
 801105c:	80121480 	call	8012148 <alt_dev_llist_insert>
}
 8011060:	e037883a 	mov	sp,fp
 8011064:	dfc00117 	ldw	ra,4(sp)
 8011068:	df000017 	ldw	fp,0(sp)
 801106c:	dec00204 	addi	sp,sp,8
 8011070:	f800283a 	ret

08011074 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8011074:	defffd04 	addi	sp,sp,-12
 8011078:	dfc00215 	stw	ra,8(sp)
 801107c:	df000115 	stw	fp,4(sp)
 8011080:	df000104 	addi	fp,sp,4
 8011084:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8011088:	80129500 	call	8012950 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 801108c:	00800044 	movi	r2,1
 8011090:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8011094:	0001883a 	nop
 8011098:	e037883a 	mov	sp,fp
 801109c:	dfc00117 	ldw	ra,4(sp)
 80110a0:	df000017 	ldw	fp,0(sp)
 80110a4:	dec00204 	addi	sp,sp,8
 80110a8:	f800283a 	ret

080110ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80110ac:	defffe04 	addi	sp,sp,-8
 80110b0:	dfc00115 	stw	ra,4(sp)
 80110b4:	df000015 	stw	fp,0(sp)
 80110b8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 80110bc:	01c0fa04 	movi	r7,1000
 80110c0:	01800084 	movi	r6,2
 80110c4:	000b883a 	mov	r5,zero
 80110c8:	01003004 	movi	r4,192
 80110cc:	8011dec0 	call	8011dec <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 80110d0:	01800044 	movi	r6,1
 80110d4:	000b883a 	mov	r5,zero
 80110d8:	010200f4 	movhi	r4,2051
 80110dc:	2108fb04 	addi	r4,r4,9196
 80110e0:	80112740 	call	8011274 <altera_avalon_jtag_uart_init>
 80110e4:	010200f4 	movhi	r4,2051
 80110e8:	2108f104 	addi	r4,r4,9156
 80110ec:	80110400 	call	8011040 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 80110f0:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 80110f4:	0001883a 	nop
}
 80110f8:	0001883a 	nop
 80110fc:	e037883a 	mov	sp,fp
 8011100:	dfc00117 	ldw	ra,4(sp)
 8011104:	df000017 	ldw	fp,0(sp)
 8011108:	dec00204 	addi	sp,sp,8
 801110c:	f800283a 	ret

08011110 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8011110:	defffa04 	addi	sp,sp,-24
 8011114:	dfc00515 	stw	ra,20(sp)
 8011118:	df000415 	stw	fp,16(sp)
 801111c:	df000404 	addi	fp,sp,16
 8011120:	e13ffd15 	stw	r4,-12(fp)
 8011124:	e17ffe15 	stw	r5,-8(fp)
 8011128:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801112c:	e0bffd17 	ldw	r2,-12(fp)
 8011130:	10800017 	ldw	r2,0(r2)
 8011134:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8011138:	e0bffc17 	ldw	r2,-16(fp)
 801113c:	10c00a04 	addi	r3,r2,40
 8011140:	e0bffd17 	ldw	r2,-12(fp)
 8011144:	10800217 	ldw	r2,8(r2)
 8011148:	100f883a 	mov	r7,r2
 801114c:	e1bfff17 	ldw	r6,-4(fp)
 8011150:	e17ffe17 	ldw	r5,-8(fp)
 8011154:	1809883a 	mov	r4,r3
 8011158:	80117380 	call	8011738 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 801115c:	e037883a 	mov	sp,fp
 8011160:	dfc00117 	ldw	ra,4(sp)
 8011164:	df000017 	ldw	fp,0(sp)
 8011168:	dec00204 	addi	sp,sp,8
 801116c:	f800283a 	ret

08011170 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8011170:	defffa04 	addi	sp,sp,-24
 8011174:	dfc00515 	stw	ra,20(sp)
 8011178:	df000415 	stw	fp,16(sp)
 801117c:	df000404 	addi	fp,sp,16
 8011180:	e13ffd15 	stw	r4,-12(fp)
 8011184:	e17ffe15 	stw	r5,-8(fp)
 8011188:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801118c:	e0bffd17 	ldw	r2,-12(fp)
 8011190:	10800017 	ldw	r2,0(r2)
 8011194:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8011198:	e0bffc17 	ldw	r2,-16(fp)
 801119c:	10c00a04 	addi	r3,r2,40
 80111a0:	e0bffd17 	ldw	r2,-12(fp)
 80111a4:	10800217 	ldw	r2,8(r2)
 80111a8:	100f883a 	mov	r7,r2
 80111ac:	e1bfff17 	ldw	r6,-4(fp)
 80111b0:	e17ffe17 	ldw	r5,-8(fp)
 80111b4:	1809883a 	mov	r4,r3
 80111b8:	80119540 	call	8011954 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 80111bc:	e037883a 	mov	sp,fp
 80111c0:	dfc00117 	ldw	ra,4(sp)
 80111c4:	df000017 	ldw	fp,0(sp)
 80111c8:	dec00204 	addi	sp,sp,8
 80111cc:	f800283a 	ret

080111d0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 80111d0:	defffc04 	addi	sp,sp,-16
 80111d4:	dfc00315 	stw	ra,12(sp)
 80111d8:	df000215 	stw	fp,8(sp)
 80111dc:	df000204 	addi	fp,sp,8
 80111e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80111e4:	e0bfff17 	ldw	r2,-4(fp)
 80111e8:	10800017 	ldw	r2,0(r2)
 80111ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 80111f0:	e0bffe17 	ldw	r2,-8(fp)
 80111f4:	10c00a04 	addi	r3,r2,40
 80111f8:	e0bfff17 	ldw	r2,-4(fp)
 80111fc:	10800217 	ldw	r2,8(r2)
 8011200:	100b883a 	mov	r5,r2
 8011204:	1809883a 	mov	r4,r3
 8011208:	80115e00 	call	80115e0 <altera_avalon_jtag_uart_close>
}
 801120c:	e037883a 	mov	sp,fp
 8011210:	dfc00117 	ldw	ra,4(sp)
 8011214:	df000017 	ldw	fp,0(sp)
 8011218:	dec00204 	addi	sp,sp,8
 801121c:	f800283a 	ret

08011220 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8011220:	defffa04 	addi	sp,sp,-24
 8011224:	dfc00515 	stw	ra,20(sp)
 8011228:	df000415 	stw	fp,16(sp)
 801122c:	df000404 	addi	fp,sp,16
 8011230:	e13ffd15 	stw	r4,-12(fp)
 8011234:	e17ffe15 	stw	r5,-8(fp)
 8011238:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 801123c:	e0bffd17 	ldw	r2,-12(fp)
 8011240:	10800017 	ldw	r2,0(r2)
 8011244:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8011248:	e0bffc17 	ldw	r2,-16(fp)
 801124c:	10800a04 	addi	r2,r2,40
 8011250:	e1bfff17 	ldw	r6,-4(fp)
 8011254:	e17ffe17 	ldw	r5,-8(fp)
 8011258:	1009883a 	mov	r4,r2
 801125c:	80116480 	call	8011648 <altera_avalon_jtag_uart_ioctl>
}
 8011260:	e037883a 	mov	sp,fp
 8011264:	dfc00117 	ldw	ra,4(sp)
 8011268:	df000017 	ldw	fp,0(sp)
 801126c:	dec00204 	addi	sp,sp,8
 8011270:	f800283a 	ret

08011274 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8011274:	defffa04 	addi	sp,sp,-24
 8011278:	dfc00515 	stw	ra,20(sp)
 801127c:	df000415 	stw	fp,16(sp)
 8011280:	df000404 	addi	fp,sp,16
 8011284:	e13ffd15 	stw	r4,-12(fp)
 8011288:	e17ffe15 	stw	r5,-8(fp)
 801128c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8011290:	e0bffd17 	ldw	r2,-12(fp)
 8011294:	00c00044 	movi	r3,1
 8011298:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 801129c:	e0bffd17 	ldw	r2,-12(fp)
 80112a0:	10800017 	ldw	r2,0(r2)
 80112a4:	10800104 	addi	r2,r2,4
 80112a8:	1007883a 	mov	r3,r2
 80112ac:	e0bffd17 	ldw	r2,-12(fp)
 80112b0:	10800817 	ldw	r2,32(r2)
 80112b4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 80112b8:	e0bffe17 	ldw	r2,-8(fp)
 80112bc:	e0ffff17 	ldw	r3,-4(fp)
 80112c0:	d8000015 	stw	zero,0(sp)
 80112c4:	e1fffd17 	ldw	r7,-12(fp)
 80112c8:	01820074 	movhi	r6,2049
 80112cc:	3184cd04 	addi	r6,r6,4916
 80112d0:	180b883a 	mov	r5,r3
 80112d4:	1009883a 	mov	r4,r2
 80112d8:	80122cc0 	call	80122cc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 80112dc:	e0bffd17 	ldw	r2,-12(fp)
 80112e0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 80112e4:	e0bffd17 	ldw	r2,-12(fp)
 80112e8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80112ec:	d0e76917 	ldw	r3,-25180(gp)
 80112f0:	e1fffd17 	ldw	r7,-12(fp)
 80112f4:	01820074 	movhi	r6,2049
 80112f8:	31855004 	addi	r6,r6,5440
 80112fc:	180b883a 	mov	r5,r3
 8011300:	1009883a 	mov	r4,r2
 8011304:	8011e680 	call	8011e68 <alt_alarm_start>
 8011308:	1000040e 	bge	r2,zero,801131c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 801130c:	e0fffd17 	ldw	r3,-12(fp)
 8011310:	00a00034 	movhi	r2,32768
 8011314:	10bfffc4 	addi	r2,r2,-1
 8011318:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 801131c:	0001883a 	nop
 8011320:	e037883a 	mov	sp,fp
 8011324:	dfc00117 	ldw	ra,4(sp)
 8011328:	df000017 	ldw	fp,0(sp)
 801132c:	dec00204 	addi	sp,sp,8
 8011330:	f800283a 	ret

08011334 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8011334:	defff804 	addi	sp,sp,-32
 8011338:	df000715 	stw	fp,28(sp)
 801133c:	df000704 	addi	fp,sp,28
 8011340:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8011344:	e0bfff17 	ldw	r2,-4(fp)
 8011348:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 801134c:	e0bffb17 	ldw	r2,-20(fp)
 8011350:	10800017 	ldw	r2,0(r2)
 8011354:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8011358:	e0bffc17 	ldw	r2,-16(fp)
 801135c:	10800104 	addi	r2,r2,4
 8011360:	10800037 	ldwio	r2,0(r2)
 8011364:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8011368:	e0bffd17 	ldw	r2,-12(fp)
 801136c:	1080c00c 	andi	r2,r2,768
 8011370:	10006d26 	beq	r2,zero,8011528 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8011374:	e0bffd17 	ldw	r2,-12(fp)
 8011378:	1080400c 	andi	r2,r2,256
 801137c:	10003526 	beq	r2,zero,8011454 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8011380:	00800074 	movhi	r2,1
 8011384:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8011388:	e0bffb17 	ldw	r2,-20(fp)
 801138c:	10800a17 	ldw	r2,40(r2)
 8011390:	10800044 	addi	r2,r2,1
 8011394:	1081ffcc 	andi	r2,r2,2047
 8011398:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 801139c:	e0bffb17 	ldw	r2,-20(fp)
 80113a0:	10c00b17 	ldw	r3,44(r2)
 80113a4:	e0bffe17 	ldw	r2,-8(fp)
 80113a8:	18801526 	beq	r3,r2,8011400 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 80113ac:	e0bffc17 	ldw	r2,-16(fp)
 80113b0:	10800037 	ldwio	r2,0(r2)
 80113b4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 80113b8:	e0bff917 	ldw	r2,-28(fp)
 80113bc:	10a0000c 	andi	r2,r2,32768
 80113c0:	10001126 	beq	r2,zero,8011408 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 80113c4:	e0bffb17 	ldw	r2,-20(fp)
 80113c8:	10800a17 	ldw	r2,40(r2)
 80113cc:	e0fff917 	ldw	r3,-28(fp)
 80113d0:	1809883a 	mov	r4,r3
 80113d4:	e0fffb17 	ldw	r3,-20(fp)
 80113d8:	1885883a 	add	r2,r3,r2
 80113dc:	10800e04 	addi	r2,r2,56
 80113e0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80113e4:	e0bffb17 	ldw	r2,-20(fp)
 80113e8:	10800a17 	ldw	r2,40(r2)
 80113ec:	10800044 	addi	r2,r2,1
 80113f0:	10c1ffcc 	andi	r3,r2,2047
 80113f4:	e0bffb17 	ldw	r2,-20(fp)
 80113f8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 80113fc:	003fe206 	br	8011388 <__alt_data_end+0xfc011388>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8011400:	0001883a 	nop
 8011404:	00000106 	br	801140c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8011408:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 801140c:	e0bff917 	ldw	r2,-28(fp)
 8011410:	10bfffec 	andhi	r2,r2,65535
 8011414:	10000f26 	beq	r2,zero,8011454 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8011418:	e0bffb17 	ldw	r2,-20(fp)
 801141c:	10c00817 	ldw	r3,32(r2)
 8011420:	00bfff84 	movi	r2,-2
 8011424:	1886703a 	and	r3,r3,r2
 8011428:	e0bffb17 	ldw	r2,-20(fp)
 801142c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8011430:	e0bffc17 	ldw	r2,-16(fp)
 8011434:	10800104 	addi	r2,r2,4
 8011438:	1007883a 	mov	r3,r2
 801143c:	e0bffb17 	ldw	r2,-20(fp)
 8011440:	10800817 	ldw	r2,32(r2)
 8011444:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8011448:	e0bffc17 	ldw	r2,-16(fp)
 801144c:	10800104 	addi	r2,r2,4
 8011450:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8011454:	e0bffd17 	ldw	r2,-12(fp)
 8011458:	1080800c 	andi	r2,r2,512
 801145c:	103fbe26 	beq	r2,zero,8011358 <__alt_data_end+0xfc011358>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8011460:	e0bffd17 	ldw	r2,-12(fp)
 8011464:	1004d43a 	srli	r2,r2,16
 8011468:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 801146c:	00001406 	br	80114c0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8011470:	e0bffc17 	ldw	r2,-16(fp)
 8011474:	e0fffb17 	ldw	r3,-20(fp)
 8011478:	18c00d17 	ldw	r3,52(r3)
 801147c:	e13ffb17 	ldw	r4,-20(fp)
 8011480:	20c7883a 	add	r3,r4,r3
 8011484:	18c20e04 	addi	r3,r3,2104
 8011488:	18c00003 	ldbu	r3,0(r3)
 801148c:	18c03fcc 	andi	r3,r3,255
 8011490:	18c0201c 	xori	r3,r3,128
 8011494:	18ffe004 	addi	r3,r3,-128
 8011498:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801149c:	e0bffb17 	ldw	r2,-20(fp)
 80114a0:	10800d17 	ldw	r2,52(r2)
 80114a4:	10800044 	addi	r2,r2,1
 80114a8:	10c1ffcc 	andi	r3,r2,2047
 80114ac:	e0bffb17 	ldw	r2,-20(fp)
 80114b0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 80114b4:	e0bffa17 	ldw	r2,-24(fp)
 80114b8:	10bfffc4 	addi	r2,r2,-1
 80114bc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 80114c0:	e0bffa17 	ldw	r2,-24(fp)
 80114c4:	10000526 	beq	r2,zero,80114dc <altera_avalon_jtag_uart_irq+0x1a8>
 80114c8:	e0bffb17 	ldw	r2,-20(fp)
 80114cc:	10c00d17 	ldw	r3,52(r2)
 80114d0:	e0bffb17 	ldw	r2,-20(fp)
 80114d4:	10800c17 	ldw	r2,48(r2)
 80114d8:	18bfe51e 	bne	r3,r2,8011470 <__alt_data_end+0xfc011470>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 80114dc:	e0bffa17 	ldw	r2,-24(fp)
 80114e0:	103f9d26 	beq	r2,zero,8011358 <__alt_data_end+0xfc011358>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80114e4:	e0bffb17 	ldw	r2,-20(fp)
 80114e8:	10c00817 	ldw	r3,32(r2)
 80114ec:	00bfff44 	movi	r2,-3
 80114f0:	1886703a 	and	r3,r3,r2
 80114f4:	e0bffb17 	ldw	r2,-20(fp)
 80114f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80114fc:	e0bffb17 	ldw	r2,-20(fp)
 8011500:	10800017 	ldw	r2,0(r2)
 8011504:	10800104 	addi	r2,r2,4
 8011508:	1007883a 	mov	r3,r2
 801150c:	e0bffb17 	ldw	r2,-20(fp)
 8011510:	10800817 	ldw	r2,32(r2)
 8011514:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8011518:	e0bffc17 	ldw	r2,-16(fp)
 801151c:	10800104 	addi	r2,r2,4
 8011520:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8011524:	003f8c06 	br	8011358 <__alt_data_end+0xfc011358>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8011528:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 801152c:	0001883a 	nop
 8011530:	e037883a 	mov	sp,fp
 8011534:	df000017 	ldw	fp,0(sp)
 8011538:	dec00104 	addi	sp,sp,4
 801153c:	f800283a 	ret

08011540 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8011540:	defff804 	addi	sp,sp,-32
 8011544:	df000715 	stw	fp,28(sp)
 8011548:	df000704 	addi	fp,sp,28
 801154c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8011550:	e0bffb17 	ldw	r2,-20(fp)
 8011554:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8011558:	e0bff917 	ldw	r2,-28(fp)
 801155c:	10800017 	ldw	r2,0(r2)
 8011560:	10800104 	addi	r2,r2,4
 8011564:	10800037 	ldwio	r2,0(r2)
 8011568:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 801156c:	e0bffa17 	ldw	r2,-24(fp)
 8011570:	1081000c 	andi	r2,r2,1024
 8011574:	10000b26 	beq	r2,zero,80115a4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8011578:	e0bff917 	ldw	r2,-28(fp)
 801157c:	10800017 	ldw	r2,0(r2)
 8011580:	10800104 	addi	r2,r2,4
 8011584:	1007883a 	mov	r3,r2
 8011588:	e0bff917 	ldw	r2,-28(fp)
 801158c:	10800817 	ldw	r2,32(r2)
 8011590:	10810014 	ori	r2,r2,1024
 8011594:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8011598:	e0bff917 	ldw	r2,-28(fp)
 801159c:	10000915 	stw	zero,36(r2)
 80115a0:	00000a06 	br	80115cc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 80115a4:	e0bff917 	ldw	r2,-28(fp)
 80115a8:	10c00917 	ldw	r3,36(r2)
 80115ac:	00a00034 	movhi	r2,32768
 80115b0:	10bfff04 	addi	r2,r2,-4
 80115b4:	10c00536 	bltu	r2,r3,80115cc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 80115b8:	e0bff917 	ldw	r2,-28(fp)
 80115bc:	10800917 	ldw	r2,36(r2)
 80115c0:	10c00044 	addi	r3,r2,1
 80115c4:	e0bff917 	ldw	r2,-28(fp)
 80115c8:	10c00915 	stw	r3,36(r2)
 80115cc:	d0a76917 	ldw	r2,-25180(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 80115d0:	e037883a 	mov	sp,fp
 80115d4:	df000017 	ldw	fp,0(sp)
 80115d8:	dec00104 	addi	sp,sp,4
 80115dc:	f800283a 	ret

080115e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 80115e0:	defffd04 	addi	sp,sp,-12
 80115e4:	df000215 	stw	fp,8(sp)
 80115e8:	df000204 	addi	fp,sp,8
 80115ec:	e13ffe15 	stw	r4,-8(fp)
 80115f0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80115f4:	00000506 	br	801160c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 80115f8:	e0bfff17 	ldw	r2,-4(fp)
 80115fc:	1090000c 	andi	r2,r2,16384
 8011600:	10000226 	beq	r2,zero,801160c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8011604:	00bffd44 	movi	r2,-11
 8011608:	00000b06 	br	8011638 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801160c:	e0bffe17 	ldw	r2,-8(fp)
 8011610:	10c00d17 	ldw	r3,52(r2)
 8011614:	e0bffe17 	ldw	r2,-8(fp)
 8011618:	10800c17 	ldw	r2,48(r2)
 801161c:	18800526 	beq	r3,r2,8011634 <altera_avalon_jtag_uart_close+0x54>
 8011620:	e0bffe17 	ldw	r2,-8(fp)
 8011624:	10c00917 	ldw	r3,36(r2)
 8011628:	e0bffe17 	ldw	r2,-8(fp)
 801162c:	10800117 	ldw	r2,4(r2)
 8011630:	18bff136 	bltu	r3,r2,80115f8 <__alt_data_end+0xfc0115f8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8011634:	0005883a 	mov	r2,zero
}
 8011638:	e037883a 	mov	sp,fp
 801163c:	df000017 	ldw	fp,0(sp)
 8011640:	dec00104 	addi	sp,sp,4
 8011644:	f800283a 	ret

08011648 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8011648:	defffa04 	addi	sp,sp,-24
 801164c:	df000515 	stw	fp,20(sp)
 8011650:	df000504 	addi	fp,sp,20
 8011654:	e13ffd15 	stw	r4,-12(fp)
 8011658:	e17ffe15 	stw	r5,-8(fp)
 801165c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8011660:	00bff9c4 	movi	r2,-25
 8011664:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8011668:	e0bffe17 	ldw	r2,-8(fp)
 801166c:	10da8060 	cmpeqi	r3,r2,27137
 8011670:	1800031e 	bne	r3,zero,8011680 <altera_avalon_jtag_uart_ioctl+0x38>
 8011674:	109a80a0 	cmpeqi	r2,r2,27138
 8011678:	1000181e 	bne	r2,zero,80116dc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 801167c:	00002906 	br	8011724 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8011680:	e0bffd17 	ldw	r2,-12(fp)
 8011684:	10c00117 	ldw	r3,4(r2)
 8011688:	00a00034 	movhi	r2,32768
 801168c:	10bfffc4 	addi	r2,r2,-1
 8011690:	18802126 	beq	r3,r2,8011718 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8011694:	e0bfff17 	ldw	r2,-4(fp)
 8011698:	10800017 	ldw	r2,0(r2)
 801169c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 80116a0:	e0bffc17 	ldw	r2,-16(fp)
 80116a4:	10800090 	cmplti	r2,r2,2
 80116a8:	1000061e 	bne	r2,zero,80116c4 <altera_avalon_jtag_uart_ioctl+0x7c>
 80116ac:	e0fffc17 	ldw	r3,-16(fp)
 80116b0:	00a00034 	movhi	r2,32768
 80116b4:	10bfffc4 	addi	r2,r2,-1
 80116b8:	18800226 	beq	r3,r2,80116c4 <altera_avalon_jtag_uart_ioctl+0x7c>
 80116bc:	e0bffc17 	ldw	r2,-16(fp)
 80116c0:	00000206 	br	80116cc <altera_avalon_jtag_uart_ioctl+0x84>
 80116c4:	00a00034 	movhi	r2,32768
 80116c8:	10bfff84 	addi	r2,r2,-2
 80116cc:	e0fffd17 	ldw	r3,-12(fp)
 80116d0:	18800115 	stw	r2,4(r3)
      rc = 0;
 80116d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80116d8:	00000f06 	br	8011718 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 80116dc:	e0bffd17 	ldw	r2,-12(fp)
 80116e0:	10c00117 	ldw	r3,4(r2)
 80116e4:	00a00034 	movhi	r2,32768
 80116e8:	10bfffc4 	addi	r2,r2,-1
 80116ec:	18800c26 	beq	r3,r2,8011720 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 80116f0:	e0bffd17 	ldw	r2,-12(fp)
 80116f4:	10c00917 	ldw	r3,36(r2)
 80116f8:	e0bffd17 	ldw	r2,-12(fp)
 80116fc:	10800117 	ldw	r2,4(r2)
 8011700:	1885803a 	cmpltu	r2,r3,r2
 8011704:	10c03fcc 	andi	r3,r2,255
 8011708:	e0bfff17 	ldw	r2,-4(fp)
 801170c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8011710:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8011714:	00000206 	br	8011720 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8011718:	0001883a 	nop
 801171c:	00000106 	br	8011724 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8011720:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8011724:	e0bffb17 	ldw	r2,-20(fp)
}
 8011728:	e037883a 	mov	sp,fp
 801172c:	df000017 	ldw	fp,0(sp)
 8011730:	dec00104 	addi	sp,sp,4
 8011734:	f800283a 	ret

08011738 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8011738:	defff304 	addi	sp,sp,-52
 801173c:	dfc00c15 	stw	ra,48(sp)
 8011740:	df000b15 	stw	fp,44(sp)
 8011744:	df000b04 	addi	fp,sp,44
 8011748:	e13ffc15 	stw	r4,-16(fp)
 801174c:	e17ffd15 	stw	r5,-12(fp)
 8011750:	e1bffe15 	stw	r6,-8(fp)
 8011754:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8011758:	e0bffd17 	ldw	r2,-12(fp)
 801175c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8011760:	00004706 	br	8011880 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8011764:	e0bffc17 	ldw	r2,-16(fp)
 8011768:	10800a17 	ldw	r2,40(r2)
 801176c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8011770:	e0bffc17 	ldw	r2,-16(fp)
 8011774:	10800b17 	ldw	r2,44(r2)
 8011778:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 801177c:	e0fff717 	ldw	r3,-36(fp)
 8011780:	e0bff817 	ldw	r2,-32(fp)
 8011784:	18800536 	bltu	r3,r2,801179c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8011788:	e0fff717 	ldw	r3,-36(fp)
 801178c:	e0bff817 	ldw	r2,-32(fp)
 8011790:	1885c83a 	sub	r2,r3,r2
 8011794:	e0bff615 	stw	r2,-40(fp)
 8011798:	00000406 	br	80117ac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 801179c:	00c20004 	movi	r3,2048
 80117a0:	e0bff817 	ldw	r2,-32(fp)
 80117a4:	1885c83a 	sub	r2,r3,r2
 80117a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80117ac:	e0bff617 	ldw	r2,-40(fp)
 80117b0:	10001e26 	beq	r2,zero,801182c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 80117b4:	e0fffe17 	ldw	r3,-8(fp)
 80117b8:	e0bff617 	ldw	r2,-40(fp)
 80117bc:	1880022e 	bgeu	r3,r2,80117c8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 80117c0:	e0bffe17 	ldw	r2,-8(fp)
 80117c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 80117c8:	e0bffc17 	ldw	r2,-16(fp)
 80117cc:	10c00e04 	addi	r3,r2,56
 80117d0:	e0bff817 	ldw	r2,-32(fp)
 80117d4:	1885883a 	add	r2,r3,r2
 80117d8:	e1bff617 	ldw	r6,-40(fp)
 80117dc:	100b883a 	mov	r5,r2
 80117e0:	e13ff517 	ldw	r4,-44(fp)
 80117e4:	80093680 	call	8009368 <memcpy>
      ptr   += n;
 80117e8:	e0fff517 	ldw	r3,-44(fp)
 80117ec:	e0bff617 	ldw	r2,-40(fp)
 80117f0:	1885883a 	add	r2,r3,r2
 80117f4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 80117f8:	e0fffe17 	ldw	r3,-8(fp)
 80117fc:	e0bff617 	ldw	r2,-40(fp)
 8011800:	1885c83a 	sub	r2,r3,r2
 8011804:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8011808:	e0fff817 	ldw	r3,-32(fp)
 801180c:	e0bff617 	ldw	r2,-40(fp)
 8011810:	1885883a 	add	r2,r3,r2
 8011814:	10c1ffcc 	andi	r3,r2,2047
 8011818:	e0bffc17 	ldw	r2,-16(fp)
 801181c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8011820:	e0bffe17 	ldw	r2,-8(fp)
 8011824:	00bfcf16 	blt	zero,r2,8011764 <__alt_data_end+0xfc011764>
 8011828:	00000106 	br	8011830 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 801182c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8011830:	e0fff517 	ldw	r3,-44(fp)
 8011834:	e0bffd17 	ldw	r2,-12(fp)
 8011838:	1880141e 	bne	r3,r2,801188c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 801183c:	e0bfff17 	ldw	r2,-4(fp)
 8011840:	1090000c 	andi	r2,r2,16384
 8011844:	1000131e 	bne	r2,zero,8011894 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8011848:	0001883a 	nop
 801184c:	e0bffc17 	ldw	r2,-16(fp)
 8011850:	10c00a17 	ldw	r3,40(r2)
 8011854:	e0bff717 	ldw	r2,-36(fp)
 8011858:	1880051e 	bne	r3,r2,8011870 <altera_avalon_jtag_uart_read+0x138>
 801185c:	e0bffc17 	ldw	r2,-16(fp)
 8011860:	10c00917 	ldw	r3,36(r2)
 8011864:	e0bffc17 	ldw	r2,-16(fp)
 8011868:	10800117 	ldw	r2,4(r2)
 801186c:	18bff736 	bltu	r3,r2,801184c <__alt_data_end+0xfc01184c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8011870:	e0bffc17 	ldw	r2,-16(fp)
 8011874:	10c00a17 	ldw	r3,40(r2)
 8011878:	e0bff717 	ldw	r2,-36(fp)
 801187c:	18800726 	beq	r3,r2,801189c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8011880:	e0bffe17 	ldw	r2,-8(fp)
 8011884:	00bfb716 	blt	zero,r2,8011764 <__alt_data_end+0xfc011764>
 8011888:	00000506 	br	80118a0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 801188c:	0001883a 	nop
 8011890:	00000306 	br	80118a0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8011894:	0001883a 	nop
 8011898:	00000106 	br	80118a0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 801189c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 80118a0:	e0fff517 	ldw	r3,-44(fp)
 80118a4:	e0bffd17 	ldw	r2,-12(fp)
 80118a8:	18801826 	beq	r3,r2,801190c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80118ac:	0005303a 	rdctl	r2,status
 80118b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80118b4:	e0fffb17 	ldw	r3,-20(fp)
 80118b8:	00bfff84 	movi	r2,-2
 80118bc:	1884703a 	and	r2,r3,r2
 80118c0:	1001703a 	wrctl	status,r2
  
  return context;
 80118c4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 80118c8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80118cc:	e0bffc17 	ldw	r2,-16(fp)
 80118d0:	10800817 	ldw	r2,32(r2)
 80118d4:	10c00054 	ori	r3,r2,1
 80118d8:	e0bffc17 	ldw	r2,-16(fp)
 80118dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80118e0:	e0bffc17 	ldw	r2,-16(fp)
 80118e4:	10800017 	ldw	r2,0(r2)
 80118e8:	10800104 	addi	r2,r2,4
 80118ec:	1007883a 	mov	r3,r2
 80118f0:	e0bffc17 	ldw	r2,-16(fp)
 80118f4:	10800817 	ldw	r2,32(r2)
 80118f8:	18800035 	stwio	r2,0(r3)
 80118fc:	e0bffa17 	ldw	r2,-24(fp)
 8011900:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011904:	e0bff917 	ldw	r2,-28(fp)
 8011908:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 801190c:	e0fff517 	ldw	r3,-44(fp)
 8011910:	e0bffd17 	ldw	r2,-12(fp)
 8011914:	18800426 	beq	r3,r2,8011928 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8011918:	e0fff517 	ldw	r3,-44(fp)
 801191c:	e0bffd17 	ldw	r2,-12(fp)
 8011920:	1885c83a 	sub	r2,r3,r2
 8011924:	00000606 	br	8011940 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8011928:	e0bfff17 	ldw	r2,-4(fp)
 801192c:	1090000c 	andi	r2,r2,16384
 8011930:	10000226 	beq	r2,zero,801193c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8011934:	00bffd44 	movi	r2,-11
 8011938:	00000106 	br	8011940 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 801193c:	00bffec4 	movi	r2,-5
}
 8011940:	e037883a 	mov	sp,fp
 8011944:	dfc00117 	ldw	ra,4(sp)
 8011948:	df000017 	ldw	fp,0(sp)
 801194c:	dec00204 	addi	sp,sp,8
 8011950:	f800283a 	ret

08011954 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8011954:	defff304 	addi	sp,sp,-52
 8011958:	dfc00c15 	stw	ra,48(sp)
 801195c:	df000b15 	stw	fp,44(sp)
 8011960:	df000b04 	addi	fp,sp,44
 8011964:	e13ffc15 	stw	r4,-16(fp)
 8011968:	e17ffd15 	stw	r5,-12(fp)
 801196c:	e1bffe15 	stw	r6,-8(fp)
 8011970:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8011974:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8011978:	e0bffd17 	ldw	r2,-12(fp)
 801197c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8011980:	00003706 	br	8011a60 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8011984:	e0bffc17 	ldw	r2,-16(fp)
 8011988:	10800c17 	ldw	r2,48(r2)
 801198c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8011990:	e0bffc17 	ldw	r2,-16(fp)
 8011994:	10800d17 	ldw	r2,52(r2)
 8011998:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 801199c:	e0fff917 	ldw	r3,-28(fp)
 80119a0:	e0bff517 	ldw	r2,-44(fp)
 80119a4:	1880062e 	bgeu	r3,r2,80119c0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 80119a8:	e0fff517 	ldw	r3,-44(fp)
 80119ac:	e0bff917 	ldw	r2,-28(fp)
 80119b0:	1885c83a 	sub	r2,r3,r2
 80119b4:	10bfffc4 	addi	r2,r2,-1
 80119b8:	e0bff615 	stw	r2,-40(fp)
 80119bc:	00000b06 	br	80119ec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 80119c0:	e0bff517 	ldw	r2,-44(fp)
 80119c4:	10000526 	beq	r2,zero,80119dc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 80119c8:	00c20004 	movi	r3,2048
 80119cc:	e0bff917 	ldw	r2,-28(fp)
 80119d0:	1885c83a 	sub	r2,r3,r2
 80119d4:	e0bff615 	stw	r2,-40(fp)
 80119d8:	00000406 	br	80119ec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 80119dc:	00c1ffc4 	movi	r3,2047
 80119e0:	e0bff917 	ldw	r2,-28(fp)
 80119e4:	1885c83a 	sub	r2,r3,r2
 80119e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80119ec:	e0bff617 	ldw	r2,-40(fp)
 80119f0:	10001e26 	beq	r2,zero,8011a6c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 80119f4:	e0fffe17 	ldw	r3,-8(fp)
 80119f8:	e0bff617 	ldw	r2,-40(fp)
 80119fc:	1880022e 	bgeu	r3,r2,8011a08 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8011a00:	e0bffe17 	ldw	r2,-8(fp)
 8011a04:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8011a08:	e0bffc17 	ldw	r2,-16(fp)
 8011a0c:	10c20e04 	addi	r3,r2,2104
 8011a10:	e0bff917 	ldw	r2,-28(fp)
 8011a14:	1885883a 	add	r2,r3,r2
 8011a18:	e1bff617 	ldw	r6,-40(fp)
 8011a1c:	e17ffd17 	ldw	r5,-12(fp)
 8011a20:	1009883a 	mov	r4,r2
 8011a24:	80093680 	call	8009368 <memcpy>
      ptr   += n;
 8011a28:	e0fffd17 	ldw	r3,-12(fp)
 8011a2c:	e0bff617 	ldw	r2,-40(fp)
 8011a30:	1885883a 	add	r2,r3,r2
 8011a34:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8011a38:	e0fffe17 	ldw	r3,-8(fp)
 8011a3c:	e0bff617 	ldw	r2,-40(fp)
 8011a40:	1885c83a 	sub	r2,r3,r2
 8011a44:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8011a48:	e0fff917 	ldw	r3,-28(fp)
 8011a4c:	e0bff617 	ldw	r2,-40(fp)
 8011a50:	1885883a 	add	r2,r3,r2
 8011a54:	10c1ffcc 	andi	r3,r2,2047
 8011a58:	e0bffc17 	ldw	r2,-16(fp)
 8011a5c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8011a60:	e0bffe17 	ldw	r2,-8(fp)
 8011a64:	00bfc716 	blt	zero,r2,8011984 <__alt_data_end+0xfc011984>
 8011a68:	00000106 	br	8011a70 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8011a6c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011a70:	0005303a 	rdctl	r2,status
 8011a74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011a78:	e0fffb17 	ldw	r3,-20(fp)
 8011a7c:	00bfff84 	movi	r2,-2
 8011a80:	1884703a 	and	r2,r3,r2
 8011a84:	1001703a 	wrctl	status,r2
  
  return context;
 8011a88:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8011a8c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8011a90:	e0bffc17 	ldw	r2,-16(fp)
 8011a94:	10800817 	ldw	r2,32(r2)
 8011a98:	10c00094 	ori	r3,r2,2
 8011a9c:	e0bffc17 	ldw	r2,-16(fp)
 8011aa0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8011aa4:	e0bffc17 	ldw	r2,-16(fp)
 8011aa8:	10800017 	ldw	r2,0(r2)
 8011aac:	10800104 	addi	r2,r2,4
 8011ab0:	1007883a 	mov	r3,r2
 8011ab4:	e0bffc17 	ldw	r2,-16(fp)
 8011ab8:	10800817 	ldw	r2,32(r2)
 8011abc:	18800035 	stwio	r2,0(r3)
 8011ac0:	e0bffa17 	ldw	r2,-24(fp)
 8011ac4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011ac8:	e0bff817 	ldw	r2,-32(fp)
 8011acc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8011ad0:	e0bffe17 	ldw	r2,-8(fp)
 8011ad4:	0080100e 	bge	zero,r2,8011b18 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8011ad8:	e0bfff17 	ldw	r2,-4(fp)
 8011adc:	1090000c 	andi	r2,r2,16384
 8011ae0:	1000101e 	bne	r2,zero,8011b24 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8011ae4:	0001883a 	nop
 8011ae8:	e0bffc17 	ldw	r2,-16(fp)
 8011aec:	10c00d17 	ldw	r3,52(r2)
 8011af0:	e0bff517 	ldw	r2,-44(fp)
 8011af4:	1880051e 	bne	r3,r2,8011b0c <altera_avalon_jtag_uart_write+0x1b8>
 8011af8:	e0bffc17 	ldw	r2,-16(fp)
 8011afc:	10c00917 	ldw	r3,36(r2)
 8011b00:	e0bffc17 	ldw	r2,-16(fp)
 8011b04:	10800117 	ldw	r2,4(r2)
 8011b08:	18bff736 	bltu	r3,r2,8011ae8 <__alt_data_end+0xfc011ae8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8011b0c:	e0bffc17 	ldw	r2,-16(fp)
 8011b10:	10800917 	ldw	r2,36(r2)
 8011b14:	1000051e 	bne	r2,zero,8011b2c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8011b18:	e0bffe17 	ldw	r2,-8(fp)
 8011b1c:	00bfd016 	blt	zero,r2,8011a60 <__alt_data_end+0xfc011a60>
 8011b20:	00000306 	br	8011b30 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8011b24:	0001883a 	nop
 8011b28:	00000106 	br	8011b30 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8011b2c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8011b30:	e0fffd17 	ldw	r3,-12(fp)
 8011b34:	e0bff717 	ldw	r2,-36(fp)
 8011b38:	18800426 	beq	r3,r2,8011b4c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8011b3c:	e0fffd17 	ldw	r3,-12(fp)
 8011b40:	e0bff717 	ldw	r2,-36(fp)
 8011b44:	1885c83a 	sub	r2,r3,r2
 8011b48:	00000606 	br	8011b64 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8011b4c:	e0bfff17 	ldw	r2,-4(fp)
 8011b50:	1090000c 	andi	r2,r2,16384
 8011b54:	10000226 	beq	r2,zero,8011b60 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8011b58:	00bffd44 	movi	r2,-11
 8011b5c:	00000106 	br	8011b64 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8011b60:	00bffec4 	movi	r2,-5
}
 8011b64:	e037883a 	mov	sp,fp
 8011b68:	dfc00117 	ldw	ra,4(sp)
 8011b6c:	df000017 	ldw	fp,0(sp)
 8011b70:	dec00204 	addi	sp,sp,8
 8011b74:	f800283a 	ret

08011b78 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 8011b78:	defff404 	addi	sp,sp,-48
 8011b7c:	df000b15 	stw	fp,44(sp)
 8011b80:	df000b04 	addi	fp,sp,44
 8011b84:	e13ffc15 	stw	r4,-16(fp)
 8011b88:	e17ffd15 	stw	r5,-12(fp)
 8011b8c:	e1bffe15 	stw	r6,-8(fp)
 8011b90:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 8011b94:	e0ffff17 	ldw	r3,-4(fp)
 8011b98:	e0bffe17 	ldw	r2,-8(fp)
 8011b9c:	1885883a 	add	r2,r3,r2
 8011ba0:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 8011ba4:	e0c00217 	ldw	r3,8(fp)
 8011ba8:	e0800117 	ldw	r2,4(fp)
 8011bac:	1885883a 	add	r2,r3,r2
 8011bb0:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 8011bb4:	e0800117 	ldw	r2,4(fp)
 8011bb8:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 8011bbc:	e0bffe17 	ldw	r2,-8(fp)
 8011bc0:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 8011bc4:	00800044 	movi	r2,1
 8011bc8:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 8011bcc:	e0bffc17 	ldw	r2,-16(fp)
 8011bd0:	10800504 	addi	r2,r2,20
 8011bd4:	1009883a 	mov	r4,r2
 8011bd8:	00c00044 	movi	r3,1
 8011bdc:	e0bffd17 	ldw	r2,-12(fp)
 8011be0:	1884983a 	sll	r2,r3,r2
 8011be4:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 8011be8:	e0800317 	ldw	r2,12(fp)
 8011bec:	1080008c 	andi	r2,r2,2
 8011bf0:	1000051e 	bne	r2,zero,8011c08 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 8011bf4:	e0bffc17 	ldw	r2,-16(fp)
 8011bf8:	10800304 	addi	r2,r2,12
 8011bfc:	1007883a 	mov	r3,r2
 8011c00:	00810004 	movi	r2,1024
 8011c04:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8011c08:	e0bffc17 	ldw	r2,-16(fp)
 8011c0c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8011c10:	e0bffc17 	ldw	r2,-16(fp)
 8011c14:	10800204 	addi	r2,r2,8
 8011c18:	10800037 	ldwio	r2,0(r2)
 8011c1c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8011c20:	e0bffa17 	ldw	r2,-24(fp)
 8011c24:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 8011c28:	10000226 	beq	r2,zero,8011c34 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8011c2c:	e0bff717 	ldw	r2,-36(fp)
 8011c30:	1000031e 	bne	r2,zero,8011c40 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 8011c34:	e0bffa17 	ldw	r2,-24(fp)
 8011c38:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8011c3c:	103ff426 	beq	r2,zero,8011c10 <__alt_data_end+0xfc011c10>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 8011c40:	e0bffa17 	ldw	r2,-24(fp)
 8011c44:	1080100c 	andi	r2,r2,64
 8011c48:	10001e26 	beq	r2,zero,8011cc4 <alt_avalon_spi_command+0x14c>
 8011c4c:	e0bff717 	ldw	r2,-36(fp)
 8011c50:	00801c0e 	bge	zero,r2,8011cc4 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 8011c54:	e0bff717 	ldw	r2,-36(fp)
 8011c58:	10bfffc4 	addi	r2,r2,-1
 8011c5c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 8011c60:	e0ffff17 	ldw	r3,-4(fp)
 8011c64:	e0bff817 	ldw	r2,-32(fp)
 8011c68:	18800a2e 	bgeu	r3,r2,8011c94 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 8011c6c:	e0bffc17 	ldw	r2,-16(fp)
 8011c70:	10800104 	addi	r2,r2,4
 8011c74:	1009883a 	mov	r4,r2
 8011c78:	e0bfff17 	ldw	r2,-4(fp)
 8011c7c:	10c00044 	addi	r3,r2,1
 8011c80:	e0ffff15 	stw	r3,-4(fp)
 8011c84:	10800003 	ldbu	r2,0(r2)
 8011c88:	10803fcc 	andi	r2,r2,255
 8011c8c:	20800035 	stwio	r2,0(r4)
 8011c90:	00000c06 	br	8011cc4 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 8011c94:	e0bff517 	ldw	r2,-44(fp)
 8011c98:	10000826 	beq	r2,zero,8011cbc <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 8011c9c:	e0bff517 	ldw	r2,-44(fp)
 8011ca0:	10bfffc4 	addi	r2,r2,-1
 8011ca4:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 8011ca8:	e0bffc17 	ldw	r2,-16(fp)
 8011cac:	10800104 	addi	r2,r2,4
 8011cb0:	0007883a 	mov	r3,zero
 8011cb4:	10c00035 	stwio	r3,0(r2)
 8011cb8:	00000206 	br	8011cc4 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 8011cbc:	00bf0004 	movi	r2,-1024
 8011cc0:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 8011cc4:	e0bffa17 	ldw	r2,-24(fp)
 8011cc8:	1080200c 	andi	r2,r2,128
 8011ccc:	103fd026 	beq	r2,zero,8011c10 <__alt_data_end+0xfc011c10>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8011cd0:	e0bffc17 	ldw	r2,-16(fp)
 8011cd4:	10800037 	ldwio	r2,0(r2)
 8011cd8:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 8011cdc:	e0bff617 	ldw	r2,-40(fp)
 8011ce0:	10000426 	beq	r2,zero,8011cf4 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 8011ce4:	e0bff617 	ldw	r2,-40(fp)
 8011ce8:	10bfffc4 	addi	r2,r2,-1
 8011cec:	e0bff615 	stw	r2,-40(fp)
 8011cf0:	00000506 	br	8011d08 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 8011cf4:	e0800217 	ldw	r2,8(fp)
 8011cf8:	10c00044 	addi	r3,r2,1
 8011cfc:	e0c00215 	stw	r3,8(fp)
 8011d00:	e0fffb17 	ldw	r3,-20(fp)
 8011d04:	10c00005 	stb	r3,0(r2)
      credits++;
 8011d08:	e0bff717 	ldw	r2,-36(fp)
 8011d0c:	10800044 	addi	r2,r2,1
 8011d10:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 8011d14:	e0bff617 	ldw	r2,-40(fp)
 8011d18:	103fbd1e 	bne	r2,zero,8011c10 <__alt_data_end+0xfc011c10>
 8011d1c:	e0c00217 	ldw	r3,8(fp)
 8011d20:	e0bff917 	ldw	r2,-28(fp)
 8011d24:	18bfba1e 	bne	r3,r2,8011c10 <__alt_data_end+0xfc011c10>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8011d28:	e0bffc17 	ldw	r2,-16(fp)
 8011d2c:	10800204 	addi	r2,r2,8
 8011d30:	10800037 	ldwio	r2,0(r2)
 8011d34:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 8011d38:	e0bffa17 	ldw	r2,-24(fp)
 8011d3c:	1080080c 	andi	r2,r2,32
 8011d40:	103ff926 	beq	r2,zero,8011d28 <__alt_data_end+0xfc011d28>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 8011d44:	e0800317 	ldw	r2,12(fp)
 8011d48:	1080004c 	andi	r2,r2,1
 8011d4c:	1000041e 	bne	r2,zero,8011d60 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 8011d50:	e0bffc17 	ldw	r2,-16(fp)
 8011d54:	10800304 	addi	r2,r2,12
 8011d58:	0007883a 	mov	r3,zero
 8011d5c:	10c00035 	stwio	r3,0(r2)

  return read_length;
 8011d60:	e0800117 	ldw	r2,4(fp)
}
 8011d64:	e037883a 	mov	sp,fp
 8011d68:	df000017 	ldw	fp,0(sp)
 8011d6c:	dec00104 	addi	sp,sp,4
 8011d70:	f800283a 	ret

08011d74 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8011d74:	defffa04 	addi	sp,sp,-24
 8011d78:	dfc00515 	stw	ra,20(sp)
 8011d7c:	df000415 	stw	fp,16(sp)
 8011d80:	df000404 	addi	fp,sp,16
 8011d84:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8011d88:	0007883a 	mov	r3,zero
 8011d8c:	e0bfff17 	ldw	r2,-4(fp)
 8011d90:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8011d94:	e0bfff17 	ldw	r2,-4(fp)
 8011d98:	10800104 	addi	r2,r2,4
 8011d9c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011da0:	0005303a 	rdctl	r2,status
 8011da4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011da8:	e0fffd17 	ldw	r3,-12(fp)
 8011dac:	00bfff84 	movi	r2,-2
 8011db0:	1884703a 	and	r2,r3,r2
 8011db4:	1001703a 	wrctl	status,r2
  
  return context;
 8011db8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8011dbc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8011dc0:	8010dcc0 	call	8010dcc <alt_tick>
 8011dc4:	e0bffc17 	ldw	r2,-16(fp)
 8011dc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011dcc:	e0bffe17 	ldw	r2,-8(fp)
 8011dd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8011dd4:	0001883a 	nop
 8011dd8:	e037883a 	mov	sp,fp
 8011ddc:	dfc00117 	ldw	ra,4(sp)
 8011de0:	df000017 	ldw	fp,0(sp)
 8011de4:	dec00204 	addi	sp,sp,8
 8011de8:	f800283a 	ret

08011dec <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8011dec:	defff804 	addi	sp,sp,-32
 8011df0:	dfc00715 	stw	ra,28(sp)
 8011df4:	df000615 	stw	fp,24(sp)
 8011df8:	df000604 	addi	fp,sp,24
 8011dfc:	e13ffc15 	stw	r4,-16(fp)
 8011e00:	e17ffd15 	stw	r5,-12(fp)
 8011e04:	e1bffe15 	stw	r6,-8(fp)
 8011e08:	e1ffff15 	stw	r7,-4(fp)
 8011e0c:	e0bfff17 	ldw	r2,-4(fp)
 8011e10:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8011e14:	d0a76917 	ldw	r2,-25180(gp)
 8011e18:	1000021e 	bne	r2,zero,8011e24 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8011e1c:	e0bffb17 	ldw	r2,-20(fp)
 8011e20:	d0a76915 	stw	r2,-25180(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8011e24:	e0bffc17 	ldw	r2,-16(fp)
 8011e28:	10800104 	addi	r2,r2,4
 8011e2c:	00c001c4 	movi	r3,7
 8011e30:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8011e34:	d8000015 	stw	zero,0(sp)
 8011e38:	e1fffc17 	ldw	r7,-16(fp)
 8011e3c:	01820074 	movhi	r6,2049
 8011e40:	31875d04 	addi	r6,r6,7540
 8011e44:	e17ffe17 	ldw	r5,-8(fp)
 8011e48:	e13ffd17 	ldw	r4,-12(fp)
 8011e4c:	80122cc0 	call	80122cc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8011e50:	0001883a 	nop
 8011e54:	e037883a 	mov	sp,fp
 8011e58:	dfc00117 	ldw	ra,4(sp)
 8011e5c:	df000017 	ldw	fp,0(sp)
 8011e60:	dec00204 	addi	sp,sp,8
 8011e64:	f800283a 	ret

08011e68 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8011e68:	defff504 	addi	sp,sp,-44
 8011e6c:	df000a15 	stw	fp,40(sp)
 8011e70:	df000a04 	addi	fp,sp,40
 8011e74:	e13ffc15 	stw	r4,-16(fp)
 8011e78:	e17ffd15 	stw	r5,-12(fp)
 8011e7c:	e1bffe15 	stw	r6,-8(fp)
 8011e80:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8011e84:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8011e88:	d0a76917 	ldw	r2,-25180(gp)
  
  if (alt_ticks_per_second ())
 8011e8c:	10003c26 	beq	r2,zero,8011f80 <alt_alarm_start+0x118>
  {
    if (alarm)
 8011e90:	e0bffc17 	ldw	r2,-16(fp)
 8011e94:	10003826 	beq	r2,zero,8011f78 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8011e98:	e0bffc17 	ldw	r2,-16(fp)
 8011e9c:	e0fffe17 	ldw	r3,-8(fp)
 8011ea0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8011ea4:	e0bffc17 	ldw	r2,-16(fp)
 8011ea8:	e0ffff17 	ldw	r3,-4(fp)
 8011eac:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011eb0:	0005303a 	rdctl	r2,status
 8011eb4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011eb8:	e0fff917 	ldw	r3,-28(fp)
 8011ebc:	00bfff84 	movi	r2,-2
 8011ec0:	1884703a 	and	r2,r3,r2
 8011ec4:	1001703a 	wrctl	status,r2
  
  return context;
 8011ec8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8011ecc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8011ed0:	d0a76a17 	ldw	r2,-25176(gp)
      
      current_nticks = alt_nticks();
 8011ed4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8011ed8:	e0fffd17 	ldw	r3,-12(fp)
 8011edc:	e0bff617 	ldw	r2,-40(fp)
 8011ee0:	1885883a 	add	r2,r3,r2
 8011ee4:	10c00044 	addi	r3,r2,1
 8011ee8:	e0bffc17 	ldw	r2,-16(fp)
 8011eec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8011ef0:	e0bffc17 	ldw	r2,-16(fp)
 8011ef4:	10c00217 	ldw	r3,8(r2)
 8011ef8:	e0bff617 	ldw	r2,-40(fp)
 8011efc:	1880042e 	bgeu	r3,r2,8011f10 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8011f00:	e0bffc17 	ldw	r2,-16(fp)
 8011f04:	00c00044 	movi	r3,1
 8011f08:	10c00405 	stb	r3,16(r2)
 8011f0c:	00000206 	br	8011f18 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8011f10:	e0bffc17 	ldw	r2,-16(fp)
 8011f14:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8011f18:	e0bffc17 	ldw	r2,-16(fp)
 8011f1c:	d0e01204 	addi	r3,gp,-32696
 8011f20:	e0fffa15 	stw	r3,-24(fp)
 8011f24:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8011f28:	e0bffb17 	ldw	r2,-20(fp)
 8011f2c:	e0fffa17 	ldw	r3,-24(fp)
 8011f30:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8011f34:	e0bffa17 	ldw	r2,-24(fp)
 8011f38:	10c00017 	ldw	r3,0(r2)
 8011f3c:	e0bffb17 	ldw	r2,-20(fp)
 8011f40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8011f44:	e0bffa17 	ldw	r2,-24(fp)
 8011f48:	10800017 	ldw	r2,0(r2)
 8011f4c:	e0fffb17 	ldw	r3,-20(fp)
 8011f50:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8011f54:	e0bffa17 	ldw	r2,-24(fp)
 8011f58:	e0fffb17 	ldw	r3,-20(fp)
 8011f5c:	10c00015 	stw	r3,0(r2)
 8011f60:	e0bff817 	ldw	r2,-32(fp)
 8011f64:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011f68:	e0bff717 	ldw	r2,-36(fp)
 8011f6c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8011f70:	0005883a 	mov	r2,zero
 8011f74:	00000306 	br	8011f84 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8011f78:	00bffa84 	movi	r2,-22
 8011f7c:	00000106 	br	8011f84 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8011f80:	00bfde84 	movi	r2,-134
  }
}
 8011f84:	e037883a 	mov	sp,fp
 8011f88:	df000017 	ldw	fp,0(sp)
 8011f8c:	dec00104 	addi	sp,sp,4
 8011f90:	f800283a 	ret

08011f94 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8011f94:	defffa04 	addi	sp,sp,-24
 8011f98:	dfc00515 	stw	ra,20(sp)
 8011f9c:	df000415 	stw	fp,16(sp)
 8011fa0:	df000404 	addi	fp,sp,16
 8011fa4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8011fa8:	00800244 	movi	r2,9
 8011fac:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8011fb0:	014003f4 	movhi	r5,15
 8011fb4:	29509004 	addi	r5,r5,16960
 8011fb8:	e13ffd17 	ldw	r4,-12(fp)
 8011fbc:	800374c0 	call	800374c <__mulsi3>
 8011fc0:	100b883a 	mov	r5,r2
 8011fc4:	0100bef4 	movhi	r4,763
 8011fc8:	213c2004 	addi	r4,r4,-3968
 8011fcc:	80036900 	call	8003690 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8011fd0:	100b883a 	mov	r5,r2
 8011fd4:	01200034 	movhi	r4,32768
 8011fd8:	213fffc4 	addi	r4,r4,-1
 8011fdc:	80036900 	call	8003690 <__udivsi3>
 8011fe0:	100b883a 	mov	r5,r2
 8011fe4:	e13fff17 	ldw	r4,-4(fp)
 8011fe8:	80036900 	call	8003690 <__udivsi3>
 8011fec:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8011ff0:	e0bffe17 	ldw	r2,-8(fp)
 8011ff4:	10002a26 	beq	r2,zero,80120a0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8011ff8:	e03ffc15 	stw	zero,-16(fp)
 8011ffc:	00001706 	br	801205c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8012000:	00a00034 	movhi	r2,32768
 8012004:	10bfffc4 	addi	r2,r2,-1
 8012008:	10bfffc4 	addi	r2,r2,-1
 801200c:	103ffe1e 	bne	r2,zero,8012008 <__alt_data_end+0xfc012008>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8012010:	014003f4 	movhi	r5,15
 8012014:	29509004 	addi	r5,r5,16960
 8012018:	e13ffd17 	ldw	r4,-12(fp)
 801201c:	800374c0 	call	800374c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8012020:	100b883a 	mov	r5,r2
 8012024:	0100bef4 	movhi	r4,763
 8012028:	213c2004 	addi	r4,r4,-3968
 801202c:	80036900 	call	8003690 <__udivsi3>
 8012030:	100b883a 	mov	r5,r2
 8012034:	01200034 	movhi	r4,32768
 8012038:	213fffc4 	addi	r4,r4,-1
 801203c:	80036900 	call	8003690 <__udivsi3>
 8012040:	1007883a 	mov	r3,r2
 8012044:	e0bfff17 	ldw	r2,-4(fp)
 8012048:	10c5c83a 	sub	r2,r2,r3
 801204c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8012050:	e0bffc17 	ldw	r2,-16(fp)
 8012054:	10800044 	addi	r2,r2,1
 8012058:	e0bffc15 	stw	r2,-16(fp)
 801205c:	e0fffc17 	ldw	r3,-16(fp)
 8012060:	e0bffe17 	ldw	r2,-8(fp)
 8012064:	18bfe616 	blt	r3,r2,8012000 <__alt_data_end+0xfc012000>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8012068:	014003f4 	movhi	r5,15
 801206c:	29509004 	addi	r5,r5,16960
 8012070:	e13ffd17 	ldw	r4,-12(fp)
 8012074:	800374c0 	call	800374c <__mulsi3>
 8012078:	100b883a 	mov	r5,r2
 801207c:	0100bef4 	movhi	r4,763
 8012080:	213c2004 	addi	r4,r4,-3968
 8012084:	80036900 	call	8003690 <__udivsi3>
 8012088:	e17fff17 	ldw	r5,-4(fp)
 801208c:	1009883a 	mov	r4,r2
 8012090:	800374c0 	call	800374c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8012094:	10bfffc4 	addi	r2,r2,-1
 8012098:	103ffe1e 	bne	r2,zero,8012094 <__alt_data_end+0xfc012094>
 801209c:	00000d06 	br	80120d4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80120a0:	014003f4 	movhi	r5,15
 80120a4:	29509004 	addi	r5,r5,16960
 80120a8:	e13ffd17 	ldw	r4,-12(fp)
 80120ac:	800374c0 	call	800374c <__mulsi3>
 80120b0:	100b883a 	mov	r5,r2
 80120b4:	0100bef4 	movhi	r4,763
 80120b8:	213c2004 	addi	r4,r4,-3968
 80120bc:	80036900 	call	8003690 <__udivsi3>
 80120c0:	e17fff17 	ldw	r5,-4(fp)
 80120c4:	1009883a 	mov	r4,r2
 80120c8:	800374c0 	call	800374c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80120cc:	10bfffc4 	addi	r2,r2,-1
 80120d0:	00bffe16 	blt	zero,r2,80120cc <__alt_data_end+0xfc0120cc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 80120d4:	0005883a 	mov	r2,zero
}
 80120d8:	e037883a 	mov	sp,fp
 80120dc:	dfc00117 	ldw	ra,4(sp)
 80120e0:	df000017 	ldw	fp,0(sp)
 80120e4:	dec00204 	addi	sp,sp,8
 80120e8:	f800283a 	ret

080120ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80120ec:	deffff04 	addi	sp,sp,-4
 80120f0:	df000015 	stw	fp,0(sp)
 80120f4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80120f8:	0001883a 	nop
 80120fc:	e037883a 	mov	sp,fp
 8012100:	df000017 	ldw	fp,0(sp)
 8012104:	dec00104 	addi	sp,sp,4
 8012108:	f800283a 	ret

0801210c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801210c:	defffe04 	addi	sp,sp,-8
 8012110:	dfc00115 	stw	ra,4(sp)
 8012114:	df000015 	stw	fp,0(sp)
 8012118:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801211c:	d0a01017 	ldw	r2,-32704(gp)
 8012120:	10000326 	beq	r2,zero,8012130 <alt_get_errno+0x24>
 8012124:	d0a01017 	ldw	r2,-32704(gp)
 8012128:	103ee83a 	callr	r2
 801212c:	00000106 	br	8012134 <alt_get_errno+0x28>
 8012130:	d0a76504 	addi	r2,gp,-25196
}
 8012134:	e037883a 	mov	sp,fp
 8012138:	dfc00117 	ldw	ra,4(sp)
 801213c:	df000017 	ldw	fp,0(sp)
 8012140:	dec00204 	addi	sp,sp,8
 8012144:	f800283a 	ret

08012148 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8012148:	defffa04 	addi	sp,sp,-24
 801214c:	dfc00515 	stw	ra,20(sp)
 8012150:	df000415 	stw	fp,16(sp)
 8012154:	df000404 	addi	fp,sp,16
 8012158:	e13ffe15 	stw	r4,-8(fp)
 801215c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8012160:	e0bffe17 	ldw	r2,-8(fp)
 8012164:	10000326 	beq	r2,zero,8012174 <alt_dev_llist_insert+0x2c>
 8012168:	e0bffe17 	ldw	r2,-8(fp)
 801216c:	10800217 	ldw	r2,8(r2)
 8012170:	1000061e 	bne	r2,zero,801218c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8012174:	801210c0 	call	801210c <alt_get_errno>
 8012178:	1007883a 	mov	r3,r2
 801217c:	00800584 	movi	r2,22
 8012180:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8012184:	00bffa84 	movi	r2,-22
 8012188:	00001306 	br	80121d8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 801218c:	e0bffe17 	ldw	r2,-8(fp)
 8012190:	e0ffff17 	ldw	r3,-4(fp)
 8012194:	e0fffc15 	stw	r3,-16(fp)
 8012198:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801219c:	e0bffd17 	ldw	r2,-12(fp)
 80121a0:	e0fffc17 	ldw	r3,-16(fp)
 80121a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80121a8:	e0bffc17 	ldw	r2,-16(fp)
 80121ac:	10c00017 	ldw	r3,0(r2)
 80121b0:	e0bffd17 	ldw	r2,-12(fp)
 80121b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80121b8:	e0bffc17 	ldw	r2,-16(fp)
 80121bc:	10800017 	ldw	r2,0(r2)
 80121c0:	e0fffd17 	ldw	r3,-12(fp)
 80121c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80121c8:	e0bffc17 	ldw	r2,-16(fp)
 80121cc:	e0fffd17 	ldw	r3,-12(fp)
 80121d0:	10c00015 	stw	r3,0(r2)

  return 0;  
 80121d4:	0005883a 	mov	r2,zero
}
 80121d8:	e037883a 	mov	sp,fp
 80121dc:	dfc00117 	ldw	ra,4(sp)
 80121e0:	df000017 	ldw	fp,0(sp)
 80121e4:	dec00204 	addi	sp,sp,8
 80121e8:	f800283a 	ret

080121ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 80121ec:	defffd04 	addi	sp,sp,-12
 80121f0:	dfc00215 	stw	ra,8(sp)
 80121f4:	df000115 	stw	fp,4(sp)
 80121f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80121fc:	00820074 	movhi	r2,2049
 8012200:	108bff04 	addi	r2,r2,12284
 8012204:	e0bfff15 	stw	r2,-4(fp)
 8012208:	00000606 	br	8012224 <_do_ctors+0x38>
        (*ctor) (); 
 801220c:	e0bfff17 	ldw	r2,-4(fp)
 8012210:	10800017 	ldw	r2,0(r2)
 8012214:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8012218:	e0bfff17 	ldw	r2,-4(fp)
 801221c:	10bfff04 	addi	r2,r2,-4
 8012220:	e0bfff15 	stw	r2,-4(fp)
 8012224:	e0ffff17 	ldw	r3,-4(fp)
 8012228:	00820074 	movhi	r2,2049
 801222c:	108c0004 	addi	r2,r2,12288
 8012230:	18bff62e 	bgeu	r3,r2,801220c <__alt_data_end+0xfc01220c>
        (*ctor) (); 
}
 8012234:	0001883a 	nop
 8012238:	e037883a 	mov	sp,fp
 801223c:	dfc00117 	ldw	ra,4(sp)
 8012240:	df000017 	ldw	fp,0(sp)
 8012244:	dec00204 	addi	sp,sp,8
 8012248:	f800283a 	ret

0801224c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 801224c:	defffd04 	addi	sp,sp,-12
 8012250:	dfc00215 	stw	ra,8(sp)
 8012254:	df000115 	stw	fp,4(sp)
 8012258:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 801225c:	00820074 	movhi	r2,2049
 8012260:	108bff04 	addi	r2,r2,12284
 8012264:	e0bfff15 	stw	r2,-4(fp)
 8012268:	00000606 	br	8012284 <_do_dtors+0x38>
        (*dtor) (); 
 801226c:	e0bfff17 	ldw	r2,-4(fp)
 8012270:	10800017 	ldw	r2,0(r2)
 8012274:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8012278:	e0bfff17 	ldw	r2,-4(fp)
 801227c:	10bfff04 	addi	r2,r2,-4
 8012280:	e0bfff15 	stw	r2,-4(fp)
 8012284:	e0ffff17 	ldw	r3,-4(fp)
 8012288:	00820074 	movhi	r2,2049
 801228c:	108c0004 	addi	r2,r2,12288
 8012290:	18bff62e 	bgeu	r3,r2,801226c <__alt_data_end+0xfc01226c>
        (*dtor) (); 
}
 8012294:	0001883a 	nop
 8012298:	e037883a 	mov	sp,fp
 801229c:	dfc00117 	ldw	ra,4(sp)
 80122a0:	df000017 	ldw	fp,0(sp)
 80122a4:	dec00204 	addi	sp,sp,8
 80122a8:	f800283a 	ret

080122ac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80122ac:	deffff04 	addi	sp,sp,-4
 80122b0:	df000015 	stw	fp,0(sp)
 80122b4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80122b8:	0001883a 	nop
 80122bc:	e037883a 	mov	sp,fp
 80122c0:	df000017 	ldw	fp,0(sp)
 80122c4:	dec00104 	addi	sp,sp,4
 80122c8:	f800283a 	ret

080122cc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80122cc:	defff904 	addi	sp,sp,-28
 80122d0:	dfc00615 	stw	ra,24(sp)
 80122d4:	df000515 	stw	fp,20(sp)
 80122d8:	df000504 	addi	fp,sp,20
 80122dc:	e13ffc15 	stw	r4,-16(fp)
 80122e0:	e17ffd15 	stw	r5,-12(fp)
 80122e4:	e1bffe15 	stw	r6,-8(fp)
 80122e8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80122ec:	e0800217 	ldw	r2,8(fp)
 80122f0:	d8800015 	stw	r2,0(sp)
 80122f4:	e1ffff17 	ldw	r7,-4(fp)
 80122f8:	e1bffe17 	ldw	r6,-8(fp)
 80122fc:	e17ffd17 	ldw	r5,-12(fp)
 8012300:	e13ffc17 	ldw	r4,-16(fp)
 8012304:	801247c0 	call	801247c <alt_iic_isr_register>
}  
 8012308:	e037883a 	mov	sp,fp
 801230c:	dfc00117 	ldw	ra,4(sp)
 8012310:	df000017 	ldw	fp,0(sp)
 8012314:	dec00204 	addi	sp,sp,8
 8012318:	f800283a 	ret

0801231c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 801231c:	defff904 	addi	sp,sp,-28
 8012320:	df000615 	stw	fp,24(sp)
 8012324:	df000604 	addi	fp,sp,24
 8012328:	e13ffe15 	stw	r4,-8(fp)
 801232c:	e17fff15 	stw	r5,-4(fp)
 8012330:	e0bfff17 	ldw	r2,-4(fp)
 8012334:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012338:	0005303a 	rdctl	r2,status
 801233c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012340:	e0fffb17 	ldw	r3,-20(fp)
 8012344:	00bfff84 	movi	r2,-2
 8012348:	1884703a 	and	r2,r3,r2
 801234c:	1001703a 	wrctl	status,r2
  
  return context;
 8012350:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8012354:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8012358:	00c00044 	movi	r3,1
 801235c:	e0bffa17 	ldw	r2,-24(fp)
 8012360:	1884983a 	sll	r2,r3,r2
 8012364:	1007883a 	mov	r3,r2
 8012368:	d0a76b17 	ldw	r2,-25172(gp)
 801236c:	1884b03a 	or	r2,r3,r2
 8012370:	d0a76b15 	stw	r2,-25172(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8012374:	d0a76b17 	ldw	r2,-25172(gp)
 8012378:	100170fa 	wrctl	ienable,r2
 801237c:	e0bffc17 	ldw	r2,-16(fp)
 8012380:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012384:	e0bffd17 	ldw	r2,-12(fp)
 8012388:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801238c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8012390:	0001883a 	nop
}
 8012394:	e037883a 	mov	sp,fp
 8012398:	df000017 	ldw	fp,0(sp)
 801239c:	dec00104 	addi	sp,sp,4
 80123a0:	f800283a 	ret

080123a4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80123a4:	defff904 	addi	sp,sp,-28
 80123a8:	df000615 	stw	fp,24(sp)
 80123ac:	df000604 	addi	fp,sp,24
 80123b0:	e13ffe15 	stw	r4,-8(fp)
 80123b4:	e17fff15 	stw	r5,-4(fp)
 80123b8:	e0bfff17 	ldw	r2,-4(fp)
 80123bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80123c0:	0005303a 	rdctl	r2,status
 80123c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80123c8:	e0fffb17 	ldw	r3,-20(fp)
 80123cc:	00bfff84 	movi	r2,-2
 80123d0:	1884703a 	and	r2,r3,r2
 80123d4:	1001703a 	wrctl	status,r2
  
  return context;
 80123d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80123dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 80123e0:	00c00044 	movi	r3,1
 80123e4:	e0bffa17 	ldw	r2,-24(fp)
 80123e8:	1884983a 	sll	r2,r3,r2
 80123ec:	0084303a 	nor	r2,zero,r2
 80123f0:	1007883a 	mov	r3,r2
 80123f4:	d0a76b17 	ldw	r2,-25172(gp)
 80123f8:	1884703a 	and	r2,r3,r2
 80123fc:	d0a76b15 	stw	r2,-25172(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8012400:	d0a76b17 	ldw	r2,-25172(gp)
 8012404:	100170fa 	wrctl	ienable,r2
 8012408:	e0bffc17 	ldw	r2,-16(fp)
 801240c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012410:	e0bffd17 	ldw	r2,-12(fp)
 8012414:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8012418:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 801241c:	0001883a 	nop
}
 8012420:	e037883a 	mov	sp,fp
 8012424:	df000017 	ldw	fp,0(sp)
 8012428:	dec00104 	addi	sp,sp,4
 801242c:	f800283a 	ret

08012430 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8012430:	defffc04 	addi	sp,sp,-16
 8012434:	df000315 	stw	fp,12(sp)
 8012438:	df000304 	addi	fp,sp,12
 801243c:	e13ffe15 	stw	r4,-8(fp)
 8012440:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8012444:	000530fa 	rdctl	r2,ienable
 8012448:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 801244c:	00c00044 	movi	r3,1
 8012450:	e0bfff17 	ldw	r2,-4(fp)
 8012454:	1884983a 	sll	r2,r3,r2
 8012458:	1007883a 	mov	r3,r2
 801245c:	e0bffd17 	ldw	r2,-12(fp)
 8012460:	1884703a 	and	r2,r3,r2
 8012464:	1004c03a 	cmpne	r2,r2,zero
 8012468:	10803fcc 	andi	r2,r2,255
}
 801246c:	e037883a 	mov	sp,fp
 8012470:	df000017 	ldw	fp,0(sp)
 8012474:	dec00104 	addi	sp,sp,4
 8012478:	f800283a 	ret

0801247c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 801247c:	defff504 	addi	sp,sp,-44
 8012480:	dfc00a15 	stw	ra,40(sp)
 8012484:	df000915 	stw	fp,36(sp)
 8012488:	df000904 	addi	fp,sp,36
 801248c:	e13ffc15 	stw	r4,-16(fp)
 8012490:	e17ffd15 	stw	r5,-12(fp)
 8012494:	e1bffe15 	stw	r6,-8(fp)
 8012498:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 801249c:	00bffa84 	movi	r2,-22
 80124a0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80124a4:	e0bffd17 	ldw	r2,-12(fp)
 80124a8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80124ac:	e0bff817 	ldw	r2,-32(fp)
 80124b0:	10800808 	cmpgei	r2,r2,32
 80124b4:	1000271e 	bne	r2,zero,8012554 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80124b8:	0005303a 	rdctl	r2,status
 80124bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80124c0:	e0fffb17 	ldw	r3,-20(fp)
 80124c4:	00bfff84 	movi	r2,-2
 80124c8:	1884703a 	and	r2,r3,r2
 80124cc:	1001703a 	wrctl	status,r2
  
  return context;
 80124d0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 80124d4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 80124d8:	008200f4 	movhi	r2,2051
 80124dc:	1094dc04 	addi	r2,r2,21360
 80124e0:	e0fff817 	ldw	r3,-32(fp)
 80124e4:	180690fa 	slli	r3,r3,3
 80124e8:	10c5883a 	add	r2,r2,r3
 80124ec:	e0fffe17 	ldw	r3,-8(fp)
 80124f0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 80124f4:	008200f4 	movhi	r2,2051
 80124f8:	1094dc04 	addi	r2,r2,21360
 80124fc:	e0fff817 	ldw	r3,-32(fp)
 8012500:	180690fa 	slli	r3,r3,3
 8012504:	10c5883a 	add	r2,r2,r3
 8012508:	10800104 	addi	r2,r2,4
 801250c:	e0ffff17 	ldw	r3,-4(fp)
 8012510:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8012514:	e0bffe17 	ldw	r2,-8(fp)
 8012518:	10000526 	beq	r2,zero,8012530 <alt_iic_isr_register+0xb4>
 801251c:	e0bff817 	ldw	r2,-32(fp)
 8012520:	100b883a 	mov	r5,r2
 8012524:	e13ffc17 	ldw	r4,-16(fp)
 8012528:	801231c0 	call	801231c <alt_ic_irq_enable>
 801252c:	00000406 	br	8012540 <alt_iic_isr_register+0xc4>
 8012530:	e0bff817 	ldw	r2,-32(fp)
 8012534:	100b883a 	mov	r5,r2
 8012538:	e13ffc17 	ldw	r4,-16(fp)
 801253c:	80123a40 	call	80123a4 <alt_ic_irq_disable>
 8012540:	e0bff715 	stw	r2,-36(fp)
 8012544:	e0bffa17 	ldw	r2,-24(fp)
 8012548:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801254c:	e0bff917 	ldw	r2,-28(fp)
 8012550:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8012554:	e0bff717 	ldw	r2,-36(fp)
}
 8012558:	e037883a 	mov	sp,fp
 801255c:	dfc00117 	ldw	ra,4(sp)
 8012560:	df000017 	ldw	fp,0(sp)
 8012564:	dec00204 	addi	sp,sp,8
 8012568:	f800283a 	ret

0801256c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 801256c:	defff804 	addi	sp,sp,-32
 8012570:	dfc00715 	stw	ra,28(sp)
 8012574:	df000615 	stw	fp,24(sp)
 8012578:	dc000515 	stw	r16,20(sp)
 801257c:	df000604 	addi	fp,sp,24
 8012580:	e13ffb15 	stw	r4,-20(fp)
 8012584:	e17ffc15 	stw	r5,-16(fp)
 8012588:	e1bffd15 	stw	r6,-12(fp)
 801258c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8012590:	e1bffe17 	ldw	r6,-8(fp)
 8012594:	e17ffd17 	ldw	r5,-12(fp)
 8012598:	e13ffc17 	ldw	r4,-16(fp)
 801259c:	80127f40 	call	80127f4 <open>
 80125a0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 80125a4:	e0bffa17 	ldw	r2,-24(fp)
 80125a8:	10002216 	blt	r2,zero,8012634 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 80125ac:	040200f4 	movhi	r16,2051
 80125b0:	84089104 	addi	r16,r16,8772
 80125b4:	e0bffa17 	ldw	r2,-24(fp)
 80125b8:	01400304 	movi	r5,12
 80125bc:	1009883a 	mov	r4,r2
 80125c0:	800374c0 	call	800374c <__mulsi3>
 80125c4:	8085883a 	add	r2,r16,r2
 80125c8:	10c00017 	ldw	r3,0(r2)
 80125cc:	e0bffb17 	ldw	r2,-20(fp)
 80125d0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80125d4:	040200f4 	movhi	r16,2051
 80125d8:	84089104 	addi	r16,r16,8772
 80125dc:	e0bffa17 	ldw	r2,-24(fp)
 80125e0:	01400304 	movi	r5,12
 80125e4:	1009883a 	mov	r4,r2
 80125e8:	800374c0 	call	800374c <__mulsi3>
 80125ec:	8085883a 	add	r2,r16,r2
 80125f0:	10800104 	addi	r2,r2,4
 80125f4:	10c00017 	ldw	r3,0(r2)
 80125f8:	e0bffb17 	ldw	r2,-20(fp)
 80125fc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8012600:	040200f4 	movhi	r16,2051
 8012604:	84089104 	addi	r16,r16,8772
 8012608:	e0bffa17 	ldw	r2,-24(fp)
 801260c:	01400304 	movi	r5,12
 8012610:	1009883a 	mov	r4,r2
 8012614:	800374c0 	call	800374c <__mulsi3>
 8012618:	8085883a 	add	r2,r16,r2
 801261c:	10800204 	addi	r2,r2,8
 8012620:	10c00017 	ldw	r3,0(r2)
 8012624:	e0bffb17 	ldw	r2,-20(fp)
 8012628:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 801262c:	e13ffa17 	ldw	r4,-24(fp)
 8012630:	8010bfc0 	call	8010bfc <alt_release_fd>
  }
} 
 8012634:	0001883a 	nop
 8012638:	e6ffff04 	addi	sp,fp,-4
 801263c:	dfc00217 	ldw	ra,8(sp)
 8012640:	df000117 	ldw	fp,4(sp)
 8012644:	dc000017 	ldw	r16,0(sp)
 8012648:	dec00304 	addi	sp,sp,12
 801264c:	f800283a 	ret

08012650 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8012650:	defffb04 	addi	sp,sp,-20
 8012654:	dfc00415 	stw	ra,16(sp)
 8012658:	df000315 	stw	fp,12(sp)
 801265c:	df000304 	addi	fp,sp,12
 8012660:	e13ffd15 	stw	r4,-12(fp)
 8012664:	e17ffe15 	stw	r5,-8(fp)
 8012668:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 801266c:	01c07fc4 	movi	r7,511
 8012670:	01800044 	movi	r6,1
 8012674:	e17ffd17 	ldw	r5,-12(fp)
 8012678:	010200f4 	movhi	r4,2051
 801267c:	21089404 	addi	r4,r4,8784
 8012680:	801256c0 	call	801256c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8012684:	01c07fc4 	movi	r7,511
 8012688:	000d883a 	mov	r6,zero
 801268c:	e17ffe17 	ldw	r5,-8(fp)
 8012690:	010200f4 	movhi	r4,2051
 8012694:	21089104 	addi	r4,r4,8772
 8012698:	801256c0 	call	801256c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 801269c:	01c07fc4 	movi	r7,511
 80126a0:	01800044 	movi	r6,1
 80126a4:	e17fff17 	ldw	r5,-4(fp)
 80126a8:	010200f4 	movhi	r4,2051
 80126ac:	21089704 	addi	r4,r4,8796
 80126b0:	801256c0 	call	801256c <alt_open_fd>
}  
 80126b4:	0001883a 	nop
 80126b8:	e037883a 	mov	sp,fp
 80126bc:	dfc00117 	ldw	ra,4(sp)
 80126c0:	df000017 	ldw	fp,0(sp)
 80126c4:	dec00204 	addi	sp,sp,8
 80126c8:	f800283a 	ret

080126cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80126cc:	defffe04 	addi	sp,sp,-8
 80126d0:	dfc00115 	stw	ra,4(sp)
 80126d4:	df000015 	stw	fp,0(sp)
 80126d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80126dc:	d0a01017 	ldw	r2,-32704(gp)
 80126e0:	10000326 	beq	r2,zero,80126f0 <alt_get_errno+0x24>
 80126e4:	d0a01017 	ldw	r2,-32704(gp)
 80126e8:	103ee83a 	callr	r2
 80126ec:	00000106 	br	80126f4 <alt_get_errno+0x28>
 80126f0:	d0a76504 	addi	r2,gp,-25196
}
 80126f4:	e037883a 	mov	sp,fp
 80126f8:	dfc00117 	ldw	ra,4(sp)
 80126fc:	df000017 	ldw	fp,0(sp)
 8012700:	dec00204 	addi	sp,sp,8
 8012704:	f800283a 	ret

08012708 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8012708:	defffb04 	addi	sp,sp,-20
 801270c:	dfc00415 	stw	ra,16(sp)
 8012710:	df000315 	stw	fp,12(sp)
 8012714:	dc000215 	stw	r16,8(sp)
 8012718:	df000304 	addi	fp,sp,12
 801271c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8012720:	e0bffe17 	ldw	r2,-8(fp)
 8012724:	10800217 	ldw	r2,8(r2)
 8012728:	10d00034 	orhi	r3,r2,16384
 801272c:	e0bffe17 	ldw	r2,-8(fp)
 8012730:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8012734:	e03ffd15 	stw	zero,-12(fp)
 8012738:	00002306 	br	80127c8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 801273c:	040200f4 	movhi	r16,2051
 8012740:	84089104 	addi	r16,r16,8772
 8012744:	e0bffd17 	ldw	r2,-12(fp)
 8012748:	01400304 	movi	r5,12
 801274c:	1009883a 	mov	r4,r2
 8012750:	800374c0 	call	800374c <__mulsi3>
 8012754:	8085883a 	add	r2,r16,r2
 8012758:	10c00017 	ldw	r3,0(r2)
 801275c:	e0bffe17 	ldw	r2,-8(fp)
 8012760:	10800017 	ldw	r2,0(r2)
 8012764:	1880151e 	bne	r3,r2,80127bc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8012768:	040200f4 	movhi	r16,2051
 801276c:	84089104 	addi	r16,r16,8772
 8012770:	e0bffd17 	ldw	r2,-12(fp)
 8012774:	01400304 	movi	r5,12
 8012778:	1009883a 	mov	r4,r2
 801277c:	800374c0 	call	800374c <__mulsi3>
 8012780:	8085883a 	add	r2,r16,r2
 8012784:	10800204 	addi	r2,r2,8
 8012788:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 801278c:	10000b0e 	bge	r2,zero,80127bc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8012790:	01400304 	movi	r5,12
 8012794:	e13ffd17 	ldw	r4,-12(fp)
 8012798:	800374c0 	call	800374c <__mulsi3>
 801279c:	1007883a 	mov	r3,r2
 80127a0:	008200f4 	movhi	r2,2051
 80127a4:	10889104 	addi	r2,r2,8772
 80127a8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80127ac:	e0bffe17 	ldw	r2,-8(fp)
 80127b0:	18800226 	beq	r3,r2,80127bc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80127b4:	00bffcc4 	movi	r2,-13
 80127b8:	00000806 	br	80127dc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80127bc:	e0bffd17 	ldw	r2,-12(fp)
 80127c0:	10800044 	addi	r2,r2,1
 80127c4:	e0bffd15 	stw	r2,-12(fp)
 80127c8:	d0a00f17 	ldw	r2,-32708(gp)
 80127cc:	1007883a 	mov	r3,r2
 80127d0:	e0bffd17 	ldw	r2,-12(fp)
 80127d4:	18bfd92e 	bgeu	r3,r2,801273c <__alt_data_end+0xfc01273c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80127d8:	0005883a 	mov	r2,zero
}
 80127dc:	e6ffff04 	addi	sp,fp,-4
 80127e0:	dfc00217 	ldw	ra,8(sp)
 80127e4:	df000117 	ldw	fp,4(sp)
 80127e8:	dc000017 	ldw	r16,0(sp)
 80127ec:	dec00304 	addi	sp,sp,12
 80127f0:	f800283a 	ret

080127f4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80127f4:	defff604 	addi	sp,sp,-40
 80127f8:	dfc00915 	stw	ra,36(sp)
 80127fc:	df000815 	stw	fp,32(sp)
 8012800:	df000804 	addi	fp,sp,32
 8012804:	e13ffd15 	stw	r4,-12(fp)
 8012808:	e17ffe15 	stw	r5,-8(fp)
 801280c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8012810:	00bfffc4 	movi	r2,-1
 8012814:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8012818:	00bffb44 	movi	r2,-19
 801281c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8012820:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8012824:	d1600d04 	addi	r5,gp,-32716
 8012828:	e13ffd17 	ldw	r4,-12(fp)
 801282c:	80129740 	call	8012974 <alt_find_dev>
 8012830:	e0bff815 	stw	r2,-32(fp)
 8012834:	e0bff817 	ldw	r2,-32(fp)
 8012838:	1000051e 	bne	r2,zero,8012850 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 801283c:	e13ffd17 	ldw	r4,-12(fp)
 8012840:	8012a040 	call	8012a04 <alt_find_file>
 8012844:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8012848:	00800044 	movi	r2,1
 801284c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8012850:	e0bff817 	ldw	r2,-32(fp)
 8012854:	10002b26 	beq	r2,zero,8012904 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8012858:	e13ff817 	ldw	r4,-32(fp)
 801285c:	8012b0c0 	call	8012b0c <alt_get_fd>
 8012860:	e0bff915 	stw	r2,-28(fp)
 8012864:	e0bff917 	ldw	r2,-28(fp)
 8012868:	1000030e 	bge	r2,zero,8012878 <open+0x84>
    {
      status = index;
 801286c:	e0bff917 	ldw	r2,-28(fp)
 8012870:	e0bffa15 	stw	r2,-24(fp)
 8012874:	00002506 	br	801290c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8012878:	01400304 	movi	r5,12
 801287c:	e13ff917 	ldw	r4,-28(fp)
 8012880:	800374c0 	call	800374c <__mulsi3>
 8012884:	1007883a 	mov	r3,r2
 8012888:	008200f4 	movhi	r2,2051
 801288c:	10889104 	addi	r2,r2,8772
 8012890:	1885883a 	add	r2,r3,r2
 8012894:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8012898:	e0fffe17 	ldw	r3,-8(fp)
 801289c:	00900034 	movhi	r2,16384
 80128a0:	10bfffc4 	addi	r2,r2,-1
 80128a4:	1886703a 	and	r3,r3,r2
 80128a8:	e0bffc17 	ldw	r2,-16(fp)
 80128ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80128b0:	e0bffb17 	ldw	r2,-20(fp)
 80128b4:	1000051e 	bne	r2,zero,80128cc <open+0xd8>
 80128b8:	e13ffc17 	ldw	r4,-16(fp)
 80128bc:	80127080 	call	8012708 <alt_file_locked>
 80128c0:	e0bffa15 	stw	r2,-24(fp)
 80128c4:	e0bffa17 	ldw	r2,-24(fp)
 80128c8:	10001016 	blt	r2,zero,801290c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80128cc:	e0bff817 	ldw	r2,-32(fp)
 80128d0:	10800317 	ldw	r2,12(r2)
 80128d4:	10000826 	beq	r2,zero,80128f8 <open+0x104>
 80128d8:	e0bff817 	ldw	r2,-32(fp)
 80128dc:	10800317 	ldw	r2,12(r2)
 80128e0:	e1ffff17 	ldw	r7,-4(fp)
 80128e4:	e1bffe17 	ldw	r6,-8(fp)
 80128e8:	e17ffd17 	ldw	r5,-12(fp)
 80128ec:	e13ffc17 	ldw	r4,-16(fp)
 80128f0:	103ee83a 	callr	r2
 80128f4:	00000106 	br	80128fc <open+0x108>
 80128f8:	0005883a 	mov	r2,zero
 80128fc:	e0bffa15 	stw	r2,-24(fp)
 8012900:	00000206 	br	801290c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8012904:	00bffb44 	movi	r2,-19
 8012908:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 801290c:	e0bffa17 	ldw	r2,-24(fp)
 8012910:	1000090e 	bge	r2,zero,8012938 <open+0x144>
  {
    alt_release_fd (index);  
 8012914:	e13ff917 	ldw	r4,-28(fp)
 8012918:	8010bfc0 	call	8010bfc <alt_release_fd>
    ALT_ERRNO = -status;
 801291c:	80126cc0 	call	80126cc <alt_get_errno>
 8012920:	1007883a 	mov	r3,r2
 8012924:	e0bffa17 	ldw	r2,-24(fp)
 8012928:	0085c83a 	sub	r2,zero,r2
 801292c:	18800015 	stw	r2,0(r3)
    return -1;
 8012930:	00bfffc4 	movi	r2,-1
 8012934:	00000106 	br	801293c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8012938:	e0bff917 	ldw	r2,-28(fp)
}
 801293c:	e037883a 	mov	sp,fp
 8012940:	dfc00117 	ldw	ra,4(sp)
 8012944:	df000017 	ldw	fp,0(sp)
 8012948:	dec00204 	addi	sp,sp,8
 801294c:	f800283a 	ret

08012950 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8012950:	deffff04 	addi	sp,sp,-4
 8012954:	df000015 	stw	fp,0(sp)
 8012958:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 801295c:	000170fa 	wrctl	ienable,zero
}
 8012960:	0001883a 	nop
 8012964:	e037883a 	mov	sp,fp
 8012968:	df000017 	ldw	fp,0(sp)
 801296c:	dec00104 	addi	sp,sp,4
 8012970:	f800283a 	ret

08012974 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8012974:	defffa04 	addi	sp,sp,-24
 8012978:	dfc00515 	stw	ra,20(sp)
 801297c:	df000415 	stw	fp,16(sp)
 8012980:	df000404 	addi	fp,sp,16
 8012984:	e13ffe15 	stw	r4,-8(fp)
 8012988:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 801298c:	e0bfff17 	ldw	r2,-4(fp)
 8012990:	10800017 	ldw	r2,0(r2)
 8012994:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8012998:	e13ffe17 	ldw	r4,-8(fp)
 801299c:	80038b40 	call	80038b4 <strlen>
 80129a0:	10800044 	addi	r2,r2,1
 80129a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80129a8:	00000d06 	br	80129e0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 80129ac:	e0bffc17 	ldw	r2,-16(fp)
 80129b0:	10800217 	ldw	r2,8(r2)
 80129b4:	e0fffd17 	ldw	r3,-12(fp)
 80129b8:	180d883a 	mov	r6,r3
 80129bc:	e17ffe17 	ldw	r5,-8(fp)
 80129c0:	1009883a 	mov	r4,r2
 80129c4:	8012cb80 	call	8012cb8 <memcmp>
 80129c8:	1000021e 	bne	r2,zero,80129d4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80129cc:	e0bffc17 	ldw	r2,-16(fp)
 80129d0:	00000706 	br	80129f0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80129d4:	e0bffc17 	ldw	r2,-16(fp)
 80129d8:	10800017 	ldw	r2,0(r2)
 80129dc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80129e0:	e0fffc17 	ldw	r3,-16(fp)
 80129e4:	e0bfff17 	ldw	r2,-4(fp)
 80129e8:	18bff01e 	bne	r3,r2,80129ac <__alt_data_end+0xfc0129ac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80129ec:	0005883a 	mov	r2,zero
}
 80129f0:	e037883a 	mov	sp,fp
 80129f4:	dfc00117 	ldw	ra,4(sp)
 80129f8:	df000017 	ldw	fp,0(sp)
 80129fc:	dec00204 	addi	sp,sp,8
 8012a00:	f800283a 	ret

08012a04 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8012a04:	defffb04 	addi	sp,sp,-20
 8012a08:	dfc00415 	stw	ra,16(sp)
 8012a0c:	df000315 	stw	fp,12(sp)
 8012a10:	df000304 	addi	fp,sp,12
 8012a14:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8012a18:	d0a00b17 	ldw	r2,-32724(gp)
 8012a1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8012a20:	00003106 	br	8012ae8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8012a24:	e0bffd17 	ldw	r2,-12(fp)
 8012a28:	10800217 	ldw	r2,8(r2)
 8012a2c:	1009883a 	mov	r4,r2
 8012a30:	80038b40 	call	80038b4 <strlen>
 8012a34:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8012a38:	e0bffd17 	ldw	r2,-12(fp)
 8012a3c:	10c00217 	ldw	r3,8(r2)
 8012a40:	e0bffe17 	ldw	r2,-8(fp)
 8012a44:	10bfffc4 	addi	r2,r2,-1
 8012a48:	1885883a 	add	r2,r3,r2
 8012a4c:	10800003 	ldbu	r2,0(r2)
 8012a50:	10803fcc 	andi	r2,r2,255
 8012a54:	1080201c 	xori	r2,r2,128
 8012a58:	10bfe004 	addi	r2,r2,-128
 8012a5c:	10800bd8 	cmpnei	r2,r2,47
 8012a60:	1000031e 	bne	r2,zero,8012a70 <alt_find_file+0x6c>
    {
      len -= 1;
 8012a64:	e0bffe17 	ldw	r2,-8(fp)
 8012a68:	10bfffc4 	addi	r2,r2,-1
 8012a6c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8012a70:	e0bffe17 	ldw	r2,-8(fp)
 8012a74:	e0ffff17 	ldw	r3,-4(fp)
 8012a78:	1885883a 	add	r2,r3,r2
 8012a7c:	10800003 	ldbu	r2,0(r2)
 8012a80:	10803fcc 	andi	r2,r2,255
 8012a84:	1080201c 	xori	r2,r2,128
 8012a88:	10bfe004 	addi	r2,r2,-128
 8012a8c:	10800be0 	cmpeqi	r2,r2,47
 8012a90:	1000081e 	bne	r2,zero,8012ab4 <alt_find_file+0xb0>
 8012a94:	e0bffe17 	ldw	r2,-8(fp)
 8012a98:	e0ffff17 	ldw	r3,-4(fp)
 8012a9c:	1885883a 	add	r2,r3,r2
 8012aa0:	10800003 	ldbu	r2,0(r2)
 8012aa4:	10803fcc 	andi	r2,r2,255
 8012aa8:	1080201c 	xori	r2,r2,128
 8012aac:	10bfe004 	addi	r2,r2,-128
 8012ab0:	10000a1e 	bne	r2,zero,8012adc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8012ab4:	e0bffd17 	ldw	r2,-12(fp)
 8012ab8:	10800217 	ldw	r2,8(r2)
 8012abc:	e0fffe17 	ldw	r3,-8(fp)
 8012ac0:	180d883a 	mov	r6,r3
 8012ac4:	e17fff17 	ldw	r5,-4(fp)
 8012ac8:	1009883a 	mov	r4,r2
 8012acc:	8012cb80 	call	8012cb8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8012ad0:	1000021e 	bne	r2,zero,8012adc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8012ad4:	e0bffd17 	ldw	r2,-12(fp)
 8012ad8:	00000706 	br	8012af8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8012adc:	e0bffd17 	ldw	r2,-12(fp)
 8012ae0:	10800017 	ldw	r2,0(r2)
 8012ae4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8012ae8:	e0fffd17 	ldw	r3,-12(fp)
 8012aec:	d0a00b04 	addi	r2,gp,-32724
 8012af0:	18bfcc1e 	bne	r3,r2,8012a24 <__alt_data_end+0xfc012a24>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8012af4:	0005883a 	mov	r2,zero
}
 8012af8:	e037883a 	mov	sp,fp
 8012afc:	dfc00117 	ldw	ra,4(sp)
 8012b00:	df000017 	ldw	fp,0(sp)
 8012b04:	dec00204 	addi	sp,sp,8
 8012b08:	f800283a 	ret

08012b0c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8012b0c:	defffa04 	addi	sp,sp,-24
 8012b10:	dfc00515 	stw	ra,20(sp)
 8012b14:	df000415 	stw	fp,16(sp)
 8012b18:	dc000315 	stw	r16,12(sp)
 8012b1c:	df000404 	addi	fp,sp,16
 8012b20:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8012b24:	00bffa04 	movi	r2,-24
 8012b28:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8012b2c:	e03ffc15 	stw	zero,-16(fp)
 8012b30:	00001d06 	br	8012ba8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 8012b34:	040200f4 	movhi	r16,2051
 8012b38:	84089104 	addi	r16,r16,8772
 8012b3c:	e0bffc17 	ldw	r2,-16(fp)
 8012b40:	01400304 	movi	r5,12
 8012b44:	1009883a 	mov	r4,r2
 8012b48:	800374c0 	call	800374c <__mulsi3>
 8012b4c:	8085883a 	add	r2,r16,r2
 8012b50:	10800017 	ldw	r2,0(r2)
 8012b54:	1000111e 	bne	r2,zero,8012b9c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 8012b58:	040200f4 	movhi	r16,2051
 8012b5c:	84089104 	addi	r16,r16,8772
 8012b60:	e0bffc17 	ldw	r2,-16(fp)
 8012b64:	01400304 	movi	r5,12
 8012b68:	1009883a 	mov	r4,r2
 8012b6c:	800374c0 	call	800374c <__mulsi3>
 8012b70:	8085883a 	add	r2,r16,r2
 8012b74:	e0fffe17 	ldw	r3,-8(fp)
 8012b78:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8012b7c:	d0e00f17 	ldw	r3,-32708(gp)
 8012b80:	e0bffc17 	ldw	r2,-16(fp)
 8012b84:	1880020e 	bge	r3,r2,8012b90 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 8012b88:	e0bffc17 	ldw	r2,-16(fp)
 8012b8c:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
 8012b90:	e0bffc17 	ldw	r2,-16(fp)
 8012b94:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8012b98:	00000606 	br	8012bb4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8012b9c:	e0bffc17 	ldw	r2,-16(fp)
 8012ba0:	10800044 	addi	r2,r2,1
 8012ba4:	e0bffc15 	stw	r2,-16(fp)
 8012ba8:	e0bffc17 	ldw	r2,-16(fp)
 8012bac:	10800810 	cmplti	r2,r2,32
 8012bb0:	103fe01e 	bne	r2,zero,8012b34 <__alt_data_end+0xfc012b34>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8012bb4:	e0bffd17 	ldw	r2,-12(fp)
}
 8012bb8:	e6ffff04 	addi	sp,fp,-4
 8012bbc:	dfc00217 	ldw	ra,8(sp)
 8012bc0:	df000117 	ldw	fp,4(sp)
 8012bc4:	dc000017 	ldw	r16,0(sp)
 8012bc8:	dec00304 	addi	sp,sp,12
 8012bcc:	f800283a 	ret

08012bd0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8012bd0:	defffe04 	addi	sp,sp,-8
 8012bd4:	df000115 	stw	fp,4(sp)
 8012bd8:	df000104 	addi	fp,sp,4
 8012bdc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8012be0:	e0bfff17 	ldw	r2,-4(fp)
 8012be4:	10bffe84 	addi	r2,r2,-6
 8012be8:	10c00428 	cmpgeui	r3,r2,16
 8012bec:	18001a1e 	bne	r3,zero,8012c58 <alt_exception_cause_generated_bad_addr+0x88>
 8012bf0:	100690ba 	slli	r3,r2,2
 8012bf4:	00820074 	movhi	r2,2049
 8012bf8:	108b0204 	addi	r2,r2,11272
 8012bfc:	1885883a 	add	r2,r3,r2
 8012c00:	10800017 	ldw	r2,0(r2)
 8012c04:	1000683a 	jmp	r2
 8012c08:	08012c48 	cmpgei	zero,at,1201
 8012c0c:	08012c48 	cmpgei	zero,at,1201
 8012c10:	08012c58 	cmpnei	zero,at,1201
 8012c14:	08012c58 	cmpnei	zero,at,1201
 8012c18:	08012c58 	cmpnei	zero,at,1201
 8012c1c:	08012c48 	cmpgei	zero,at,1201
 8012c20:	08012c50 	cmplti	zero,at,1201
 8012c24:	08012c58 	cmpnei	zero,at,1201
 8012c28:	08012c48 	cmpgei	zero,at,1201
 8012c2c:	08012c48 	cmpgei	zero,at,1201
 8012c30:	08012c58 	cmpnei	zero,at,1201
 8012c34:	08012c48 	cmpgei	zero,at,1201
 8012c38:	08012c50 	cmplti	zero,at,1201
 8012c3c:	08012c58 	cmpnei	zero,at,1201
 8012c40:	08012c58 	cmpnei	zero,at,1201
 8012c44:	08012c48 	cmpgei	zero,at,1201
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8012c48:	00800044 	movi	r2,1
 8012c4c:	00000306 	br	8012c5c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8012c50:	0005883a 	mov	r2,zero
 8012c54:	00000106 	br	8012c5c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8012c58:	0005883a 	mov	r2,zero
  }
}
 8012c5c:	e037883a 	mov	sp,fp
 8012c60:	df000017 	ldw	fp,0(sp)
 8012c64:	dec00104 	addi	sp,sp,4
 8012c68:	f800283a 	ret

08012c6c <atexit>:
 8012c6c:	200b883a 	mov	r5,r4
 8012c70:	000f883a 	mov	r7,zero
 8012c74:	000d883a 	mov	r6,zero
 8012c78:	0009883a 	mov	r4,zero
 8012c7c:	8012d341 	jmpi	8012d34 <__register_exitproc>

08012c80 <exit>:
 8012c80:	defffe04 	addi	sp,sp,-8
 8012c84:	000b883a 	mov	r5,zero
 8012c88:	dc000015 	stw	r16,0(sp)
 8012c8c:	dfc00115 	stw	ra,4(sp)
 8012c90:	2021883a 	mov	r16,r4
 8012c94:	8012e4c0 	call	8012e4c <__call_exitprocs>
 8012c98:	008200f4 	movhi	r2,2051
 8012c9c:	108d0e04 	addi	r2,r2,13368
 8012ca0:	11000017 	ldw	r4,0(r2)
 8012ca4:	20800f17 	ldw	r2,60(r4)
 8012ca8:	10000126 	beq	r2,zero,8012cb0 <exit+0x30>
 8012cac:	103ee83a 	callr	r2
 8012cb0:	8009883a 	mov	r4,r16
 8012cb4:	8012fcc0 	call	8012fcc <_exit>

08012cb8 <memcmp>:
 8012cb8:	01c000c4 	movi	r7,3
 8012cbc:	3980192e 	bgeu	r7,r6,8012d24 <memcmp+0x6c>
 8012cc0:	2144b03a 	or	r2,r4,r5
 8012cc4:	11c4703a 	and	r2,r2,r7
 8012cc8:	10000f26 	beq	r2,zero,8012d08 <memcmp+0x50>
 8012ccc:	20800003 	ldbu	r2,0(r4)
 8012cd0:	28c00003 	ldbu	r3,0(r5)
 8012cd4:	10c0151e 	bne	r2,r3,8012d2c <memcmp+0x74>
 8012cd8:	31bfff84 	addi	r6,r6,-2
 8012cdc:	01ffffc4 	movi	r7,-1
 8012ce0:	00000406 	br	8012cf4 <memcmp+0x3c>
 8012ce4:	20800003 	ldbu	r2,0(r4)
 8012ce8:	28c00003 	ldbu	r3,0(r5)
 8012cec:	31bfffc4 	addi	r6,r6,-1
 8012cf0:	10c00e1e 	bne	r2,r3,8012d2c <memcmp+0x74>
 8012cf4:	21000044 	addi	r4,r4,1
 8012cf8:	29400044 	addi	r5,r5,1
 8012cfc:	31fff91e 	bne	r6,r7,8012ce4 <__alt_data_end+0xfc012ce4>
 8012d00:	0005883a 	mov	r2,zero
 8012d04:	f800283a 	ret
 8012d08:	20c00017 	ldw	r3,0(r4)
 8012d0c:	28800017 	ldw	r2,0(r5)
 8012d10:	18bfee1e 	bne	r3,r2,8012ccc <__alt_data_end+0xfc012ccc>
 8012d14:	31bfff04 	addi	r6,r6,-4
 8012d18:	21000104 	addi	r4,r4,4
 8012d1c:	29400104 	addi	r5,r5,4
 8012d20:	39bff936 	bltu	r7,r6,8012d08 <__alt_data_end+0xfc012d08>
 8012d24:	303fe91e 	bne	r6,zero,8012ccc <__alt_data_end+0xfc012ccc>
 8012d28:	003ff506 	br	8012d00 <__alt_data_end+0xfc012d00>
 8012d2c:	10c5c83a 	sub	r2,r2,r3
 8012d30:	f800283a 	ret

08012d34 <__register_exitproc>:
 8012d34:	defffa04 	addi	sp,sp,-24
 8012d38:	dc000315 	stw	r16,12(sp)
 8012d3c:	040200f4 	movhi	r16,2051
 8012d40:	840d0e04 	addi	r16,r16,13368
 8012d44:	80c00017 	ldw	r3,0(r16)
 8012d48:	dc400415 	stw	r17,16(sp)
 8012d4c:	dfc00515 	stw	ra,20(sp)
 8012d50:	18805217 	ldw	r2,328(r3)
 8012d54:	2023883a 	mov	r17,r4
 8012d58:	10003726 	beq	r2,zero,8012e38 <__register_exitproc+0x104>
 8012d5c:	10c00117 	ldw	r3,4(r2)
 8012d60:	010007c4 	movi	r4,31
 8012d64:	20c00e16 	blt	r4,r3,8012da0 <__register_exitproc+0x6c>
 8012d68:	1a000044 	addi	r8,r3,1
 8012d6c:	8800221e 	bne	r17,zero,8012df8 <__register_exitproc+0xc4>
 8012d70:	18c00084 	addi	r3,r3,2
 8012d74:	18c7883a 	add	r3,r3,r3
 8012d78:	18c7883a 	add	r3,r3,r3
 8012d7c:	12000115 	stw	r8,4(r2)
 8012d80:	10c7883a 	add	r3,r2,r3
 8012d84:	19400015 	stw	r5,0(r3)
 8012d88:	0005883a 	mov	r2,zero
 8012d8c:	dfc00517 	ldw	ra,20(sp)
 8012d90:	dc400417 	ldw	r17,16(sp)
 8012d94:	dc000317 	ldw	r16,12(sp)
 8012d98:	dec00604 	addi	sp,sp,24
 8012d9c:	f800283a 	ret
 8012da0:	00800034 	movhi	r2,0
 8012da4:	10800004 	addi	r2,r2,0
 8012da8:	10002626 	beq	r2,zero,8012e44 <__register_exitproc+0x110>
 8012dac:	01006404 	movi	r4,400
 8012db0:	d9400015 	stw	r5,0(sp)
 8012db4:	d9800115 	stw	r6,4(sp)
 8012db8:	d9c00215 	stw	r7,8(sp)
 8012dbc:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8012dc0:	d9400017 	ldw	r5,0(sp)
 8012dc4:	d9800117 	ldw	r6,4(sp)
 8012dc8:	d9c00217 	ldw	r7,8(sp)
 8012dcc:	10001d26 	beq	r2,zero,8012e44 <__register_exitproc+0x110>
 8012dd0:	81000017 	ldw	r4,0(r16)
 8012dd4:	10000115 	stw	zero,4(r2)
 8012dd8:	02000044 	movi	r8,1
 8012ddc:	22405217 	ldw	r9,328(r4)
 8012de0:	0007883a 	mov	r3,zero
 8012de4:	12400015 	stw	r9,0(r2)
 8012de8:	20805215 	stw	r2,328(r4)
 8012dec:	10006215 	stw	zero,392(r2)
 8012df0:	10006315 	stw	zero,396(r2)
 8012df4:	883fde26 	beq	r17,zero,8012d70 <__alt_data_end+0xfc012d70>
 8012df8:	18c9883a 	add	r4,r3,r3
 8012dfc:	2109883a 	add	r4,r4,r4
 8012e00:	1109883a 	add	r4,r2,r4
 8012e04:	21802215 	stw	r6,136(r4)
 8012e08:	01800044 	movi	r6,1
 8012e0c:	12406217 	ldw	r9,392(r2)
 8012e10:	30cc983a 	sll	r6,r6,r3
 8012e14:	4992b03a 	or	r9,r9,r6
 8012e18:	12406215 	stw	r9,392(r2)
 8012e1c:	21c04215 	stw	r7,264(r4)
 8012e20:	01000084 	movi	r4,2
 8012e24:	893fd21e 	bne	r17,r4,8012d70 <__alt_data_end+0xfc012d70>
 8012e28:	11006317 	ldw	r4,396(r2)
 8012e2c:	218cb03a 	or	r6,r4,r6
 8012e30:	11806315 	stw	r6,396(r2)
 8012e34:	003fce06 	br	8012d70 <__alt_data_end+0xfc012d70>
 8012e38:	18805304 	addi	r2,r3,332
 8012e3c:	18805215 	stw	r2,328(r3)
 8012e40:	003fc606 	br	8012d5c <__alt_data_end+0xfc012d5c>
 8012e44:	00bfffc4 	movi	r2,-1
 8012e48:	003fd006 	br	8012d8c <__alt_data_end+0xfc012d8c>

08012e4c <__call_exitprocs>:
 8012e4c:	defff504 	addi	sp,sp,-44
 8012e50:	df000915 	stw	fp,36(sp)
 8012e54:	dd400615 	stw	r21,24(sp)
 8012e58:	dc800315 	stw	r18,12(sp)
 8012e5c:	dfc00a15 	stw	ra,40(sp)
 8012e60:	ddc00815 	stw	r23,32(sp)
 8012e64:	dd800715 	stw	r22,28(sp)
 8012e68:	dd000515 	stw	r20,20(sp)
 8012e6c:	dcc00415 	stw	r19,16(sp)
 8012e70:	dc400215 	stw	r17,8(sp)
 8012e74:	dc000115 	stw	r16,4(sp)
 8012e78:	d9000015 	stw	r4,0(sp)
 8012e7c:	2839883a 	mov	fp,r5
 8012e80:	04800044 	movi	r18,1
 8012e84:	057fffc4 	movi	r21,-1
 8012e88:	008200f4 	movhi	r2,2051
 8012e8c:	108d0e04 	addi	r2,r2,13368
 8012e90:	12000017 	ldw	r8,0(r2)
 8012e94:	45005217 	ldw	r20,328(r8)
 8012e98:	44c05204 	addi	r19,r8,328
 8012e9c:	a0001c26 	beq	r20,zero,8012f10 <__call_exitprocs+0xc4>
 8012ea0:	a0800117 	ldw	r2,4(r20)
 8012ea4:	15ffffc4 	addi	r23,r2,-1
 8012ea8:	b8000d16 	blt	r23,zero,8012ee0 <__call_exitprocs+0x94>
 8012eac:	14000044 	addi	r16,r2,1
 8012eb0:	8421883a 	add	r16,r16,r16
 8012eb4:	8421883a 	add	r16,r16,r16
 8012eb8:	84402004 	addi	r17,r16,128
 8012ebc:	a463883a 	add	r17,r20,r17
 8012ec0:	a421883a 	add	r16,r20,r16
 8012ec4:	e0001e26 	beq	fp,zero,8012f40 <__call_exitprocs+0xf4>
 8012ec8:	80804017 	ldw	r2,256(r16)
 8012ecc:	e0801c26 	beq	fp,r2,8012f40 <__call_exitprocs+0xf4>
 8012ed0:	bdffffc4 	addi	r23,r23,-1
 8012ed4:	843fff04 	addi	r16,r16,-4
 8012ed8:	8c7fff04 	addi	r17,r17,-4
 8012edc:	bd7ff91e 	bne	r23,r21,8012ec4 <__alt_data_end+0xfc012ec4>
 8012ee0:	00800034 	movhi	r2,0
 8012ee4:	10800004 	addi	r2,r2,0
 8012ee8:	10000926 	beq	r2,zero,8012f10 <__call_exitprocs+0xc4>
 8012eec:	a0800117 	ldw	r2,4(r20)
 8012ef0:	1000301e 	bne	r2,zero,8012fb4 <__call_exitprocs+0x168>
 8012ef4:	a0800017 	ldw	r2,0(r20)
 8012ef8:	10003226 	beq	r2,zero,8012fc4 <__call_exitprocs+0x178>
 8012efc:	a009883a 	mov	r4,r20
 8012f00:	98800015 	stw	r2,0(r19)
 8012f04:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8012f08:	9d000017 	ldw	r20,0(r19)
 8012f0c:	a03fe41e 	bne	r20,zero,8012ea0 <__alt_data_end+0xfc012ea0>
 8012f10:	dfc00a17 	ldw	ra,40(sp)
 8012f14:	df000917 	ldw	fp,36(sp)
 8012f18:	ddc00817 	ldw	r23,32(sp)
 8012f1c:	dd800717 	ldw	r22,28(sp)
 8012f20:	dd400617 	ldw	r21,24(sp)
 8012f24:	dd000517 	ldw	r20,20(sp)
 8012f28:	dcc00417 	ldw	r19,16(sp)
 8012f2c:	dc800317 	ldw	r18,12(sp)
 8012f30:	dc400217 	ldw	r17,8(sp)
 8012f34:	dc000117 	ldw	r16,4(sp)
 8012f38:	dec00b04 	addi	sp,sp,44
 8012f3c:	f800283a 	ret
 8012f40:	a0800117 	ldw	r2,4(r20)
 8012f44:	80c00017 	ldw	r3,0(r16)
 8012f48:	10bfffc4 	addi	r2,r2,-1
 8012f4c:	15c01426 	beq	r2,r23,8012fa0 <__call_exitprocs+0x154>
 8012f50:	80000015 	stw	zero,0(r16)
 8012f54:	183fde26 	beq	r3,zero,8012ed0 <__alt_data_end+0xfc012ed0>
 8012f58:	95c8983a 	sll	r4,r18,r23
 8012f5c:	a0806217 	ldw	r2,392(r20)
 8012f60:	a5800117 	ldw	r22,4(r20)
 8012f64:	2084703a 	and	r2,r4,r2
 8012f68:	10000b26 	beq	r2,zero,8012f98 <__call_exitprocs+0x14c>
 8012f6c:	a0806317 	ldw	r2,396(r20)
 8012f70:	2088703a 	and	r4,r4,r2
 8012f74:	20000c1e 	bne	r4,zero,8012fa8 <__call_exitprocs+0x15c>
 8012f78:	89400017 	ldw	r5,0(r17)
 8012f7c:	d9000017 	ldw	r4,0(sp)
 8012f80:	183ee83a 	callr	r3
 8012f84:	a0800117 	ldw	r2,4(r20)
 8012f88:	15bfbf1e 	bne	r2,r22,8012e88 <__alt_data_end+0xfc012e88>
 8012f8c:	98800017 	ldw	r2,0(r19)
 8012f90:	153fcf26 	beq	r2,r20,8012ed0 <__alt_data_end+0xfc012ed0>
 8012f94:	003fbc06 	br	8012e88 <__alt_data_end+0xfc012e88>
 8012f98:	183ee83a 	callr	r3
 8012f9c:	003ff906 	br	8012f84 <__alt_data_end+0xfc012f84>
 8012fa0:	a5c00115 	stw	r23,4(r20)
 8012fa4:	003feb06 	br	8012f54 <__alt_data_end+0xfc012f54>
 8012fa8:	89000017 	ldw	r4,0(r17)
 8012fac:	183ee83a 	callr	r3
 8012fb0:	003ff406 	br	8012f84 <__alt_data_end+0xfc012f84>
 8012fb4:	a0800017 	ldw	r2,0(r20)
 8012fb8:	a027883a 	mov	r19,r20
 8012fbc:	1029883a 	mov	r20,r2
 8012fc0:	003fb606 	br	8012e9c <__alt_data_end+0xfc012e9c>
 8012fc4:	0005883a 	mov	r2,zero
 8012fc8:	003ffb06 	br	8012fb8 <__alt_data_end+0xfc012fb8>

08012fcc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8012fcc:	defffd04 	addi	sp,sp,-12
 8012fd0:	df000215 	stw	fp,8(sp)
 8012fd4:	df000204 	addi	fp,sp,8
 8012fd8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8012fdc:	0001883a 	nop
 8012fe0:	e0bfff17 	ldw	r2,-4(fp)
 8012fe4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8012fe8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8012fec:	10000226 	beq	r2,zero,8012ff8 <_exit+0x2c>
    ALT_SIM_FAIL();
 8012ff0:	002af070 	cmpltui	zero,zero,43969
 8012ff4:	00000106 	br	8012ffc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8012ff8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8012ffc:	003fff06 	br	8012ffc <__alt_data_end+0xfc012ffc>
